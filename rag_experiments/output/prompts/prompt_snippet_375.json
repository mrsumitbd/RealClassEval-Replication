[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass TestBasicsInstModule(TestBasics):\n    '''Basic tests for instrument instantiated via inst_module.'''\n\n    def setup_method(self):\n        '''Set up the unit test environment for each method.'''\n        pass\n\n    def teardown_method(self):\n        '''Clean up the unit test environment after each method.'''\n        pass\nCorresponding class implementation:\n\nimport pysat\nimport pysat.instruments.pysat_ndtesting\nfrom importlib import reload\nimport pysat.instruments.pysat_testing\n\nclass TestBasicsInstModule(TestBasics):\n    \"\"\"Basic tests for instrument instantiated via inst_module.\"\"\"\n\n    def setup_method(self):\n        \"\"\"Set up the unit test environment for each method.\"\"\"\n        reload(pysat.instruments.pysat_testing)\n        imod = pysat.instruments.pysat_testing\n        self.testInst = pysat.Instrument(inst_module=imod, num_samples=10, clean_level='clean', update_files=True, **self.testing_kwargs)\n        self.ref_time = imod._test_dates['']['']\n        self.ref_doy = int(self.ref_time.strftime('%j'))\n        self.out = None\n        return\n\n    def teardown_method(self):\n        \"\"\"Clean up the unit test environment after each method.\"\"\"\n        del self.testInst, self.out, self.ref_time, self.ref_doy\n        return\n\nExample skeleton:\n\n\nclass JobInvocationTestCase(TestCase):\n    '''Tests for :class:`nailgun.entities.JobInvocation`.'''\n    @classmethod\n    def setUpClass(cls):\n        '''Set a common ServerConfig.'''\n        pass\n\n    def test_required_param(self):\n        '''Check required parameters.'''\n        pass\n\n    def test_non_sync_run(self):\n        '''Run job asynchronously with valid parameters and check that correct request is sent.'''\n        pass\n\n    def test_sync_run(self):\n        '''Check that sync run will result in ForemanTask poll.'''\n        pass\nCorresponding class implementation:\n\nfrom unittest import TestCase, mock\nfrom nailgun import client, config, entities\n\nclass JobInvocationTestCase(TestCase):\n    \"\"\"Tests for :class:`nailgun.entities.JobInvocation`.\"\"\"\n\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set a common ServerConfig.\"\"\"\n        cls.cfg = config.ServerConfig('http://example.com')\n\n    def test_required_param(self):\n        \"\"\"Check required parameters.\"\"\"\n        data_list = [{'inputs': 'ls', 'search_query': 'foo'}, {'feature': 'foo', 'inputs': 'ls'}, {'job_template_id': 1, 'search_query': 'foo'}, {'feature': 'foo', 'bookmark_id': 1, 'inputs': 'ls'}, {'feature': 'foo', 'job_template_id': 1, 'targeting_type': 'foo'}]\n        for data in data_list:\n            with self.assertRaises(KeyError):\n                entities.JobInvocation(self.cfg).run(data=data)\n\n    def test_non_sync_run(self):\n        \"\"\"Run job asynchronously with valid parameters and check that correct request is sent.\"\"\"\n        with mock.patch.object(client, 'post') as post:\n            entities.JobInvocation(self.cfg).run(synchronous=False, data={'job_template_id': 1, 'search_query': 'foo', 'inputs': 'ls', 'targeting_type': 'foo'})\n        self.assertEqual(post.call_count, 1)\n        self.assertEqual(len(post.call_args[0]), 1)\n\n    def test_sync_run(self):\n        \"\"\"Check that sync run will result in ForemanTask poll.\"\"\"\n        with mock.patch.object(entities, '_poll_task') as poll_task:\n            with mock.patch.object(client, 'post'):\n                entities.JobInvocation(self.cfg).run(synchronous=True, data={'job_template_id': 1, 'search_query': 'foo', 'inputs': 'ls', 'targeting_type': 'foo'})\n        self.assertEqual(poll_task.call_count, 1)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass DielectricPlanarBenchmark:\n    '''Benchmark the DielectricPlanar class.'''\n\n    def setup(self):\n        '''Setup the analysis objects.'''\n        pass\n\n    def time_single_dielectric_planar(self):\n        '''Benchmark of a complete run over a single frame.'''\n        pass"
  }
]