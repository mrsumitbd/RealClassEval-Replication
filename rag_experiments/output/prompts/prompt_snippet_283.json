[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass QuickReplyItem(BaseModel):\n    '''\n    QuickReplyItem\n    https://developers.line.biz/en/reference/messaging-api/#items-object\n    '''\n\n    class Config:\n        '''Pydantic configuration'''\n\n    def to_str(self) -> str:\n        '''Returns the string representation of the model using alias'''\n        pass\n\n    def to_json(self) -> str:\n        '''Returns the JSON representation of the model using alias'''\n        pass\n    @classmethod\n    def from_json(cls, json_str: str) -> QuickReplyItem:\n        '''Create an instance of QuickReplyItem from a JSON string'''\n        pass\n\n    def to_dict(self):\n        '''Returns the dictionary representation of the model using alias'''\n        pass\n    @classmethod\n    def from_dict(cls, obj: dict) -> QuickReplyItem:\n        '''Create an instance of QuickReplyItem from a dict'''\n        pass\nCorresponding class implementation:\n\nfrom pydantic.v1 import BaseModel, Field, StrictStr, constr\nimport pprint\nimport json\nfrom typing import Optional\nfrom linebot.v3.messaging.models.action import Action\n\nclass QuickReplyItem(BaseModel):\n    \"\"\"\n    QuickReplyItem\n    https://developers.line.biz/en/reference/messaging-api/#items-object\n    \"\"\"\n    image_url: Optional[constr(strict=True, max_length=2000)] = Field(None, alias='imageUrl', description='URL of the icon that is displayed at the beginning of the button')\n    action: Optional[Action] = None\n    type: Optional[StrictStr] = Field('action', description='`action`')\n    __properties = ['imageUrl', 'action', 'type']\n\n    class Config:\n        \"\"\"Pydantic configuration\"\"\"\n        allow_population_by_field_name = True\n        validate_assignment = True\n\n    def to_str(self) -> str:\n        \"\"\"Returns the string representation of the model using alias\"\"\"\n        return pprint.pformat(self.dict(by_alias=True))\n\n    def to_json(self) -> str:\n        \"\"\"Returns the JSON representation of the model using alias\"\"\"\n        return json.dumps(self.to_dict())\n\n    @classmethod\n    def from_json(cls, json_str: str) -> QuickReplyItem:\n        \"\"\"Create an instance of QuickReplyItem from a JSON string\"\"\"\n        return cls.from_dict(json.loads(json_str))\n\n    def to_dict(self):\n        \"\"\"Returns the dictionary representation of the model using alias\"\"\"\n        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)\n        if self.action:\n            _dict['action'] = self.action.to_dict()\n        return _dict\n\n    @classmethod\n    def from_dict(cls, obj: dict) -> QuickReplyItem:\n        \"\"\"Create an instance of QuickReplyItem from a dict\"\"\"\n        if obj is None:\n            return None\n        if not isinstance(obj, dict):\n            return QuickReplyItem.parse_obj(obj)\n        _obj = QuickReplyItem.parse_obj({'image_url': obj.get('imageUrl'), 'action': Action.from_dict(obj.get('action')) if obj.get('action') is not None else None, 'type': obj.get('type') if obj.get('type') is not None else 'action'})\n        return _obj\n\nExample skeleton:\n\n@dataclass\nclass SecurityDetails:\n    '''\n    Security details about a request.\n    '''\n\n    def to_json(self) -> T_JSON_DICT:\n        pass\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -> SecurityDetails:\n        pass\nCorresponding class implementation:\n\nimport streamlink.webbrowser.cdp.devtools.security as security\nfrom dataclasses import dataclass\nfrom streamlink.webbrowser.cdp.devtools.util import T_JSON_DICT, event_class\n\n@dataclass\nclass SecurityDetails:\n    \"\"\"\n    Security details about a request.\n    \"\"\"\n    protocol: str\n    key_exchange: str\n    cipher: str\n    certificate_id: security.CertificateId\n    subject_name: str\n    san_list: list[str]\n    issuer: str\n    valid_from: TimeSinceEpoch\n    valid_to: TimeSinceEpoch\n    signed_certificate_timestamp_list: list[SignedCertificateTimestamp]\n    certificate_transparency_compliance: CertificateTransparencyCompliance\n    encrypted_client_hello: bool\n    key_exchange_group: str | None = None\n    mac: str | None = None\n    server_signature_algorithm: int | None = None\n\n    def to_json(self) -> T_JSON_DICT:\n        json: T_JSON_DICT = {}\n        json['protocol'] = self.protocol\n        json['keyExchange'] = self.key_exchange\n        json['cipher'] = self.cipher\n        json['certificateId'] = self.certificate_id.to_json()\n        json['subjectName'] = self.subject_name\n        json['sanList'] = list(self.san_list)\n        json['issuer'] = self.issuer\n        json['validFrom'] = self.valid_from.to_json()\n        json['validTo'] = self.valid_to.to_json()\n        json['signedCertificateTimestampList'] = [i.to_json() for i in self.signed_certificate_timestamp_list]\n        json['certificateTransparencyCompliance'] = self.certificate_transparency_compliance.to_json()\n        json['encryptedClientHello'] = self.encrypted_client_hello\n        if self.key_exchange_group is not None:\n            json['keyExchangeGroup'] = self.key_exchange_group\n        if self.mac is not None:\n            json['mac'] = self.mac\n        if self.server_signature_algorithm is not None:\n            json['serverSignatureAlgorithm'] = self.server_signature_algorithm\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -> SecurityDetails:\n        return cls(protocol=str(json['protocol']), key_exchange=str(json['keyExchange']), cipher=str(json['cipher']), certificate_id=security.CertificateId.from_json(json['certificateId']), subject_name=str(json['subjectName']), san_list=[str(i) for i in json['sanList']], issuer=str(json['issuer']), valid_from=TimeSinceEpoch.from_json(json['validFrom']), valid_to=TimeSinceEpoch.from_json(json['validTo']), signed_certificate_timestamp_list=[SignedCertificateTimestamp.from_json(i) for i in json['signedCertificateTimestampList']], certificate_transparency_compliance=CertificateTransparencyCompliance.from_json(json['certificateTransparencyCompliance']), encrypted_client_hello=bool(json['encryptedClientHello']), key_exchange_group=str(json['keyExchangeGroup']) if 'keyExchangeGroup' in json else None, mac=str(json['mac']) if 'mac' in json else None, server_signature_algorithm=int(json['serverSignatureAlgorithm']) if 'serverSignatureAlgorithm' in json else None)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass CreateFeedModel:\n    '''Model for creating a feed.\n    Args:\n        display_name: Display name for the feed\n        details: Feed details as either a JSON string or dict.\n            If string, will be parsed as JSON.\n    '''\n\n    def __post_init__(self):\n        '''Convert string details to dict if needed'''\n        pass\n\n    def to_dict(self) -> Dict[str, Any]:\n        '''Convert to dictionary for JSON serialization.'''\n        pass"
  }
]