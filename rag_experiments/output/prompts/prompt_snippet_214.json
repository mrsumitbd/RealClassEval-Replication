[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass TrafficRule(ApiItem):\n    '''Represent a traffic rule configuration.'''\n    @property\n    def id(self) -> str:\n        '''ID of traffic rule.'''\n        pass\n    @property\n    def description(self) -> str:\n        '''Description given by user to traffic rule.'''\n        pass\n    @property\n    def enabled(self) -> bool:\n        '''Is traffic rule enabled.'''\n        pass\n    @property\n    def action(self) -> str:\n        '''What action is defined by this traffic rule.'''\n        pass\n    @property\n    def matching_target(self) -> str:\n        '''What target is matched by this traffic rule.'''\n        pass\n    @property\n    def target_devices(self) -> list[TargetDevice]:\n        '''What target devices are affected by this traffic rule.'''\n        pass\nCorresponding class implementation:\n\nfrom .api import ApiItem, ApiRequestV2\n\nclass TrafficRule(ApiItem):\n    \"\"\"Represent a traffic rule configuration.\"\"\"\n    raw: TypedTrafficRule\n\n    @property\n    def id(self) -> str:\n        \"\"\"ID of traffic rule.\"\"\"\n        return self.raw['_id']\n\n    @property\n    def description(self) -> str:\n        \"\"\"Description given by user to traffic rule.\"\"\"\n        return self.raw.get('description', '')\n\n    @property\n    def enabled(self) -> bool:\n        \"\"\"Is traffic rule enabled.\"\"\"\n        return self.raw['enabled']\n\n    @property\n    def action(self) -> str:\n        \"\"\"What action is defined by this traffic rule.\"\"\"\n        return self.raw['action']\n\n    @property\n    def matching_target(self) -> str:\n        \"\"\"What target is matched by this traffic rule.\"\"\"\n        return self.raw['matching_target']\n\n    @property\n    def target_devices(self) -> list[TargetDevice]:\n        \"\"\"What target devices are affected by this traffic rule.\"\"\"\n        return self.raw['target_devices']\n\nExample skeleton:\n\n\nclass OutputSTACMixin:\n    '''Adds STAC related features.'''\n    @property\n    def stac_path(self) -> MPath:\n        '''Return path to STAC JSON file.'''\n        pass\n    @property\n    def stac_item_id(self) -> str:\n        '''\n        Return STAC item ID according to configuration.\n        Defaults to path basename.\n        '''\n        pass\n    @property\n    def stac_item_metadata(self):\n        '''Custom STAC metadata.'''\n        pass\n    @property\n    def stac_asset_type(self):\n        '''Asset MIME type.'''\n        pass\nCorresponding class implementation:\n\nfrom mapchete.path import MPath\n\nclass OutputSTACMixin:\n    \"\"\"Adds STAC related features.\"\"\"\n    path: MPath\n    output_params: dict\n\n    @property\n    def stac_path(self) -> MPath:\n        \"\"\"Return path to STAC JSON file.\"\"\"\n        return self.path / f'{self.stac_item_id}.json'\n\n    @property\n    def stac_item_id(self) -> str:\n        \"\"\"\n        Return STAC item ID according to configuration.\n\n        Defaults to path basename.\n        \"\"\"\n        return self.output_params.get('stac', {}).get('id') or self.path.stem\n\n    @property\n    def stac_item_metadata(self):\n        \"\"\"Custom STAC metadata.\"\"\"\n        return self.output_params.get('stac', {})\n\n    @property\n    def stac_asset_type(self):\n        \"\"\"Asset MIME type.\"\"\"\n        raise ValueError('no MIME type set for this output')\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass DependencyInfo:\n    '''Information about project dependencies.'''\n    @property\n    def found(self) -> bool:\n        '''Whether a dependency file was found.'''\n        pass\n    @property\n    def is_pyproject(self) -> bool:\n        '''Whether this is a pyproject.toml file.'''\n        pass\n    @property\n    def is_requirements(self) -> bool:\n        '''Whether this is a requirements file.'''\n        pass\n    @property\n    def is_root_package(self) -> bool:\n        '''Whether this dependency points to the root package.'''\n        pass"
  }
]