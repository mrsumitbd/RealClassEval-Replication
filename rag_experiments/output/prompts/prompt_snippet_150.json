[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass OutputSTACMixin:\n    '''Adds STAC related features.'''\n    @property\n    def stac_path(self) -> MPath:\n        '''Return path to STAC JSON file.'''\n        pass\n    @property\n    def stac_item_id(self) -> str:\n        '''\n        Return STAC item ID according to configuration.\n        Defaults to path basename.\n        '''\n        pass\n    @property\n    def stac_item_metadata(self):\n        '''Custom STAC metadata.'''\n        pass\n    @property\n    def stac_asset_type(self):\n        '''Asset MIME type.'''\n        pass\nCorresponding class implementation:\n\nfrom mapchete.path import MPath\n\nclass OutputSTACMixin:\n    \"\"\"Adds STAC related features.\"\"\"\n    path: MPath\n    output_params: dict\n\n    @property\n    def stac_path(self) -> MPath:\n        \"\"\"Return path to STAC JSON file.\"\"\"\n        return self.path / f'{self.stac_item_id}.json'\n\n    @property\n    def stac_item_id(self) -> str:\n        \"\"\"\n        Return STAC item ID according to configuration.\n\n        Defaults to path basename.\n        \"\"\"\n        return self.output_params.get('stac', {}).get('id') or self.path.stem\n\n    @property\n    def stac_item_metadata(self):\n        \"\"\"Custom STAC metadata.\"\"\"\n        return self.output_params.get('stac', {})\n\n    @property\n    def stac_asset_type(self):\n        \"\"\"Asset MIME type.\"\"\"\n        raise ValueError('no MIME type set for this output')\n\nExample skeleton:\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    '''A pressure sensor type.'''\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        '''Build a pressure sensor class.'''\n        pass\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        '''Set the sensor data on the class and return the new data.'''\n        pass\nCorresponding class implementation:\n\nfrom typing import List, Union\nfrom opentrons_hardware.firmware_bindings.constants import NodeId, SensorId, SensorType\nfrom opentrons_hardware.firmware_bindings.messages.fields import SensorTypeField\nfrom opentrons_hardware.sensors.types import SensorDataType, EnvironmentSensorDataType\nfrom dataclasses import dataclass\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    \"\"\"A pressure sensor type.\"\"\"\n    data: SensorDataType\n\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        \"\"\"Build a pressure sensor class.\"\"\"\n        info = SensorInformation(SensorType.pressure, sensor_id, node_id)\n        sensor_data = SensorDataType.build(0, SensorTypeField(SensorType.pressure))\n        return cls(info, offset, 1, zero_threshold, stop_threshold, sensor_data)\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        \"\"\"Set the sensor data on the class and return the new data.\"\"\"\n        self.data = sensor_data[0]\n        return self.data\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass BudgetTracker:\n    '''\n    Tracks agent spending and budget decisions.\n    Provides comprehensive budget management including affordability checks,\n    spending tracking per agent card, and cost analysis over time.\n    '''\n\n    def can_afford(self, cost: Decimal) -> bool:\n        '''Check if the agent can afford a given cost.'''\n        pass\n\n    def spend(self, amount: Decimal, agent_card_name: str) -> None:\n        '''Record a spending transaction and update budget tracking.'''\n        pass"
  }
]