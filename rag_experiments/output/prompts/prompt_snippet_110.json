[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass ExasolHook(DbApiHook):\n    '''\n    Interact with Exasol.\n    You can specify the pyexasol ``compression``, ``encryption``, ``json_lib``\n    and ``client_name``  parameters in the extra field of your connection\n    as ``{\"compression\": True, \"json_lib\": \"rapidjson\", etc}``.\n    See `pyexasol reference\n    <https://github.com/badoo/pyexasol/blob/master/docs/REFERENCE.md#connect>`_\n    for more details.\n    '''\n\n    def __init__(self, *args, sqlalchemy_scheme: str | None=None, **kwargs) -> None:\n        pass\n\n    def get_conn(self) -> ExaConnection:\n        pass\n    @property\n    def sqlalchemy_scheme(self) -> str:\n        '''Sqlalchemy scheme either from constructor, connection extras or default.'''\n        pass\n    @property\n    def sqlalchemy_url(self) -> URL:\n        '''\n        Return a Sqlalchemy.engine.URL object from the connection.\n        :return: the extracted sqlalchemy.engine.URL object.\n        '''\n        pass\n\n    def get_uri(self) -> str:\n        '''\n        Extract the URI from the connection.\n        :return: the extracted uri.\n        '''\n        pass\n\n    def _get_pandas_df(self, sql, parameters: Iterable | Mapping[str, Any] | None=None, **kwargs) -> pd.DataFrame:\n        '''\n        Execute the SQL and return a Pandas dataframe.\n        :param sql: The sql statement to be executed (str) or a list of\n            sql statements to execute.\n        :param parameters: The parameters to render the SQL query with.\n        Other keyword arguments are all forwarded into\n        ``pyexasol.ExaConnection.export_to_pandas``.\n        '''\n        pass\n    @deprecated(reason='Replaced by function `get_df`.', category=AirflowProviderDeprecationWarning, action='ignore')\n    def get_pandas_df(self, sql, parameters: list | tuple | Mapping[str, Any] | None=None, **kwargs) -> pd.DataFrame:\n        '''\n        Execute the sql and returns a pandas dataframe.\n        :param sql: the sql statement to be executed (str) or a list of sql statements to execute\n        :param parameters: The parameters to render the SQL query with.\n        :param kwargs: (optional) passed into pandas.io.sql.read_sql method\n        '''\n        pass\n\n    def _get_polars_df(self, sql, parameters: list | tuple | Mapping[str, Any] | None=None, **kwargs):\n        pass\n\n    def get_records(self, sql: str | list[str], parameters: Iterable | Mapping[str, Any] | None=None) -> list[dict | tuple[Any, ...]]:\n        '''\n        Execute the SQL and return a set of records.\n        :param sql: the sql statement to be executed (str) or a list of\n            sql statements to execute\n        :param parameters: The parameters to render the SQL query with.\n        '''\n        pass\n\n    def get_first(self, sql: str | list[str], parameters: Iterable | Mapping[str, Any] | None=None) -> Any:\n        '''\n        Execute the SQL and return the first resulting row.\n        :param sql: the sql statement to be executed (str) or a list of\n            sql statements to execute\n        :param parameters: The parameters to render the SQL query with.\n        '''\n        pass\n\n    def export_to_file(self, filename: str, query_or_table: str, query_params: dict | None=None, export_params: dict | None=None) -> None:\n        '''\n        Export data to a file.\n        :param filename: Path to the file to which the data has to be exported\n        :param query_or_table: the sql statement to be executed or table name to export\n        :param query_params: Query parameters passed to underlying ``export_to_file``\n            method of :class:`~pyexasol.connection.ExaConnection`.\n        :param export_params: Extra parameters passed to underlying ``export_to_file``\n            method of :class:`~pyexasol.connection.ExaConnection`.\n        '''\n        pass\n    @staticmethod\n    def get_description(statement: ExaStatement) -> Sequence[Sequence]:\n        '''\n        Get description; copied implementation from DB2-API wrapper.\n        For more info, see\n        https://github.com/exasol/pyexasol/blob/master/docs/DBAPI_COMPAT.md#db-api-20-wrapper\n        :param statement: Exasol statement\n        :return: description sequence of t\n        '''\n        pass\n    @overload\n    def run(self, sql: str | Iterable[str], autocommit: bool=..., parameters: Iterable | Mapping[str, Any] | None=..., handler: None=..., split_statements: bool=..., return_last: bool=...) -> None:\n        pass\n    @overload\n    def run(self, sql: str | Iterable[str], autocommit: bool=..., parameters: Iterable | Mapping[str, Any] | None=..., handler: None=..., split_statements: bool=..., return_last: bool=...) -> None:\n        pass\n    def run(self, sql: str | Iterable[str], autocommit: bool=..., parameters: Iterable | Mapping[str, Any] | None=..., handler: None=..., split_statements: bool=..., return_last: bool=...) -> None:\n        '''\n        Run a command or a list of commands.\n        Pass a list of SQL statements to the SQL parameter to get them to\n        execute sequentially.\n        :param sql: the sql statement to be executed (str) or a list of\n            sql statements to execute\n        :param autocommit: What to set the connection's autocommit setting to\n            before executing the query.\n        :param parameters: The parameters to render the SQL query with.\n        :param handler: The result handler which is called with the result of each statement.\n        :param split_statements: Whether to split a single SQL string into statements and run separately\n        :param return_last: Whether to return result for only last statement or for all after split\n        :return: return only result of the LAST SQL expression if handler was provided.\n        '''\n        pass\n\n    def set_autocommit(self, conn, autocommit: bool) -> None:\n        '''\n        Set the autocommit flag on the connection.\n        :param conn: Connection to set autocommit setting to.\n        :param autocommit: The autocommit setting to set.\n        '''\n        pass\n\n    def get_autocommit(self, conn) -> bool:\n        '''\n        Get autocommit setting for the provided connection.\n        :param conn: Connection to get autocommit setting from.\n        :return: connection autocommit setting. True if ``autocommit`` is set\n            to True on the connection. False if it is either not set, set to\n            False, or the connection does not support auto-commit.\n        '''\n        pass\n    @staticmethod\n    def _serialize_cell(cell, conn=None) -> Any:\n        '''\n        Override to disable cell serialization.\n        Exasol will adapt all arguments to the ``execute()`` method internally,\n        hence we return cell without any conversion.\n        :param cell: The cell to insert into the table\n        :param conn: The database connection\n        :return: The cell\n        '''\n        pass\nCorresponding class implementation:\n\nimport pyexasol\nfrom collections.abc import Callable, Iterable, Mapping, Sequence\nfrom pyexasol import ExaConnection, ExaStatement\nfrom typing import TYPE_CHECKING, Any, TypeVar, overload\nfrom airflow.providers.common.sql.hooks.handlers import return_single_query_results\nfrom airflow.providers.common.sql.hooks.sql import DbApiHook\nfrom deprecated import deprecated\nfrom sqlalchemy.engine import URL\nfrom airflow.exceptions import AirflowProviderDeprecationWarning\nfrom contextlib import closing\n\nclass ExasolHook(DbApiHook):\n    \"\"\"\n    Interact with Exasol.\n\n    You can specify the pyexasol ``compression``, ``encryption``, ``json_lib``\n    and ``client_name``  parameters in the extra field of your connection\n    as ``{\"compression\": True, \"json_lib\": \"rapidjson\", etc}``.\n\n    See `pyexasol reference\n    <https://github.com/badoo/pyexasol/blob/master/docs/REFERENCE.md#connect>`_\n    for more details.\n    \"\"\"\n    conn_name_attr = 'exasol_conn_id'\n    default_conn_name = 'exasol_default'\n    conn_type = 'exasol'\n    hook_name = 'Exasol'\n    supports_autocommit = True\n    DEFAULT_SQLALCHEMY_SCHEME = 'exa+websocket'\n\n    def __init__(self, *args, sqlalchemy_scheme: str | None=None, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.schema = kwargs.pop('schema', None)\n        self._sqlalchemy_scheme = sqlalchemy_scheme\n\n    def get_conn(self) -> ExaConnection:\n        conn = self.get_connection(self.get_conn_id())\n        conn_args = {'dsn': f'{conn.host}:{conn.port}', 'user': conn.login, 'password': conn.password, 'schema': self.schema or conn.schema}\n        for arg_name, arg_val in conn.extra_dejson.items():\n            if arg_name in ['compression', 'encryption', 'json_lib', 'client_name']:\n                conn_args[arg_name] = arg_val\n        conn = pyexasol.connect(**conn_args)\n        return conn\n\n    @property\n    def sqlalchemy_scheme(self) -> str:\n        \"\"\"Sqlalchemy scheme either from constructor, connection extras or default.\"\"\"\n        extra_scheme = self.connection is not None and self.connection_extra_lower.get('sqlalchemy_scheme')\n        sqlalchemy_scheme = self._sqlalchemy_scheme or extra_scheme or self.DEFAULT_SQLALCHEMY_SCHEME\n        if sqlalchemy_scheme not in ['exa+websocket', 'exa+pyodbc', 'exa+turbodbc']:\n            raise ValueError(f\"sqlalchemy_scheme in connection extra should be one of 'exa+websocket', 'exa+pyodbc' or 'exa+turbodbc', but got '{sqlalchemy_scheme}'. See https://github.com/exasol/sqlalchemy-exasol?tab=readme-ov-file#using-sqlalchemy-with-exasol-db for more details.\")\n        return sqlalchemy_scheme\n\n    @property\n    def sqlalchemy_url(self) -> URL:\n        \"\"\"\n        Return a Sqlalchemy.engine.URL object from the connection.\n\n        :return: the extracted sqlalchemy.engine.URL object.\n        \"\"\"\n        connection = self.connection\n        query = connection.extra_dejson\n        query = {k: v for k, v in query.items() if k.lower() != 'sqlalchemy_scheme'}\n        return URL.create(drivername=self.sqlalchemy_scheme, username=connection.login, password=connection.password, host=connection.host, port=connection.port, database=self.schema or connection.schema, query=query)\n\n    def get_uri(self) -> str:\n        \"\"\"\n        Extract the URI from the connection.\n\n        :return: the extracted uri.\n        \"\"\"\n        return self.sqlalchemy_url.render_as_string(hide_password=False)\n\n    def _get_pandas_df(self, sql, parameters: Iterable | Mapping[str, Any] | None=None, **kwargs) -> pd.DataFrame:\n        \"\"\"\n        Execute the SQL and return a Pandas dataframe.\n\n        :param sql: The sql statement to be executed (str) or a list of\n            sql statements to execute.\n        :param parameters: The parameters to render the SQL query with.\n\n        Other keyword arguments are all forwarded into\n        ``pyexasol.ExaConnection.export_to_pandas``.\n        \"\"\"\n        with closing(self.get_conn()) as conn:\n            df = conn.export_to_pandas(sql, query_params=parameters, **kwargs)\n            return df\n\n    @deprecated(reason='Replaced by function `get_df`.', category=AirflowProviderDeprecationWarning, action='ignore')\n    def get_pandas_df(self, sql, parameters: list | tuple | Mapping[str, Any] | None=None, **kwargs) -> pd.DataFrame:\n        \"\"\"\n        Execute the sql and returns a pandas dataframe.\n\n        :param sql: the sql statement to be executed (str) or a list of sql statements to execute\n        :param parameters: The parameters to render the SQL query with.\n        :param kwargs: (optional) passed into pandas.io.sql.read_sql method\n        \"\"\"\n        return self._get_pandas_df(sql, parameters, **kwargs)\n\n    def _get_polars_df(self, sql, parameters: list | tuple | Mapping[str, Any] | None=None, **kwargs):\n        raise NotImplementedError('Polars is not supported for Exasol')\n\n    def get_records(self, sql: str | list[str], parameters: Iterable | Mapping[str, Any] | None=None) -> list[dict | tuple[Any, ...]]:\n        \"\"\"\n        Execute the SQL and return a set of records.\n\n        :param sql: the sql statement to be executed (str) or a list of\n            sql statements to execute\n        :param parameters: The parameters to render the SQL query with.\n        \"\"\"\n        with closing(self.get_conn()) as conn, closing(conn.execute(sql, parameters)) as cur:\n            return cur.fetchall()\n\n    def get_first(self, sql: str | list[str], parameters: Iterable | Mapping[str, Any] | None=None) -> Any:\n        \"\"\"\n        Execute the SQL and return the first resulting row.\n\n        :param sql: the sql statement to be executed (str) or a list of\n            sql statements to execute\n        :param parameters: The parameters to render the SQL query with.\n        \"\"\"\n        with closing(self.get_conn()) as conn, closing(conn.execute(sql, parameters)) as cur:\n            return cur.fetchone()\n\n    def export_to_file(self, filename: str, query_or_table: str, query_params: dict | None=None, export_params: dict | None=None) -> None:\n        \"\"\"\n        Export data to a file.\n\n        :param filename: Path to the file to which the data has to be exported\n        :param query_or_table: the sql statement to be executed or table name to export\n        :param query_params: Query parameters passed to underlying ``export_to_file``\n            method of :class:`~pyexasol.connection.ExaConnection`.\n        :param export_params: Extra parameters passed to underlying ``export_to_file``\n            method of :class:`~pyexasol.connection.ExaConnection`.\n        \"\"\"\n        self.log.info('Getting data from exasol')\n        with closing(self.get_conn()) as conn:\n            conn.export_to_file(dst=filename, query_or_table=query_or_table, query_params=query_params, export_params=export_params)\n        self.log.info('Data saved to %s', filename)\n\n    @staticmethod\n    def get_description(statement: ExaStatement) -> Sequence[Sequence]:\n        \"\"\"\n        Get description; copied implementation from DB2-API wrapper.\n\n        For more info, see\n        https://github.com/exasol/pyexasol/blob/master/docs/DBAPI_COMPAT.md#db-api-20-wrapper\n\n        :param statement: Exasol statement\n        :return: description sequence of t\n        \"\"\"\n        cols = []\n        for k, v in statement.columns().items():\n            cols.append((k, v.get('type', None), v.get('size', None), v.get('size', None), v.get('precision', None), v.get('scale', None), True))\n        return cols\n\n    @overload\n    def run(self, sql: str | Iterable[str], autocommit: bool=..., parameters: Iterable | Mapping[str, Any] | None=..., handler: None=..., split_statements: bool=..., return_last: bool=...) -> None:\n        ...\n\n    @overload\n    def run(self, sql: str | Iterable[str], autocommit: bool=..., parameters: Iterable | Mapping[str, Any] | None=..., handler: Callable[[Any], T]=..., split_statements: bool=..., return_last: bool=...) -> tuple | list[tuple] | list[list[tuple] | tuple] | None:\n        ...\n\n    def run(self, sql: str | Iterable[str], autocommit: bool=False, parameters: Iterable | Mapping[str, Any] | None=None, handler: Callable[[Any], T] | None=None, split_statements: bool=False, return_last: bool=True) -> tuple | list[tuple] | list[list[tuple] | tuple] | None:\n        \"\"\"\n        Run a command or a list of commands.\n\n        Pass a list of SQL statements to the SQL parameter to get them to\n        execute sequentially.\n\n        :param sql: the sql statement to be executed (str) or a list of\n            sql statements to execute\n        :param autocommit: What to set the connection's autocommit setting to\n            before executing the query.\n        :param parameters: The parameters to render the SQL query with.\n        :param handler: The result handler which is called with the result of each statement.\n        :param split_statements: Whether to split a single SQL string into statements and run separately\n        :param return_last: Whether to return result for only last statement or for all after split\n        :return: return only result of the LAST SQL expression if handler was provided.\n        \"\"\"\n        self.descriptions = []\n        if isinstance(sql, str):\n            if split_statements:\n                sql_list: Iterable[str] = self.split_sql_string(sql)\n            else:\n                statement = self.strip_sql_string(sql)\n                sql_list = [statement] if statement.strip() else []\n        else:\n            sql_list = sql\n        if sql_list:\n            self.log.debug('Executing following statements against Exasol DB: %s', list(sql_list))\n        else:\n            raise ValueError('List of SQL statements is empty')\n        _last_result = None\n        with closing(self.get_conn()) as conn:\n            self.set_autocommit(conn, autocommit)\n            results = []\n            for sql_statement in sql_list:\n                self.log.info('Running statement: %s, parameters: %s', sql_statement, parameters)\n                with closing(conn.execute(sql_statement, parameters)) as exa_statement:\n                    if handler is not None:\n                        result = self._make_common_data_structure(handler(exa_statement))\n                        if return_single_query_results(sql, return_last, split_statements):\n                            _last_result = result\n                            _last_columns = self.get_description(exa_statement)\n                        else:\n                            results.append(result)\n                            self.descriptions.append(self.get_description(exa_statement))\n                    self.log.info('Rows affected: %s', exa_statement.rowcount())\n            if not self.get_autocommit(conn):\n                conn.commit()\n        if handler is None:\n            return None\n        if return_single_query_results(sql, return_last, split_statements):\n            self.descriptions = [_last_columns]\n            return _last_result\n        return results\n\n    def set_autocommit(self, conn, autocommit: bool) -> None:\n        \"\"\"\n        Set the autocommit flag on the connection.\n\n        :param conn: Connection to set autocommit setting to.\n        :param autocommit: The autocommit setting to set.\n        \"\"\"\n        if not self.supports_autocommit and autocommit:\n            self.log.warning(\"%s connection doesn't support autocommit but autocommit activated.\", self.get_conn_id())\n        conn.set_autocommit(autocommit)\n\n    def get_autocommit(self, conn) -> bool:\n        \"\"\"\n        Get autocommit setting for the provided connection.\n\n        :param conn: Connection to get autocommit setting from.\n        :return: connection autocommit setting. True if ``autocommit`` is set\n            to True on the connection. False if it is either not set, set to\n            False, or the connection does not support auto-commit.\n        \"\"\"\n        autocommit = conn.attr.get('autocommit')\n        if autocommit is None:\n            autocommit = super().get_autocommit(conn)\n        return autocommit\n\n    @staticmethod\n    def _serialize_cell(cell, conn=None) -> Any:\n        \"\"\"\n        Override to disable cell serialization.\n\n        Exasol will adapt all arguments to the ``execute()`` method internally,\n        hence we return cell without any conversion.\n\n        :param cell: The cell to insert into the table\n        :param conn: The database connection\n        :return: The cell\n        \"\"\"\n        return cell\n\nExample skeleton:\n\n\nclass InitTask(BaseTask):\n\n    def copy_starter_repo(self, project_name: str) -> None:\n        pass\n\n    def create_profiles_dir(self, profiles_dir: str) -> bool:\n        '''Create the user's profiles directory if it doesn't already exist.'''\n        pass\n\n    def create_profile_from_sample(self, adapter: str, profile_name: str):\n        '''Create a profile entry using the adapter's sample_profiles.yml\n        Renames the profile in sample_profiles.yml to match that of the project.'''\n        pass\n\n    def generate_target_from_input(self, profile_template: dict, target: dict={}) -> dict:\n        '''Generate a target configuration from profile_template and user input.'''\n        pass\n\n    def get_profile_name_from_current_project(self) -> str:\n        '''Reads dbt_project.yml in the current directory to retrieve the\n        profile name.\n        '''\n        pass\n\n    def write_profile(self, profile: dict, profile_name: str):\n        '''Given a profile, write it to the current project's profiles.yml.\n        This will overwrite any profile with a matching name.'''\n        pass\n\n    def create_profile_from_profile_template(self, profile_template: dict, profile_name: str):\n        '''Create and write a profile using the supplied profile_template.'''\n        pass\n\n    def create_profile_from_target(self, adapter: str, profile_name: str):\n        '''Create a profile without defaults using target's profile_template.yml if available, or\n        sample_profiles.yml as a fallback.'''\n        pass\n\n    def check_if_profile_exists(self, profile_name: str) -> bool:\n        '''\n        Validate that the specified profile exists. Can't use the regular profile validation\n        routine because it assumes the project file exists\n        '''\n        pass\n\n    def check_if_can_write_profile(self, profile_name: Optional[str]=None) -> bool:\n        '''Using either a provided profile name or that specified in dbt_project.yml,\n        check if the profile already exists in profiles.yml, and if so ask the\n        user whether to proceed and overwrite it.'''\n        pass\n\n    def create_profile_using_project_profile_template(self, profile_name):\n        '''Create a profile using the project's profile_template.yml'''\n        pass\n\n    def ask_for_adapter_choice(self) -> str:\n        '''Ask the user which adapter (database) they'd like to use.'''\n        pass\n\n    def setup_profile(self, profile_name: str) -> None:\n        '''Set up a new profile for a project'''\n        pass\n\n    def get_valid_project_name(self) -> str:\n        '''Returns a valid project name, either from CLI arg or user prompt.'''\n        pass\n\n    def create_new_project(self, project_name: str, profile_name: str):\n        pass\n\n    def run(self):\n        '''Entry point for the init task.'''\n        pass\nCorresponding class implementation:\n\nfrom dbt_common.events.functions import fire_event\nfrom dbt.flags import get_flags\nfrom dbt_common.exceptions import DbtRuntimeError\nimport copy\nfrom typing import Optional\nimport os\nimport shutil\nimport yaml\nfrom dbt.task.base import BaseTask, move_to_nearest_project_dir\nimport click\nfrom dbt.events.types import ConfigFolderDirectory, InvalidProfileTemplateYAML, NoSampleProfileFound, ProfileWrittenWithProjectTemplateYAML, ProfileWrittenWithSample, ProfileWrittenWithTargetTemplateYAML, ProjectCreated, ProjectNameAlreadyExists, SettingUpProfile, StarterProjectPath\nimport re\nimport dbt_common.clients.system\nfrom dbt.config.profile import read_profile\nfrom pathlib import Path\nfrom dbt.contracts.util import Identifier as ProjectName\nimport dbt.config\nfrom dbt.adapters.factory import get_include_paths, load_plugin\nfrom dbt.version import _get_adapter_plugin_names\n\nclass InitTask(BaseTask):\n\n    def copy_starter_repo(self, project_name: str) -> None:\n        from dbt.include.starter_project import PACKAGE_PATH as starter_project_directory\n        fire_event(StarterProjectPath(dir=starter_project_directory))\n        shutil.copytree(starter_project_directory, project_name, ignore=shutil.ignore_patterns(*IGNORE_FILES))\n\n    def create_profiles_dir(self, profiles_dir: str) -> bool:\n        \"\"\"Create the user's profiles directory if it doesn't already exist.\"\"\"\n        profiles_path = Path(profiles_dir)\n        if not profiles_path.exists():\n            fire_event(ConfigFolderDirectory(dir=str(profiles_dir)))\n            dbt_common.clients.system.make_directory(profiles_dir)\n            return True\n        return False\n\n    def create_profile_from_sample(self, adapter: str, profile_name: str):\n        \"\"\"Create a profile entry using the adapter's sample_profiles.yml\n\n        Renames the profile in sample_profiles.yml to match that of the project.\"\"\"\n        load_plugin(adapter)\n        adapter_path = get_include_paths(adapter)[0]\n        sample_profiles_path = adapter_path / 'sample_profiles.yml'\n        if not sample_profiles_path.exists():\n            fire_event(NoSampleProfileFound(adapter=adapter))\n        else:\n            with open(sample_profiles_path, 'r') as f:\n                sample_profile = f.read()\n            sample_profile_name = list(yaml.safe_load(sample_profile).keys())[0]\n            sample_profile = re.sub(f'^{sample_profile_name}:', f'{profile_name}:', sample_profile)\n            profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n            if profiles_filepath.exists():\n                with open(profiles_filepath, 'a') as f:\n                    f.write('\\n' + sample_profile)\n            else:\n                with open(profiles_filepath, 'w') as f:\n                    f.write(sample_profile)\n                fire_event(ProfileWrittenWithSample(name=profile_name, path=str(profiles_filepath)))\n\n    def generate_target_from_input(self, profile_template: dict, target: dict={}) -> dict:\n        \"\"\"Generate a target configuration from profile_template and user input.\"\"\"\n        profile_template_local = copy.deepcopy(profile_template)\n        for key, value in profile_template_local.items():\n            if key.startswith('_choose'):\n                choice_type = key[8:].replace('_', ' ')\n                option_list = list(value.keys())\n                prompt_msg = '\\n'.join([f'[{n + 1}] {v}' for n, v in enumerate(option_list)]) + f'\\nDesired {choice_type} option (enter a number)'\n                numeric_choice = click.prompt(prompt_msg, type=click.INT)\n                choice = option_list[numeric_choice - 1]\n                target = self.generate_target_from_input(profile_template_local[key][choice], target)\n            elif key.startswith('_fixed'):\n                target[key[7:]] = value\n            else:\n                hide_input = value.get('hide_input', False)\n                default = value.get('default', None)\n                hint = value.get('hint', None)\n                type = click_type_mapping[value.get('type', None)]\n                text = key + (f' ({hint})' if hint else '')\n                target[key] = click.prompt(text, default=default, hide_input=hide_input, type=type)\n        return target\n\n    def get_profile_name_from_current_project(self) -> str:\n        \"\"\"Reads dbt_project.yml in the current directory to retrieve the\n        profile name.\n        \"\"\"\n        with open('dbt_project.yml') as f:\n            dbt_project = yaml.safe_load(f)\n        return dbt_project['profile']\n\n    def write_profile(self, profile: dict, profile_name: str):\n        \"\"\"Given a profile, write it to the current project's profiles.yml.\n        This will overwrite any profile with a matching name.\"\"\"\n        profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        profiles = {profile_name: profile}\n        if profiles_filepath.exists():\n            with open(profiles_filepath, 'r') as f:\n                profiles = yaml.safe_load(f) or {}\n                profiles[profile_name] = profile\n        with open(profiles_filepath, 'w') as f:\n            yaml.dump(profiles, f)\n\n    def create_profile_from_profile_template(self, profile_template: dict, profile_name: str):\n        \"\"\"Create and write a profile using the supplied profile_template.\"\"\"\n        initial_target = profile_template.get('fixed', {})\n        prompts = profile_template.get('prompts', {})\n        target = self.generate_target_from_input(prompts, initial_target)\n        target_name = target.pop('target', 'dev')\n        profile = {'outputs': {target_name: target}, 'target': target_name}\n        self.write_profile(profile, profile_name)\n\n    def create_profile_from_target(self, adapter: str, profile_name: str):\n        \"\"\"Create a profile without defaults using target's profile_template.yml if available, or\n        sample_profiles.yml as a fallback.\"\"\"\n        load_plugin(adapter)\n        adapter_path = get_include_paths(adapter)[0]\n        profile_template_path = adapter_path / 'profile_template.yml'\n        if profile_template_path.exists():\n            with open(profile_template_path) as f:\n                profile_template = yaml.safe_load(f)\n            self.create_profile_from_profile_template(profile_template, profile_name)\n            profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n            fire_event(ProfileWrittenWithTargetTemplateYAML(name=profile_name, path=str(profiles_filepath)))\n        else:\n            self.create_profile_from_sample(adapter, profile_name)\n\n    def check_if_profile_exists(self, profile_name: str) -> bool:\n        \"\"\"\n        Validate that the specified profile exists. Can't use the regular profile validation\n        routine because it assumes the project file exists\n        \"\"\"\n        profiles_dir = get_flags().PROFILES_DIR\n        raw_profiles = read_profile(profiles_dir)\n        return profile_name in raw_profiles\n\n    def check_if_can_write_profile(self, profile_name: Optional[str]=None) -> bool:\n        \"\"\"Using either a provided profile name or that specified in dbt_project.yml,\n        check if the profile already exists in profiles.yml, and if so ask the\n        user whether to proceed and overwrite it.\"\"\"\n        profiles_file = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        if not profiles_file.exists():\n            return True\n        profile_name = profile_name or self.get_profile_name_from_current_project()\n        with open(profiles_file, 'r') as f:\n            profiles = yaml.safe_load(f) or {}\n        if profile_name in profiles.keys():\n            response = click.confirm(f'The profile {profile_name} already exists in {profiles_file}. Continue and overwrite it?')\n            return response\n        else:\n            return True\n\n    def create_profile_using_project_profile_template(self, profile_name):\n        \"\"\"Create a profile using the project's profile_template.yml\"\"\"\n        with open('profile_template.yml') as f:\n            profile_template = yaml.safe_load(f)\n        self.create_profile_from_profile_template(profile_template, profile_name)\n        profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        fire_event(ProfileWrittenWithProjectTemplateYAML(name=profile_name, path=str(profiles_filepath)))\n\n    def ask_for_adapter_choice(self) -> str:\n        \"\"\"Ask the user which adapter (database) they'd like to use.\"\"\"\n        available_adapters = list(_get_adapter_plugin_names())\n        if not available_adapters:\n            raise dbt.exceptions.NoAdaptersAvailableError()\n        prompt_msg = 'Which database would you like to use?\\n' + '\\n'.join([f'[{n + 1}] {v}' for n, v in enumerate(available_adapters)]) + \"\\n\\n(Don't see the one you want? https://docs.getdbt.com/docs/available-adapters)\" + '\\n\\nEnter a number'\n        numeric_choice = click.prompt(prompt_msg, type=click.INT)\n        return available_adapters[numeric_choice - 1]\n\n    def setup_profile(self, profile_name: str) -> None:\n        \"\"\"Set up a new profile for a project\"\"\"\n        fire_event(SettingUpProfile())\n        if not self.check_if_can_write_profile(profile_name=profile_name):\n            return\n        profile_template_path = Path('profile_template.yml')\n        if profile_template_path.exists():\n            try:\n                self.create_profile_using_project_profile_template(profile_name)\n                return\n            except Exception:\n                fire_event(InvalidProfileTemplateYAML())\n        adapter = self.ask_for_adapter_choice()\n        self.create_profile_from_target(adapter, profile_name=profile_name)\n\n    def get_valid_project_name(self) -> str:\n        \"\"\"Returns a valid project name, either from CLI arg or user prompt.\"\"\"\n        from dbt.include.global_project import PROJECT_NAME as GLOBAL_PROJECT_NAME\n        name = self.args.project_name\n        internal_package_names = {GLOBAL_PROJECT_NAME}\n        available_adapters = list(_get_adapter_plugin_names())\n        for adapter_name in available_adapters:\n            internal_package_names.update(f'dbt_{adapter_name}')\n        while not ProjectName.is_valid(name) or name in internal_package_names:\n            if name:\n                click.echo(name + ' is not a valid project name.')\n            name = click.prompt('Enter a name for your project (letters, digits, underscore)')\n        return name\n\n    def create_new_project(self, project_name: str, profile_name: str):\n        self.copy_starter_repo(project_name)\n        os.chdir(project_name)\n        with open('dbt_project.yml', 'r') as f:\n            content = f'{f.read()}'.format(project_name=project_name, profile_name=profile_name)\n        with open('dbt_project.yml', 'w') as f:\n            f.write(content)\n        fire_event(ProjectCreated(project_name=project_name, docs_url=DOCS_URL, slack_url=SLACK_URL))\n\n    def run(self):\n        \"\"\"Entry point for the init task.\"\"\"\n        profiles_dir = get_flags().PROFILES_DIR\n        self.create_profiles_dir(profiles_dir)\n        try:\n            move_to_nearest_project_dir(self.args.project_dir)\n            in_project = True\n        except dbt_common.exceptions.DbtRuntimeError:\n            in_project = False\n        if in_project:\n            if self.args.profile:\n                raise DbtRuntimeError(msg='Can not init existing project with specified profile, edit dbt_project.yml instead')\n            if not self.args.skip_profile_setup:\n                profile_name = self.get_profile_name_from_current_project()\n                self.setup_profile(profile_name)\n        else:\n            project_name = self.get_valid_project_name()\n            project_path = Path(project_name)\n            if project_path.exists():\n                fire_event(ProjectNameAlreadyExists(name=project_name))\n                return\n            user_profile_name = self.args.profile\n            if user_profile_name:\n                if not self.check_if_profile_exists(user_profile_name):\n                    raise DbtRuntimeError(msg=\"Could not find profile named '{}'\".format(user_profile_name))\n                self.create_new_project(project_name, user_profile_name)\n            else:\n                profile_name = project_name\n                self.create_new_project(project_name, profile_name)\n                if not self.args.skip_profile_setup:\n                    self.setup_profile(profile_name)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass Hubbie:\n    '''Hubbie is a Huggingface hub manager for Chonkie.\n    Methods:\n        get_recipe(recipe_name: str, lang: Optional[str] = 'en') -> Optional[Dict]:\n            Get a recipe from the hub.\n        get_recipe_schema() -> Dict:\n            Get the current recipe schema from the hub.\n    '''\n\n    def __init__(self) -> None:\n        '''Initialize Hubbie.'''\n        pass\n\n    def _import_dependencies(self) -> None:\n        '''Check if the required dependencies are available and import them.'''\n        pass\n\n    def _check_dependencies(self) -> Optional[bool]:\n        '''Check if the required dependencies are available.'''\n        pass\n\n    def get_recipe_schema(self) -> Dict:\n        '''Get the current recipe schema from the hub.'''\n        pass\n\n    def _validate_recipe(self, recipe: Dict) -> Optional[bool]:\n        '''Validate a recipe against the current schema.'''\n        pass\n\n    def get_recipe_schema(self) -> Dict:\n        '''Get a recipe from the hub.\n        Args:\n            name (Optional[str]): The name of the recipe to get.\n            lang (Optional[str]): The language of the recipe to get.\n            path (Optional[str]): Optionally, provide the path to the recipe.\n        Returns:\n            Optional[Dict]: The recipe.\n        Raises:\n            ValueError: If the recipe is not found.\n            ValueError: If neither (name, lang) nor path are provided.\n            ValueError: If the recipe is invalid.\n        '''\n        pass"
  }
]