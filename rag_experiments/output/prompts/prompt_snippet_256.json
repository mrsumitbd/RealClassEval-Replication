[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass RawMetricsOperator(BaseOperator):\n    '''Raw Metrics Operator.'''\n\n    def __init__(self, config: WilyConfig, targets: Iterable[str]):\n        '''\n        Instantiate a new raw operator.\n        :param config: The wily configuration.\n        :param targets: An iterable of paths from which to harvest metrics.\n        '''\n        pass\n\n    def run(self, module: str, options: Dict[str, Any]) -> Dict[Any, Any]:\n        '''\n        Run the operator.\n        :param module: The target module path.\n        :param options: Any runtime options.\n        :return: The operator results.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom wily.lang import _\nfrom wily.operators import BaseOperator, Metric, MetricType\nfrom typing import Any, Dict, Iterable\nfrom wily.config.types import WilyConfig\nfrom radon.cli import Config\nfrom wily import logger\nimport radon.cli.harvest as harvesters\n\nclass RawMetricsOperator(BaseOperator):\n    \"\"\"Raw Metrics Operator.\"\"\"\n    name = 'raw'\n    defaults = {'exclude': None, 'ignore': None, 'summary': False, 'include_ipynb': True, 'ipynb_cells': True}\n    metrics = (Metric('loc', _('Lines of Code'), int, MetricType.Informational, sum), Metric('lloc', _('L Lines of Code'), int, MetricType.AimLow, sum), Metric('sloc', _('S Lines of Code'), int, MetricType.AimLow, sum), Metric('comments', _('Multi-line comments'), int, MetricType.AimHigh, sum), Metric('multi', _('Multi lines'), int, MetricType.Informational, sum), Metric('blank', _('blank lines'), int, MetricType.Informational, sum), Metric('single_comments', _('Single comment lines'), int, MetricType.Informational, sum))\n    default_metric_index = 0\n\n    def __init__(self, config: WilyConfig, targets: Iterable[str]):\n        \"\"\"\n        Instantiate a new raw operator.\n\n        :param config: The wily configuration.\n        :param targets: An iterable of paths from which to harvest metrics.\n        \"\"\"\n        logger.debug('Using %s with %s for Raw metrics', targets, self.defaults)\n        self.harvester = harvesters.RawHarvester(targets, config=Config(**self.defaults))\n\n    def run(self, module: str, options: Dict[str, Any]) -> Dict[Any, Any]:\n        \"\"\"\n        Run the operator.\n\n        :param module: The target module path.\n        :param options: Any runtime options.\n        :return: The operator results.\n        \"\"\"\n        logger.debug('Running raw harvester')\n        results = {}\n        for filename, metrics in dict(self.harvester.results).items():\n            results[filename] = {'total': metrics}\n        return results\n\nExample skeleton:\n\n\nclass SearchSettingsConversationalSearch:\n    '''\n    Configuration settings for conversational search.\n    :param bool enabled: Whether to enable conversational search.\n    :param SearchSettingsConversationalSearchResponseLength response_length:\n          (optional)\n    :param SearchSettingsConversationalSearchSearchConfidence search_confidence:\n          (optional)\n    '''\n\n    def __init__(self, enabled: bool, *, response_length: Optional['SearchSettingsConversationalSearchResponseLength']=None, search_confidence: Optional['SearchSettingsConversationalSearchSearchConfidence']=None) -> None:\n        '''\n        Initialize a SearchSettingsConversationalSearch object.\n        :param bool enabled: Whether to enable conversational search.\n        :param SearchSettingsConversationalSearchResponseLength response_length:\n               (optional)\n        :param SearchSettingsConversationalSearchSearchConfidence\n               search_confidence: (optional)\n        '''\n        pass\n    @classmethod\n    def from_dict(cls, _dict: Dict) -> 'SearchSettingsConversationalSearch':\n        '''Initialize a SearchSettingsConversationalSearch object from a json dictionary.'''\n        pass\n    @classmethod\n    def _from_dict(cls, _dict):\n        '''Initialize a SearchSettingsConversationalSearch object from a json dictionary.'''\n        pass\n\n    def to_dict(self) -> Dict:\n        '''Return a json dictionary representing this model.'''\n        pass\n\n    def _to_dict(self):\n        '''Return a json dictionary representing this model.'''\n        pass\n\n    def __str__(self) -> str:\n        '''Return a `str` version of this SearchSettingsConversationalSearch object.'''\n        pass\n\n    def __eq__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        '''Return `true` when self and other are equal, false otherwise.'''\n        pass\n\n    def __ne__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        '''Return `true` when self and other are not equal, false otherwise.'''\n        pass\nCorresponding class implementation:\n\nimport json\nfrom typing import BinaryIO, Dict, List, Optional\n\nclass SearchSettingsConversationalSearch:\n    \"\"\"\n    Configuration settings for conversational search.\n\n    :param bool enabled: Whether to enable conversational search.\n    :param SearchSettingsConversationalSearchResponseLength response_length:\n          (optional)\n    :param SearchSettingsConversationalSearchSearchConfidence search_confidence:\n          (optional)\n    \"\"\"\n\n    def __init__(self, enabled: bool, *, response_length: Optional['SearchSettingsConversationalSearchResponseLength']=None, search_confidence: Optional['SearchSettingsConversationalSearchSearchConfidence']=None) -> None:\n        \"\"\"\n        Initialize a SearchSettingsConversationalSearch object.\n\n        :param bool enabled: Whether to enable conversational search.\n        :param SearchSettingsConversationalSearchResponseLength response_length:\n               (optional)\n        :param SearchSettingsConversationalSearchSearchConfidence\n               search_confidence: (optional)\n        \"\"\"\n        self.enabled = enabled\n        self.response_length = response_length\n        self.search_confidence = search_confidence\n\n    @classmethod\n    def from_dict(cls, _dict: Dict) -> 'SearchSettingsConversationalSearch':\n        \"\"\"Initialize a SearchSettingsConversationalSearch object from a json dictionary.\"\"\"\n        args = {}\n        if (enabled := _dict.get('enabled')) is not None:\n            args['enabled'] = enabled\n        else:\n            raise ValueError(\"Required property 'enabled' not present in SearchSettingsConversationalSearch JSON\")\n        if (response_length := _dict.get('response_length')) is not None:\n            args['response_length'] = SearchSettingsConversationalSearchResponseLength.from_dict(response_length)\n        if (search_confidence := _dict.get('search_confidence')) is not None:\n            args['search_confidence'] = SearchSettingsConversationalSearchSearchConfidence.from_dict(search_confidence)\n        return cls(**args)\n\n    @classmethod\n    def _from_dict(cls, _dict):\n        \"\"\"Initialize a SearchSettingsConversationalSearch object from a json dictionary.\"\"\"\n        return cls.from_dict(_dict)\n\n    def to_dict(self) -> Dict:\n        \"\"\"Return a json dictionary representing this model.\"\"\"\n        _dict = {}\n        if hasattr(self, 'enabled') and self.enabled is not None:\n            _dict['enabled'] = self.enabled\n        if hasattr(self, 'response_length') and self.response_length is not None:\n            if isinstance(self.response_length, dict):\n                _dict['response_length'] = self.response_length\n            else:\n                _dict['response_length'] = self.response_length.to_dict()\n        if hasattr(self, 'search_confidence') and self.search_confidence is not None:\n            if isinstance(self.search_confidence, dict):\n                _dict['search_confidence'] = self.search_confidence\n            else:\n                _dict['search_confidence'] = self.search_confidence.to_dict()\n        return _dict\n\n    def _to_dict(self):\n        \"\"\"Return a json dictionary representing this model.\"\"\"\n        return self.to_dict()\n\n    def __str__(self) -> str:\n        \"\"\"Return a `str` version of this SearchSettingsConversationalSearch object.\"\"\"\n        return json.dumps(self.to_dict(), indent=2)\n\n    def __eq__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        \"\"\"Return `true` when self and other are equal, false otherwise.\"\"\"\n        if not isinstance(other, self.__class__):\n            return False\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        \"\"\"Return `true` when self and other are not equal, false otherwise.\"\"\"\n        return not self == other\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass PromptPatternMatcher:\n    '''Analyzes prompts to determine context requirements.'''\n\n    def __init__(self):\n        '''Initialize pattern matchers.'''\n        pass\n\n    def analyze_prompt(self, prompt: str, tool_name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:\n        '''\n        Analyze prompt to determine context requirements.\n        Returns:\n            Dictionary with detected patterns, entities, and confidence scores\n        '''\n        pass"
  }
]