[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass PlatformUtility:\n    '''\n    Provides an easy way to get the current platform.\n    '''\n    @staticmethod\n    def get() -> str:\n        '''\n        Returns the current platform.\n        '''\n        pass\n    @classmethod\n    def is_cygwin(cls) -> bool:\n        '''\n        Checks if the current platform is in our cygwin list.\n        '''\n        pass\n    @classmethod\n    def is_windows(cls) -> bool:\n        '''\n        Checks if the current platform is in our windows list.\n        '''\n        pass\n    @classmethod\n    def is_unix(cls) -> bool:\n        '''\n        Checks if the current platform is in our unix list.\n        '''\n        pass\n    @classmethod\n    def is_mac_os(cls) -> bool:\n        '''\n        Checks if the current platform is in our OSX list.\n        '''\n        pass\nCorresponding class implementation:\n\nimport platform\n\nclass PlatformUtility:\n    \"\"\"\n    Provides an easy way to get the current platform.\n    \"\"\"\n    WINDOWS: list = ['windows']\n    '\\n    Provides the list of supported windows platform.\\n    '\n    CYGWIN: list = ['cygwin', 'cygwin_nt-10.0']\n    '\\n    Provides the list of supporter cygwin platform.\\n    '\n    UNIX: list = ['linux', 'darwin']\n    '\\n    Provides the list of supported unix platform.\\n    '\n    MAC: list = ['darwin']\n    '\\n    Provides the list of supported MAC platform.\\n    '\n\n    @staticmethod\n    def get() -> str:\n        \"\"\"\n        Returns the current platform.\n        \"\"\"\n        return platform.system().lower()\n\n    @classmethod\n    def is_cygwin(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our cygwin list.\n        \"\"\"\n        current_platform = cls.get()\n        return any((x in current_platform for x in cls.CYGWIN))\n\n    @classmethod\n    def is_windows(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our windows list.\n        \"\"\"\n        return cls.get() in cls.WINDOWS or cls.is_cygwin()\n\n    @classmethod\n    def is_unix(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our unix list.\n        \"\"\"\n        return cls.get() in cls.UNIX\n\n    @classmethod\n    def is_mac_os(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our OSX list.\n        \"\"\"\n        return cls.get() in cls.MAC\n\nExample skeleton:\n\n\nclass WinLnkParser(interface.FileObjectParser):\n    '''Windows Shortcut (LNK) file parser.'''\n\n    def __init__(self):\n        '''Initializes a Windows Shortcut (LNK) file parser.'''\n        pass\n\n    def _GetDateTime(self, filetime):\n        '''Retrieves the date and time from a FILETIME timestamp.\n        Args:\n          filetime (int): FILETIME timestamp.\n        Returns:\n          dfdatetime.DateTimeValues: date and time or None if not set.\n        '''\n        pass\n\n    def _GetSanitizedPathString(self, path):\n        '''Retrieves a sanitize path string.\n        Args:\n          path (str): path.\n        Returns:\n          str: sanitized path string.\n        '''\n        pass\n    @classmethod\n    def GetFormatSpecification(cls):\n        '''Retrieves the format specification.\n        Returns:\n          FormatSpecification: format specification.\n        '''\n        pass\n\n    def _ParseDistributedTrackingIdentifier(self, parser_mediator, uuid_string, origin):\n        '''Extracts data from a Distributed Tracking identifier.\n        Args:\n          parser_mediator (ParserMediator): mediates interactions between parsers\n              and other components, such as storage and dfVFS.\n          uuid_string (str): UUID string of the Distributed Tracking identifier.\n          origin (str): origin of the event (event source).\n        '''\n        pass\n\n    def ParseFileObject(self, parser_mediator, file_object):\n        '''Parses a Windows Shortcut (LNK) file-like object.\n        Args:\n          parser_mediator (ParserMediator): mediates interactions between parsers\n              and other components, such as storage and dfVFS.\n          file_object (dfvfs.FileIO): file-like object.\n        '''\n        pass\n\n    def ParseFileLNKFile(self, parser_mediator, file_object, display_name):\n        '''Parses a Windows Shortcut (LNK) file-like object.\n        Args:\n          parser_mediator (ParserMediator): mediates interactions between parsers\n              and other components, such as storage and dfVFS.\n          file_object (dfvfs.FileIO): file-like object.\n          display_name (str): display name.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom plaso.lib import specification\nfrom dfdatetime import filetime as dfdatetime_filetime\nfrom plaso.containers import windows_events\nimport uuid\nfrom plaso.parsers.shared import shell_items\nfrom plaso.parsers import interface\nfrom plaso.lib import definitions\nimport pylnk\n\nclass WinLnkParser(interface.FileObjectParser):\n    \"\"\"Windows Shortcut (LNK) file parser.\"\"\"\n    _INITIAL_FILE_OFFSET = None\n    _PATH_ESCAPE_CHARACTERS = {'\\\\': '\\\\\\\\'}\n    _PATH_ESCAPE_CHARACTERS.update(definitions.NON_PRINTABLE_CHARACTERS)\n    NAME = 'lnk'\n    DATA_FORMAT = 'Windows Shortcut (LNK) file'\n\n    def __init__(self):\n        \"\"\"Initializes a Windows Shortcut (LNK) file parser.\"\"\"\n        super(WinLnkParser, self).__init__()\n        self._path_escape_characters = str.maketrans(self._PATH_ESCAPE_CHARACTERS)\n\n    def _GetDateTime(self, filetime):\n        \"\"\"Retrieves the date and time from a FILETIME timestamp.\n\n        Args:\n          filetime (int): FILETIME timestamp.\n\n        Returns:\n          dfdatetime.DateTimeValues: date and time or None if not set.\n        \"\"\"\n        if not filetime:\n            return None\n        return dfdatetime_filetime.Filetime(timestamp=filetime)\n\n    def _GetSanitizedPathString(self, path):\n        \"\"\"Retrieves a sanitize path string.\n\n        Args:\n          path (str): path.\n\n        Returns:\n          str: sanitized path string.\n        \"\"\"\n        if not path:\n            return None\n        return path.translate(self._path_escape_characters)\n\n    @classmethod\n    def GetFormatSpecification(cls):\n        \"\"\"Retrieves the format specification.\n\n        Returns:\n          FormatSpecification: format specification.\n        \"\"\"\n        format_specification = specification.FormatSpecification(cls.NAME)\n        format_specification.AddNewSignature(b'\\x01\\x14\\x02\\x00\\x00\\x00\\x00\\x00\\xc0\\x00\\x00\\x00\\x00\\x00\\x00F', offset=4)\n        return format_specification\n\n    def _ParseDistributedTrackingIdentifier(self, parser_mediator, uuid_string, origin):\n        \"\"\"Extracts data from a Distributed Tracking identifier.\n\n        Args:\n          parser_mediator (ParserMediator): mediates interactions between parsers\n              and other components, such as storage and dfVFS.\n          uuid_string (str): UUID string of the Distributed Tracking identifier.\n          origin (str): origin of the event (event source).\n        \"\"\"\n        uuid_object = uuid.UUID(uuid_string)\n        if uuid_object.version == 1:\n            event_data = windows_events.WindowsDistributedLinkTrackingEventData(uuid_object, origin)\n            parser_mediator.ProduceEventData(event_data)\n\n    def ParseFileObject(self, parser_mediator, file_object):\n        \"\"\"Parses a Windows Shortcut (LNK) file-like object.\n\n        Args:\n          parser_mediator (ParserMediator): mediates interactions between parsers\n              and other components, such as storage and dfVFS.\n          file_object (dfvfs.FileIO): file-like object.\n        \"\"\"\n        display_name = parser_mediator.GetDisplayName()\n        self.ParseFileLNKFile(parser_mediator, file_object, display_name)\n\n    def ParseFileLNKFile(self, parser_mediator, file_object, display_name):\n        \"\"\"Parses a Windows Shortcut (LNK) file-like object.\n\n        Args:\n          parser_mediator (ParserMediator): mediates interactions between parsers\n              and other components, such as storage and dfVFS.\n          file_object (dfvfs.FileIO): file-like object.\n          display_name (str): display name.\n        \"\"\"\n        code_page = parser_mediator.GetCodePage()\n        lnk_file = pylnk.file()\n        lnk_file.set_ascii_codepage(code_page)\n        try:\n            lnk_file.open_file_object(file_object)\n        except IOError as exception:\n            parser_mediator.ProduceExtractionWarning('unable to open file with error: {0!s}'.format(exception))\n            return\n        link_target = None\n        if lnk_file.link_target_identifier_data:\n            display_name = parser_mediator.GetFilename()\n            shell_items_parser = shell_items.ShellItemsParser(display_name)\n            shell_items_parser.ParseByteStream(parser_mediator, lnk_file.link_target_identifier_data, codepage=code_page)\n            link_target = shell_items_parser.CopyToPath()\n        access_time = lnk_file.get_file_access_time_as_integer()\n        creation_time = lnk_file.get_file_creation_time_as_integer()\n        modification_time = lnk_file.get_file_modification_time_as_integer()\n        event_data = WinLnkLinkEventData()\n        event_data.access_time = self._GetDateTime(access_time)\n        event_data.birth_droid_file_identifier = lnk_file.birth_droid_file_identifier\n        event_data.birth_droid_volume_identifier = lnk_file.birth_droid_volume_identifier\n        event_data.command_line_arguments = self._GetSanitizedPathString(lnk_file.command_line_arguments)\n        event_data.creation_time = self._GetDateTime(creation_time)\n        event_data.description = self._GetSanitizedPathString(lnk_file.description)\n        event_data.drive_serial_number = lnk_file.drive_serial_number\n        event_data.drive_type = lnk_file.drive_type\n        event_data.droid_file_identifier = lnk_file.droid_file_identifier\n        event_data.droid_volume_identifier = lnk_file.droid_volume_identifier\n        event_data.env_var_location = self._GetSanitizedPathString(lnk_file.environment_variables_location)\n        event_data.file_attribute_flags = lnk_file.file_attribute_flags\n        event_data.file_size = lnk_file.file_size\n        event_data.icon_location = self._GetSanitizedPathString(lnk_file.icon_location)\n        event_data.link_target = link_target\n        event_data.local_path = self._GetSanitizedPathString(lnk_file.local_path)\n        event_data.modification_time = self._GetDateTime(modification_time)\n        event_data.network_path = self._GetSanitizedPathString(lnk_file.network_path)\n        event_data.relative_path = self._GetSanitizedPathString(lnk_file.relative_path)\n        event_data.volume_label = lnk_file.volume_label\n        event_data.working_directory = self._GetSanitizedPathString(lnk_file.working_directory)\n        parser_mediator.ProduceEventData(event_data)\n        if lnk_file.droid_file_identifier:\n            try:\n                self._ParseDistributedTrackingIdentifier(parser_mediator, lnk_file.droid_file_identifier, display_name)\n            except (TypeError, ValueError) as exception:\n                parser_mediator.ProduceExtractionWarning('unable to read droid file identifier with error: {0!s}.'.format(exception))\n        if lnk_file.birth_droid_file_identifier and lnk_file.birth_droid_file_identifier != lnk_file.droid_file_identifier:\n            try:\n                self._ParseDistributedTrackingIdentifier(parser_mediator, lnk_file.birth_droid_file_identifier, display_name)\n            except (TypeError, ValueError) as exception:\n                parser_mediator.ProduceExtractionWarning('unable to read birth droid file identifier with error: {0!s}.'.format(exception))\n        lnk_file.close()\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass TimeFormatDetector:\n    '''Unified time format detection using multiple strategies.'''\n    @classmethod\n    def detect_from_cli(cls, args: Any) -> Optional[bool]:\n        '''Detect from CLI arguments.\n        Returns:\n            True for 12h format, False for 24h, None if not specified\n        '''\n        pass\n    @classmethod\n    def detect_from_timezone(cls, timezone_name: str) -> Optional[bool]:\n        '''Detect using Babel/timezone data.\n        Returns:\n            True for 12h format, False for 24h, None if cannot determine\n        '''\n        pass\n    @classmethod\n    def detect_from_locale(cls) -> bool:\n        '''Detect from system locale.\n        Returns:\n            True for 12h format, False for 24h\n        '''\n        pass\n    @classmethod\n    def detect_from_system(cls) -> str:\n        '''Platform-specific system detection.\n        Returns:\n            '12h' or '24h'\n        '''\n        pass\n    @classmethod\n    def get_preference(cls, args: Any=None, timezone_name: Optional[str]=None) -> bool:\n        '''Main entry point - returns True for 12h, False for 24h.'''\n        pass"
  }
]