[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass WeixinPayClient(Client):\n    '''\n    简化微信支付API操作\n    '''\n\n    def __init__(self, appid, pay_sign_key, pay_partner_id, pay_partner_key):\n        pass\n\n    def create_js_pay_package(self, **package):\n        '''\n        签名 pay package 需要的参数\n        详情请参考 支付开发文档\n        :param package: 需要签名的的参数\n        :return: 可以使用的packagestr\n        '''\n        pass\n\n    def create_js_pay_params(self, **package):\n        '''\n        签名 js 需要的参数\n        详情请参考 支付开发文档\n        ::\n            wxclient.create_js_pay_params(\n                body=标题, out_trade_no=本地订单号, total_fee=价格单位分,\n                notify_url=通知url,\n                spbill_create_ip=建议为支付人ip,\n            )\n        :param package: 需要签名的的参数\n        :return: 支付需要的对象\n        '''\n        pass\n\n    def create_js_edit_address_param(self, accesstoken, **params):\n        '''\n        alpha\n        暂时不建议使用\n        这个接口使用起来十分不友好\n        而且会引起巨大的误解\n        url 需要带上 code 和 state (url?code=xxx&state=1)\n        code 和state 是 oauth 时候回来的\n        token 要传用户的 token\n        这尼玛 你能相信这些支付接口都是腾讯出的？\n        '''\n        pass\n\n    def create_native_pay_url(self, productid):\n        '''\n        创建 native pay url\n        详情请参考 支付开发文档\n        :param productid: 本地商品ID\n        :return: 返回URL\n        '''\n        pass\n\n    def pay_deliver_notify(self, **deliver_info):\n        '''\n        通知 腾讯发货\n        一般形式 ::\n            wxclient.pay_delivernotify(\n                openid=openid,\n                transid=transaction_id,\n                out_trade_no=本地订单号,\n                deliver_timestamp=int(time.time()),\n                deliver_status=\"1\",\n                deliver_msg=\"ok\"\n            )\n        :param 需要签名的的参数\n        :return: 支付需要的对象\n        '''\n        pass\n\n    def pay_order_query(self, out_trade_no):\n        '''\n        查询订单状态\n        一般用于无法确定 订单状态时候补偿\n        :param out_trade_no: 本地订单号\n        :return: 订单信息dict\n        '''\n        pass\nCorresponding class implementation:\n\nfrom urllib import urlencode\nfrom hashlib import sha1, md5\nfrom functools import partial\nfrom werobot.utils import pay_sign_dict, generate_token\nfrom werobot.client import Client\nimport time\n\nclass WeixinPayClient(Client):\n    \"\"\"\n    简化微信支付API操作\n    \"\"\"\n\n    def __init__(self, appid, pay_sign_key, pay_partner_id, pay_partner_key):\n        self.pay_sign_key = pay_sign_key\n        self.pay_partner_id = pay_partner_id\n        self.pay_partner_key = pay_partner_key\n        self._pay_sign_dict = partial(pay_sign_dict, appid, pay_sign_key)\n        self._token = None\n        self.token_expires_at = None\n\n    def create_js_pay_package(self, **package):\n        \"\"\"\n        签名 pay package 需要的参数\n        详情请参考 支付开发文档\n\n        :param package: 需要签名的的参数\n        :return: 可以使用的packagestr\n        \"\"\"\n        assert self.pay_partner_id, 'PAY_PARTNER_ID IS EMPTY'\n        assert self.pay_partner_key, 'PAY_PARTNER_KEY IS EMPTY'\n        package.update({'partner': self.pay_partner_id})\n        package.setdefault('bank_type', 'WX')\n        package.setdefault('fee_type', '1')\n        package.setdefault('input_charset', 'UTF-8')\n        params = package.items()\n        params.sort()\n        sign = md5('&'.join(['%s=%s' % (str(p[0]), str(p[1])) for p in params + [('key', self.pay_partner_key)]])).hexdigest().upper()\n        return urlencode(params + [('sign', sign)])\n\n    def create_js_pay_params(self, **package):\n        \"\"\"\n        签名 js 需要的参数\n        详情请参考 支付开发文档\n\n        ::\n\n            wxclient.create_js_pay_params(\n                body=标题, out_trade_no=本地订单号, total_fee=价格单位分,\n                notify_url=通知url,\n                spbill_create_ip=建议为支付人ip,\n            )\n\n        :param package: 需要签名的的参数\n        :return: 支付需要的对象\n        \"\"\"\n        pay_param, sign, sign_type = self._pay_sign_dict(package=self.create_js_pay_package(**package))\n        pay_param['paySign'] = sign\n        pay_param['signType'] = sign_type\n        for key in ['appId', 'timeStamp', 'nonceStr']:\n            pay_param[key] = str(pay_param.pop(key.lower()))\n        return pay_param\n\n    def create_js_edit_address_param(self, accesstoken, **params):\n        \"\"\"\n        alpha\n        暂时不建议使用\n        这个接口使用起来十分不友好\n        而且会引起巨大的误解\n\n        url 需要带上 code 和 state (url?code=xxx&state=1)\n        code 和state 是 oauth 时候回来的\n\n        token 要传用户的 token\n\n        这尼玛 你能相信这些支付接口都是腾讯出的？\n        \"\"\"\n        params.update({'appId': self.appid, 'nonceStr': generate_token(8), 'timeStamp': int(time.time())})\n        _params = [(k.lower(), str(v)) for k, v in params.items()]\n        _params += [('accesstoken', accesstoken)]\n        _params.sort()\n        string1 = '&'.join(['%s=%s' % (p[0], p[1]) for p in _params])\n        sign = sha1(string1).hexdigest()\n        params = dict([(k, str(v)) for k, v in params.items()])\n        params['addrSign'] = sign\n        params['signType'] = 'sha1'\n        params['scope'] = params.get('scope', 'jsapi_address')\n        return params\n\n    def create_native_pay_url(self, productid):\n        \"\"\"\n        创建 native pay url\n        详情请参考 支付开发文档\n\n        :param productid: 本地商品ID\n        :return: 返回URL\n        \"\"\"\n        params, sign = self._pay_sign_dict(productid=productid)\n        params['sign'] = sign\n        return NATIVE_BASE_URL + urlencode(params)\n\n    def pay_deliver_notify(self, **deliver_info):\n        \"\"\"\n        通知 腾讯发货\n\n        一般形式 ::\n            wxclient.pay_delivernotify(\n                openid=openid,\n                transid=transaction_id,\n                out_trade_no=本地订单号,\n                deliver_timestamp=int(time.time()),\n                deliver_status=\"1\",\n                deliver_msg=\"ok\"\n            )\n\n        :param 需要签名的的参数\n        :return: 支付需要的对象\n        \"\"\"\n        params, sign, _ = self._pay_sign_dict(add_noncestr=False, add_timestamp=False, **deliver_info)\n        params['app_signature'] = sign\n        params['sign_method'] = 'sha1'\n        return self.post(url='https://api.weixin.qq.com/pay/delivernotify', data=params)\n\n    def pay_order_query(self, out_trade_no):\n        \"\"\"\n        查询订单状态\n        一般用于无法确定 订单状态时候补偿\n\n        :param out_trade_no: 本地订单号\n        :return: 订单信息dict\n        \"\"\"\n        package = {'partner': self.pay_partner_id, 'out_trade_no': out_trade_no}\n        _package = package.items()\n        _package.sort()\n        s = '&'.join(['%s=%s' % (p[0], str(p[1])) for p in _package + [('key', self.pay_partner_key)]])\n        package['sign'] = md5(s).hexdigest().upper()\n        package = '&'.join(['%s=%s' % (p[0], p[1]) for p in package.items()])\n        params, sign, _ = self._pay_sign_dict(add_noncestr=False, package=package)\n        params['app_signature'] = sign\n        params['sign_method'] = 'sha1'\n        return self.post(url='https://api.weixin.qq.com/pay/orderquery', data=params)\n\nExample skeleton:\n\n\nclass WeChatOA(BaseWeChatAPI):\n    '''\n    OA管理\n    https://work.weixin.qq.com/api/doc/90000/90135/90264\n    '''\n\n    def get_template_detail(self, template_id):\n        '''\n        查询审批模板的详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91982\n        :param template_id: 模板Id\n        :return:\n        '''\n        pass\n\n    def get_approval_info(self, start_time, end_time, cursor, size=100, filters=None):\n        '''\n        批量获取审批单号\n        https://work.weixin.qq.com/api/doc/90000/90135/91816\n        :param start_time: 开始时间戳\n        :param end_time: 结束时间戳，请求的参数endtime需要大于startime， 起始时间跨度不能超过31天；\n        :param cursor: 分页查询游标，默认为0，后续使用返回的next_cursor进行分页拉取\n        :param size: 一次请求拉取审批单数量，默认值为100，上限值为100\n        :param filters: 请自行查看文档\n        :return:\n        '''\n        pass\n\n    def get_approval_detail(self, sp_no):\n        '''\n        获取审批申请详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91983\n        :param sp_no: 审批单编号\n        :return:\n        '''\n        pass\n\n    def apply_event(self, creator_userid, template_id, use_template_approver, approver, apply_data, summary_list, notifyer=None, notify_type=None):\n        '''\n        提交审批申请，这个函数的参数比较复杂，具体请查看官方文档\n        https://work.weixin.qq.com/api/doc/90000/90135/91853\n        :param creator_userid: 申请人userid，此审批申请将以此员工身份提交，申请人需在应用可见范围内\n        :param template_id: 模板id。可在“获取审批申请详情”、“审批状态变化回调通知”中获得，也可在审批模板的模板编辑页面链接中获得。暂不支持通过接口提交[打卡补卡][调班]模板审批单。\n        :param use_template_approver: 审批人模式：0-通过接口指定审批人、抄送人（此时approver、notifyer等参数可用）; 1-使用此模板在管理后台设置的审批流程，支持条件审批。\n        :param approver: 具体参数查看官方文档，审批流程信息，用于指定审批申请的审批流程，支持单人审批、多人会签、多人或签，可能有多个审批节点，仅use_template_approver为0时生效。\n        :param apply_data: 具体参数查看官方文档，审批申请数据，可定义审批申请中各个控件的值，其中必填项必须有值，选填项可为空，数据结构同“获取审批申请详情”接口返回值中同名参数“apply_data”\n        :param summary_list: 具体参数查看官方文档，摘要信息，用于显示在审批通知卡片、审批列表的摘要信息，最多3行\n        :param notifyer: 抄送人节点userid列表，仅use_template_approver为0时生效。\n        :param notify_type: 抄送方式：1-提单时抄送（默认值）； 2-单据通过后抄送；3-提单和单据通过后抄送。仅use_template_approver为0时生效。\n        :return:\n        '''\n        pass\n\n    def get_dial_record(self, start_time: Optional[int]=None, end_time: Optional[int]=None, offset: int=0, limit: int=100) -> dict:\n        '''\n        获取公费电话拨打记录\n        https://work.weixin.qq.com/api/doc/90000/90135/90267\n        企业可通过此接口，按时间范围拉取成功接通的公费电话拨打记录。\n        请注意，查询的时间范围为[start_time,end_time]，即前后均为闭区间。在两个参数都\n        指定了的情况下，结束时间不得小于开始时间，开始时间也不得早于当前时间，否则会返回\n        600018错误码(无效的起止时间)。\n        受限于网络传输，起止时间的最大跨度为30天，如超过30天，则以结束时间为基准向前取\n        30天进行查询。\n        如果未指定起止时间，则默认查询最近30天范围内数据。\n        :param start_time: 查询的起始时间戳\n        :param end_time: 查询的结束时间戳\n        :param offset: 分页查询的偏移量\n        :param limit: 分页查询的每页大小,默认为100条，如该参数大于100则按100处理\n        :return: 公费电话拨打记录\n        '''\n        pass\n\n    def get_checkin_data(self, data_type: int, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡数据\n        https://work.weixin.qq.com/api/doc/90000/90135/90262\n        - 获取记录时间跨度不超过30天\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 有打卡记录即可获取打卡数据，与当前”打卡应用”是否开启无关\n        :param data_type: 打卡类型。1：上下班打卡；2：外出打卡；3：全部打卡\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 需要获取打卡记录的用户列表\n        :return: 打卡数据\n        '''\n        pass\n\n    def get_checkin_daydata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡日报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n        - 接口调用频率限制为100次/分钟\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取日报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        '''\n        pass\n\n    def get_checkin_monthdata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡月报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n        - 接口调用频率限制为100次/分钟\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取月报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        '''\n        pass\n\n    def get_corp_checkin_option(self):\n        '''\n        获取企业所有打卡规则\n        https://developer.work.weixin.qq.com/document/path/93384\n        '''\n        pass\n\n    def get_checkin_option(self, datetime: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡规则\n        https://work.weixin.qq.com/api/doc/90000/90135/90263\n        - 用户列表不超过100个，若用户超过100个，请分批获取。\n        - 用户在不同日期的规则不一定相同，请按天获取。\n        :param datetime: 需要获取规则的日期当天0点的Unix时间戳\n        :param userid_list: 需要获取打卡规则的用户列表\n        :return: 打卡规则\n        '''\n        pass\n\n    def get_checkin_schedu_list(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡人员排班信息\n        https://developer.work.weixin.qq.com/document/path/93380\n        :param start_time: 获取排班信息的开始时间。Unix时间戳\n        :param end_time: 获取排班信息的结束时间。Unix时间戳（与 start_time 跨度不超过一个月）\n        :param userid_list: 需要获取排班信息的用户列表（不超过100个）\n        :return: 排班信息\n        '''\n        pass\n\n    def set_checkin_schedu_list(self, group_id: int, items: list, yearmonth: int) -> dict:\n        '''\n        为打卡人员排班\n        https://developer.work.weixin.qq.com/document/path/93385\n        :param group_id: 打卡规则的规则 id，可通过“获取打卡规则”、“获取打卡数据”、“获取打卡人员排班信息”等相关接口获取\n        :param items: 排班表信息，字典结构，包含 userid，day，schedule_id 三个字段\n                    - userid: 打卡人员userid\n                    - day: 要设置的天日期，取值在1-31之间。联合 yearmonth 组成唯一日期 比如20201205\n                    - schedule_id: 对应 groupid 规则下的班次 id，通过预先拉取规则信息获取，0 代表休息\n        :param yearmonth: 排班表月份，格式为年月，如202011\n        '''\n        pass\n\n    def add_checkin_userface(self, user_id: str, user_face: str) -> dict:\n        '''\n        录入打卡人员人脸信息\n        https://developer.work.weixin.qq.com/document/path/93378\n        :param user_id: 需要录入的用户id\n        :param user_face: 需要录入的人脸图片数据，需要将图片数据base64处理后填入，对已录入的人脸会进行更新处理\n        '''\n        pass\n\n    def get_hardware_checkin_data(self, start_time: int, end_time: int, userid_list: List[str], filter_type: int=1) -> dict:\n        '''\n        获取设备打卡数据\n        https://developer.work.weixin.qq.com/document/path/94126\n        :param filter_type: 过滤类型，1 表示按打卡时间过滤，2 表示按设备上传打卡记录的时间过滤，默认值是 1\n        :param start_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的开始时间；当 filter_type 为 2 时，表示设备上传记录的开始时间\n        :param end_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的结束时间；当 filter_type 为 2 时，表示设备上传记录的结束时间\n        :param userid_list: 需要获取打卡记录的用户列表（不超过100个）\n        - 获取记录时间跨度不超过一个月\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 获取的是通过考勤设备打卡的原始记录，不包含企业微信app手机打卡的记录\n        - userid无效时，忽略该参数，不报错\n        '''\n        pass\n\n    def get_open_approval_data(self, third_no: str) -> dict:\n        '''\n        查询自建应用审批单当前状态\n        https://work.weixin.qq.com/api/doc/90000/90135/90269\n        :param third_no: 开发者发起申请时定义的审批单号\n        :return: 审批单的当前审批状态\n        '''\n        pass\n\n    def get_journal_record_list(self, start_time: int, end_time: int, cursor: int, limit: int, filters=None) -> dict:\n        '''\n        批量获取汇报记录单号\n        https://developer.work.weixin.qq.com/document/path/93393\n        :param start_time: 开始时间\n        :param end_time: 结束时间,开始时间和结束时间间隔不能超过一个月\n        :param cursor: 游标首次请求传0，非首次请求携带上一次请求返回的next_cursor\n        :param limit: 拉取条数\n        :param filters: 过滤条件\n        '''\n        pass\n\n    def get_journal_record_detail(self, journal_uuid: str) -> dict:\n        '''\n        获取汇报记录详情\n        https://developer.work.weixin.qq.com/document/path/93394\n        :param journal_uuid: 汇报记录单号\n        '''\n        pass\n\n    def get_journal_stat_list(self, start_time: int, end_time: int, template_id: str) -> dict:\n        '''\n        获取汇报统计数据\n        https://developer.work.weixin.qq.com/document/path/93395\n        :param start_time: 开始时间\n        :param end_time: 结束时间，时间区间最大长度为一年\n        :param template_id: 汇报表单id\n        '''\n        pass\n\n    def add_meetingroom(self, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        '''\n        添加会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        '''\n        pass\n\n    def get_meetingroom_list(self, city: str=None, building: str=None, floor: str=None, equipment: list=None):\n        '''\n        查询会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        '''\n        pass\n\n    def edit_meetingroom(self, meetingroom_id: int, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        '''\n        编辑会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        :param meetingroom_id: 会议室的id\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        '''\n        pass\n\n    def delete_meetingroom(self, meetingroom_id: int) -> dict:\n        '''\n        删除会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        '''\n        pass\n\n    def get_meetingroom_booking_info(self, meetingroom_id: int=None, start_time: int=None, end_time: int=None, city: str=None, building: str=None, floor: str=None) -> dict:\n        '''\n        查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要根据位置信息查询，则需要保证其上一级的位置信息已填写，即如需使用楼宇进行过滤，则必须同时填写城市字段。\n        :param meetingroom_id: 会议室id\n        :param start_time: 查询预定的起始时间，默认为当前时间\n        :param end_time: 查询预定的结束时间， 默认为明日0时\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        '''\n        pass\n\n    def book_meetingroom(self, meetingroom_id: int, start_time: int, end_time: int, booker: str, subject: str=None, attendees: list=None) -> dict:\n        '''\n        预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        :param meetingroom_id: 会议室id\n        :param start_time: 预定开始时间\n        :param end_time: 预定结束时间\n        :param booker: 预定人的userid\n        :param subject: 会议主题\n        :param attendees: 参与人的userid列表\n        '''\n        pass\n\n    def cancle_meetingroom_book(self, meeting_id: str, keep_schedule=None) -> dict:\n        '''\n        取消预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        :param meeting_id: 会议的id\n        :param keep_schedule: 是否保留日程，0-同步删除 1-保留\n        '''\n        pass\n\n    def get_booking_info_by_meeting_id(self, meetingroom_id: int, meeting_id: str) -> dict:\n        '''\n        根据会议ID查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n        :param meetingroom_id: 会议室id\n        :param meeting_id: 会议的id\n        '''\n        pass\nCorresponding class implementation:\n\nfrom typing import List, Optional\nfrom wechatpy.client.api.base import BaseWeChatAPI\nfrom optionaldict import optionaldict\n\nclass WeChatOA(BaseWeChatAPI):\n    \"\"\"\n    OA管理\n\n    https://work.weixin.qq.com/api/doc/90000/90135/90264\n    \"\"\"\n\n    def get_template_detail(self, template_id):\n        \"\"\"\n        查询审批模板的详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91982\n\n        :param template_id: 模板Id\n        :return:\n        \"\"\"\n        data = {'template_id': template_id}\n        return self._post('oa/gettemplatedetail', data=data)\n\n    def get_approval_info(self, start_time, end_time, cursor, size=100, filters=None):\n        \"\"\"\n        批量获取审批单号\n        https://work.weixin.qq.com/api/doc/90000/90135/91816\n\n        :param start_time: 开始时间戳\n        :param end_time: 结束时间戳，请求的参数endtime需要大于startime， 起始时间跨度不能超过31天；\n        :param cursor: 分页查询游标，默认为0，后续使用返回的next_cursor进行分页拉取\n        :param size: 一次请求拉取审批单数量，默认值为100，上限值为100\n        :param filters: 请自行查看文档\n        :return:\n        \"\"\"\n        data = optionaldict({'starttime': str(start_time), 'endtime': str(end_time), 'cursor': cursor, 'size': size, 'filters': filters})\n        return self._post('oa/getapprovalinfo', data=data)\n\n    def get_approval_detail(self, sp_no):\n        \"\"\"\n        获取审批申请详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91983\n\n        :param sp_no: 审批单编号\n        :return:\n        \"\"\"\n        data = {'sp_no': sp_no}\n        return self._post('oa/getapprovaldetail', data=data)\n\n    def apply_event(self, creator_userid, template_id, use_template_approver, approver, apply_data, summary_list, notifyer=None, notify_type=None):\n        \"\"\"\n        提交审批申请，这个函数的参数比较复杂，具体请查看官方文档\n        https://work.weixin.qq.com/api/doc/90000/90135/91853\n\n        :param creator_userid: 申请人userid，此审批申请将以此员工身份提交，申请人需在应用可见范围内\n        :param template_id: 模板id。可在“获取审批申请详情”、“审批状态变化回调通知”中获得，也可在审批模板的模板编辑页面链接中获得。暂不支持通过接口提交[打卡补卡][调班]模板审批单。\n        :param use_template_approver: 审批人模式：0-通过接口指定审批人、抄送人（此时approver、notifyer等参数可用）; 1-使用此模板在管理后台设置的审批流程，支持条件审批。\n        :param approver: 具体参数查看官方文档，审批流程信息，用于指定审批申请的审批流程，支持单人审批、多人会签、多人或签，可能有多个审批节点，仅use_template_approver为0时生效。\n        :param apply_data: 具体参数查看官方文档，审批申请数据，可定义审批申请中各个控件的值，其中必填项必须有值，选填项可为空，数据结构同“获取审批申请详情”接口返回值中同名参数“apply_data”\n        :param summary_list: 具体参数查看官方文档，摘要信息，用于显示在审批通知卡片、审批列表的摘要信息，最多3行\n        :param notifyer: 抄送人节点userid列表，仅use_template_approver为0时生效。\n        :param notify_type: 抄送方式：1-提单时抄送（默认值）； 2-单据通过后抄送；3-提单和单据通过后抄送。仅use_template_approver为0时生效。\n        :return:\n        \"\"\"\n        data = optionaldict({'creator_userid': creator_userid, 'template_id': template_id, 'use_template_approver': use_template_approver, 'approver': approver, 'notifyer': notifyer, 'notify_type': notify_type, 'apply_data': apply_data, 'summary_list': summary_list})\n        return self._post('oa/applyevent', data=data)\n\n    def get_dial_record(self, start_time: Optional[int]=None, end_time: Optional[int]=None, offset: int=0, limit: int=100) -> dict:\n        \"\"\"\n        获取公费电话拨打记录\n        https://work.weixin.qq.com/api/doc/90000/90135/90267\n\n        企业可通过此接口，按时间范围拉取成功接通的公费电话拨打记录。\n\n        请注意，查询的时间范围为[start_time,end_time]，即前后均为闭区间。在两个参数都\n        指定了的情况下，结束时间不得小于开始时间，开始时间也不得早于当前时间，否则会返回\n        600018错误码(无效的起止时间)。\n\n        受限于网络传输，起止时间的最大跨度为30天，如超过30天，则以结束时间为基准向前取\n        30天进行查询。\n\n        如果未指定起止时间，则默认查询最近30天范围内数据。\n\n        :param start_time: 查询的起始时间戳\n        :param end_time: 查询的结束时间戳\n        :param offset: 分页查询的偏移量\n        :param limit: 分页查询的每页大小,默认为100条，如该参数大于100则按100处理\n        :return: 公费电话拨打记录\n        \"\"\"\n        if start_time and end_time and (end_time <= start_time):\n            raise ValueError('the end time must be greater than the beginning time')\n        data = {'start_time': start_time, 'end_time': end_time, 'offset': offset, 'limit': limit}\n        return self._post('dial/get_dial_record', data=data)\n\n    def get_checkin_data(self, data_type: int, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡数据\n        https://work.weixin.qq.com/api/doc/90000/90135/90262\n\n        - 获取记录时间跨度不超过30天\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 有打卡记录即可获取打卡数据，与当前”打卡应用”是否开启无关\n\n        :param data_type: 打卡类型。1：上下班打卡；2：外出打卡；3：全部打卡\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 需要获取打卡记录的用户列表\n        :return: 打卡数据\n        \"\"\"\n        checkin_data_type = {1: '上下班打卡', 2: '外出打卡', 3: '全部打卡'}\n        if data_type not in checkin_data_type:\n            raise ValueError(f'data_type must be in {list(checkin_data_type.keys())}')\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'opencheckindatatype': data_type, 'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckindata', data=data)\n\n    def get_checkin_daydata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡日报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n\n        - 接口调用频率限制为100次/分钟\n\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取日报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckin_daydata', data=data)\n\n    def get_checkin_monthdata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡月报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n\n        - 接口调用频率限制为100次/分钟\n\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取月报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckin_monthdata', data=data)\n\n    def get_corp_checkin_option(self):\n        \"\"\"\n        获取企业所有打卡规则\n        https://developer.work.weixin.qq.com/document/path/93384\n        \"\"\"\n        return self._post('checkin/getcorpcheckinoption')\n\n    def get_checkin_option(self, datetime: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡规则\n        https://work.weixin.qq.com/api/doc/90000/90135/90263\n\n        - 用户列表不超过100个，若用户超过100个，请分批获取。\n        - 用户在不同日期的规则不一定相同，请按天获取。\n\n        :param datetime: 需要获取规则的日期当天0点的Unix时间戳\n        :param userid_list: 需要获取打卡规则的用户列表\n        :return: 打卡规则\n        \"\"\"\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'datetime': datetime, 'useridlist': userid_list}\n        return self._post('checkin/getcheckinoption', data=data)\n\n    def get_checkin_schedu_list(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡人员排班信息\n        https://developer.work.weixin.qq.com/document/path/93380\n\n        :param start_time: 获取排班信息的开始时间。Unix时间戳\n        :param end_time: 获取排班信息的结束时间。Unix时间戳（与 start_time 跨度不超过一个月）\n        :param userid_list: 需要获取排班信息的用户列表（不超过100个）\n        :return: 排班信息\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if end_time - start_time > 31 * 86400:\n            raise ValueError('the difference between the start_time and the end_time cannot be more than one month')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckinschedulist', data=data)\n\n    def set_checkin_schedu_list(self, group_id: int, items: list, yearmonth: int) -> dict:\n        \"\"\"\n        为打卡人员排班\n        https://developer.work.weixin.qq.com/document/path/93385\n\n        :param group_id: 打卡规则的规则 id，可通过“获取打卡规则”、“获取打卡数据”、“获取打卡人员排班信息”等相关接口获取\n        :param items: 排班表信息，字典结构，包含 userid，day，schedule_id 三个字段\n                    - userid: 打卡人员userid\n                    - day: 要设置的天日期，取值在1-31之间。联合 yearmonth 组成唯一日期 比如20201205\n                    - schedule_id: 对应 groupid 规则下的班次 id，通过预先拉取规则信息获取，0 代表休息\n        :param yearmonth: 排班表月份，格式为年月，如202011\n        \"\"\"\n        data = {'groupid': group_id, 'items': items, 'yearmonth': yearmonth}\n        return self._post('checkin/setcheckinschedulist', data=data)\n\n    def add_checkin_userface(self, user_id: str, user_face: str) -> dict:\n        \"\"\"\n        录入打卡人员人脸信息\n        https://developer.work.weixin.qq.com/document/path/93378\n\n        :param user_id: 需要录入的用户id\n        :param user_face: 需要录入的人脸图片数据，需要将图片数据base64处理后填入，对已录入的人脸会进行更新处理\n        \"\"\"\n        data = {'userid': user_id, 'userface': user_face}\n        return self._post('checkin/addcheckinuserface', data=data)\n\n    def get_hardware_checkin_data(self, start_time: int, end_time: int, userid_list: List[str], filter_type: int=1) -> dict:\n        \"\"\"\n        获取设备打卡数据\n        https://developer.work.weixin.qq.com/document/path/94126\n\n        :param filter_type: 过滤类型，1 表示按打卡时间过滤，2 表示按设备上传打卡记录的时间过滤，默认值是 1\n        :param start_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的开始时间；当 filter_type 为 2 时，表示设备上传记录的开始时间\n        :param end_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的结束时间；当 filter_type 为 2 时，表示设备上传记录的结束时间\n        :param userid_list: 需要获取打卡记录的用户列表（不超过100个）\n\n        - 获取记录时间跨度不超过一个月\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 获取的是通过考勤设备打卡的原始记录，不包含企业微信app手机打卡的记录\n        - userid无效时，忽略该参数，不报错\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if end_time - start_time > 31 * 86400:\n            raise ValueError('the difference between the start_time and the end_time cannot be more than one month')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        if filter_type not in {1, 2}:\n            raise ValueError('Unsupported filter_type. Valid filter_type are 1 or 2')\n        data = {'filter_type': filter_type, 'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('hardware/get_hardware_checkin_data', data=data)\n\n    def get_open_approval_data(self, third_no: str) -> dict:\n        \"\"\"\n        查询自建应用审批单当前状态\n        https://work.weixin.qq.com/api/doc/90000/90135/90269\n\n        :param third_no: 开发者发起申请时定义的审批单号\n        :return: 审批单的当前审批状态\n        \"\"\"\n        data = {'thirdNo': third_no}\n        return self._post('corp/getopenapprovaldata', data=data)\n\n    def get_journal_record_list(self, start_time: int, end_time: int, cursor: int, limit: int, filters=None) -> dict:\n        \"\"\"\n        批量获取汇报记录单号\n        https://developer.work.weixin.qq.com/document/path/93393\n\n        :param start_time: 开始时间\n        :param end_time: 结束时间,开始时间和结束时间间隔不能超过一个月\n        :param cursor: 游标首次请求传0，非首次请求携带上一次请求返回的next_cursor\n        :param limit: 拉取条数\n        :param filters: 过滤条件\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if end_time - start_time > 31 * 86400:\n            raise ValueError('the difference between the start_time and the end_time cannot be more than one month')\n        data = {'starttime': start_time, 'endtime': end_time, 'cursor': cursor, 'limit': limit}\n        if filters:\n            data['filters'] = filters\n        return self._post('oa/journal/get_record_list', data=data)\n\n    def get_journal_record_detail(self, journal_uuid: str) -> dict:\n        \"\"\"\n        获取汇报记录详情\n        https://developer.work.weixin.qq.com/document/path/93394\n\n        :param journal_uuid: 汇报记录单号\n        \"\"\"\n        return self._post('oa/journal/get_record_detail', data={'journaluuid': journal_uuid})\n\n    def get_journal_stat_list(self, start_time: int, end_time: int, template_id: str) -> dict:\n        \"\"\"\n        获取汇报统计数据\n        https://developer.work.weixin.qq.com/document/path/93395\n\n        :param start_time: 开始时间\n        :param end_time: 结束时间，时间区间最大长度为一年\n        :param template_id: 汇报表单id\n        \"\"\"\n        data = {'template_id': template_id, 'starttime': start_time, 'endtime': end_time}\n        return self._post('oa/journal/get_stat_list', data=data)\n\n    def add_meetingroom(self, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        \"\"\"\n        添加会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        \"\"\"\n        data = {'name': name, 'capacity': capacity}\n        if all([city, building, floor]):\n            data['city'] = city\n            data['building'] = building\n            data['floor'] = floor\n        if equipment:\n            data['equipment'] = equipment\n        if latitude and longitude:\n            data['coordinate'] = {'latitude': latitude, 'longitude': longitude}\n        return self._post('oa/meetingroom/add', data=data)\n\n    def get_meetingroom_list(self, city: str=None, building: str=None, floor: str=None, equipment: list=None):\n        \"\"\"\n        查询会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        \"\"\"\n        data = {'city': city, 'building': building, 'floor': floor, 'equipment': equipment}\n        data = {k: v for k, v in data.items() if v is not None}\n        return self._post('oa/meetingroom/list', data=data)\n\n    def edit_meetingroom(self, meetingroom_id: int, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        \"\"\"\n        编辑会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n\n        :param meetingroom_id: 会议室的id\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'name': name, 'capacity': capacity}\n        if all([city, building, floor]):\n            data['city'] = city\n            data['building'] = building\n            data['floor'] = floor\n        if equipment:\n            data['equipment'] = equipment\n        if latitude and longitude:\n            data['coordinate'] = {'latitude': latitude, 'longitude': longitude}\n        return self._post('oa/meetingroom/edit', data=data)\n\n    def delete_meetingroom(self, meetingroom_id: int) -> dict:\n        \"\"\"\n        删除会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        \"\"\"\n        return self._post('oa/meetingroom/del', data={'meetingroom_id': meetingroom_id})\n\n    def get_meetingroom_booking_info(self, meetingroom_id: int=None, start_time: int=None, end_time: int=None, city: str=None, building: str=None, floor: str=None) -> dict:\n        \"\"\"\n        查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要根据位置信息查询，则需要保证其上一级的位置信息已填写，即如需使用楼宇进行过滤，则必须同时填写城市字段。\n\n        :param meetingroom_id: 会议室id\n        :param start_time: 查询预定的起始时间，默认为当前时间\n        :param end_time: 查询预定的结束时间， 默认为明日0时\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'start_time': start_time, 'end_time': end_time, 'city': city, 'building': building, 'floor': floor}\n        data = {k: v for k, v in data.items() if v is not None}\n        return self._post('oa/meetingroom/get_booking_info', data=data)\n\n    def book_meetingroom(self, meetingroom_id: int, start_time: int, end_time: int, booker: str, subject: str=None, attendees: list=None) -> dict:\n        \"\"\"\n        预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        :param meetingroom_id: 会议室id\n        :param start_time: 预定开始时间\n        :param end_time: 预定结束时间\n        :param booker: 预定人的userid\n        :param subject: 会议主题\n        :param attendees: 参与人的userid列表\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'start_time': start_time, 'end_time': end_time, 'booker': booker}\n        if subject:\n            data['subject'] = subject\n        if attendees:\n            data['attendees'] = attendees\n        return self._post('oa/meetingroom/book', data=data)\n\n    def cancle_meetingroom_book(self, meeting_id: str, keep_schedule=None) -> dict:\n        \"\"\"\n        取消预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        :param meeting_id: 会议的id\n        :param keep_schedule: 是否保留日程，0-同步删除 1-保留\n        \"\"\"\n        data = {'meeting_id': meeting_id}\n        if keep_schedule is not None:\n            data['keep_schedule'] = keep_schedule\n        return self._post('oa/meetingroom/cancel_book', data=data)\n\n    def get_booking_info_by_meeting_id(self, meetingroom_id: int, meeting_id: str) -> dict:\n        \"\"\"\n        根据会议ID查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        :param meetingroom_id: 会议室id\n        :param meeting_id: 会议的id\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'meeting_id': meeting_id}\n        return self._post('oa/meetingroom/get_booking_info_by_meeting_id', data=data)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass BasePlugin:\n    '''\n    插件基类。插件需继承此类，并实现 register_frontend, register_backend 方法。\n    '''\n\n    def register_frontend(self, register_func: Callable[[str, str], None]):\n        '''\n        注册前端内容。register_func(路由, 文件路径)\n        '''\n        pass\n\n    def register_backend(self, app):\n        '''\n        注册后端路由。app为后端框架实例（如Flask/FastAPI等）\n        '''\n        pass"
  }
]