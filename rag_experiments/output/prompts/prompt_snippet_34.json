[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass AttributeTypes(ObjectCollectionABC):\n    '''AttributeTypes Collection.\n    # Example of params input\n    {\n        \"result_limit\": 100,  # Limit the retrieved results.\n        \"result_start\": 10,  # Starting count used for pagination.\n        \"fields\": [\"caseId\", \"summary\"]  # Select additional return fields.\n    }\n    Args:\n        session (Session): Session object configured with TC API Auth.\n        tql_filters (list): List of TQL filters.\n        params (dict): Additional query params (see example above).\n    '''\n\n    def __init__(self, **kwargs):\n        '''Initialize instance properties.'''\n        pass\n\n    def __iter__(self) -> Iterator[AttributeType]:\n        '''Return CM objects.'''\n        pass\n    @property\n    def _api_endpoint(self) -> str:\n        '''Return the type specific API endpoint.'''\n        pass\n    @property\n    def filter(self) -> AttributeTypeFilter:\n        '''Return the type specific filter object.'''\n        pass\nCorresponding class implementation:\n\nfrom tcex.api.tc.v3.object_collection_abc import ObjectCollectionABC\nfrom tcex.api.tc.v3.attribute_types.attribute_type_filter import AttributeTypeFilter\nfrom tcex.api.tc.v3.api_endpoints import ApiEndpoints\nfrom tcex.api.tc.v3.attribute_types.attribute_type_model import AttributeTypeModel, AttributeTypesModel\nfrom collections.abc import Iterator\n\nclass AttributeTypes(ObjectCollectionABC):\n    \"\"\"AttributeTypes Collection.\n\n    # Example of params input\n    {\n        \"result_limit\": 100,  # Limit the retrieved results.\n        \"result_start\": 10,  # Starting count used for pagination.\n        \"fields\": [\"caseId\", \"summary\"]  # Select additional return fields.\n    }\n\n    Args:\n        session (Session): Session object configured with TC API Auth.\n        tql_filters (list): List of TQL filters.\n        params (dict): Additional query params (see example above).\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize instance properties.\"\"\"\n        super().__init__(kwargs.pop('session', None), kwargs.pop('tql_filter', None), kwargs.pop('params', None))\n        self._model = AttributeTypesModel(**kwargs)\n        self.type_ = 'attribute_types'\n\n    def __iter__(self) -> Iterator[AttributeType]:\n        \"\"\"Return CM objects.\"\"\"\n        return self.iterate(base_class=AttributeType)\n\n    @property\n    def _api_endpoint(self) -> str:\n        \"\"\"Return the type specific API endpoint.\"\"\"\n        return ApiEndpoints.ATTRIBUTE_TYPES.value\n\n    @property\n    def filter(self) -> AttributeTypeFilter:\n        \"\"\"Return the type specific filter object.\"\"\"\n        return AttributeTypeFilter(self.tql)\n\nExample skeleton:\n\n\nclass OutputSTACMixin:\n    '''Adds STAC related features.'''\n    @property\n    def stac_path(self) -> MPath:\n        '''Return path to STAC JSON file.'''\n        pass\n    @property\n    def stac_item_id(self) -> str:\n        '''\n        Return STAC item ID according to configuration.\n        Defaults to path basename.\n        '''\n        pass\n    @property\n    def stac_item_metadata(self):\n        '''Custom STAC metadata.'''\n        pass\n    @property\n    def stac_asset_type(self):\n        '''Asset MIME type.'''\n        pass\nCorresponding class implementation:\n\nfrom mapchete.path import MPath\n\nclass OutputSTACMixin:\n    \"\"\"Adds STAC related features.\"\"\"\n    path: MPath\n    output_params: dict\n\n    @property\n    def stac_path(self) -> MPath:\n        \"\"\"Return path to STAC JSON file.\"\"\"\n        return self.path / f'{self.stac_item_id}.json'\n\n    @property\n    def stac_item_id(self) -> str:\n        \"\"\"\n        Return STAC item ID according to configuration.\n\n        Defaults to path basename.\n        \"\"\"\n        return self.output_params.get('stac', {}).get('id') or self.path.stem\n\n    @property\n    def stac_item_metadata(self):\n        \"\"\"Custom STAC metadata.\"\"\"\n        return self.output_params.get('stac', {})\n\n    @property\n    def stac_asset_type(self):\n        \"\"\"Asset MIME type.\"\"\"\n        raise ValueError('no MIME type set for this output')\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass AdaptiveColorScheme:\n    '''Scientifically-based adaptive color schemes with proper contrast ratios.\n    IMPORTANT: This only changes FONT/FOREGROUND colors, never background colors.\n    The terminal's background remains unchanged - we adapt text colors for readability.\n    All color choices follow WCAG AA accessibility standards for contrast ratios.\n    '''\n    @staticmethod\n    def get_light_background_theme() -> Theme:\n        '''Font colors optimized for light terminal backgrounds (WCAG AA+ contrast).'''\n        pass\n    @staticmethod\n    def get_dark_background_theme() -> Theme:\n        '''Font colors optimized for dark terminal backgrounds (WCAG AA+ contrast).'''\n        pass\n    @staticmethod\n    def get_classic_theme() -> Theme:\n        '''Classic colors for maximum compatibility.'''\n        pass"
  }
]