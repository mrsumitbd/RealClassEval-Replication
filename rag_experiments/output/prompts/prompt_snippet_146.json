[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass PlatformUtility:\n    '''\n    Provides an easy way to get the current platform.\n    '''\n    @staticmethod\n    def get() -> str:\n        '''\n        Returns the current platform.\n        '''\n        pass\n    @classmethod\n    def is_cygwin(cls) -> bool:\n        '''\n        Checks if the current platform is in our cygwin list.\n        '''\n        pass\n    @classmethod\n    def is_windows(cls) -> bool:\n        '''\n        Checks if the current platform is in our windows list.\n        '''\n        pass\n    @classmethod\n    def is_unix(cls) -> bool:\n        '''\n        Checks if the current platform is in our unix list.\n        '''\n        pass\n    @classmethod\n    def is_mac_os(cls) -> bool:\n        '''\n        Checks if the current platform is in our OSX list.\n        '''\n        pass\nCorresponding class implementation:\n\nimport platform\n\nclass PlatformUtility:\n    \"\"\"\n    Provides an easy way to get the current platform.\n    \"\"\"\n    WINDOWS: list = ['windows']\n    '\\n    Provides the list of supported windows platform.\\n    '\n    CYGWIN: list = ['cygwin', 'cygwin_nt-10.0']\n    '\\n    Provides the list of supporter cygwin platform.\\n    '\n    UNIX: list = ['linux', 'darwin']\n    '\\n    Provides the list of supported unix platform.\\n    '\n    MAC: list = ['darwin']\n    '\\n    Provides the list of supported MAC platform.\\n    '\n\n    @staticmethod\n    def get() -> str:\n        \"\"\"\n        Returns the current platform.\n        \"\"\"\n        return platform.system().lower()\n\n    @classmethod\n    def is_cygwin(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our cygwin list.\n        \"\"\"\n        current_platform = cls.get()\n        return any((x in current_platform for x in cls.CYGWIN))\n\n    @classmethod\n    def is_windows(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our windows list.\n        \"\"\"\n        return cls.get() in cls.WINDOWS or cls.is_cygwin()\n\n    @classmethod\n    def is_unix(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our unix list.\n        \"\"\"\n        return cls.get() in cls.UNIX\n\n    @classmethod\n    def is_mac_os(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our OSX list.\n        \"\"\"\n        return cls.get() in cls.MAC\n\nExample skeleton:\n\n\nclass Scheduler:\n    '''\n    Class representation of a Nylas Scheduler API.\n    '''\n\n    def __init__(self, http_client):\n        pass\n    @property\n    def configurations(self) -> Configurations:\n        '''\n        Access the Configurations API.\n        Returns:\n            The Configurations API.\n        '''\n        pass\n    @property\n    def bookings(self) -> Bookings:\n        '''\n        Access the Bookings API.\n        Returns:\n            The Bookings API.\n        '''\n        pass\n    @property\n    def sessions(self) -> Sessions:\n        '''\n        Access the Sessions API.\n        Returns:\n            The Sessions API.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom nylas.resources.sessions import Sessions\nfrom nylas.resources.bookings import Bookings\nfrom nylas.resources.configurations import Configurations\n\nclass Scheduler:\n    \"\"\"\n    Class representation of a Nylas Scheduler API.\n    \"\"\"\n\n    def __init__(self, http_client):\n        self.http_client = http_client\n\n    @property\n    def configurations(self) -> Configurations:\n        \"\"\"\n        Access the Configurations API.\n\n        Returns:\n            The Configurations API.\n        \"\"\"\n        return Configurations(self.http_client)\n\n    @property\n    def bookings(self) -> Bookings:\n        \"\"\"\n        Access the Bookings API.\n\n        Returns:\n            The Bookings API.\n        \"\"\"\n        return Bookings(self.http_client)\n\n    @property\n    def sessions(self) -> Sessions:\n        \"\"\"\n        Access the Sessions API.\n\n        Returns:\n            The Sessions API.\n        \"\"\"\n        return Sessions(self.http_client)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass PIILeakageTemplate:\n    '''\n    PIILeakageTemplate class for generating baseline PII (Personally Identifiable Information) leakage attack prompts\n    across different categories: direct disclosure, database access, social manipulation, and session leak.\n    '''\n    @staticmethod\n    def generate_baseline_attacks(vulnerability_type: PIILeakageType, max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate baseline attack prompts for PII leakage vulnerabilities based on the specific type.\n        '''\n        pass\n    @staticmethod\n    def generate_direct_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate a prompt for Direct-PII leakage vulnerabilities.\n        '''\n        pass\n    @staticmethod\n    def generate_database_access_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate a prompt for Database-access PII leakage vulnerabilities.\n        '''\n        pass\n    @staticmethod\n    def generate_social_manipulation_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate a prompt for Social-manipulation PII leakage vulnerabilities.\n        '''\n        pass\n    @staticmethod\n    def generate_session_leak_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate a prompt for Session-leak PII vulnerabilities.\n        '''\n        pass"
  }
]