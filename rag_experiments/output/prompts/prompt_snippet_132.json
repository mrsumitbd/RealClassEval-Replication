[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass Cylinder(Mesh):\n    '''\n    Build a cylinder of specified height and radius.\n    '''\n\n    def __init__(self, pos=(0, 0, 0), r=1.0, height=2.0, axis=(0, 0, 1), cap=True, res=24, c='teal3', alpha=1.0) -> None:\n        '''\n        Build a cylinder of specified height and radius `r`, centered at `pos`.\n        If `pos` is a list of 2 points, e.g. `pos=[v1, v2]`, build a cylinder with base\n        centered at `v1` and top at `v2`.\n        Arguments:\n            cap : (bool)\n                enable/disable the caps of the cylinder\n            res : (int)\n                resolution of the cylinder sides\n        ![](https://raw.githubusercontent.com/lorensen/VTKExamples/master/src/Testing/Baseline/Cxx/GeometricObjects/TestCylinder.png)\n        '''\n        pass\nCorresponding class implementation:\n\nfrom vedo.transformations import LinearTransform, pol2cart, cart2spher, spher2cart\nfrom vedo import utils\nimport vedo.vtkclasses as vtki\nfrom vedo.mesh import Mesh\nimport numpy as np\n\nclass Cylinder(Mesh):\n    \"\"\"\n    Build a cylinder of specified height and radius.\n    \"\"\"\n\n    def __init__(self, pos=(0, 0, 0), r=1.0, height=2.0, axis=(0, 0, 1), cap=True, res=24, c='teal3', alpha=1.0) -> None:\n        \"\"\"\n        Build a cylinder of specified height and radius `r`, centered at `pos`.\n\n        If `pos` is a list of 2 points, e.g. `pos=[v1, v2]`, build a cylinder with base\n        centered at `v1` and top at `v2`.\n\n        Arguments:\n            cap : (bool)\n                enable/disable the caps of the cylinder\n            res : (int)\n                resolution of the cylinder sides\n\n        ![](https://raw.githubusercontent.com/lorensen/VTKExamples/master/src/Testing/Baseline/Cxx/GeometricObjects/TestCylinder.png)\n        \"\"\"\n        if utils.is_sequence(pos[0]):\n            base = np.array(pos[0], dtype=float)\n            top = np.array(pos[1], dtype=float)\n            pos = (base + top) / 2\n            height = np.linalg.norm(top - base)\n            axis = top - base\n            axis = utils.versor(axis)\n        else:\n            axis = utils.versor(axis)\n            base = pos - axis * height / 2\n            top = pos + axis * height / 2\n        cyl = vtki.new('CylinderSource')\n        cyl.SetResolution(res)\n        cyl.SetRadius(r)\n        cyl.SetHeight(height)\n        cyl.SetCapping(cap)\n        cyl.Update()\n        theta = np.arccos(axis[2])\n        phi = np.arctan2(axis[1], axis[0])\n        t = vtki.vtkTransform()\n        t.PostMultiply()\n        t.RotateX(90)\n        t.RotateY(np.rad2deg(theta))\n        t.RotateZ(np.rad2deg(phi))\n        t.Translate(pos)\n        tf = vtki.new('TransformPolyDataFilter')\n        tf.SetInputData(cyl.GetOutput())\n        tf.SetTransform(t)\n        tf.Update()\n        super().__init__(tf.GetOutput(), c, alpha)\n        self.phong()\n        self.base = base\n        self.top = top\n        self.transform = LinearTransform().translate(pos)\n        self.name = 'Cylinder'\n\nExample skeleton:\n\n\nclass SuperquadricSource(_NoNewAttrMixin, _vtk.DisableVtkSnakeCase, _vtk.vtkSuperquadricSource):\n    '''Create superquadric source.\n    .. versionadded:: 0.44\n    Parameters\n    ----------\n    center : sequence[float], default: (0.0, 0.0, 0.0)\n        Center of the superquadric in ``[x, y, z]``.\n    scale : sequence[float], default: (1.0, 1.0, 1.0)\n        Scale factors of the superquadric in ``[x, y, z]``.\n    size : float, default: 0.5\n        Superquadric isotropic size.\n    theta_roundness : float, default: 1.0\n        Superquadric east/west roundness.\n        Values range from 0 (rectangular) to 1 (circular) to higher orders.\n    phi_roundness : float, default: 1.0\n        Superquadric north/south roundness.\n        Values range from 0 (rectangular) to 1 (circular) to higher orders.\n    theta_resolution : int, default: 16\n        Number of points in the longitude direction.\n        Values are rounded to nearest multiple of 4.\n    phi_resolution : int, default: 16\n        Number of points in the latitude direction.\n        Values are rounded to nearest multiple of 8.\n    toroidal : bool, default: False\n        Whether or not the superquadric is toroidal (``True``)\n        or ellipsoidal (``False``).\n    thickness : float, default: 0.3333333333\n        Superquadric ring thickness.\n        Only applies if toroidal is set to ``True``.\n    '''\n    @_deprecate_positional_args\n    def __init__(self: SuperquadricSource, center: VectorLike[float]=(0.0, 0.0, 0.0), scale:\n        '''Initialize source.'''\n        pass\n    @property\n    def center(self: SuperquadricSource) -> tuple[float, float, float]:\n        '''Center of the superquadric in ``[x, y, z]``.\n        Returns\n        -------\n        tuple[float, float, float]\n            Center of the superquadric in ``[x, y, z]``.\n        '''\n        pass\n    @center.setter\n    def center(self: SuperquadricSource) -> tuple[float, float, float]:\n        '''Set center of the superquadric in ``[x, y, z]``.\n        Parameters\n        ----------\n        center : sequence[float]\n            Center of the superquadric in ``[x, y, z]``.\n        '''\n        pass\n    @property\n    def scale(self: SuperquadricSource) -> tuple[float, float, float]:\n        '''Scale factors of the superquadric in ``[x, y, z]``.\n        Returns\n        -------\n        sequence[float]\n            Scale factors of the superquadric in ``[x, y, z]``.\n        '''\n        pass\n    @scale.setter\n    def scale(self: SuperquadricSource) -> tuple[float, float, float]:\n        '''Set scale factors of the superquadric in ``[x, y, z]``.\n        Parameters\n        ----------\n        scale : sequence[float]\n           Scale factors of the superquadric in ``[x, y, z]``.\n        '''\n        pass\n    @property\n    def size(self: SuperquadricSource) -> float:\n        '''Superquadric isotropic size.\n        Returns\n        -------\n        float\n            Superquadric isotropic size.\n        '''\n        pass\n    @size.setter\n    def size(self: SuperquadricSource) -> float:\n        '''Set superquadric isotropic size.\n        Parameters\n        ----------\n        size : float\n            Superquadric isotropic size.\n        '''\n        pass\n    @property\n    def theta_roundness(self: SuperquadricSource) -> float:\n        '''Superquadric east/west roundness.\n        Returns\n        -------\n        float\n            Superquadric east/west roundness.\n        '''\n        pass\n    @theta_roundness.setter\n    def theta_roundness(self: SuperquadricSource) -> float:\n        '''Set superquadric east/west roundness.\n        Parameters\n        ----------\n        theta_roundness : float\n            Superquadric east/west roundness.\n        '''\n        pass\n    @property\n    def phi_roundness(self: SuperquadricSource) -> float:\n        '''Superquadric north/south roundness.\n        Returns\n        -------\n        float\n            Superquadric north/south roundness.\n        '''\n        pass\n    @phi_roundness.setter\n    def phi_roundness(self: SuperquadricSource) -> float:\n        '''Set superquadric north/south roundness.\n        Parameters\n        ----------\n        phi_roundness : float\n            Superquadric north/south roundness.\n        '''\n        pass\n    @property\n    def theta_resolution(self: SuperquadricSource) -> float:\n        '''Number of points in the longitude direction.\n        Returns\n        -------\n        float\n            Number of points in the longitude direction.\n        '''\n        pass\n    @theta_resolution.setter\n    def theta_resolution(self: SuperquadricSource) -> float:\n        '''Set number of points in the longitude direction.\n        Parameters\n        ----------\n        theta_resolution : float\n            Number of points in the longitude direction.\n        '''\n        pass\n    @property\n    def phi_resolution(self: SuperquadricSource) -> float:\n        '''Number of points in the latitude direction.\n        Returns\n        -------\n        float\n            Number of points in the latitude direction.\n        '''\n        pass\n    @phi_resolution.setter\n    def phi_resolution(self: SuperquadricSource) -> float:\n        '''Set number of points in the latitude direction.\n        Parameters\n        ----------\n        phi_resolution : float\n            Number of points in the latitude direction.\n        '''\n        pass\n    @property\n    def toroidal(self: SuperquadricSource) -> bool:\n        '''Whether or not the superquadric is toroidal (``True``) or ellipsoidal (``False``).\n        Returns\n        -------\n        bool\n            Whether or not the superquadric is toroidal (``True``)\n            or ellipsoidal (``False``).\n        '''\n        pass\n    @toroidal.setter\n    def toroidal(self: SuperquadricSource) -> bool:\n        '''Set whether or not the superquadric is toroidal (``True``) or ellipsoidal (``False``).\n        Parameters\n        ----------\n        toroidal : bool\n            Whether or not the superquadric is toroidal (``True``)\n            or ellipsoidal (``False``).\n        '''\n        pass\n    @property\n    def thickness(self: SuperquadricSource) -> float:\n        '''Superquadric ring thickness.\n        Returns\n        -------\n        float\n            Superquadric ring thickness.\n        '''\n        pass\n    @thickness.setter\n    def thickness(self: SuperquadricSource) -> float:\n        '''Set superquadric ring thickness.\n        Parameters\n        ----------\n        thickness : float\n            Superquadric ring thickness.\n        '''\n        pass\n    @property\n    def output(self: SuperquadricSource) -> PolyData:\n        '''Get the output data object for a port on this algorithm.\n        Returns\n        -------\n        pyvista.PolyData\n            Plane mesh.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom pyvista.core.utilities.misc import _NoNewAttrMixin\nfrom pyvista._deprecate_positional_args import _deprecate_positional_args\nfrom pyvista.core.utilities.helpers import wrap\nfrom pyvista.core import _vtk_core as _vtk\n\nclass SuperquadricSource(_NoNewAttrMixin, _vtk.DisableVtkSnakeCase, _vtk.vtkSuperquadricSource):\n    \"\"\"Create superquadric source.\n\n    .. versionadded:: 0.44\n\n    Parameters\n    ----------\n    center : sequence[float], default: (0.0, 0.0, 0.0)\n        Center of the superquadric in ``[x, y, z]``.\n\n    scale : sequence[float], default: (1.0, 1.0, 1.0)\n        Scale factors of the superquadric in ``[x, y, z]``.\n\n    size : float, default: 0.5\n        Superquadric isotropic size.\n\n    theta_roundness : float, default: 1.0\n        Superquadric east/west roundness.\n        Values range from 0 (rectangular) to 1 (circular) to higher orders.\n\n    phi_roundness : float, default: 1.0\n        Superquadric north/south roundness.\n        Values range from 0 (rectangular) to 1 (circular) to higher orders.\n\n    theta_resolution : int, default: 16\n        Number of points in the longitude direction.\n        Values are rounded to nearest multiple of 4.\n\n    phi_resolution : int, default: 16\n        Number of points in the latitude direction.\n        Values are rounded to nearest multiple of 8.\n\n    toroidal : bool, default: False\n        Whether or not the superquadric is toroidal (``True``)\n        or ellipsoidal (``False``).\n\n    thickness : float, default: 0.3333333333\n        Superquadric ring thickness.\n        Only applies if toroidal is set to ``True``.\n\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self: SuperquadricSource, center: VectorLike[float]=(0.0, 0.0, 0.0), scale: VectorLike[float]=(1.0, 1.0, 1.0), size: float=0.5, theta_roundness: float=1.0, phi_roundness: float=1.0, theta_resolution: int=16, phi_resolution: int=16, toroidal: bool=False, thickness: float=1 / 3) -> None:\n        \"\"\"Initialize source.\"\"\"\n        super().__init__()\n        self.center = center\n        self.scale = scale\n        self.size = size\n        self.theta_roundness = theta_roundness\n        self.phi_roundness = phi_roundness\n        self.theta_resolution = theta_resolution\n        self.phi_resolution = phi_resolution\n        self.toroidal = toroidal\n        self.thickness = thickness\n\n    @property\n    def center(self: SuperquadricSource) -> tuple[float, float, float]:\n        \"\"\"Center of the superquadric in ``[x, y, z]``.\n\n        Returns\n        -------\n        tuple[float, float, float]\n            Center of the superquadric in ``[x, y, z]``.\n\n        \"\"\"\n        return self.GetCenter()\n\n    @center.setter\n    def center(self: SuperquadricSource, center: VectorLike[float]) -> None:\n        \"\"\"Set center of the superquadric in ``[x, y, z]``.\n\n        Parameters\n        ----------\n        center : sequence[float]\n            Center of the superquadric in ``[x, y, z]``.\n\n        \"\"\"\n        self.SetCenter(*center)\n\n    @property\n    def scale(self: SuperquadricSource) -> tuple[float, float, float]:\n        \"\"\"Scale factors of the superquadric in ``[x, y, z]``.\n\n        Returns\n        -------\n        sequence[float]\n            Scale factors of the superquadric in ``[x, y, z]``.\n\n        \"\"\"\n        return self.GetScale()\n\n    @scale.setter\n    def scale(self: SuperquadricSource, scale: VectorLike[float]) -> None:\n        \"\"\"Set scale factors of the superquadric in ``[x, y, z]``.\n\n        Parameters\n        ----------\n        scale : sequence[float]\n           Scale factors of the superquadric in ``[x, y, z]``.\n\n        \"\"\"\n        self.SetScale(*scale)\n\n    @property\n    def size(self: SuperquadricSource) -> float:\n        \"\"\"Superquadric isotropic size.\n\n        Returns\n        -------\n        float\n            Superquadric isotropic size.\n\n        \"\"\"\n        return self.GetSize()\n\n    @size.setter\n    def size(self: SuperquadricSource, size: float) -> None:\n        \"\"\"Set superquadric isotropic size.\n\n        Parameters\n        ----------\n        size : float\n            Superquadric isotropic size.\n\n        \"\"\"\n        self.SetSize(size)\n\n    @property\n    def theta_roundness(self: SuperquadricSource) -> float:\n        \"\"\"Superquadric east/west roundness.\n\n        Returns\n        -------\n        float\n            Superquadric east/west roundness.\n\n        \"\"\"\n        return self.GetThetaRoundness()\n\n    @theta_roundness.setter\n    def theta_roundness(self: SuperquadricSource, theta_roundness: float) -> None:\n        \"\"\"Set superquadric east/west roundness.\n\n        Parameters\n        ----------\n        theta_roundness : float\n            Superquadric east/west roundness.\n\n        \"\"\"\n        self.SetThetaRoundness(theta_roundness)\n\n    @property\n    def phi_roundness(self: SuperquadricSource) -> float:\n        \"\"\"Superquadric north/south roundness.\n\n        Returns\n        -------\n        float\n            Superquadric north/south roundness.\n\n        \"\"\"\n        return self.GetPhiRoundness()\n\n    @phi_roundness.setter\n    def phi_roundness(self: SuperquadricSource, phi_roundness: float) -> None:\n        \"\"\"Set superquadric north/south roundness.\n\n        Parameters\n        ----------\n        phi_roundness : float\n            Superquadric north/south roundness.\n\n        \"\"\"\n        self.SetPhiRoundness(phi_roundness)\n\n    @property\n    def theta_resolution(self: SuperquadricSource) -> float:\n        \"\"\"Number of points in the longitude direction.\n\n        Returns\n        -------\n        float\n            Number of points in the longitude direction.\n\n        \"\"\"\n        return self.GetThetaResolution()\n\n    @theta_resolution.setter\n    def theta_resolution(self: SuperquadricSource, theta_resolution: float) -> None:\n        \"\"\"Set number of points in the longitude direction.\n\n        Parameters\n        ----------\n        theta_resolution : float\n            Number of points in the longitude direction.\n\n        \"\"\"\n        self.SetThetaResolution(round(theta_resolution / 4) * 4)\n\n    @property\n    def phi_resolution(self: SuperquadricSource) -> float:\n        \"\"\"Number of points in the latitude direction.\n\n        Returns\n        -------\n        float\n            Number of points in the latitude direction.\n\n        \"\"\"\n        return self.GetPhiResolution()\n\n    @phi_resolution.setter\n    def phi_resolution(self: SuperquadricSource, phi_resolution: float) -> None:\n        \"\"\"Set number of points in the latitude direction.\n\n        Parameters\n        ----------\n        phi_resolution : float\n            Number of points in the latitude direction.\n\n        \"\"\"\n        self.SetPhiResolution(round(phi_resolution / 8) * 8)\n\n    @property\n    def toroidal(self: SuperquadricSource) -> bool:\n        \"\"\"Whether or not the superquadric is toroidal (``True``) or ellipsoidal (``False``).\n\n        Returns\n        -------\n        bool\n            Whether or not the superquadric is toroidal (``True``)\n            or ellipsoidal (``False``).\n\n        \"\"\"\n        return self.GetToroidal()\n\n    @toroidal.setter\n    def toroidal(self: SuperquadricSource, toroidal: bool) -> None:\n        \"\"\"Set whether or not the superquadric is toroidal (``True``) or ellipsoidal (``False``).\n\n        Parameters\n        ----------\n        toroidal : bool\n            Whether or not the superquadric is toroidal (``True``)\n            or ellipsoidal (``False``).\n\n        \"\"\"\n        self.SetToroidal(toroidal)\n\n    @property\n    def thickness(self: SuperquadricSource) -> float:\n        \"\"\"Superquadric ring thickness.\n\n        Returns\n        -------\n        float\n            Superquadric ring thickness.\n\n        \"\"\"\n        return self.GetThickness()\n\n    @thickness.setter\n    def thickness(self: SuperquadricSource, thickness: float) -> None:\n        \"\"\"Set superquadric ring thickness.\n\n        Parameters\n        ----------\n        thickness : float\n            Superquadric ring thickness.\n\n        \"\"\"\n        self.SetThickness(thickness)\n\n    @property\n    def output(self: SuperquadricSource) -> PolyData:\n        \"\"\"Get the output data object for a port on this algorithm.\n\n        Returns\n        -------\n        pyvista.PolyData\n            Plane mesh.\n\n        \"\"\"\n        self.Update()\n        return wrap(self.GetOutput())\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass Text_background:\n    '''文本背景参数'''\n\n    def __init__(self, *, color: str, style: Literal[1, 2]=1, alpha: float=1.0, round_radius: float=0.0, height: float=0.14, width: float=0.14, horizontal_offset: float=0.5, vertical_offset: float=0.5):\n        '''\n        Args:\n            color (`str`): 背景颜色, 格式为'#RRGGBB'\n            style (`int`, optional): 背景样式, 1和2分别对应剪映中的两种样式, 默认为1\n            alpha (`float`, optional): 背景不透明度, 与剪映中一致, 取值范围[0, 1], 默认为1.0\n            round_radius (`float`, optional): 背景圆角半径, 与剪映中一致, 取值范围[0, 1], 默认为0.0\n            height (`float`, optional): 背景高度, 与剪映中一致, 取值范围为[0, 1], 默认为0.14\n            width (`float`, optional): 背景宽度, 与剪映中一致, 取值范围为[0, 1], 默认为0.14\n            horizontal_offset (`float`, optional): 背景水平偏移, 与剪映中一致, 取值范围为[0, 1], 默认为0.5\n            vertical_offset (`float`, optional): 背景竖直偏移, 与剪映中一致, 取值范围为[0, 1], 默认为0.5\n        '''\n        pass\n\n    def export_json(self) -> Dict[str, Any]:\n        '''生成子JSON数据, 在Text_segment导出时合并到其中'''\n        pass"
  }
]