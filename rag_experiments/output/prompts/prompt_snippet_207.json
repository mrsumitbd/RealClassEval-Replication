[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass OutputSTACMixin:\n    '''Adds STAC related features.'''\n    @property\n    def stac_path(self) -> MPath:\n        '''Return path to STAC JSON file.'''\n        pass\n    @property\n    def stac_item_id(self) -> str:\n        '''\n        Return STAC item ID according to configuration.\n        Defaults to path basename.\n        '''\n        pass\n    @property\n    def stac_item_metadata(self):\n        '''Custom STAC metadata.'''\n        pass\n    @property\n    def stac_asset_type(self):\n        '''Asset MIME type.'''\n        pass\nCorresponding class implementation:\n\nfrom mapchete.path import MPath\n\nclass OutputSTACMixin:\n    \"\"\"Adds STAC related features.\"\"\"\n    path: MPath\n    output_params: dict\n\n    @property\n    def stac_path(self) -> MPath:\n        \"\"\"Return path to STAC JSON file.\"\"\"\n        return self.path / f'{self.stac_item_id}.json'\n\n    @property\n    def stac_item_id(self) -> str:\n        \"\"\"\n        Return STAC item ID according to configuration.\n\n        Defaults to path basename.\n        \"\"\"\n        return self.output_params.get('stac', {}).get('id') or self.path.stem\n\n    @property\n    def stac_item_metadata(self):\n        \"\"\"Custom STAC metadata.\"\"\"\n        return self.output_params.get('stac', {})\n\n    @property\n    def stac_asset_type(self):\n        \"\"\"Asset MIME type.\"\"\"\n        raise ValueError('no MIME type set for this output')\n\nExample skeleton:\n\n\nclass PressureFixtureBase(ABC):\n    '''Base Class if Mark10 Force Gauge Driver.'''\n    @classmethod\n    def vid_pid(cls) -> Tuple[int, int]:\n        '''OT3 Pressure Fixture VID:PID.'''\n        pass\n    @abstractmethod\n    def connect(self) -> None:\n        '''Connect to the Mark10 Force Gauge.'''\n        pass\n    @abstractmethod\n    def disconnect(self) -> None:\n        '''Disconnect from the Mark10 Force Gauge.'''\n        pass\n    @abstractmethod\n    def firmware_version(self) -> str:\n        '''Read the firmware version from the device.'''\n        pass\n    @abstractmethod\n    def read_all_pressure_channel(self) -> List[float]:\n        '''Read all pressure channels on fixture in Pascals.'''\n        pass\n\n    def position_in_slot(self, side: Literal['left', 'right']='left') -> Point:\n        '''Position in slot.'''\n        pass\n    @property\n    def depth(self) -> float:\n        '''Depth.'''\n        pass\n    @property\n    def tip_volume(self) -> int:\n        '''Tip Volume.'''\n        pass\n    @property\n    def aspirate_volume(self) -> float:\n        '''Aspirate Volume.'''\n        pass\nCorresponding class implementation:\n\nfrom abc import ABC, abstractmethod\nfrom typing_extensions import Final, Literal\nfrom typing import List, Tuple\nfrom opentrons.types import Point\n\nclass PressureFixtureBase(ABC):\n    \"\"\"Base Class if Mark10 Force Gauge Driver.\"\"\"\n\n    @classmethod\n    def vid_pid(cls) -> Tuple[int, int]:\n        \"\"\"OT3 Pressure Fixture VID:PID.\"\"\"\n        return (1155, 41389)\n\n    @abstractmethod\n    def connect(self) -> None:\n        \"\"\"Connect to the Mark10 Force Gauge.\"\"\"\n        ...\n\n    @abstractmethod\n    def disconnect(self) -> None:\n        \"\"\"Disconnect from the Mark10 Force Gauge.\"\"\"\n        ...\n\n    @abstractmethod\n    def firmware_version(self) -> str:\n        \"\"\"Read the firmware version from the device.\"\"\"\n        ...\n\n    @abstractmethod\n    def read_all_pressure_channel(self) -> List[float]:\n        \"\"\"Read all pressure channels on fixture in Pascals.\"\"\"\n        ...\n\n    def position_in_slot(self, side: Literal['left', 'right']='left') -> Point:\n        \"\"\"Position in slot.\"\"\"\n        if side == 'left':\n            return LOCATION_A1_LEFT\n        else:\n            return LOCATION_A1_RIGHT\n\n    @property\n    def depth(self) -> float:\n        \"\"\"Depth.\"\"\"\n        return 14.0\n\n    @property\n    def tip_volume(self) -> int:\n        \"\"\"Tip Volume.\"\"\"\n        return 50\n\n    @property\n    def aspirate_volume(self) -> float:\n        \"\"\"Aspirate Volume.\"\"\"\n        return 20.0\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass(slots=True)\nclass TimingParameters:\n    '''Device timing parameters.'''\n\n    def __post_init__(self):\n        '''Validate timing parameters.'''\n        pass\n    @property\n    def total_latency(self) -> int:\n        '''Calculate total latency.'''\n        pass\n    @property\n    def effective_bandwidth_mbps(self) -> float:\n        '''Estimate bandwidth in MB/s.'''\n        pass\n\n    def to_dict(self) -> Dict[str, Any]:\n        '''Convert to dictionary.'''\n        pass"
  }
]