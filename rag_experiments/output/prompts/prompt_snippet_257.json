[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass InitTask(BaseTask):\n\n    def copy_starter_repo(self, project_name: str) -> None:\n        pass\n\n    def create_profiles_dir(self, profiles_dir: str) -> bool:\n        '''Create the user's profiles directory if it doesn't already exist.'''\n        pass\n\n    def create_profile_from_sample(self, adapter: str, profile_name: str):\n        '''Create a profile entry using the adapter's sample_profiles.yml\n        Renames the profile in sample_profiles.yml to match that of the project.'''\n        pass\n\n    def generate_target_from_input(self, profile_template: dict, target: dict={}) -> dict:\n        '''Generate a target configuration from profile_template and user input.'''\n        pass\n\n    def get_profile_name_from_current_project(self) -> str:\n        '''Reads dbt_project.yml in the current directory to retrieve the\n        profile name.\n        '''\n        pass\n\n    def write_profile(self, profile: dict, profile_name: str):\n        '''Given a profile, write it to the current project's profiles.yml.\n        This will overwrite any profile with a matching name.'''\n        pass\n\n    def create_profile_from_profile_template(self, profile_template: dict, profile_name: str):\n        '''Create and write a profile using the supplied profile_template.'''\n        pass\n\n    def create_profile_from_target(self, adapter: str, profile_name: str):\n        '''Create a profile without defaults using target's profile_template.yml if available, or\n        sample_profiles.yml as a fallback.'''\n        pass\n\n    def check_if_profile_exists(self, profile_name: str) -> bool:\n        '''\n        Validate that the specified profile exists. Can't use the regular profile validation\n        routine because it assumes the project file exists\n        '''\n        pass\n\n    def check_if_can_write_profile(self, profile_name: Optional[str]=None) -> bool:\n        '''Using either a provided profile name or that specified in dbt_project.yml,\n        check if the profile already exists in profiles.yml, and if so ask the\n        user whether to proceed and overwrite it.'''\n        pass\n\n    def create_profile_using_project_profile_template(self, profile_name):\n        '''Create a profile using the project's profile_template.yml'''\n        pass\n\n    def ask_for_adapter_choice(self) -> str:\n        '''Ask the user which adapter (database) they'd like to use.'''\n        pass\n\n    def setup_profile(self, profile_name: str) -> None:\n        '''Set up a new profile for a project'''\n        pass\n\n    def get_valid_project_name(self) -> str:\n        '''Returns a valid project name, either from CLI arg or user prompt.'''\n        pass\n\n    def create_new_project(self, project_name: str, profile_name: str):\n        pass\n\n    def run(self):\n        '''Entry point for the init task.'''\n        pass\nCorresponding class implementation:\n\nfrom dbt_common.events.functions import fire_event\nfrom dbt.flags import get_flags\nfrom dbt_common.exceptions import DbtRuntimeError\nimport copy\nfrom typing import Optional\nimport os\nimport shutil\nimport yaml\nfrom dbt.task.base import BaseTask, move_to_nearest_project_dir\nimport click\nfrom dbt.events.types import ConfigFolderDirectory, InvalidProfileTemplateYAML, NoSampleProfileFound, ProfileWrittenWithProjectTemplateYAML, ProfileWrittenWithSample, ProfileWrittenWithTargetTemplateYAML, ProjectCreated, ProjectNameAlreadyExists, SettingUpProfile, StarterProjectPath\nimport re\nimport dbt_common.clients.system\nfrom dbt.config.profile import read_profile\nfrom pathlib import Path\nfrom dbt.contracts.util import Identifier as ProjectName\nimport dbt.config\nfrom dbt.adapters.factory import get_include_paths, load_plugin\nfrom dbt.version import _get_adapter_plugin_names\n\nclass InitTask(BaseTask):\n\n    def copy_starter_repo(self, project_name: str) -> None:\n        from dbt.include.starter_project import PACKAGE_PATH as starter_project_directory\n        fire_event(StarterProjectPath(dir=starter_project_directory))\n        shutil.copytree(starter_project_directory, project_name, ignore=shutil.ignore_patterns(*IGNORE_FILES))\n\n    def create_profiles_dir(self, profiles_dir: str) -> bool:\n        \"\"\"Create the user's profiles directory if it doesn't already exist.\"\"\"\n        profiles_path = Path(profiles_dir)\n        if not profiles_path.exists():\n            fire_event(ConfigFolderDirectory(dir=str(profiles_dir)))\n            dbt_common.clients.system.make_directory(profiles_dir)\n            return True\n        return False\n\n    def create_profile_from_sample(self, adapter: str, profile_name: str):\n        \"\"\"Create a profile entry using the adapter's sample_profiles.yml\n\n        Renames the profile in sample_profiles.yml to match that of the project.\"\"\"\n        load_plugin(adapter)\n        adapter_path = get_include_paths(adapter)[0]\n        sample_profiles_path = adapter_path / 'sample_profiles.yml'\n        if not sample_profiles_path.exists():\n            fire_event(NoSampleProfileFound(adapter=adapter))\n        else:\n            with open(sample_profiles_path, 'r') as f:\n                sample_profile = f.read()\n            sample_profile_name = list(yaml.safe_load(sample_profile).keys())[0]\n            sample_profile = re.sub(f'^{sample_profile_name}:', f'{profile_name}:', sample_profile)\n            profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n            if profiles_filepath.exists():\n                with open(profiles_filepath, 'a') as f:\n                    f.write('\\n' + sample_profile)\n            else:\n                with open(profiles_filepath, 'w') as f:\n                    f.write(sample_profile)\n                fire_event(ProfileWrittenWithSample(name=profile_name, path=str(profiles_filepath)))\n\n    def generate_target_from_input(self, profile_template: dict, target: dict={}) -> dict:\n        \"\"\"Generate a target configuration from profile_template and user input.\"\"\"\n        profile_template_local = copy.deepcopy(profile_template)\n        for key, value in profile_template_local.items():\n            if key.startswith('_choose'):\n                choice_type = key[8:].replace('_', ' ')\n                option_list = list(value.keys())\n                prompt_msg = '\\n'.join([f'[{n + 1}] {v}' for n, v in enumerate(option_list)]) + f'\\nDesired {choice_type} option (enter a number)'\n                numeric_choice = click.prompt(prompt_msg, type=click.INT)\n                choice = option_list[numeric_choice - 1]\n                target = self.generate_target_from_input(profile_template_local[key][choice], target)\n            elif key.startswith('_fixed'):\n                target[key[7:]] = value\n            else:\n                hide_input = value.get('hide_input', False)\n                default = value.get('default', None)\n                hint = value.get('hint', None)\n                type = click_type_mapping[value.get('type', None)]\n                text = key + (f' ({hint})' if hint else '')\n                target[key] = click.prompt(text, default=default, hide_input=hide_input, type=type)\n        return target\n\n    def get_profile_name_from_current_project(self) -> str:\n        \"\"\"Reads dbt_project.yml in the current directory to retrieve the\n        profile name.\n        \"\"\"\n        with open('dbt_project.yml') as f:\n            dbt_project = yaml.safe_load(f)\n        return dbt_project['profile']\n\n    def write_profile(self, profile: dict, profile_name: str):\n        \"\"\"Given a profile, write it to the current project's profiles.yml.\n        This will overwrite any profile with a matching name.\"\"\"\n        profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        profiles = {profile_name: profile}\n        if profiles_filepath.exists():\n            with open(profiles_filepath, 'r') as f:\n                profiles = yaml.safe_load(f) or {}\n                profiles[profile_name] = profile\n        with open(profiles_filepath, 'w') as f:\n            yaml.dump(profiles, f)\n\n    def create_profile_from_profile_template(self, profile_template: dict, profile_name: str):\n        \"\"\"Create and write a profile using the supplied profile_template.\"\"\"\n        initial_target = profile_template.get('fixed', {})\n        prompts = profile_template.get('prompts', {})\n        target = self.generate_target_from_input(prompts, initial_target)\n        target_name = target.pop('target', 'dev')\n        profile = {'outputs': {target_name: target}, 'target': target_name}\n        self.write_profile(profile, profile_name)\n\n    def create_profile_from_target(self, adapter: str, profile_name: str):\n        \"\"\"Create a profile without defaults using target's profile_template.yml if available, or\n        sample_profiles.yml as a fallback.\"\"\"\n        load_plugin(adapter)\n        adapter_path = get_include_paths(adapter)[0]\n        profile_template_path = adapter_path / 'profile_template.yml'\n        if profile_template_path.exists():\n            with open(profile_template_path) as f:\n                profile_template = yaml.safe_load(f)\n            self.create_profile_from_profile_template(profile_template, profile_name)\n            profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n            fire_event(ProfileWrittenWithTargetTemplateYAML(name=profile_name, path=str(profiles_filepath)))\n        else:\n            self.create_profile_from_sample(adapter, profile_name)\n\n    def check_if_profile_exists(self, profile_name: str) -> bool:\n        \"\"\"\n        Validate that the specified profile exists. Can't use the regular profile validation\n        routine because it assumes the project file exists\n        \"\"\"\n        profiles_dir = get_flags().PROFILES_DIR\n        raw_profiles = read_profile(profiles_dir)\n        return profile_name in raw_profiles\n\n    def check_if_can_write_profile(self, profile_name: Optional[str]=None) -> bool:\n        \"\"\"Using either a provided profile name or that specified in dbt_project.yml,\n        check if the profile already exists in profiles.yml, and if so ask the\n        user whether to proceed and overwrite it.\"\"\"\n        profiles_file = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        if not profiles_file.exists():\n            return True\n        profile_name = profile_name or self.get_profile_name_from_current_project()\n        with open(profiles_file, 'r') as f:\n            profiles = yaml.safe_load(f) or {}\n        if profile_name in profiles.keys():\n            response = click.confirm(f'The profile {profile_name} already exists in {profiles_file}. Continue and overwrite it?')\n            return response\n        else:\n            return True\n\n    def create_profile_using_project_profile_template(self, profile_name):\n        \"\"\"Create a profile using the project's profile_template.yml\"\"\"\n        with open('profile_template.yml') as f:\n            profile_template = yaml.safe_load(f)\n        self.create_profile_from_profile_template(profile_template, profile_name)\n        profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        fire_event(ProfileWrittenWithProjectTemplateYAML(name=profile_name, path=str(profiles_filepath)))\n\n    def ask_for_adapter_choice(self) -> str:\n        \"\"\"Ask the user which adapter (database) they'd like to use.\"\"\"\n        available_adapters = list(_get_adapter_plugin_names())\n        if not available_adapters:\n            raise dbt.exceptions.NoAdaptersAvailableError()\n        prompt_msg = 'Which database would you like to use?\\n' + '\\n'.join([f'[{n + 1}] {v}' for n, v in enumerate(available_adapters)]) + \"\\n\\n(Don't see the one you want? https://docs.getdbt.com/docs/available-adapters)\" + '\\n\\nEnter a number'\n        numeric_choice = click.prompt(prompt_msg, type=click.INT)\n        return available_adapters[numeric_choice - 1]\n\n    def setup_profile(self, profile_name: str) -> None:\n        \"\"\"Set up a new profile for a project\"\"\"\n        fire_event(SettingUpProfile())\n        if not self.check_if_can_write_profile(profile_name=profile_name):\n            return\n        profile_template_path = Path('profile_template.yml')\n        if profile_template_path.exists():\n            try:\n                self.create_profile_using_project_profile_template(profile_name)\n                return\n            except Exception:\n                fire_event(InvalidProfileTemplateYAML())\n        adapter = self.ask_for_adapter_choice()\n        self.create_profile_from_target(adapter, profile_name=profile_name)\n\n    def get_valid_project_name(self) -> str:\n        \"\"\"Returns a valid project name, either from CLI arg or user prompt.\"\"\"\n        from dbt.include.global_project import PROJECT_NAME as GLOBAL_PROJECT_NAME\n        name = self.args.project_name\n        internal_package_names = {GLOBAL_PROJECT_NAME}\n        available_adapters = list(_get_adapter_plugin_names())\n        for adapter_name in available_adapters:\n            internal_package_names.update(f'dbt_{adapter_name}')\n        while not ProjectName.is_valid(name) or name in internal_package_names:\n            if name:\n                click.echo(name + ' is not a valid project name.')\n            name = click.prompt('Enter a name for your project (letters, digits, underscore)')\n        return name\n\n    def create_new_project(self, project_name: str, profile_name: str):\n        self.copy_starter_repo(project_name)\n        os.chdir(project_name)\n        with open('dbt_project.yml', 'r') as f:\n            content = f'{f.read()}'.format(project_name=project_name, profile_name=profile_name)\n        with open('dbt_project.yml', 'w') as f:\n            f.write(content)\n        fire_event(ProjectCreated(project_name=project_name, docs_url=DOCS_URL, slack_url=SLACK_URL))\n\n    def run(self):\n        \"\"\"Entry point for the init task.\"\"\"\n        profiles_dir = get_flags().PROFILES_DIR\n        self.create_profiles_dir(profiles_dir)\n        try:\n            move_to_nearest_project_dir(self.args.project_dir)\n            in_project = True\n        except dbt_common.exceptions.DbtRuntimeError:\n            in_project = False\n        if in_project:\n            if self.args.profile:\n                raise DbtRuntimeError(msg='Can not init existing project with specified profile, edit dbt_project.yml instead')\n            if not self.args.skip_profile_setup:\n                profile_name = self.get_profile_name_from_current_project()\n                self.setup_profile(profile_name)\n        else:\n            project_name = self.get_valid_project_name()\n            project_path = Path(project_name)\n            if project_path.exists():\n                fire_event(ProjectNameAlreadyExists(name=project_name))\n                return\n            user_profile_name = self.args.profile\n            if user_profile_name:\n                if not self.check_if_profile_exists(user_profile_name):\n                    raise DbtRuntimeError(msg=\"Could not find profile named '{}'\".format(user_profile_name))\n                self.create_new_project(project_name, user_profile_name)\n            else:\n                profile_name = project_name\n                self.create_new_project(project_name, profile_name)\n                if not self.args.skip_profile_setup:\n                    self.setup_profile(profile_name)\n\nExample skeleton:\n\n\nclass LightController:\n    '''LightController sets the Flex's status bar to match the protocol status.'''\n\n    def __init__(self, api: HardwareControlAPI, run_orchestrator_store: Optional[RunOrchestratorStore]) -> None:\n        '''Create a new LightController.'''\n        pass\n\n    def mark_initialization_done(self) -> None:\n        '''Called once the robot server hardware initialization finishes.'''\n        pass\n\n    def update_run_orchestrator_store(self, run_orchestrator_store: RunOrchestratorStore) -> None:\n        '''Provide a handle to an EngineStore for the light control task.'''\n        pass\n\n    def update_run_orchestrator_store(self, run_orchestrator_store: RunOrchestratorStore) -> None:\n        '''Update the status bar if the current run status has changed.'''\n        pass\n\n    def _get_current_engine_status(self) -> Optional[EngineStatus]:\n        '''Get the `status` value from the engine's active run engine.'''\n        pass\n\n    def _get_active_updates(self) -> List[SubSystem]:\n        '''Get any active firmware updates.'''\n        pass\n\n    def get_current_status(self) -> Status:\n        '''Get the overall status of the system for light purposes.'''\n        pass\nCorresponding class implementation:\n\nfrom opentrons.hardware_control.types import StatusBarState, EstopState, SubSystem, UpdateState\nfrom typing import Optional, List\nfrom opentrons.hardware_control import HardwareControlAPI\nfrom .run_orchestrator_store import RunOrchestratorStore\nfrom opentrons.protocol_engine.types import EngineStatus\n\nclass LightController:\n    \"\"\"LightController sets the Flex's status bar to match the protocol status.\"\"\"\n\n    def __init__(self, api: HardwareControlAPI, run_orchestrator_store: Optional[RunOrchestratorStore]) -> None:\n        \"\"\"Create a new LightController.\"\"\"\n        self._api = api\n        self._run_orchestrator_store = run_orchestrator_store\n        self._initialization_done = False\n\n    def mark_initialization_done(self) -> None:\n        \"\"\"Called once the robot server hardware initialization finishes.\"\"\"\n        self._initialization_done = True\n\n    def update_run_orchestrator_store(self, run_orchestrator_store: RunOrchestratorStore) -> None:\n        \"\"\"Provide a handle to an EngineStore for the light control task.\"\"\"\n        self._run_orchestrator_store = run_orchestrator_store\n\n    async def update(self, prev_status: Optional[Status], new_status: Status) -> None:\n        \"\"\"Update the status bar if the current run status has changed.\"\"\"\n        if prev_status == new_status:\n            return\n        if new_status.estop_status == EstopState.PHYSICALLY_ENGAGED:\n            await self._api.set_status_bar_state(state=StatusBarState.SOFTWARE_ERROR)\n        elif len(new_status.active_updates) > 0:\n            state = _active_updates_to_status_bar(previous=[] if prev_status is None else prev_status.active_updates, current=new_status.active_updates, initialization_done=self._initialization_done, force_value=True if prev_status is not None and prev_status.estop_status is EstopState.PHYSICALLY_ENGAGED else False)\n            if state is not None:\n                await self._api.set_status_bar_state(state=state)\n        else:\n            await self._api.set_status_bar_state(state=_engine_status_to_status_bar(status=new_status.engine_status, initialization_done=self._initialization_done))\n\n    def _get_current_engine_status(self) -> Optional[EngineStatus]:\n        \"\"\"Get the `status` value from the engine's active run engine.\"\"\"\n        if self._run_orchestrator_store is None:\n            return None\n        current_id = self._run_orchestrator_store.current_run_id\n        if current_id is not None:\n            return self._run_orchestrator_store.get_status()\n        return None\n\n    def _get_active_updates(self) -> List[SubSystem]:\n        \"\"\"Get any active firmware updates.\"\"\"\n        return [subsystem for subsystem, status in self._api.attached_subsystems.items() if status.update_state is not None and status.update_state is UpdateState.updating]\n\n    def get_current_status(self) -> Status:\n        \"\"\"Get the overall status of the system for light purposes.\"\"\"\n        return Status(active_updates=self._get_active_updates(), estop_status=self._api.get_estop_state(), engine_status=self._get_current_engine_status())\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass TerminalTextStyles:\n    '''Manages loading, saving, and applying terminal text styles.'''\n\n    def __init__(self, stylesheet_path: str=None):\n        '''\n        Initializes the style manager.\n        Args:\n            stylesheet_path: Optional path to the stylesheet. Defaults to\n                             a file in the JRDEV_DIR.\n        '''\n        pass\n\n    def _get_default_styles(self) -> Dict[str, str]:\n        '''Returns the default styles for each PrintType as a dictionary.'''\n        pass\n\n    def load_styles(self) -> None:\n        '''Loads styles from the stylesheet file, merging them with defaults.'''\n        pass\n\n    def save_styles(self) -> bool:\n        '''Saves the current styles to the stylesheet file.'''\n        pass\n\n    def get_style(self, print_type: PrintType) -> str:\n        '''Gets the style string for a given PrintType.'''\n        pass\n\n    def set_style(self, print_type: PrintType, style_str: str) -> None:\n        '''Sets the style for a given PrintType.'''\n        pass"
  }
]