[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass Type(IntEnum):\n    '''[Type] L2TP Type'''\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        '''Backport support for original codes.\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n        :meta private:\n                        '''\n                        pass\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        '''Lookup function used when value is not found.\n        Args:\n            value: Value to get enum item.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom aenum import IntEnum, extend_enum\n\nclass Type(IntEnum):\n    \"\"\"[Type] L2TP Type\"\"\"\n    Control = 0\n    Data = 1\n\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        \"\"\"Backport support for original codes.\n\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n\n        :meta private:\n        \"\"\"\n        if isinstance(key, int):\n            return Type(key)\n        if key not in Type._member_map_:\n            return extend_enum(Type, key, default)\n        return Type[key]\n\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        \"\"\"Lookup function used when value is not found.\n\n        Args:\n            value: Value to get enum item.\n\n        \"\"\"\n        if not (isinstance(value, int) and 0 <= value <= 1):\n            raise ValueError('%r is not a valid %s' % (value, cls.__name__))\n        return extend_enum(cls, 'Unassigned_%d' % value, value)\n\nExample skeleton:\n\n\nclass RPCServer(object):\n    '''RPC server interface.'''\n\n    def __init__(self, callback):\n        '''Initializes the RPC server object.\n        Args:\n          callback (function): callback to invoke on get status RPC request.\n        '''\n        pass\n    @abc.abstractmethod\n    def Start(self, hostname, port):\n        '''Starts the RPC server.\n        Args:\n          hostname (str): hostname or IP address to connect to for requests.\n          port (int): port to connect to for requests.\n        Returns:\n          bool: True if the RPC server was successfully started.\n        '''\n        pass\n    @abc.abstractmethod\n    def Stop(self):\n        '''Stops the RPC server.'''\n        pass\nCorresponding class implementation:\n\nimport abc\n\nclass RPCServer(object):\n    \"\"\"RPC server interface.\"\"\"\n\n    def __init__(self, callback):\n        \"\"\"Initializes the RPC server object.\n\n        Args:\n          callback (function): callback to invoke on get status RPC request.\n        \"\"\"\n        super(RPCServer, self).__init__()\n        self._callback = callback\n\n    @abc.abstractmethod\n    def Start(self, hostname, port):\n        \"\"\"Starts the RPC server.\n\n        Args:\n          hostname (str): hostname or IP address to connect to for requests.\n          port (int): port to connect to for requests.\n\n        Returns:\n          bool: True if the RPC server was successfully started.\n        \"\"\"\n\n    @abc.abstractmethod\n    def Stop(self):\n        \"\"\"Stops the RPC server.\"\"\"\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass FletX:\n    '''FletX Dependency Injection Interface\n    This class provides a simple interface to interact with the Dependency Injection (DI) container.\n    It allows to register, find, delete, and reset instances in the DI container.\n    '''\n    @staticmethod\n    def put(instance, tag=None):\n        '''Register an instance in the DI container'''\n        pass\n    @staticmethod\n    def find(cls, tag=None):\n        '''Retrieve an instance from the DI container'''\n        pass\n    @staticmethod\n    def delete(cls, tag=None):\n        '''Delete an instance from the DI container'''\n        pass\n    @staticmethod\n    def reset():\n        '''Reset the DI container, clearing all registered instances.'''\n        pass"
  }
]