[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass ProjectManager:\n    '''\n    This singleton keeps track of available projects.\n    '''\n\n    def __init__(self):\n        pass\n    @classmethod\n    def instance(cls):\n        '''\n        Singleton to return only one instance of ProjectManager.\n        :returns: instance of ProjectManager\n        '''\n        pass\n    @property\n    def projects(self):\n        '''\n        Returns all projects.\n        :returns: Project instances\n        '''\n        pass\n\n    def get_project(self, project_id):\n        '''\n        Returns a Project instance.\n        :param project_id: Project identifier\n        :returns: Project instance\n        '''\n        pass\n\n    def _check_available_disk_space(self, project):\n        '''\n        Sends a warning notification if disk space is getting low.\n        :param project: project instance\n        '''\n        pass\n\n    def create_project(self, name=None, project_id=None, path=None, variables=None):\n        '''\n        Create a project and keep a references to it in project manager.\n        See documentation of Project for arguments\n        '''\n        pass\n\n    def remove_project(self, project_id):\n        '''\n        Removes a Project instance from the list of projects in use.\n        :param project_id: Project identifier\n        '''\n        pass\n\n    def check_hardware_virtualization(self, source_node):\n        '''\n        Checks if hardware virtualization can be used.\n        :returns: boolean\n        '''\n        pass\nCorresponding class implementation:\n\nfrom .project import Project\nfrom uuid import UUID\nimport aiohttp\nimport psutil\nfrom ..config import Config\nimport platform\n\nclass ProjectManager:\n    \"\"\"\n    This singleton keeps track of available projects.\n    \"\"\"\n\n    def __init__(self):\n        self._projects = {}\n\n    @classmethod\n    def instance(cls):\n        \"\"\"\n        Singleton to return only one instance of ProjectManager.\n\n        :returns: instance of ProjectManager\n        \"\"\"\n        if not hasattr(cls, '_instance'):\n            cls._instance = cls()\n        return cls._instance\n\n    @property\n    def projects(self):\n        \"\"\"\n        Returns all projects.\n\n        :returns: Project instances\n        \"\"\"\n        return self._projects.values()\n\n    def get_project(self, project_id):\n        \"\"\"\n        Returns a Project instance.\n\n        :param project_id: Project identifier\n\n        :returns: Project instance\n        \"\"\"\n        try:\n            UUID(project_id, version=4)\n        except ValueError:\n            raise aiohttp.web.HTTPBadRequest(text='Project ID {} is not a valid UUID'.format(project_id))\n        if project_id not in self._projects:\n            raise aiohttp.web.HTTPNotFound(text=\"Project ID {} doesn't exist\".format(project_id))\n        return self._projects[project_id]\n\n    def _check_available_disk_space(self, project):\n        \"\"\"\n        Sends a warning notification if disk space is getting low.\n\n        :param project: project instance\n        \"\"\"\n        try:\n            used_disk_space = psutil.disk_usage(project.path).percent\n        except FileNotFoundError:\n            log.warning('Could not find \"{}\" when checking for used disk space'.format(project.path))\n            return\n        if used_disk_space >= 90:\n            message = 'Only {:.2f}% or less of free disk space detected in \"{}\" on \"{}\"'.format(100 - used_disk_space, project.path, platform.node())\n            log.warning(message)\n            project.emit('log.warning', {'message': message})\n\n    def create_project(self, name=None, project_id=None, path=None, variables=None):\n        \"\"\"\n        Create a project and keep a references to it in project manager.\n\n        See documentation of Project for arguments\n        \"\"\"\n        if project_id is not None and project_id in self._projects:\n            return self._projects[project_id]\n        project = Project(name=name, project_id=project_id, path=path, variables=variables)\n        self._check_available_disk_space(project)\n        self._projects[project.id] = project\n        return project\n\n    def remove_project(self, project_id):\n        \"\"\"\n        Removes a Project instance from the list of projects in use.\n\n        :param project_id: Project identifier\n        \"\"\"\n        if project_id not in self._projects:\n            raise aiohttp.web.HTTPNotFound(text=\"Project ID {} doesn't exist\".format(project_id))\n        del self._projects[project_id]\n\n    def check_hardware_virtualization(self, source_node):\n        \"\"\"\n        Checks if hardware virtualization can be used.\n\n        :returns: boolean\n        \"\"\"\n        if Config.instance().get_section_config('Server').getboolean('hardware_virtualization_check', True):\n            for project in self._projects.values():\n                for node in project.nodes:\n                    if node == source_node:\n                        continue\n                    if node.hw_virtualization and node.__class__.__name__ != source_node.__class__.__name__:\n                        return False\n        return True\n\nExample skeleton:\n\n\nclass OutputMapping(algo.AttributeMapping):\n    ''' Map item fields for displaying them.\n    '''\n    @classmethod\n    def formatter_help(cls):\n        ''' Return a list of format specifiers and their documentation.\n        '''\n        pass\n\n    def __init__(self, obj, defaults=None):\n        ''' Store object we want to map, and any default values.\n            @param obj: the wrapped object\n            @type obj: object\n            @param defaults: default values\n            @type defaults: dict\n        '''\n        pass\n\n    def __getitem__(self, key):\n        ''' Return object attribute named C{key}. Additional formatting is provided\n            by adding modifiers like \".sz\" (byte size formatting) to the normal field name.\n            If the wrapped object is None, the upper-case C{key} (without any modifiers)\n            is returned instead, to allow the formatting of a header line.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom pyrocore.torrent import engine\nfrom pyrocore.util import os, fmt, algo, pymagic\nfrom pyrocore import error, config\n\nclass OutputMapping(algo.AttributeMapping):\n    \"\"\" Map item fields for displaying them.\n    \"\"\"\n\n    @classmethod\n    def formatter_help(cls):\n        \"\"\" Return a list of format specifiers and their documentation.\n        \"\"\"\n        result = [('raw', 'Switch off the default field formatter.')]\n        for name, method in globals().items():\n            if name.startswith('fmt_'):\n                result.append((name[4:], method.__doc__.strip()))\n        return result\n\n    def __init__(self, obj, defaults=None):\n        \"\"\" Store object we want to map, and any default values.\n\n            @param obj: the wrapped object\n            @type obj: object\n            @param defaults: default values\n            @type defaults: dict\n        \"\"\"\n        super(OutputMapping, self).__init__(obj, defaults)\n        self.defaults.setdefault('pc', '%')\n\n    def __getitem__(self, key):\n        \"\"\" Return object attribute named C{key}. Additional formatting is provided\n            by adding modifiers like \".sz\" (byte size formatting) to the normal field name.\n\n            If the wrapped object is None, the upper-case C{key} (without any modifiers)\n            is returned instead, to allow the formatting of a header line.\n        \"\"\"\n        formatter = None\n        have_raw = False\n        if '.' in key:\n            key, formats = key.split('.', 1)\n            formats = formats.split('.')\n            have_raw = formats[0] == 'raw'\n            if have_raw:\n                formats = formats[1:]\n            for fmtname in formats:\n                try:\n                    fmtfunc = globals()['fmt_' + fmtname]\n                except KeyError:\n                    raise error.UserError('Unknown formatting spec %r for %r' % (fmtname, key))\n                else:\n                    formatter = (lambda val, f=fmtfunc, k=formatter: f(k(val))) if formatter else fmtfunc\n        try:\n            field = engine.FieldDefinition.FIELDS[key]\n        except KeyError:\n            if key not in self.defaults and (not engine.TorrentProxy.add_manifold_attribute(key)):\n                raise error.UserError('Unknown field %r' % (key,))\n        else:\n            if field._formatter and (not have_raw):\n                formatter = (lambda val, f=formatter: f(field._formatter(val))) if formatter else field._formatter\n        if self.obj is None:\n            return '%' if key == 'pc' else key.upper()\n        else:\n            val = super(OutputMapping, self).__getitem__(key)\n            try:\n                return formatter(val) if formatter else val\n            except (TypeError, ValueError, KeyError, IndexError, AttributeError) as exc:\n                raise error.LoggableError('While formatting %s=%r: %s' % (key, val, exc))\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\nclass KnowledgeGraphRegistry:\n    '''\n    A global registry that keeps track of all knowledge graph classes\n    (subclasses of BaseKnowledgeGraph).\n        '''\n    @classmethod\n    def register(cls, subclass):\n        '''\n        Register a subclass in the global registry. The key is the class name,\n        but you can choose any naming scheme (e.g., subclass.__name__ or\n        a subclass-level variable).\n        '''\n        pass\n    @classmethod\n    def get(cls, name: str):\n        '''\n        Retrieve a knowledge graph class by its name. Returns None if not found.\n        '''\n        pass\n    @classmethod\n    def all_knowledgegraphs(cls):\n        '''\n        Return a list of all registered knowledge graph classes.\n        '''\n        pass"
  }
]