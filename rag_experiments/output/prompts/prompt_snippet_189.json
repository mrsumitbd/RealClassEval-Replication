[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\nclass NameErrorUntilCount:\n    '''Holds counter state for invoking a method several times in a row.'''\n\n    def __init__(self, count):\n        pass\n\n    def go(self):\n        '''Return True until after count threshold has been crossed.\n        Then raise a NameError.\n        '''\n        pass\nCorresponding class implementation:\n\nclass NameErrorUntilCount:\n    \"\"\"Holds counter state for invoking a method several times in a row.\"\"\"\n    derived_message = \"Hi there, I'm a NameError\"\n\n    def __init__(self, count):\n        self.counter = 0\n        self.count = count\n\n    def go(self):\n        \"\"\"Return True until after count threshold has been crossed.\n\n        Then raise a NameError.\n        \"\"\"\n        if self.counter < self.count:\n            self.counter += 1\n            return True\n        raise NameError(self.derived_message)\n\nExample skeleton:\n\n\nclass TimeBasedCache(FastStore):\n    '''A Cache which expires based on time.'''\n\n    def __init__(self, max_size=10, max_age=600):\n        '''Constructor.\n        This cache will refresh the age of the cached object as long as they are\n        accessed within the allowed age. The age refers to the time since it was\n        last touched.\n        Args:\n          max_size: The maximum number of objects held in cache.\n          max_age: The maximum length of time an object is considered alive.\n        '''\n        pass\n\n        def HouseKeeper():\n                '''A housekeeper thread which expunges old objects.'''\n                pass\n    @Synchronized\n    def Get(self, key):\n        pass\n\n    def Put(self, key, obj):\n        pass\nCorresponding class implementation:\n\nimport weakref\nimport time\n\nclass TimeBasedCache(FastStore):\n    \"\"\"A Cache which expires based on time.\"\"\"\n    active_caches = None\n    house_keeper_thread = None\n\n    def __init__(self, max_size=10, max_age=600):\n        \"\"\"Constructor.\n\n        This cache will refresh the age of the cached object as long as they are\n        accessed within the allowed age. The age refers to the time since it was\n        last touched.\n\n        Args:\n          max_size: The maximum number of objects held in cache.\n          max_age: The maximum length of time an object is considered alive.\n        \"\"\"\n        super().__init__(max_size)\n        self.max_age = max_age\n\n        def HouseKeeper():\n            \"\"\"A housekeeper thread which expunges old objects.\"\"\"\n            if not time:\n                return\n            now = time.time()\n            for cache in TimeBasedCache.active_caches:\n                with cache.lock:\n                    for node in list(cache._hash.values()):\n                        if node.data.timestamp + cache.max_age < now:\n                            cache.KillObject(node.data)\n                            cache._age.Unlink(node)\n                            cache._hash.pop(node.key, None)\n        if not TimeBasedCache.house_keeper_thread:\n            TimeBasedCache.active_caches = weakref.WeakSet()\n            TimeBasedCache.house_keeper_thread = InterruptableThread(name='HouseKeeperThread', target=HouseKeeper)\n            TimeBasedCache.house_keeper_thread.start()\n        TimeBasedCache.active_caches.add(self)\n\n    @Synchronized\n    def Get(self, key):\n        now = time.time()\n        stored = super().Get(key)\n        if stored.timestamp + self.max_age < now:\n            raise KeyError('Expired')\n        stored.timestamp = now\n        return stored.value\n\n    def Put(self, key, obj):\n        super().Put(key, TimeBasedCacheEntry(time.time(), obj))\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass RateLimiter:\n    '''Convenience class for enforcing rates in loops.'''\n\n    def __init__(self, hz):\n        '''\n        Args:\n            hz (int): frequency to enforce\n        '''\n        pass\n\n    def sleep(self, env):\n        '''Attempt to sleep at the specified rate in hz.'''\n        pass"
  }
]