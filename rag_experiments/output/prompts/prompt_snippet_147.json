[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n@pulumi.output_type\nclass StorageAccountKeyResponse(dict):\n    '''\n    An access key for the storage account.\n    '''\n\n    def __init__(__self__, *, creation_time: _builtins.str, key_name: _builtins.str, permissions: _builtins.str, value: _builtins.str):\n        '''\n        An access key for the storage account.\n        :param _builtins.str creation_time: Creation time of the key, in round trip date format.\n        :param _builtins.str key_name: Name of the key.\n        :param _builtins.str permissions: Permissions for the key -- read-only or full permissions.\n        :param _builtins.str value: Base 64-encoded value of the key.\n        '''\n        pass\n    @_builtins.property\n    @pulumi.getter(name='creationTime')\n    def creation_time(self) -> _builtins.str:\n        '''\n        Creation time of the key, in round trip date format.\n        '''\n        pass\n    @_builtins.property\n    @pulumi.getter(name='keyName')\n    def key_name(self) -> _builtins.str:\n        '''\n        Name of the key.\n        '''\n        pass\n    @_builtins.property\n    @pulumi.getter\n    def permissions(self) -> _builtins.str:\n        '''\n        Permissions for the key -- read-only or full permissions.\n        '''\n        pass\n    @_builtins.property\n    @pulumi.getter\n    def value(self) -> _builtins.str:\n        '''\n        Base 64-encoded value of the key.\n        '''\n        pass\nCorresponding class implementation:\n\nimport builtins as _builtins\nimport pulumi.runtime\nimport pulumi\n\n@pulumi.output_type\nclass StorageAccountKeyResponse(dict):\n    \"\"\"\n    An access key for the storage account.\n    \"\"\"\n\n    def __init__(__self__, *, creation_time: _builtins.str, key_name: _builtins.str, permissions: _builtins.str, value: _builtins.str):\n        \"\"\"\n        An access key for the storage account.\n        :param _builtins.str creation_time: Creation time of the key, in round trip date format.\n        :param _builtins.str key_name: Name of the key.\n        :param _builtins.str permissions: Permissions for the key -- read-only or full permissions.\n        :param _builtins.str value: Base 64-encoded value of the key.\n        \"\"\"\n        pulumi.set(__self__, 'creation_time', creation_time)\n        pulumi.set(__self__, 'key_name', key_name)\n        pulumi.set(__self__, 'permissions', permissions)\n        pulumi.set(__self__, 'value', value)\n\n    @_builtins.property\n    @pulumi.getter(name='creationTime')\n    def creation_time(self) -> _builtins.str:\n        \"\"\"\n        Creation time of the key, in round trip date format.\n        \"\"\"\n        return pulumi.get(self, 'creation_time')\n\n    @_builtins.property\n    @pulumi.getter(name='keyName')\n    def key_name(self) -> _builtins.str:\n        \"\"\"\n        Name of the key.\n        \"\"\"\n        return pulumi.get(self, 'key_name')\n\n    @_builtins.property\n    @pulumi.getter\n    def permissions(self) -> _builtins.str:\n        \"\"\"\n        Permissions for the key -- read-only or full permissions.\n        \"\"\"\n        return pulumi.get(self, 'permissions')\n\n    @_builtins.property\n    @pulumi.getter\n    def value(self) -> _builtins.str:\n        \"\"\"\n        Base 64-encoded value of the key.\n        \"\"\"\n        return pulumi.get(self, 'value')\n\nExample skeleton:\n\n\nclass PlatformUtility:\n    '''\n    Provides an easy way to get the current platform.\n    '''\n    @staticmethod\n    def get() -> str:\n        '''\n        Returns the current platform.\n        '''\n        pass\n    @classmethod\n    def is_cygwin(cls) -> bool:\n        '''\n        Checks if the current platform is in our cygwin list.\n        '''\n        pass\n    @classmethod\n    def is_windows(cls) -> bool:\n        '''\n        Checks if the current platform is in our windows list.\n        '''\n        pass\n    @classmethod\n    def is_unix(cls) -> bool:\n        '''\n        Checks if the current platform is in our unix list.\n        '''\n        pass\n    @classmethod\n    def is_mac_os(cls) -> bool:\n        '''\n        Checks if the current platform is in our OSX list.\n        '''\n        pass\nCorresponding class implementation:\n\nimport platform\n\nclass PlatformUtility:\n    \"\"\"\n    Provides an easy way to get the current platform.\n    \"\"\"\n    WINDOWS: list = ['windows']\n    '\\n    Provides the list of supported windows platform.\\n    '\n    CYGWIN: list = ['cygwin', 'cygwin_nt-10.0']\n    '\\n    Provides the list of supporter cygwin platform.\\n    '\n    UNIX: list = ['linux', 'darwin']\n    '\\n    Provides the list of supported unix platform.\\n    '\n    MAC: list = ['darwin']\n    '\\n    Provides the list of supported MAC platform.\\n    '\n\n    @staticmethod\n    def get() -> str:\n        \"\"\"\n        Returns the current platform.\n        \"\"\"\n        return platform.system().lower()\n\n    @classmethod\n    def is_cygwin(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our cygwin list.\n        \"\"\"\n        current_platform = cls.get()\n        return any((x in current_platform for x in cls.CYGWIN))\n\n    @classmethod\n    def is_windows(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our windows list.\n        \"\"\"\n        return cls.get() in cls.WINDOWS or cls.is_cygwin()\n\n    @classmethod\n    def is_unix(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our unix list.\n        \"\"\"\n        return cls.get() in cls.UNIX\n\n    @classmethod\n    def is_mac_os(cls) -> bool:\n        \"\"\"\n        Checks if the current platform is in our OSX list.\n        \"\"\"\n        return cls.get() in cls.MAC\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass PromptLeakageTemplate:\n    '''\n    PromptLeakageTemplate class for generating baseline prompt leakage attack prompts\n    across different categories: secrets and credentials, instructions (system and user prompts),\n    guard exposure, and permissions and roles.\n    '''\n    @staticmethod\n    def generate_baseline_attacks(vulnerability_type: PromptLeakageType, max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate baseline attack prompts for prompt leakage vulnerabilities based on the specific type.\n        '''\n        pass\n    @staticmethod\n    def generate_secrets_and_credentials_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate prompts that try to coax out API keys, database creds, or schematic secrets.\n        '''\n        pass\n    @staticmethod\n    def generate_instructions_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate prompts that probe for hidden system or user instructions.\n        '''\n        pass\n    @staticmethod\n    def generate_guard_exposure_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate prompts that try to surface the model's safety-filter criteria.\n        '''\n        pass\n    @staticmethod\n    def generate_permissions_and_roles_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate prompts that seek the model's role hierarchy or privileged command list.\n        '''\n        pass"
  }
]