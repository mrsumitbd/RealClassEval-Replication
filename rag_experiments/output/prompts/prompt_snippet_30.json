[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    '''A pressure sensor type.'''\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        '''Build a pressure sensor class.'''\n        pass\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        '''Set the sensor data on the class and return the new data.'''\n        pass\nCorresponding class implementation:\n\nfrom typing import List, Union\nfrom opentrons_hardware.firmware_bindings.constants import NodeId, SensorId, SensorType\nfrom opentrons_hardware.firmware_bindings.messages.fields import SensorTypeField\nfrom opentrons_hardware.sensors.types import SensorDataType, EnvironmentSensorDataType\nfrom dataclasses import dataclass\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    \"\"\"A pressure sensor type.\"\"\"\n    data: SensorDataType\n\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        \"\"\"Build a pressure sensor class.\"\"\"\n        info = SensorInformation(SensorType.pressure, sensor_id, node_id)\n        sensor_data = SensorDataType.build(0, SensorTypeField(SensorType.pressure))\n        return cls(info, offset, 1, zero_threshold, stop_threshold, sensor_data)\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        \"\"\"Set the sensor data on the class and return the new data.\"\"\"\n        self.data = sensor_data[0]\n        return self.data\n\nExample skeleton:\n\n\nclass Histogram:\n    '''A histogram of timestamps.'''\n\n    def __init__(self, min_timestamp: int, max_timestamp: int, num_buckets: int, values: list[int]):\n        pass\n\n    def _GetBucketIndex(self, timestamp: int) -> int:\n        pass\n\n    def _Insert(self, timestamp: int) -> None:\n        pass\n\n    def GetCumulativeHistogram(self) -> 'Histogram':\n        '''Returns the cumulative histogram.'''\n        pass\nCorresponding class implementation:\n\nimport math\n\nclass Histogram:\n    \"\"\"A histogram of timestamps.\"\"\"\n    min_timestamp: int\n    max_timestamp: int\n    num_buckets: int\n    bucket_size: float\n    buckets: list[Bucket]\n\n    def __init__(self, min_timestamp: int, max_timestamp: int, num_buckets: int, values: list[int]):\n        self.min_timestamp = min_timestamp\n        self.max_timestamp = max_timestamp\n        self.num_buckets = num_buckets\n        self.bucket_size = (max_timestamp - min_timestamp) / num_buckets\n        self.buckets = []\n        for i in range(num_buckets):\n            lower = min_timestamp + i * self.bucket_size\n            self.buckets.append(Bucket(lower_boundary_ts=lower))\n        for value in values:\n            self._Insert(value)\n\n    def _GetBucketIndex(self, timestamp: int) -> int:\n        if self.bucket_size == 0:\n            return 0\n        index = math.floor((timestamp - self.min_timestamp) / self.bucket_size)\n        if index < 0:\n            raise ValueError(f'Timestamp `{timestamp}` must be larger than `{self.min_timestamp}`')\n        if index >= self.num_buckets:\n            index = self.num_buckets - 1\n        return index\n\n    def _Insert(self, timestamp: int) -> None:\n        self.buckets[self._GetBucketIndex(timestamp)].count += 1\n\n    def GetCumulativeHistogram(self) -> 'Histogram':\n        \"\"\"Returns the cumulative histogram.\"\"\"\n        cumulative_histogram = Histogram(min_timestamp=self.min_timestamp, max_timestamp=self.max_timestamp, num_buckets=self.num_buckets, values=[])\n        cumulative_count = 0\n        for index, bucket in enumerate(self.buckets):\n            cumulative_count += bucket.count\n            cumulative_histogram.buckets[index].count = cumulative_count\n        return cumulative_histogram\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass AggregatedStats:\n    '''Statistics for aggregated usage data.'''\n\n    def add_entry(self, entry: UsageEntry) -> None:\n        '''Add an entry's statistics to this aggregate.'''\n        pass\n\n    def to_dict(self) -> Dict[str, Any]:\n        '''Convert to dictionary format.'''\n        pass"
  }
]