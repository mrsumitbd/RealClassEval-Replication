[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass LibTst(s_stormtypes.Lib):\n    '''\n    LibTst for testing!\n    '''\n\n    def addLibFuncs(self):\n        pass\n\n    async def beep(self, valu):\n        '''\n        Example storm func\n        '''\n        pass\n\n    async def someargs(self, valu, bar=True, faz=None):\n        '''\n        Example storm func\n        '''\n        pass\nCorresponding class implementation:\n\nimport synapse.lib.stormtypes as s_stormtypes\n\nclass LibTst(s_stormtypes.Lib):\n    \"\"\"\n    LibTst for testing!\n    \"\"\"\n    _storm_locals = ({'name': 'beep', 'deprecated': {'eoldate': '8080-08-08'}, 'desc': '\\n        Example storm func.\\n\\n        Notes:\\n            It beeps strings!', 'type': {'type': 'function', '_funcname': 'beep', 'args': ({'name': 'valu', 'type': 'str', 'desc': 'The value to beep.'},), 'returns': {'type': 'str', 'desc': 'The beeped string.'}}}, {'name': 'someargs', 'desc': 'Example storm func with args.', 'deprecated': {'eolvers': 'v3.0.0', 'mesg': 'This is a test library was deprecated from the day it was made.'}, 'type': {'type': 'function', '_funcname': 'someargs', 'args': ({'name': 'valu', 'type': 'str', 'desc': 'The value to beep.'}, {'name': 'bar', 'type': 'bool', 'desc': 'The value to beep.', 'default': True}, {'name': 'faz', 'type': 'str', 'desc': 'The value to beep.', 'default': None}), 'returns': {'type': 'str', 'desc': 'The beeped string.'}}})\n    _storm_lib_path = ('test',)\n\n    def addLibFuncs(self):\n        self.locls.update({'beep': self.beep, 'someargs': self.someargs})\n\n    async def beep(self, valu):\n        \"\"\"\n        Example storm func\n        \"\"\"\n        ret = f'A {valu} beep!'\n        return ret\n\n    async def someargs(self, valu, bar=True, faz=None):\n        \"\"\"\n        Example storm func\n        \"\"\"\n        ret = f'A {valu} beep which {bar} the {faz}!'\n        return ret\n\nExample skeleton:\n\nclass StateMachine:\n    '''\n    StateMachine model interpreter.\n    '''\n\n    def __init__(self, model):\n        pass\n\n    def set_state(self, state):\n        pass\n\n    def event(self, event):\n        pass\n\n    def print_menu(self):\n        pass\n\n    def interpret(self):\n        '''\n        Main interpreter loop.\n        '''\n        pass\nCorresponding class implementation:\n\nclass StateMachine:\n    \"\"\"\n    StateMachine model interpreter.\n    \"\"\"\n\n    def __init__(self, model):\n        self.model = model\n        self.current_state = None\n        self.initial_state = model.states[0]\n        self.set_state(self.initial_state)\n\n    def set_state(self, state):\n        if self.current_state is None or state is not self.current_state:\n            for action in state.actions:\n                print('Executing action ', action.name)\n            print('Transition to state ', state.name)\n            self.current_state = state\n\n    def event(self, event):\n        if event in self.model.resetEvents:\n            self.set_state(self.initial_state)\n        else:\n            for transition in self.current_state.transitions:\n                if transition.event is event:\n                    self.set_state(transition.to_state)\n                    return\n\n    def print_menu(self):\n        print('Current state: ', self.current_state.name)\n        print('Choose event:')\n        for idx, event in enumerate(self.model.events):\n            print(idx + 1, '-', event.name, event.code)\n        print('q - quit')\n\n    def interpret(self):\n        \"\"\"\n        Main interpreter loop.\n        \"\"\"\n        self.print_menu()\n        while True:\n            try:\n                event = input()\n                if event == 'q':\n                    return\n                event = int(event)\n                event = self.model.events[event - 1]\n            except Exception:\n                print('Invalid input')\n            self.event(event)\n            self.print_menu()\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass AutoDiceRoller:\n    '''\n    AutoDiceRoller\n    '''\n\n    def __init__(self, args):\n        '''\n        Init AutoDiceRoller\n        '''\n        pass\n\n    def update_img_frame_debug(self):\n        '''\n        update_img_frame_debug\n        '''\n        pass\n\n    def run_once(self):\n        '''\n        Process one game window frame\n        '''\n        pass"
  }
]