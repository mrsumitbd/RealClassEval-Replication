[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass DatatableJSONResponseMixin(object):\n\n    def dispatch(self, request, *args, **kwargs):\n        pass\n\n    def get_json_response_object(self, datatable):\n        '''\n        Returns the JSON-compatible dictionary that will be serialized for an AJAX response.\n        The value names are in the form \"s~\" for strings, \"i~\" for integers, and \"a~\" for arrays,\n        if you're unfamiliar with the old C-style jargon used in dataTables.js.  \"aa~\" means\n        \"array of arrays\".  In some instances, the author uses \"ao~\" for \"array of objects\", an\n        object being a javascript dictionary.\n        '''\n        pass\n\n    def serialize_to_json(self, response_data):\n        '''Returns the JSON string for the compiled data object.'''\n        pass\nCorresponding class implementation:\n\nimport json\nfrom django.conf import settings\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.utils.encoding import escape_uri_path\n\nclass DatatableJSONResponseMixin(object):\n\n    def dispatch(self, request, *args, **kwargs):\n        try:\n            is_ajax = request.headers.get('x-requested-with') == 'XMLHttpRequest'\n        except AttributeError:\n            is_ajax = request.is_ajax()\n        if is_ajax or getattr(request, request.method).get('ajax') == 'true':\n            datatable = self.get_datatable()\n            datatable.configure()\n            if request.method == datatable.config['request_method']:\n                return self.get_ajax(request, *args, **kwargs)\n        return super(DatatableJSONResponseMixin, self).dispatch(request, *args, **kwargs)\n\n    def get_json_response_object(self, datatable):\n        \"\"\"\n        Returns the JSON-compatible dictionary that will be serialized for an AJAX response.\n\n        The value names are in the form \"s~\" for strings, \"i~\" for integers, and \"a~\" for arrays,\n        if you're unfamiliar with the old C-style jargon used in dataTables.js.  \"aa~\" means\n        \"array of arrays\".  In some instances, the author uses \"ao~\" for \"array of objects\", an\n        object being a javascript dictionary.\n        \"\"\"\n        datatable.populate_records()\n        draw = getattr(self.request, self.request.method).get('draw', None)\n        if draw is not None:\n            draw = escape_uri_path(draw)\n        response_data = {'draw': draw, 'recordsFiltered': datatable.unpaged_record_count, 'recordsTotal': datatable.total_initial_record_count, 'data': [dict(record, **{'DT_RowId': record.pop('pk'), 'DT_RowData': record.pop('_extra_data')}) for record in datatable.get_records()]}\n        return response_data\n\n    def serialize_to_json(self, response_data):\n        \"\"\"Returns the JSON string for the compiled data object.\"\"\"\n        indent = None\n        if settings.DEBUG:\n            indent = 4\n        return json.dumps(response_data, indent=indent, cls=DjangoJSONEncoder)\n\nExample skeleton:\n\n\nclass SearchSettingsConversationalSearch:\n    '''\n    Configuration settings for conversational search.\n    :param bool enabled: Whether to enable conversational search.\n    :param SearchSettingsConversationalSearchResponseLength response_length:\n          (optional)\n    :param SearchSettingsConversationalSearchSearchConfidence search_confidence:\n          (optional)\n    '''\n\n    def __init__(self, enabled: bool, *, response_length: Optional['SearchSettingsConversationalSearchResponseLength']=None, search_confidence: Optional['SearchSettingsConversationalSearchSearchConfidence']=None) -> None:\n        '''\n        Initialize a SearchSettingsConversationalSearch object.\n        :param bool enabled: Whether to enable conversational search.\n        :param SearchSettingsConversationalSearchResponseLength response_length:\n               (optional)\n        :param SearchSettingsConversationalSearchSearchConfidence\n               search_confidence: (optional)\n        '''\n        pass\n    @classmethod\n    def from_dict(cls, _dict: Dict) -> 'SearchSettingsConversationalSearch':\n        '''Initialize a SearchSettingsConversationalSearch object from a json dictionary.'''\n        pass\n    @classmethod\n    def _from_dict(cls, _dict):\n        '''Initialize a SearchSettingsConversationalSearch object from a json dictionary.'''\n        pass\n\n    def to_dict(self) -> Dict:\n        '''Return a json dictionary representing this model.'''\n        pass\n\n    def _to_dict(self):\n        '''Return a json dictionary representing this model.'''\n        pass\n\n    def __str__(self) -> str:\n        '''Return a `str` version of this SearchSettingsConversationalSearch object.'''\n        pass\n\n    def __eq__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        '''Return `true` when self and other are equal, false otherwise.'''\n        pass\n\n    def __ne__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        '''Return `true` when self and other are not equal, false otherwise.'''\n        pass\nCorresponding class implementation:\n\nimport json\nfrom typing import BinaryIO, Dict, List, Optional\n\nclass SearchSettingsConversationalSearch:\n    \"\"\"\n    Configuration settings for conversational search.\n\n    :param bool enabled: Whether to enable conversational search.\n    :param SearchSettingsConversationalSearchResponseLength response_length:\n          (optional)\n    :param SearchSettingsConversationalSearchSearchConfidence search_confidence:\n          (optional)\n    \"\"\"\n\n    def __init__(self, enabled: bool, *, response_length: Optional['SearchSettingsConversationalSearchResponseLength']=None, search_confidence: Optional['SearchSettingsConversationalSearchSearchConfidence']=None) -> None:\n        \"\"\"\n        Initialize a SearchSettingsConversationalSearch object.\n\n        :param bool enabled: Whether to enable conversational search.\n        :param SearchSettingsConversationalSearchResponseLength response_length:\n               (optional)\n        :param SearchSettingsConversationalSearchSearchConfidence\n               search_confidence: (optional)\n        \"\"\"\n        self.enabled = enabled\n        self.response_length = response_length\n        self.search_confidence = search_confidence\n\n    @classmethod\n    def from_dict(cls, _dict: Dict) -> 'SearchSettingsConversationalSearch':\n        \"\"\"Initialize a SearchSettingsConversationalSearch object from a json dictionary.\"\"\"\n        args = {}\n        if (enabled := _dict.get('enabled')) is not None:\n            args['enabled'] = enabled\n        else:\n            raise ValueError(\"Required property 'enabled' not present in SearchSettingsConversationalSearch JSON\")\n        if (response_length := _dict.get('response_length')) is not None:\n            args['response_length'] = SearchSettingsConversationalSearchResponseLength.from_dict(response_length)\n        if (search_confidence := _dict.get('search_confidence')) is not None:\n            args['search_confidence'] = SearchSettingsConversationalSearchSearchConfidence.from_dict(search_confidence)\n        return cls(**args)\n\n    @classmethod\n    def _from_dict(cls, _dict):\n        \"\"\"Initialize a SearchSettingsConversationalSearch object from a json dictionary.\"\"\"\n        return cls.from_dict(_dict)\n\n    def to_dict(self) -> Dict:\n        \"\"\"Return a json dictionary representing this model.\"\"\"\n        _dict = {}\n        if hasattr(self, 'enabled') and self.enabled is not None:\n            _dict['enabled'] = self.enabled\n        if hasattr(self, 'response_length') and self.response_length is not None:\n            if isinstance(self.response_length, dict):\n                _dict['response_length'] = self.response_length\n            else:\n                _dict['response_length'] = self.response_length.to_dict()\n        if hasattr(self, 'search_confidence') and self.search_confidence is not None:\n            if isinstance(self.search_confidence, dict):\n                _dict['search_confidence'] = self.search_confidence\n            else:\n                _dict['search_confidence'] = self.search_confidence.to_dict()\n        return _dict\n\n    def _to_dict(self):\n        \"\"\"Return a json dictionary representing this model.\"\"\"\n        return self.to_dict()\n\n    def __str__(self) -> str:\n        \"\"\"Return a `str` version of this SearchSettingsConversationalSearch object.\"\"\"\n        return json.dumps(self.to_dict(), indent=2)\n\n    def __eq__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        \"\"\"Return `true` when self and other are equal, false otherwise.\"\"\"\n        if not isinstance(other, self.__class__):\n            return False\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        \"\"\"Return `true` when self and other are not equal, false otherwise.\"\"\"\n        return not self == other\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass GlobalBioDTO:\n    '''Global biography data transfer object'''\n    @classmethod\n    def from_model(cls, model: 'L1Bio') -> 'GlobalBioDTO':\n        '''\n        Create DTO from database model\n        Args:\n            model (L1Bio): database model object\n        Returns:\n            GlobalBioDTO: data transfer object\n        '''\n        pass\n\n    def to_dict(self) -> dict:\n        '''\n        Convert to dictionary format\n        Returns:\n            dict: dictionary format data\n        '''\n        pass"
  }
]