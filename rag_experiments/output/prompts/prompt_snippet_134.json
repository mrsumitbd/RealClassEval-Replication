[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n@register(Klass.ChromeFX.value)\nclass Satin(_Effect, _ColorMixin):\n    '''Satin effect'''\n    @property\n    def anti_aliased(self) -> bool:\n        '''Anti-aliased.'''\n        pass\n    @property\n    def inverted(self) -> bool:\n        '''Inverted.'''\n        pass\n    @property\n    def angle(self):\n        '''Angle value.'''\n        pass\n    @property\n    def distance(self):\n        '''Distance value.'''\n        pass\n    @property\n    def size(self):\n        '''Size value in pixel.'''\n        pass\n    @property\n    def contour(self):\n        '''Contour configuration.'''\n        pass\nCorresponding class implementation:\n\nfrom psd_tools.terminology import Key, Klass\n\n@register(Klass.ChromeFX.value)\nclass Satin(_Effect, _ColorMixin):\n    \"\"\"Satin effect\"\"\"\n\n    @property\n    def anti_aliased(self) -> bool:\n        \"\"\"Anti-aliased.\"\"\"\n        return bool(self.value.get(Key.AntiAlias))\n\n    @property\n    def inverted(self) -> bool:\n        \"\"\"Inverted.\"\"\"\n        return bool(self.value.get(Key.Invert))\n\n    @property\n    def angle(self):\n        \"\"\"Angle value.\"\"\"\n        return self.value.get(Key.LocalLightingAngle).value\n\n    @property\n    def distance(self):\n        \"\"\"Distance value.\"\"\"\n        return self.value.get(Key.Distance).value\n\n    @property\n    def size(self):\n        \"\"\"Size value in pixel.\"\"\"\n        return self.value.get(Key.Blur).value\n\n    @property\n    def contour(self):\n        \"\"\"Contour configuration.\"\"\"\n        return self.value.get(Key.MappingShape)\n\nExample skeleton:\n\n\nclass Type(IntEnum):\n    '''[Type] L2TP Type'''\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        '''Backport support for original codes.\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n        :meta private:\n                        '''\n                        pass\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        '''Lookup function used when value is not found.\n        Args:\n            value: Value to get enum item.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom aenum import IntEnum, extend_enum\n\nclass Type(IntEnum):\n    \"\"\"[Type] L2TP Type\"\"\"\n    Control = 0\n    Data = 1\n\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        \"\"\"Backport support for original codes.\n\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n\n        :meta private:\n        \"\"\"\n        if isinstance(key, int):\n            return Type(key)\n        if key not in Type._member_map_:\n            return extend_enum(Type, key, default)\n        return Type[key]\n\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        \"\"\"Lookup function used when value is not found.\n\n        Args:\n            value: Value to get enum item.\n\n        \"\"\"\n        if not (isinstance(value, int) and 0 <= value <= 1):\n            raise ValueError('%r is not a valid %s' % (value, cls.__name__))\n        return extend_enum(cls, 'Unassigned_%d' % value, value)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass Text_shadow:\n    '''文本阴影参数'''\n\n    def __init__(self, *, has_shadow: bool=False, alpha: float=0.9, angle: float=-45.0, color: str='#000000', distance: float=5.0, smoothing: float=0.45):\n        '''\n        Args:\n            has_shadow (`bool`, optional): 是否启用阴影，默认为False\n            alpha (`float`, optional): 阴影不透明度，取值范围[0, 1]，默认为0.9\n            angle (`float`, optional): 阴影角度，取值范围[-180, 180], 默认为-45.0\n            color (`str`, optional): 阴影颜色，格式为'#RRGGBB'，默认为黑色\n            distance (`float`, optional): 阴影距离，默认为5.0\n            smoothing (`float`, optional): 阴影平滑度，取值范围[0, 1], 默认0.15\n        '''\n        pass\n\n    def export_json(self) -> Dict[str, Any]:\n        '''生成子JSON数据，在Text_segment导出时合并到其中'''\n        pass"
  }
]