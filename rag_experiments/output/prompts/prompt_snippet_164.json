[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass ReplaceTemplate(_util.Immutable, Generic[AnyStr]):\n    '''Replacement template expander.'''\n\n    def __init__(self, groups: tuple[tuple[int, int], ...], group_slots: tuple[tuple[int, tuple[int | None, int | None, Any]], ...], literals: tuple[AnyStr | None, ...], pattern_hash: int, use_format: bool, is_bytes: bool) -> None:\n        '''Initialize.'''\n        pass\n\n    def __call__(self, m: Match[AnyStr] | None) -> AnyStr:\n        '''Call.'''\n        pass\n\n    def __hash__(self) -> int:\n        '''Hash.'''\n        pass\n\n    def __eq__(self, other: Any) -> bool:\n        '''Equal.'''\n        pass\n\n    def __ne__(self, other: Any) -> bool:\n        '''Equal.'''\n        pass\n\n    def __repr__(self) -> str:\n        '''Representation.'''\n        pass\n\n    def _get_group_index(self, index: int) -> int:\n        '''Find and return the appropriate group index.'''\n        pass\n\n    def _get_group_attributes(self, index: int) -> tuple[int | None, int | None, Any]:\n        '''Find and return the appropriate group case.'''\n        pass\n\n    def expand(self, m: Match[AnyStr] | None) -> AnyStr:\n        '''Using the template, expand the string.'''\n        pass\nCorresponding class implementation:\n\nfrom typing import Generic, AnyStr, Match, Any, Pattern, cast\nfrom . import util as _util\n\nclass ReplaceTemplate(_util.Immutable, Generic[AnyStr]):\n    \"\"\"Replacement template expander.\"\"\"\n    __slots__ = ('groups', 'group_slots', 'literals', 'pattern_hash', 'use_format', '_hash', '_bytes')\n    groups: tuple[tuple[int, int], ...]\n    group_slots: tuple[tuple[int, tuple[int | None, int | None, Any]], ...]\n    literals: tuple[AnyStr | None, ...]\n    pattern_hash: int\n    use_format: bool\n    _hash: int\n    _bytes: bool\n\n    def __init__(self, groups: tuple[tuple[int, int], ...], group_slots: tuple[tuple[int, tuple[int | None, int | None, Any]], ...], literals: tuple[AnyStr | None, ...], pattern_hash: int, use_format: bool, is_bytes: bool) -> None:\n        \"\"\"Initialize.\"\"\"\n        super().__init__(use_format=use_format, groups=groups, group_slots=group_slots, literals=literals, pattern_hash=pattern_hash, _bytes=is_bytes, _hash=hash((type(self), groups, group_slots, literals, pattern_hash, use_format, is_bytes)))\n\n    def __call__(self, m: Match[AnyStr] | None) -> AnyStr:\n        \"\"\"Call.\"\"\"\n        return self.expand(m)\n\n    def __hash__(self) -> int:\n        \"\"\"Hash.\"\"\"\n        return self._hash\n\n    def __eq__(self, other: Any) -> bool:\n        \"\"\"Equal.\"\"\"\n        return isinstance(other, ReplaceTemplate) and self.groups == other.groups and (self.group_slots == other.group_slots) and (self.literals == other.literals) and (self.pattern_hash == other.pattern_hash) and (self.use_format == other.use_format) and (self._bytes == other._bytes)\n\n    def __ne__(self, other: Any) -> bool:\n        \"\"\"Equal.\"\"\"\n        return not isinstance(other, ReplaceTemplate) or self.groups != other.groups or self.group_slots != other.group_slots or (self.literals != other.literals) or (self.pattern_hash != other.pattern_hash) or (self.use_format != other.use_format) or (self._bytes != self._bytes)\n\n    def __repr__(self) -> str:\n        \"\"\"Representation.\"\"\"\n        return '{}.{}({!r}, {!r}, {!r}, {!r}, {!r})'.format(self.__module__, self.__class__.__name__, self.groups, self.group_slots, self.literals, self.pattern_hash, self.use_format)\n\n    def _get_group_index(self, index: int) -> int:\n        \"\"\"Find and return the appropriate group index.\"\"\"\n        g_index = 0\n        for group in self.groups:\n            if group[0] == index:\n                g_index = group[1]\n                break\n        return g_index\n\n    def _get_group_attributes(self, index: int) -> tuple[int | None, int | None, Any]:\n        \"\"\"Find and return the appropriate group case.\"\"\"\n        g_case = (None, None, -1)\n        for group in self.group_slots:\n            if group[0] == index:\n                g_case = group[1]\n                break\n        return g_case\n\n    def expand(self, m: Match[AnyStr] | None) -> AnyStr:\n        \"\"\"Using the template, expand the string.\"\"\"\n        if m is None:\n            raise ValueError('Match is None!')\n        sep = m.string[:0]\n        if not isinstance(sep, bytes if self._bytes else str):\n            raise TypeError('Match string type does not match expander string type!')\n        text = []\n        for x in range(0, len(self.literals)):\n            index = x\n            l = self.literals[x]\n            if l is None:\n                g_index = self._get_group_index(index)\n                span_case, single_case, capture = self._get_group_attributes(index)\n                if not self.use_format:\n                    try:\n                        l = m.group(g_index)\n                        if l is None:\n                            l = sep\n                    except IndexError as e:\n                        raise IndexError(f\"'{g_index}' is out of range!\") from e\n                else:\n                    try:\n                        obj = m.group(g_index)\n                    except IndexError as e:\n                        raise IndexError(f\"'{g_index}' is out of range!\") from e\n                    l = _util.format_captures([] if obj is None else [obj], capture, _util._to_bstr if isinstance(sep, bytes) else _util._to_str, sep)\n                if span_case is not None:\n                    if span_case == _LOWER:\n                        l = l.lower()\n                    else:\n                        l = l.upper()\n                if single_case is not None:\n                    if single_case == _LOWER:\n                        l = l[0:1].lower() + l[1:]\n                    else:\n                        l = l[0:1].upper() + l[1:]\n            text.append(l)\n        return sep.join(text)\n\nExample skeleton:\n\n\nclass CommandLineParser:\n\n    def __init__(self, sslyze_version: str) -> None:\n        '''Generate SSLyze's command line parser.'''\n        pass\n\n    def parse_command_line(self) -> ParsedCommandLine:\n        '''Parses the command line used to launch SSLyze.'''\n        pass\n\n    def _add_default_options(self) -> None:\n        '''Add default command line options to the parser.'''\n        pass\n    @staticmethod\n    def _get_plugin_scan_commands() -> List[OptParseCliOption]:\n        '''Retrieve the list of command line options implemented by the plugins currently available.'''\n        pass\nCorresponding class implementation:\n\nimport pydantic\nfrom typing import Set, List, Optional, Dict\nfrom argparse import ArgumentParser\nfrom sslyze.cli.server_string_parser import InvalidServerStringError, CommandLineServerStringParser\nfrom typing import Tuple\nfrom sslyze.plugins.certificate_info.trust_stores.trust_store_repository import TrustStoresRepository\nfrom sslyze.plugins.plugin_base import OptParseCliOption\nfrom sslyze.server_setting import HttpProxySettings, ServerNetworkLocation, ServerNetworkConfiguration, InvalidServerNetworkConfigurationError, ServerHostnameCouldNotBeResolved, ClientAuthenticationCredentials\nfrom sslyze.connection_helpers.opportunistic_tls_helpers import ProtocolWithOpportunisticTlsEnum\nfrom sslyze.mozilla_tls_profile.tls_config_checker import TlsConfigurationAsJson, MozillaTlsConfiguration, TlsConfigurationEnum, SCAN_COMMANDS_NEEDED_BY_MOZILLA_CHECKER\nfrom sslyze.plugins import plugin_base\nfrom nassl.ssl_client import OpenSslFileTypeEnum\nfrom sslyze.plugins.scan_commands import ScanCommand, ScanCommandsRepository\nfrom pathlib import Path\nfrom sslyze.scanner.models import ScanCommandsExtraArguments\n\nclass CommandLineParser:\n\n    def __init__(self, sslyze_version: str) -> None:\n        \"\"\"Generate SSLyze's command line parser.\"\"\"\n        self._parser = ArgumentParser(prog='sslyze', description=f'SSLyze version {sslyze_version}')\n        self._add_default_options()\n        scan_commands_group = self._parser.add_argument_group('Scan commands')\n        for scan_option in self._get_plugin_scan_commands():\n            scan_commands_group.add_argument(f'--{scan_option.option}', help=scan_option.help, action=scan_option.action)\n        self._parser.add_argument('--custom_tls_config', help=\"Path to a JSON file containing a specific TLS configuration to check the server against, following Mozilla's format. Cannot be used with --mozilla_config.\", dest='custom_tls_config', type=str, default=None)\n        self._parser.add_argument('--mozilla_config', action='store', dest='mozilla_config', choices=['modern', 'intermediate', 'old', 'disable'], help='Shortcut to queue various scan commands needed to check the server\\'s TLS configurations against one of Mozilla\\'s recommended TLS configurations. Set to \"intermediate\" by default. Use \"disable\" to disable this check.')\n        self._parser.add_argument(dest='target', default=[], nargs='*', help='The list of servers to scan.')\n\n    def parse_command_line(self) -> ParsedCommandLine:\n        \"\"\"Parses the command line used to launch SSLyze.\"\"\"\n        args_command_list = self._parser.parse_args()\n        args_target_list = []\n        if args_command_list.update_trust_stores:\n            TrustStoresRepository.update_default()\n            raise TrustStoresUpdateCompleted()\n        if args_command_list.targets_in:\n            try:\n                with open(args_command_list.targets_in) as f:\n                    for target in f.readlines():\n                        if target.strip():\n                            if not target.startswith('#'):\n                                args_target_list.append(target.strip())\n            except IOError:\n                raise CommandLineParsingError(f\"Can't read targets from input file '{args_command_list.targets_in}'\")\n        for target in args_command_list.target:\n            args_target_list.append(target)\n        if not args_target_list:\n            raise CommandLineParsingError('No targets to scan.')\n        if args_command_list.custom_tls_config and args_command_list.mozilla_config:\n            raise CommandLineParsingError('Cannot use --custom_tls_config and --mozilla_config. Please specify one of the two.')\n        tls_config_to_check_against_as_enum: Optional[TlsConfigurationEnum] = None\n        tls_config_to_check_against: Optional[TlsConfigurationAsJson] = None\n        if args_command_list.custom_tls_config:\n            tls_config_to_check_against_as_enum = TlsConfigurationEnum.CUSTOM\n            json_tls_config_path = Path(args_command_list.custom_tls_config).absolute()\n            if not json_tls_config_path.exists():\n                raise CommandLineParsingError(f\"Custom TLS profile file '{json_tls_config_path}' does not exist\")\n            try:\n                tls_config_to_check_against = TlsConfigurationAsJson.model_validate_json(json_tls_config_path.read_text())\n            except pydantic.ValidationError:\n                raise CommandLineParsingError(f\"Could not parse custom TLS configuration file '{json_tls_config_path}'\")\n        elif args_command_list.mozilla_config:\n            mozilla_config_map = {'modern': TlsConfigurationEnum.MOZILLA_MODERN, 'intermediate': TlsConfigurationEnum.MOZILLA_INTERMEDIATE, 'old': TlsConfigurationEnum.MOZILLA_OLD, 'disable': None}\n            try:\n                tls_config_to_check_against_as_enum = mozilla_config_map[args_command_list.mozilla_config]\n            except KeyError:\n                raise CommandLineParsingError(f'Unknown value for --mozilla_config: {args_command_list.mozilla_config}')\n            if tls_config_to_check_against_as_enum is not None:\n                tls_config_to_check_against = MozillaTlsConfiguration.get(tls_config_to_check_against_as_enum)\n        else:\n            did_user_enable_some_scan_commands = False\n            for scan_command in ScanCommandsRepository.get_all_scan_commands():\n                cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_command).cli_connector_cls\n                is_scan_cmd_enabled, _ = cli_connector_cls.find_cli_options_in_command_line(args_command_list.__dict__)\n                if is_scan_cmd_enabled:\n                    did_user_enable_some_scan_commands = True\n                    break\n            if not did_user_enable_some_scan_commands:\n                tls_config_to_check_against_as_enum = TlsConfigurationEnum.MOZILLA_INTERMEDIATE\n                tls_config_to_check_against = MozillaTlsConfiguration.get(tls_config_to_check_against_as_enum)\n        if tls_config_to_check_against_as_enum:\n            for scan_cmd in SCAN_COMMANDS_NEEDED_BY_MOZILLA_CHECKER:\n                cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_cmd).cli_connector_cls\n                setattr(args_command_list, cli_connector_cls._cli_option, True)\n        should_print_json_to_console = False\n        json_path_out: Optional[Path] = None\n        if args_command_list.json_file:\n            if args_command_list.json_file == '-':\n                if args_command_list.quiet:\n                    raise CommandLineParsingError('Cannot use --quiet with --json_out -.')\n                should_print_json_to_console = True\n            else:\n                json_path_out = Path(args_command_list.json_file).absolute()\n        client_auth_creds = None\n        if bool(args_command_list.cert) ^ bool(args_command_list.key):\n            raise CommandLineParsingError('No private key or certificate file were given. See --cert and --key.')\n        elif args_command_list.cert:\n            if args_command_list.keyform == 'DER':\n                key_type = OpenSslFileTypeEnum.ASN1\n            elif args_command_list.keyform == 'PEM':\n                key_type = OpenSslFileTypeEnum.PEM\n            try:\n                client_auth_creds = ClientAuthenticationCredentials(certificate_chain_path=Path(args_command_list.cert), key_path=Path(args_command_list.key), key_password=args_command_list.keypass, key_type=key_type)\n            except ValueError as e:\n                raise CommandLineParsingError('Invalid client authentication settings: {}.'.format(e.args[0]))\n        http_proxy_settings = None\n        if args_command_list.https_tunnel:\n            try:\n                http_proxy_settings = HttpProxySettings.from_url(args_command_list.https_tunnel)\n            except ValueError as e:\n                raise CommandLineParsingError('Invalid proxy URL for --https_tunnel: {}.'.format(e.args[0]))\n        good_servers: List[Tuple[ServerNetworkLocation, ServerNetworkConfiguration]] = []\n        invalid_server_strings: List[InvalidServerStringError] = []\n        for server_string in args_target_list:\n            try:\n                hostname, ip_address, port = CommandLineServerStringParser.parse_server_string(server_string)\n            except InvalidServerStringError as e:\n                invalid_server_strings.append(e)\n                continue\n            final_port = port if port else 443\n            server_location: ServerNetworkLocation\n            if http_proxy_settings:\n                server_location = ServerNetworkLocation(hostname=hostname, port=final_port, http_proxy_settings=http_proxy_settings)\n            elif ip_address:\n                server_location = ServerNetworkLocation(hostname=hostname, port=final_port, ip_address=ip_address)\n            else:\n                try:\n                    server_location = ServerNetworkLocation(hostname=hostname, port=final_port)\n                except ServerHostnameCouldNotBeResolved:\n                    invalid_server_strings.append(InvalidServerStringError(server_string=f'{hostname}:{final_port}', error_message=f'Could not resolve hostname {hostname}'))\n                    continue\n            opportunistic_tls: Optional[ProtocolWithOpportunisticTlsEnum] = None\n            if args_command_list.starttls:\n                if args_command_list.starttls == 'auto':\n                    opportunistic_tls = ProtocolWithOpportunisticTlsEnum.from_default_port(final_port)\n                elif args_command_list.starttls in _STARTTLS_PROTOCOL_DICT:\n                    opportunistic_tls = _STARTTLS_PROTOCOL_DICT[args_command_list.starttls]\n                else:\n                    raise CommandLineParsingError(f\"StartTLS should be one of: auto, {', '.join(_STARTTLS_PROTOCOL_DICT.keys())}.\")\n            try:\n                sni_hostname = args_command_list.sni if args_command_list.sni else hostname\n                network_config = ServerNetworkConfiguration(tls_opportunistic_encryption=opportunistic_tls, tls_server_name_indication=sni_hostname, tls_client_auth_credentials=client_auth_creds, xmpp_to_hostname=args_command_list.xmpp_to)\n                good_servers.append((server_location, network_config))\n            except InvalidServerNetworkConfigurationError as e:\n                raise CommandLineParsingError(e.args[0])\n        concurrent_server_scans_limit = None\n        per_server_concurrent_connections_limit = None\n        if args_command_list.https_tunnel:\n            concurrent_server_scans_limit = 1\n        if args_command_list.slow_connection:\n            per_server_concurrent_connections_limit = 2\n        scan_commands: Set[ScanCommand] = set()\n        scan_commands_extra_arguments_dict: Dict[ScanCommand, plugin_base.ScanCommandExtraArgument] = {}\n        for scan_command in ScanCommandsRepository.get_all_scan_commands():\n            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_command).cli_connector_cls\n            is_scan_cmd_enabled, extra_args = cli_connector_cls.find_cli_options_in_command_line(args_command_list.__dict__)\n            if is_scan_cmd_enabled:\n                scan_commands.add(scan_command)\n                if extra_args:\n                    scan_commands_extra_arguments_dict[scan_command] = extra_args\n        scan_commands_extra_arguments = ScanCommandsExtraArguments(**scan_commands_extra_arguments_dict)\n        return ParsedCommandLine(invalid_servers=invalid_server_strings, servers_to_scans=good_servers, scan_commands=scan_commands, scan_commands_extra_arguments=scan_commands_extra_arguments, should_print_json_to_console=should_print_json_to_console, json_path_out=json_path_out, should_disable_console_output=args_command_list.quiet or args_command_list.json_file == '-', concurrent_server_scans_limit=concurrent_server_scans_limit, per_server_concurrent_connections_limit=per_server_concurrent_connections_limit, tls_config_to_check_against_as_enum=tls_config_to_check_against_as_enum, tls_config_to_check_against=tls_config_to_check_against)\n\n    def _add_default_options(self) -> None:\n        \"\"\"Add default command line options to the parser.\"\"\"\n        trust_stores_group = self._parser.add_argument_group('Trust stores options')\n        trust_stores_group.add_argument('--update_trust_stores', help='Update the default trust stores used by SSLyze. The latest stores will be downloaded from https://github.com/nabla-c0d3/trust_stores_observatory. This option is meant to be used separately, and will silence any other command line option supplied to SSLyze.', dest='update_trust_stores', action='store_true')\n        client_certificate_group = self._parser.add_argument_group('Client certificate options')\n        client_certificate_group.add_argument('--cert', metavar='CERTIFICATE_FILE', help=\"Client certificate chain filename. The certificates must be in PEM format and must be sorted starting with the subject's client certificate, followed by intermediate CA certificates if applicable.\", dest='cert')\n        client_certificate_group.add_argument('--key', metavar='KEY_FILE', help='Client private key filename.', dest='key')\n        client_certificate_group.add_argument('--keyform', metavar='KEY_FORMAT', choices=['DER', 'PEM'], help='Client private key format. DER or PEM (default).', dest='keyform', default='PEM')\n        client_certificate_group.add_argument('--pass', metavar='PASSPHRASE', help='Client private key passphrase.', dest='keypass', default='')\n        input_and_output_group = self._parser.add_argument_group('Input and output options')\n        input_and_output_group.add_argument('--json_out', metavar='JSON_FILE', help=\"Write the scan results as a JSON document to the file JSON_FILE. If JSON_FILE is set to '-', the JSON output will instead be printed to stdout. The resulting JSON file is a serialized version of the ScanResult objects described in SSLyze's Python API: the nodes and attributes will be the same. See https://nabla-c0d3.github.io/sslyze/documentation/available-scan-commands.html for more details.\", dest='json_file', default=None)\n        input_and_output_group.add_argument('--targets_in', metavar='TARGET_FILE', help='Read the list of targets to scan from the file TARGET_FILE. It should contain one host:port per line.', dest='targets_in', default=None)\n        input_and_output_group.add_argument('--quiet', action='store_true', dest='quiet', help='Do not output anything to stdout; useful when using --json_out.')\n        connectivity_group = self._parser.add_argument_group('Connectivity options')\n        connectivity_group.add_argument('--slow_connection', help='Greatly reduce the number of concurrent connections initiated by SSLyze. This will make the scans slower but more reliable if the connection between your host and the server is slow, or if the server cannot handle many concurrent connections. Enable this option if you are getting a lot of timeouts or errors.', action='store_true', dest='slow_connection')\n        connectivity_group.add_argument('--https_tunnel', metavar='PROXY_SETTINGS', help=\"Tunnel all traffic to the target server(s) through an HTTP CONNECT proxy. HTTP_TUNNEL should be the proxy's URL: 'http://USER:PW@HOST:PORT/'. For proxies requiring authentication, only Basic Authentication is supported.\", dest='https_tunnel', default=None)\n        connectivity_group.add_argument('--starttls', metavar='PROTOCOL', help=f\"Perform a StartTLS handshake when connecting to the target server(s). StartTLS should be one of: auto, {', '.join(_STARTTLS_PROTOCOL_DICT.keys())}. The 'auto' option will cause SSLyze to deduce the protocol (ftp, imap, etc.) from the supplied port number, for each target server.\", dest='starttls', default=None)\n        connectivity_group.add_argument('--xmpp_to', metavar='HOSTNAME', help=\"Optional setting for STARTTLS XMPP. XMPP_TO should be the hostname to be put in the 'to' attribute of the XMPP stream. Default is the server's hostname.\", dest='xmpp_to', default=None)\n        connectivity_group.add_argument('--sni', metavar='SERVER_NAME_INDICATION', help='Use Server Name Indication to specify the hostname to connect to. Will only affect TLS 1.0+ connections.', dest='sni', default=None)\n\n    @staticmethod\n    def _get_plugin_scan_commands() -> List[OptParseCliOption]:\n        \"\"\"Retrieve the list of command line options implemented by the plugins currently available.\"\"\"\n        scan_commands_options = []\n        for scan_command in ScanCommandsRepository.get_all_scan_commands():\n            cli_connector_cls = ScanCommandsRepository.get_implementation_cls(scan_command).cli_connector_cls\n            scan_commands_options.extend(cli_connector_cls.get_cli_options())\n        return scan_commands_options\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass ToolRegistry:\n    '''Registry for tools.'''\n\n    def __new__(cls):\n        '''Singleton pattern.'''\n        pass\n\n    def register(self, tool_cls: Type[BaseTool]) -> None:\n        '''Register a tool.'''\n        pass\n\n    def get_tool(self, name: str) -> Optional[Type[BaseTool]]:\n        '''Get a tool by name.'''\n        pass\n\n    def list_tools(self) -> List[str]:\n        '''List all registered tools.'''\n        pass\n\n    def get_all_tools(self) -> Dict[str, Type[BaseTool]]:\n        '''Get all registered tools.'''\n        pass\n\n    def format_tool_descriptions(self) -> str:\n        '''Format tool descriptions for the LLM.'''\n        pass"
  }
]