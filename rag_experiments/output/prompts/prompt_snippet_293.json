[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass TrafficSelectorPolicy(_serialization.Model):\n    '''An traffic selector policy for a virtual network gateway connection.\n    All required parameters must be populated in order to send to Azure.\n    :ivar local_address_ranges: A collection of local address spaces in CIDR format. Required.\n    :vartype local_address_ranges: list[str]\n    :ivar remote_address_ranges: A collection of remote address spaces in CIDR format. Required.\n    :vartype remote_address_ranges: list[str]\n    '''\n\n    def __init__(self, *, local_address_ranges: List[str], remote_address_ranges: List[str], **kwargs):\n        '''\n        :keyword local_address_ranges: A collection of local address spaces in CIDR format. Required.\n        :paramtype local_address_ranges: list[str]\n        :keyword remote_address_ranges: A collection of remote address spaces in CIDR format. Required.\n        :paramtype remote_address_ranges: list[str]\n        '''\n        pass\nCorresponding class implementation:\n\nfrom ... import _serialization\nfrom typing import Dict, List, Optional, TYPE_CHECKING, Union\n\nclass TrafficSelectorPolicy(_serialization.Model):\n    \"\"\"An traffic selector policy for a virtual network gateway connection.\n\n    All required parameters must be populated in order to send to Azure.\n\n    :ivar local_address_ranges: A collection of local address spaces in CIDR format. Required.\n    :vartype local_address_ranges: list[str]\n    :ivar remote_address_ranges: A collection of remote address spaces in CIDR format. Required.\n    :vartype remote_address_ranges: list[str]\n    \"\"\"\n    _validation = {'local_address_ranges': {'required': True}, 'remote_address_ranges': {'required': True}}\n    _attribute_map = {'local_address_ranges': {'key': 'localAddressRanges', 'type': '[str]'}, 'remote_address_ranges': {'key': 'remoteAddressRanges', 'type': '[str]'}}\n\n    def __init__(self, *, local_address_ranges: List[str], remote_address_ranges: List[str], **kwargs):\n        \"\"\"\n        :keyword local_address_ranges: A collection of local address spaces in CIDR format. Required.\n        :paramtype local_address_ranges: list[str]\n        :keyword remote_address_ranges: A collection of remote address spaces in CIDR format. Required.\n        :paramtype remote_address_ranges: list[str]\n        \"\"\"\n        super().__init__(**kwargs)\n        self.local_address_ranges = local_address_ranges\n        self.remote_address_ranges = remote_address_ranges\n\nExample skeleton:\n\n\nclass UsageCounterName(msrest.serialization.Model):\n    '''Definition of usage counter name.\n    :ivar value: Gets or sets the usage counter name.\n    :vartype value: str\n    :ivar localized_value: Gets or sets the localized usage counter name.\n    :vartype localized_value: str\n    '''\n\n    def __init__(self, *, value: Optional[str]=None, localized_value: Optional[str]=None, **kwargs):\n        '''\n        :keyword value: Gets or sets the usage counter name.\n        :paramtype value: str\n        :keyword localized_value: Gets or sets the localized usage counter name.\n        :paramtype localized_value: str\n        '''\n        pass\nCorresponding class implementation:\n\nfrom typing import Any, Dict, List, Optional, TYPE_CHECKING, Union\nimport msrest.serialization\n\nclass UsageCounterName(msrest.serialization.Model):\n    \"\"\"Definition of usage counter name.\n\n    :ivar value: Gets or sets the usage counter name.\n    :vartype value: str\n    :ivar localized_value: Gets or sets the localized usage counter name.\n    :vartype localized_value: str\n    \"\"\"\n    _attribute_map = {'value': {'key': 'value', 'type': 'str'}, 'localized_value': {'key': 'localizedValue', 'type': 'str'}}\n\n    def __init__(self, *, value: Optional[str]=None, localized_value: Optional[str]=None, **kwargs):\n        \"\"\"\n        :keyword value: Gets or sets the usage counter name.\n        :paramtype value: str\n        :keyword localized_value: Gets or sets the localized usage counter name.\n        :paramtype localized_value: str\n        \"\"\"\n        super(UsageCounterName, self).__init__(**kwargs)\n        self.value = value\n        self.localized_value = localized_value\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass KNNModel:\n    '''\n    Thin wrapper around sklearn NearestNeighbors for cosine similarity retrieval.\n    :ivar model: Fitted NearestNeighbors instance.\n    :vartype model: NearestNeighbors\n    :ivar k: Default number of neighbors.\n    :vartype k: int\n    '''\n\n    def __init__(self, items, k=3):\n        '''\n        Initialize KNN index.\n        :param items: Iterable of (item_id, embedding_vector) pairs.\n        :type items: Iterable[Tuple[Any, Sequence[float]]]\n        :param k: Default number of neighbors to retrieve.\n        :type k: int\n        '''\n        pass\n\n    def neighbors(self, target_emb, k=None):\n        '''\n        Retrieve k nearest neighbors by cosine distance.\n        :param target_emb: Query embedding vector.\n        :type target_emb: Sequence[float]\n        :param k: Override number of neighbors (defaults to self.k).\n        :type k: int\n        :return: List of (item_id, distance) pairs ordered by proximity.\n        :rtype: List[Tuple[Any, float]]\n        '''\n        pass"
  }
]