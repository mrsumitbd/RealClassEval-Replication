[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass AttributeTypes(ObjectCollectionABC):\n    '''AttributeTypes Collection.\n    # Example of params input\n    {\n        \"result_limit\": 100,  # Limit the retrieved results.\n        \"result_start\": 10,  # Starting count used for pagination.\n        \"fields\": [\"caseId\", \"summary\"]  # Select additional return fields.\n    }\n    Args:\n        session (Session): Session object configured with TC API Auth.\n        tql_filters (list): List of TQL filters.\n        params (dict): Additional query params (see example above).\n    '''\n\n    def __init__(self, **kwargs):\n        '''Initialize instance properties.'''\n        pass\n\n    def __iter__(self) -> Iterator[AttributeType]:\n        '''Return CM objects.'''\n        pass\n    @property\n    def _api_endpoint(self) -> str:\n        '''Return the type specific API endpoint.'''\n        pass\n    @property\n    def filter(self) -> AttributeTypeFilter:\n        '''Return the type specific filter object.'''\n        pass\nCorresponding class implementation:\n\nfrom tcex.api.tc.v3.object_collection_abc import ObjectCollectionABC\nfrom tcex.api.tc.v3.attribute_types.attribute_type_filter import AttributeTypeFilter\nfrom tcex.api.tc.v3.api_endpoints import ApiEndpoints\nfrom tcex.api.tc.v3.attribute_types.attribute_type_model import AttributeTypeModel, AttributeTypesModel\nfrom collections.abc import Iterator\n\nclass AttributeTypes(ObjectCollectionABC):\n    \"\"\"AttributeTypes Collection.\n\n    # Example of params input\n    {\n        \"result_limit\": 100,  # Limit the retrieved results.\n        \"result_start\": 10,  # Starting count used for pagination.\n        \"fields\": [\"caseId\", \"summary\"]  # Select additional return fields.\n    }\n\n    Args:\n        session (Session): Session object configured with TC API Auth.\n        tql_filters (list): List of TQL filters.\n        params (dict): Additional query params (see example above).\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize instance properties.\"\"\"\n        super().__init__(kwargs.pop('session', None), kwargs.pop('tql_filter', None), kwargs.pop('params', None))\n        self._model = AttributeTypesModel(**kwargs)\n        self.type_ = 'attribute_types'\n\n    def __iter__(self) -> Iterator[AttributeType]:\n        \"\"\"Return CM objects.\"\"\"\n        return self.iterate(base_class=AttributeType)\n\n    @property\n    def _api_endpoint(self) -> str:\n        \"\"\"Return the type specific API endpoint.\"\"\"\n        return ApiEndpoints.ATTRIBUTE_TYPES.value\n\n    @property\n    def filter(self) -> AttributeTypeFilter:\n        \"\"\"Return the type specific filter object.\"\"\"\n        return AttributeTypeFilter(self.tql)\n\nExample skeleton:\n\n\nclass SearchSettingsConversationalSearch:\n    '''\n    Configuration settings for conversational search.\n    :param bool enabled: Whether to enable conversational search.\n    :param SearchSettingsConversationalSearchResponseLength response_length:\n          (optional)\n    :param SearchSettingsConversationalSearchSearchConfidence search_confidence:\n          (optional)\n    '''\n\n    def __init__(self, enabled: bool, *, response_length: Optional['SearchSettingsConversationalSearchResponseLength']=None, search_confidence: Optional['SearchSettingsConversationalSearchSearchConfidence']=None) -> None:\n        '''\n        Initialize a SearchSettingsConversationalSearch object.\n        :param bool enabled: Whether to enable conversational search.\n        :param SearchSettingsConversationalSearchResponseLength response_length:\n               (optional)\n        :param SearchSettingsConversationalSearchSearchConfidence\n               search_confidence: (optional)\n        '''\n        pass\n    @classmethod\n    def from_dict(cls, _dict: Dict) -> 'SearchSettingsConversationalSearch':\n        '''Initialize a SearchSettingsConversationalSearch object from a json dictionary.'''\n        pass\n    @classmethod\n    def _from_dict(cls, _dict):\n        '''Initialize a SearchSettingsConversationalSearch object from a json dictionary.'''\n        pass\n\n    def to_dict(self) -> Dict:\n        '''Return a json dictionary representing this model.'''\n        pass\n\n    def _to_dict(self):\n        '''Return a json dictionary representing this model.'''\n        pass\n\n    def __str__(self) -> str:\n        '''Return a `str` version of this SearchSettingsConversationalSearch object.'''\n        pass\n\n    def __eq__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        '''Return `true` when self and other are equal, false otherwise.'''\n        pass\n\n    def __ne__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        '''Return `true` when self and other are not equal, false otherwise.'''\n        pass\nCorresponding class implementation:\n\nimport json\nfrom typing import BinaryIO, Dict, List, Optional\n\nclass SearchSettingsConversationalSearch:\n    \"\"\"\n    Configuration settings for conversational search.\n\n    :param bool enabled: Whether to enable conversational search.\n    :param SearchSettingsConversationalSearchResponseLength response_length:\n          (optional)\n    :param SearchSettingsConversationalSearchSearchConfidence search_confidence:\n          (optional)\n    \"\"\"\n\n    def __init__(self, enabled: bool, *, response_length: Optional['SearchSettingsConversationalSearchResponseLength']=None, search_confidence: Optional['SearchSettingsConversationalSearchSearchConfidence']=None) -> None:\n        \"\"\"\n        Initialize a SearchSettingsConversationalSearch object.\n\n        :param bool enabled: Whether to enable conversational search.\n        :param SearchSettingsConversationalSearchResponseLength response_length:\n               (optional)\n        :param SearchSettingsConversationalSearchSearchConfidence\n               search_confidence: (optional)\n        \"\"\"\n        self.enabled = enabled\n        self.response_length = response_length\n        self.search_confidence = search_confidence\n\n    @classmethod\n    def from_dict(cls, _dict: Dict) -> 'SearchSettingsConversationalSearch':\n        \"\"\"Initialize a SearchSettingsConversationalSearch object from a json dictionary.\"\"\"\n        args = {}\n        if (enabled := _dict.get('enabled')) is not None:\n            args['enabled'] = enabled\n        else:\n            raise ValueError(\"Required property 'enabled' not present in SearchSettingsConversationalSearch JSON\")\n        if (response_length := _dict.get('response_length')) is not None:\n            args['response_length'] = SearchSettingsConversationalSearchResponseLength.from_dict(response_length)\n        if (search_confidence := _dict.get('search_confidence')) is not None:\n            args['search_confidence'] = SearchSettingsConversationalSearchSearchConfidence.from_dict(search_confidence)\n        return cls(**args)\n\n    @classmethod\n    def _from_dict(cls, _dict):\n        \"\"\"Initialize a SearchSettingsConversationalSearch object from a json dictionary.\"\"\"\n        return cls.from_dict(_dict)\n\n    def to_dict(self) -> Dict:\n        \"\"\"Return a json dictionary representing this model.\"\"\"\n        _dict = {}\n        if hasattr(self, 'enabled') and self.enabled is not None:\n            _dict['enabled'] = self.enabled\n        if hasattr(self, 'response_length') and self.response_length is not None:\n            if isinstance(self.response_length, dict):\n                _dict['response_length'] = self.response_length\n            else:\n                _dict['response_length'] = self.response_length.to_dict()\n        if hasattr(self, 'search_confidence') and self.search_confidence is not None:\n            if isinstance(self.search_confidence, dict):\n                _dict['search_confidence'] = self.search_confidence\n            else:\n                _dict['search_confidence'] = self.search_confidence.to_dict()\n        return _dict\n\n    def _to_dict(self):\n        \"\"\"Return a json dictionary representing this model.\"\"\"\n        return self.to_dict()\n\n    def __str__(self) -> str:\n        \"\"\"Return a `str` version of this SearchSettingsConversationalSearch object.\"\"\"\n        return json.dumps(self.to_dict(), indent=2)\n\n    def __eq__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        \"\"\"Return `true` when self and other are equal, false otherwise.\"\"\"\n        if not isinstance(other, self.__class__):\n            return False\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other: 'SearchSettingsConversationalSearch') -> bool:\n        \"\"\"Return `true` when self and other are not equal, false otherwise.\"\"\"\n        return not self == other\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass GoogleCustomSearchAPI:\n    '''Google Custom Search API Client'''\n\n    def __init__(self, api_key: str, search_engine_id: str, max_results: int=20, num_per_request: int=10):\n        '''\n        Initialize Google Custom Search API client\n        Args:\n            api_key: Google API key\n            search_engine_id: Search engine ID (cx parameter)\n            max_results: Maximum number of results to retrieve\n            num_per_request: Number of results per API request\n        '''\n        pass\n\n    def search(self, query: str, num_results: int | None=None, start_index: int=1) -> dict:\n        '''\n        Execute search request\n        Args:\n            query: Search query\n            num_results: Number of results to return (uses config default if None)\n            start_index: Starting index (default 1)\n        Returns:\n            Dictionary containing search results\n        '''\n        pass\n\n    def get_all_results(self, query: str, max_results: int | None=None) -> list[dict]:\n        '''\n        Get all search results (with pagination)\n        Args:\n            query: Search query\n            max_results: Maximum number of results (uses config default if None)\n        Returns:\n            List of all search results\n        '''\n        pass"
  }
]