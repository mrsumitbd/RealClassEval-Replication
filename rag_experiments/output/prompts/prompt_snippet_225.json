[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass TrafficRule(ApiItem):\n    '''Represent a traffic rule configuration.'''\n    @property\n    def id(self) -> str:\n        '''ID of traffic rule.'''\n        pass\n    @property\n    def description(self) -> str:\n        '''Description given by user to traffic rule.'''\n        pass\n    @property\n    def enabled(self) -> bool:\n        '''Is traffic rule enabled.'''\n        pass\n    @property\n    def action(self) -> str:\n        '''What action is defined by this traffic rule.'''\n        pass\n    @property\n    def matching_target(self) -> str:\n        '''What target is matched by this traffic rule.'''\n        pass\n    @property\n    def target_devices(self) -> list[TargetDevice]:\n        '''What target devices are affected by this traffic rule.'''\n        pass\nCorresponding class implementation:\n\nfrom .api import ApiItem, ApiRequestV2\n\nclass TrafficRule(ApiItem):\n    \"\"\"Represent a traffic rule configuration.\"\"\"\n    raw: TypedTrafficRule\n\n    @property\n    def id(self) -> str:\n        \"\"\"ID of traffic rule.\"\"\"\n        return self.raw['_id']\n\n    @property\n    def description(self) -> str:\n        \"\"\"Description given by user to traffic rule.\"\"\"\n        return self.raw.get('description', '')\n\n    @property\n    def enabled(self) -> bool:\n        \"\"\"Is traffic rule enabled.\"\"\"\n        return self.raw['enabled']\n\n    @property\n    def action(self) -> str:\n        \"\"\"What action is defined by this traffic rule.\"\"\"\n        return self.raw['action']\n\n    @property\n    def matching_target(self) -> str:\n        \"\"\"What target is matched by this traffic rule.\"\"\"\n        return self.raw['matching_target']\n\n    @property\n    def target_devices(self) -> list[TargetDevice]:\n        \"\"\"What target devices are affected by this traffic rule.\"\"\"\n        return self.raw['target_devices']\n\nExample skeleton:\n\n\nclass PressureFixtureBase(ABC):\n    '''Base Class if Mark10 Force Gauge Driver.'''\n    @classmethod\n    def vid_pid(cls) -> Tuple[int, int]:\n        '''OT3 Pressure Fixture VID:PID.'''\n        pass\n    @abstractmethod\n    def connect(self) -> None:\n        '''Connect to the Mark10 Force Gauge.'''\n        pass\n    @abstractmethod\n    def disconnect(self) -> None:\n        '''Disconnect from the Mark10 Force Gauge.'''\n        pass\n    @abstractmethod\n    def firmware_version(self) -> str:\n        '''Read the firmware version from the device.'''\n        pass\n    @abstractmethod\n    def read_all_pressure_channel(self) -> List[float]:\n        '''Read all pressure channels on fixture in Pascals.'''\n        pass\n\n    def position_in_slot(self, side: Literal['left', 'right']='left') -> Point:\n        '''Position in slot.'''\n        pass\n    @property\n    def depth(self) -> float:\n        '''Depth.'''\n        pass\n    @property\n    def tip_volume(self) -> int:\n        '''Tip Volume.'''\n        pass\n    @property\n    def aspirate_volume(self) -> float:\n        '''Aspirate Volume.'''\n        pass\nCorresponding class implementation:\n\nfrom abc import ABC, abstractmethod\nfrom typing_extensions import Final, Literal\nfrom typing import List, Tuple\nfrom opentrons.types import Point\n\nclass PressureFixtureBase(ABC):\n    \"\"\"Base Class if Mark10 Force Gauge Driver.\"\"\"\n\n    @classmethod\n    def vid_pid(cls) -> Tuple[int, int]:\n        \"\"\"OT3 Pressure Fixture VID:PID.\"\"\"\n        return (1155, 41389)\n\n    @abstractmethod\n    def connect(self) -> None:\n        \"\"\"Connect to the Mark10 Force Gauge.\"\"\"\n        ...\n\n    @abstractmethod\n    def disconnect(self) -> None:\n        \"\"\"Disconnect from the Mark10 Force Gauge.\"\"\"\n        ...\n\n    @abstractmethod\n    def firmware_version(self) -> str:\n        \"\"\"Read the firmware version from the device.\"\"\"\n        ...\n\n    @abstractmethod\n    def read_all_pressure_channel(self) -> List[float]:\n        \"\"\"Read all pressure channels on fixture in Pascals.\"\"\"\n        ...\n\n    def position_in_slot(self, side: Literal['left', 'right']='left') -> Point:\n        \"\"\"Position in slot.\"\"\"\n        if side == 'left':\n            return LOCATION_A1_LEFT\n        else:\n            return LOCATION_A1_RIGHT\n\n    @property\n    def depth(self) -> float:\n        \"\"\"Depth.\"\"\"\n        return 14.0\n\n    @property\n    def tip_volume(self) -> int:\n        \"\"\"Tip Volume.\"\"\"\n        return 50\n\n    @property\n    def aspirate_volume(self) -> float:\n        \"\"\"Aspirate Volume.\"\"\"\n        return 20.0\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass PrecisionPreservingDataHandler:\n    '''Handler for preserving precision in data operations.'''\n    @staticmethod\n    def validate_system_precision() -> Dict[str, Any]:\n        '''Validate that the system preserves precision correctly.'''\n        pass\n    @staticmethod\n    def store_price_data(data: Any) -> Any:\n        '''Store price data without modifying precision.'''\n        pass\n    @staticmethod\n    def retrieve_price_data(data: Any) -> Any:\n        '''Retrieve price data without modifying precision.'''\n        pass\n    @staticmethod\n    def preserve_calculation_precision(result: float, operation: str) -> float:\n        '''Preserve calculation precision.'''\n        pass"
  }
]