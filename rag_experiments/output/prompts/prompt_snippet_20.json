[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    '''A pressure sensor type.'''\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        '''Build a pressure sensor class.'''\n        pass\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        '''Set the sensor data on the class and return the new data.'''\n        pass\nCorresponding class implementation:\n\nfrom typing import List, Union\nfrom opentrons_hardware.firmware_bindings.constants import NodeId, SensorId, SensorType\nfrom opentrons_hardware.firmware_bindings.messages.fields import SensorTypeField\nfrom opentrons_hardware.sensors.types import SensorDataType, EnvironmentSensorDataType\nfrom dataclasses import dataclass\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    \"\"\"A pressure sensor type.\"\"\"\n    data: SensorDataType\n\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        \"\"\"Build a pressure sensor class.\"\"\"\n        info = SensorInformation(SensorType.pressure, sensor_id, node_id)\n        sensor_data = SensorDataType.build(0, SensorTypeField(SensorType.pressure))\n        return cls(info, offset, 1, zero_threshold, stop_threshold, sensor_data)\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        \"\"\"Set the sensor data on the class and return the new data.\"\"\"\n        self.data = sensor_data[0]\n        return self.data\n\nExample skeleton:\n\n\nclass Converter(ABC):\n    '''XMP <-> DocumentInfo converter.'''\n    @staticmethod\n    @abstractmethod\n    def xmp_from_docinfo(docinfo_val: str | None) -> Any:\n        '''Derive XMP metadata from a DocumentInfo string.'''\n        pass\n    @staticmethod\n    @abstractmethod\n    def docinfo_from_xmp(xmp_val: Any) -> str | None:\n        '''Derive a DocumentInfo value from equivalent XMP metadata.'''\n        pass\nCorresponding class implementation:\n\nfrom abc import ABC, abstractmethod\nfrom typing import TYPE_CHECKING, Any, Callable, NamedTuple\n\nclass Converter(ABC):\n    \"\"\"XMP <-> DocumentInfo converter.\"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def xmp_from_docinfo(docinfo_val: str | None) -> Any:\n        \"\"\"Derive XMP metadata from a DocumentInfo string.\"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def docinfo_from_xmp(xmp_val: Any) -> str | None:\n        \"\"\"Derive a DocumentInfo value from equivalent XMP metadata.\"\"\"\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass MCPResource:\n    '''Represents an MCP resource.'''\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -> 'MCPResource':\n        '''Create a Resource from a dictionary.'''\n        pass\n\n    def to_dict(self) -> Dict[str, Any]:\n        '''Convert the resource to a dictionary.'''\n        pass"
  }
]