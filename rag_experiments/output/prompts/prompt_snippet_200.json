[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass WeChatCard(BaseWeChatAPI):\n\n    def create(self, card_data):\n        '''\n        创建卡券\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#8\n        :param card_data: 卡券信息\n        :return: 创建的卡券 ID\n        '''\n        pass\n\n    def batch_add_locations(self, location_data):\n        '''\n        ⚠️已废弃\n        批量导入门店信息\n        :param location_data: 门店信息\n        :return: 门店 ID 列表，插入失败的门店元素值为 -1\n        '''\n        pass\n\n    def batch_get_locations(self, offset=0, count=0):\n        '''\n        ⚠️已废弃\n        批量获取门店信息\n        '''\n        pass\n\n    def get_colors(self):\n        '''\n        获得卡券的最新颜色列表，用于创建卡券\n        目前微信提供包括十四种色值供开发者使用。\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#7\n        :return: 颜色列表\n        '''\n        pass\n\n    def create_qrcode(self, qrcode_data):\n        '''\n        创建卡券二维码\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#0\n        :param qrcode_data: 二维码信息\n        :return: 二维码 ticket，可使用 :func:show_qrcode 换取二维码文件\n        '''\n        pass\n\n    def create_landingpage(self, buffer_data):\n        '''\n        创建货架\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#3\n        '''\n        pass\n\n    def get_html(self, card_id):\n        '''\n        图文消息群发卡券\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#6\n        '''\n        pass\n\n    def consume_code(self, code, card_id=None):\n        '''\n        消耗 code\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        '''\n        pass\n\n    def decrypt_code(self, encrypt_code):\n        '''\n        解码加密的 code\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        '''\n        pass\n\n    def delete(self, card_id):\n        '''\n        删除卡券\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#7\n        '''\n        pass\n\n    def get_code(self, code, card_id=None, check_consume=True):\n        '''\n        查询 code 信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#0\n        '''\n        pass\n\n    def get_card_list(self, openid, card_id=None):\n        '''\n        用于获取用户卡包里的，属于该appid下的卡券。\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#1\n        '''\n        pass\n\n    def batch_get_locations(self, offset=0, count=0):\n        '''\n        批量查询卡券信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#3\n        :param offset: 查询卡列表的起始偏移量，从0开始，即offset: 5是指从从列表里的第六个开始读取。\n        :param count: 需要查询的卡片的数量（数量最大50）\n        :param status_list: 支持开发者拉出指定状态的卡券列表\n        '''\n        pass\n\n    def get_colors(self):\n        '''\n        查询卡券详情\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#2\n        '''\n        pass\n\n    def update_code(self, card_id, old_code, new_code):\n        '''\n        更新卡券 code\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#6\n        :param card_id: 卡券ID。自定义 Code 码卡券为必填\n        :param old_code: 需变更的 Code 码\n        :param new_code: 变更后的有效 Code 码\n        '''\n        pass\n\n    def invalid_code(self, code, card_id=None):\n        '''\n        设置卡券失效\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#8\n        '''\n        pass\n\n    def update_code(self, card_id, old_code, new_code):\n        '''\n        更新卡券信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#4\n        '''\n        pass\n\n    def set_paycell(self, card_id, is_open):\n        '''\n        设置买单接口\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#12\n        '''\n        pass\n\n    def set_test_whitelist(self, openids=None, usernames=None):\n        '''\n        设置卡券测试用户白名单\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#12\n        '''\n        pass\n\n    def activate_membercard(self, membership_number, code, **kwargs):\n        '''\n        激活会员卡 - 接口激活方式\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#14\n        参数示例：\n        {\n            \"init_bonus\": 100,\n            \"init_bonus_record\":\"旧积分同步\",\n            \"init_balance\": 200,\n            \"membership_number\": \"AAA00000001\",\n            \"code\": \"12312313\",\n            \"card_id\": \"xxxx_card_id\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"init_custom_field_value1\": \"xxxxx\",\n            \"init_custom_field_value2\": \"xxxxx\",\n            \"init_custom_field_value3\": \"xxxxx\"\n        }\n        返回示例：\n        {\"errcode\":0,   \"errmsg\":\"ok\"}\n        :param membership_number: 必填，会员卡编号，由开发者填入，作为序列号显示在用户的卡包里。可与Code码保持等值\n        :param code: 必填，领取会员卡用户获得的code\n        :return: 参见返回示例\n        '''\n        pass\n\n    def update_membercard(self, code, card_id, **kwargs):\n        '''\n        更新会员信息\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#18\n        注意事项：\n        1.开发者可以同时传入add_bonus和bonus解决由于同步失败带来的幂等性问题。同时传入add_bonus和bonus时\n            add_bonus作为积分变动消息中的变量值，而bonus作为卡面上的总积分额度显示。余额变动同理。\n        2.开发者可以传入is_notify_bonus控制特殊的积分对账变动不发送消息，余额变动同理。\n        参数示例：\n        {\n            \"code\": \"179011264953\",\n            \"card_id\": \"p1Pj9jr90_SQRaVqYI239Ka1erkI\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"record_bonus\": \"消费30元，获得3积分\",\n            \"bonus\": 3000,\n            \"add_bonus\": 30,\n            \"balance\": 3000,\n            \"add_balance\": -30,\n            \"record_balance\": \"购买焦糖玛琪朵一杯，扣除金额30元。\",\n            \"custom_field_value1\": \"xxxxx\"，\n            \"custom_field_value2\": \"xxxxx\"，\n            \"notify_optional\": {\n                \"is_notify_bonus\": true,\n                \"is_notify_balance\": true,\n                \"is_notify_custom_field1\":true\n            }\n        }\n        返回示例：\n        {\n            \"errcode\": 0,\n            \"errmsg\": \"ok\",\n            \"result_bonus\": 100,\n            \"result_balance\": 200,\n            \"openid\": \"oFS7Fjl0WsZ9AMZqrI80nbIq8xrA\"\n        }\n        :param code: 必填，卡券Code码\n        :param card_id: 必填，卡券ID\n        :param kwargs: 其他非必填字段，包含则更新对应字段。详情参见微信文档 “7 更新会员信息” 部分\n        :return: 参见返回示例\n        '''\n        pass\n\n    def get_membercard_user_info(self, card_id, code):\n        '''\n        查询会员卡的会员信息\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n        :param card_id: 查询会员卡的 Card ID\n        :param code: 所查询用户领取到的 code 值\n        :return: 会员信息，包括激活资料、积分信息以及余额等信息\n        '''\n        pass\n\n    def add_pay_giftcard(self, base_info, extra_info, is_membercard):\n        '''\n        新增支付后投放卡券的规则，支持支付后领卡，支付后赠券\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param base_info: 营销规则结构体\n        :type base_info: dict\n        :param extra_info: 支付规则结构体\n        :type extra_info: dict\n        :param is_membercard: 本次规则是否是领卡。（领卡传入 True, 赠券传入 False）\n        :type is_membercard: bool\n        :return: 规则 ID, 设置成功的列表，以及设置失败的列表\n        '''\n        pass\n\n    def del_pay_giftcard(self, rule_id):\n        '''\n        删除支付后投放卡券的规则\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param rule_id: 支付即会员的规则 ID\n        '''\n        pass\n\n    def get_pay_giftcard(self, rule_id):\n        '''\n        查询支付后投放卡券的规则\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param rule_id: 支付即会员的规则 ID\n        :return: 支付后投放卡券的规则\n        :rtype: dict\n        '''\n        pass\n\n    def batch_get_pay_giftcard(self, effective=True, offset=0, count=10):\n        '''\n        批量查询支付后投放卡券的规则\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param effective: 是否仅查询生效的规则\n        :type effective: bool\n        :param offset: 起始偏移量\n        :type offset: int\n        :param count: 查询的数量\n        :type count: int\n        :return: 支付后投放卡券规则的总数，以及查询到的列表\n        '''\n        pass\n\n    def update_movie_ticket(self, code, ticket_class, show_time, duration, screening_room, seat_number, card_id=None):\n        '''\n        更新电影票\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#7\n        '''\n        pass\n\n    def checkin_boardingpass(self, code, passenger_name, seat_class, etkt_bnr, seat='', gate='', boarding_time=None, is_cancel=False, qrcode_data=None, card_id=None):\n        '''\n        飞机票接口\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#3\n        '''\n        pass\n\n    def update_luckymoney_balance(self, code, balance, card_id=None):\n        '''\n        ⚠️已废弃\n        更新红包余额\n        '''\n        pass\n\n    def get_redirect_url(self, url, encrypt_code, card_id):\n        '''\n        获取卡券跳转外链\n        '''\n        pass\n\n    def deposit_code(self, card_id, codes):\n        '''\n        导入code\n        '''\n        pass\n\n    def get_deposit_count(self, card_id):\n        '''\n        查询导入code数目\n        '''\n        pass\n\n    def check_code(self, card_id, codes):\n        '''\n        核查code\n        '''\n        pass\n\n    def modify_stock(self, card_id, n):\n        '''\n        修改库存\n        '''\n        pass\n\n    def get_activate_url(self, card_id, outer_str=None):\n        '''\n        获取开卡插件 Url, 内含调用开卡插件所需的参数\n        详情请参考\n        https://mp.weixin.qq.com/wiki?id=mp1499332673_Unm7V\n        :param card_id: 会员卡的card_id\n        :param outer_str: 渠道值，用于统计本次领取的渠道参数\n        :return: 内含调用开卡插件所需的参数的 Url\n        '''\n        pass\n\n    def get_activate_info(self, activate_ticket):\n        '''\n        获取用户开卡时提交的信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n        :param activate_ticket: 跳转型开卡组件开卡后回调中的激活票据，可以用来获取用户开卡资料\n        :return: 用户开卡时填写的字段值\n        '''\n        pass\n\n    def set_activate_user_form(self, card_id, **kwargs):\n        '''\n        设置开卡字段接口\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n        \"6 激活会员卡\" -> \"6.2 一键激活\" -> \"步骤二：设置开卡字段接口\"\n        参数示例：\n        {\n            \"card_id\": \"pbLatjnrwUUdZI641gKdTMJzHGfc\",\n            \"service_statement\": {\n                \"name\": \"会员守则\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"bind_old_card\": {\n                \"name\": \"老会员绑定\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"required_form\": {\n                \"can_modify\"：false,\n                \"rich_field_list\": [\n                    {\n                        \"type\": \"FORM_FIELD_RADIO\",\n                        \"name\": \"兴趣\",\n                        \"values\": [\n                            \"钢琴\",\n                            \"舞蹈\",\n                            \"足球\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_SELECT\",\n                        \"name\": \"喜好\",\n                        \"values\": [\n                            \"郭敬明\",\n                            \"韩寒\",\n                            \"南派三叔\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_CHECK_BOX\",\n                        \"name\": \"职业\",\n                        \"values\": [\n                            \"赛车手\",\n                            \"旅行家\"\n                        ]\n                    }\n                ],\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_MOBILE\"\n                ]\n            },\n            \"optional_form\": {\n                \"can_modify\"：false,\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_LOCATION\",\n                    \"USER_FORM_INFO_FLAG_BIRTHDAY\"\n                ],\n                \"custom_field_list\": [\n                    \"喜欢的电影\"\n                ]\n            }\n        }\n        common_field_id_list 值见常量 `wechatpy.constants.UserFormInfoFlag`\n        :param card_id: 卡券ID\n        :param kwargs: 其他非必填参数，见微信文档\n        '''\n        pass\nCorresponding class implementation:\n\nfrom wechatpy.client.api.base import BaseWeChatAPI\nfrom operator import itemgetter\n\nclass WeChatCard(BaseWeChatAPI):\n    API_BASE_URL = 'https://api.weixin.qq.com/'\n\n    def create(self, card_data):\n        \"\"\"\n        创建卡券\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#8\n\n        :param card_data: 卡券信息\n        :return: 创建的卡券 ID\n        \"\"\"\n        result = self._post('card/create', data=card_data, result_processor=itemgetter('card_id'))\n        return result\n\n    def batch_add_locations(self, location_data):\n        \"\"\"\n        ⚠️已废弃\n        批量导入门店信息\n\n        :param location_data: 门店信息\n        :return: 门店 ID 列表，插入失败的门店元素值为 -1\n        \"\"\"\n        result = self._post('card/location/batchadd', data=location_data, result_processor=itemgetter('location_id_list'))\n        return result\n\n    def batch_get_locations(self, offset=0, count=0):\n        \"\"\"\n        ⚠️已废弃\n        批量获取门店信息\n        \"\"\"\n        return self._post('card/location/batchget', data={'offset': offset, 'count': count})\n\n    def get_colors(self):\n        \"\"\"\n        获得卡券的最新颜色列表，用于创建卡券\n        目前微信提供包括十四种色值供开发者使用。\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#7\n\n        :return: 颜色列表\n        \"\"\"\n        return ['Color010', 'Color020', 'Color030', 'Color040', 'Color050', 'Color060', 'Color070', 'Color080', 'Color081', 'Color082', 'Color090', 'Color100', 'Color101', 'Color102']\n\n    def create_qrcode(self, qrcode_data):\n        \"\"\"\n        创建卡券二维码\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#0\n\n        :param qrcode_data: 二维码信息\n        :return: 二维码 ticket，可使用 :func:show_qrcode 换取二维码文件\n        \"\"\"\n        result = self._post('card/qrcode/create', data=qrcode_data, result_processor=itemgetter('ticket'))\n        return result\n\n    def create_landingpage(self, buffer_data):\n        \"\"\"\n        创建货架\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#3\n\n        \"\"\"\n        result = self._post('card/landingpage/create', data=buffer_data)\n        return result\n\n    def get_html(self, card_id):\n        \"\"\"\n        图文消息群发卡券\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#6\n        \"\"\"\n        result = self._post('card/mpnews/gethtml', data={'card_id': card_id}, result_processor=itemgetter('content'))\n        return result\n\n    def consume_code(self, code, card_id=None):\n        \"\"\"\n        消耗 code\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        \"\"\"\n        card_data = {'code': code}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/code/consume', data=card_data)\n\n    def decrypt_code(self, encrypt_code):\n        \"\"\"\n        解码加密的 code\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        \"\"\"\n        result = self._post('card/code/decrypt', data={'encrypt_code': encrypt_code}, result_processor=itemgetter('code'))\n        return result\n\n    def delete(self, card_id):\n        \"\"\"\n        删除卡券\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#7\n        \"\"\"\n        return self._post('card/delete', data={'card_id': card_id})\n\n    def get_code(self, code, card_id=None, check_consume=True):\n        \"\"\"\n        查询 code 信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#0\n        \"\"\"\n        card_data = {'code': code}\n        if card_id:\n            card_data['card_id'] = card_id\n        if not check_consume:\n            card_data['check_consume'] = check_consume\n        return self._post('card/code/get', data=card_data)\n\n    def get_card_list(self, openid, card_id=None):\n        \"\"\"\n        用于获取用户卡包里的，属于该appid下的卡券。\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#1\n        \"\"\"\n        card_data = {'openid': openid}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/user/getcardlist', data=card_data)\n\n    def batch_get(self, offset=0, count=50, status_list=None):\n        \"\"\"\n        批量查询卡券信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#3\n\n        :param offset: 查询卡列表的起始偏移量，从0开始，即offset: 5是指从从列表里的第六个开始读取。\n        :param count: 需要查询的卡片的数量（数量最大50）\n        :param status_list: 支持开发者拉出指定状态的卡券列表\n        \"\"\"\n        if count > 50:\n            raise ValueError('count cannot be greater than 50')\n        card_data = {'offset': offset, 'count': count}\n        if status_list:\n            card_data['status_list'] = status_list\n        return self._post('card/batchget', data=card_data)\n\n    def get(self, card_id):\n        \"\"\"\n        查询卡券详情\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#2\n        \"\"\"\n        result = self._post('card/get', data={'card_id': card_id}, result_processor=itemgetter('card'))\n        return result\n\n    def update_code(self, card_id, old_code, new_code):\n        \"\"\"\n        更新卡券 code\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#6\n\n        :param card_id: 卡券ID。自定义 Code 码卡券为必填\n        :param old_code: 需变更的 Code 码\n        :param new_code: 变更后的有效 Code 码\n        \"\"\"\n        return self._post('card/code/update', data={'card_id': card_id, 'code': old_code, 'new_code': new_code})\n\n    def invalid_code(self, code, card_id=None):\n        \"\"\"\n        设置卡券失效\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#8\n        \"\"\"\n        card_data = {'code': code}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/code/unavailable', data=card_data)\n\n    def update(self, card_data):\n        \"\"\"\n        更新卡券信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#4\n        \"\"\"\n        return self._post('card/update', data=card_data)\n\n    def set_paycell(self, card_id, is_open):\n        \"\"\"\n        设置买单接口\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#12\n        \"\"\"\n        return self._post('card/paycell/set', data={'card_id': card_id, 'is_open': is_open})\n\n    def set_test_whitelist(self, openids=None, usernames=None):\n        \"\"\"\n        设置卡券测试用户白名单\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#12\n        \"\"\"\n        openids = openids or []\n        usernames = usernames or []\n        return self._post('card/testwhitelist/set', data={'openid': openids, 'username': usernames})\n\n    def activate_membercard(self, membership_number, code, **kwargs):\n        \"\"\"\n        激活会员卡 - 接口激活方式\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#14\n\n        参数示例：\n        {\n            \"init_bonus\": 100,\n            \"init_bonus_record\":\"旧积分同步\",\n            \"init_balance\": 200,\n            \"membership_number\": \"AAA00000001\",\n            \"code\": \"12312313\",\n            \"card_id\": \"xxxx_card_id\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"init_custom_field_value1\": \"xxxxx\",\n            \"init_custom_field_value2\": \"xxxxx\",\n            \"init_custom_field_value3\": \"xxxxx\"\n        }\n\n        返回示例：\n        {\"errcode\":0,   \"errmsg\":\"ok\"}\n\n        :param membership_number: 必填，会员卡编号，由开发者填入，作为序列号显示在用户的卡包里。可与Code码保持等值\n        :param code: 必填，领取会员卡用户获得的code\n        :return: 参见返回示例\n        \"\"\"\n        kwargs['membership_number'] = membership_number\n        kwargs['code'] = code\n        return self._post('card/membercard/activate', data=kwargs)\n\n    def update_membercard(self, code, card_id, **kwargs):\n        \"\"\"\n        更新会员信息\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#18\n\n        注意事项：\n        1.开发者可以同时传入add_bonus和bonus解决由于同步失败带来的幂等性问题。同时传入add_bonus和bonus时\n            add_bonus作为积分变动消息中的变量值，而bonus作为卡面上的总积分额度显示。余额变动同理。\n        2.开发者可以传入is_notify_bonus控制特殊的积分对账变动不发送消息，余额变动同理。\n\n        参数示例：\n        {\n            \"code\": \"179011264953\",\n            \"card_id\": \"p1Pj9jr90_SQRaVqYI239Ka1erkI\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"record_bonus\": \"消费30元，获得3积分\",\n            \"bonus\": 3000,\n            \"add_bonus\": 30,\n            \"balance\": 3000,\n            \"add_balance\": -30,\n            \"record_balance\": \"购买焦糖玛琪朵一杯，扣除金额30元。\",\n            \"custom_field_value1\": \"xxxxx\"，\n            \"custom_field_value2\": \"xxxxx\"，\n            \"notify_optional\": {\n                \"is_notify_bonus\": true,\n                \"is_notify_balance\": true,\n                \"is_notify_custom_field1\":true\n            }\n        }\n\n        返回示例：\n        {\n            \"errcode\": 0,\n            \"errmsg\": \"ok\",\n            \"result_bonus\": 100,\n            \"result_balance\": 200,\n            \"openid\": \"oFS7Fjl0WsZ9AMZqrI80nbIq8xrA\"\n        }\n\n        :param code: 必填，卡券Code码\n        :param card_id: 必填，卡券ID\n        :param kwargs: 其他非必填字段，包含则更新对应字段。详情参见微信文档 “7 更新会员信息” 部分\n        :return: 参见返回示例\n        \"\"\"\n        kwargs.update({'code': code, 'card_id': card_id})\n        return self._post('card/membercard/updateuser', data=kwargs)\n\n    def get_membercard_user_info(self, card_id, code):\n        \"\"\"\n        查询会员卡的会员信息\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n\n        :param card_id: 查询会员卡的 Card ID\n        :param code: 所查询用户领取到的 code 值\n        :return: 会员信息，包括激活资料、积分信息以及余额等信息\n        \"\"\"\n        return self._post('card/membercard/userinfo/get', data={'card_id': card_id, 'code': code})\n\n    def add_pay_giftcard(self, base_info, extra_info, is_membercard):\n        \"\"\"\n        新增支付后投放卡券的规则，支持支付后领卡，支付后赠券\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param base_info: 营销规则结构体\n        :type base_info: dict\n        :param extra_info: 支付规则结构体\n        :type extra_info: dict\n        :param is_membercard: 本次规则是否是领卡。（领卡传入 True, 赠券传入 False）\n        :type is_membercard: bool\n        :return: 规则 ID, 设置成功的列表，以及设置失败的列表\n        \"\"\"\n        if is_membercard:\n            rule_key = 'member_rule'\n            rule_type = 'RULE_TYPE_PAY_MEMBER_CARD'\n        else:\n            rule_key = 'single_pay'\n            rule_type = 'RULE_TYPE_SINGLE_PAY'\n        return self._post('card/paygiftcard/add', data={'rule_info': {'type': rule_type, 'base_info': base_info, rule_key: extra_info}})\n\n    def del_pay_giftcard(self, rule_id):\n        \"\"\"\n        删除支付后投放卡券的规则\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param rule_id: 支付即会员的规则 ID\n        \"\"\"\n        return self._post('card/paygiftcard/delete', data={'rule_id': rule_id})\n\n    def get_pay_giftcard(self, rule_id):\n        \"\"\"\n        查询支付后投放卡券的规则\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param rule_id: 支付即会员的规则 ID\n        :return: 支付后投放卡券的规则\n        :rtype: dict\n        \"\"\"\n        return self._post('card/paygiftcard/getbyid', data={'rule_id': rule_id}, result_processor=itemgetter('rule_info'))\n\n    def batch_get_pay_giftcard(self, effective=True, offset=0, count=10):\n        \"\"\"\n        批量查询支付后投放卡券的规则\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param effective: 是否仅查询生效的规则\n        :type effective: bool\n        :param offset: 起始偏移量\n        :type offset: int\n        :param count: 查询的数量\n        :type count: int\n        :return: 支付后投放卡券规则的总数，以及查询到的列表\n        \"\"\"\n        return self._post('card/paygiftcard/batchget', data={'type': 'RULE_TYPE_PAY_MEMBER_CARD', 'effective': effective, 'offset': offset, 'count': count})\n\n    def update_movie_ticket(self, code, ticket_class, show_time, duration, screening_room, seat_number, card_id=None):\n        \"\"\"\n        更新电影票\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#7\n        \"\"\"\n        ticket = {'code': code, 'ticket_class': ticket_class, 'show_time': show_time, 'duration': duration, 'screening_room': screening_room, 'seat_number': seat_number}\n        if card_id:\n            ticket['card_id'] = card_id\n        return self._post('card/movieticket/updateuser', data=ticket)\n\n    def checkin_boardingpass(self, code, passenger_name, seat_class, etkt_bnr, seat='', gate='', boarding_time=None, is_cancel=False, qrcode_data=None, card_id=None):\n        \"\"\"\n        飞机票接口\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#3\n        \"\"\"\n        data = {'code': code, 'passenger_name': passenger_name, 'class': seat_class, 'etkt_bnr': etkt_bnr, 'seat': seat, 'gate': gate, 'is_cancel': is_cancel}\n        if boarding_time:\n            data['boarding_time'] = boarding_time\n        if qrcode_data:\n            data['qrcode_data'] = qrcode_data\n        if card_id:\n            data['card_id'] = card_id\n        return self._post('card/boardingpass/checkin', data=data)\n\n    def update_luckymoney_balance(self, code, balance, card_id=None):\n        \"\"\"\n        ⚠️已废弃\n        更新红包余额\n        \"\"\"\n        card_data = {'code': code, 'balance': balance}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/luckymoney/updateuserbalance', data=card_data)\n\n    def get_redirect_url(self, url, encrypt_code, card_id):\n        \"\"\"\n        获取卡券跳转外链\n        \"\"\"\n        from wechatpy.utils import WeChatSigner\n        code = self.decrypt_code(encrypt_code)\n        signer = WeChatSigner()\n        signer.add_data(self.secret)\n        signer.add_data(code)\n        signer.add_data(card_id)\n        signature = signer.signature\n        return f'{url}?encrypt_code={encrypt_code}&card_id={card_id}&signature={signature}'\n\n    def deposit_code(self, card_id, codes):\n        \"\"\"\n        导入code\n        \"\"\"\n        card_data = {'card_id': card_id, 'code': codes}\n        return self._post('card/code/deposit', data=card_data)\n\n    def get_deposit_count(self, card_id):\n        \"\"\"\n        查询导入code数目\n        \"\"\"\n        card_data = {'card_id': card_id}\n        return self._post('card/code/getdepositcount', data=card_data)\n\n    def check_code(self, card_id, codes):\n        \"\"\"\n        核查code\n        \"\"\"\n        card_data = {'card_id': card_id, 'code': codes}\n        return self._post('card/code/checkcode', data=card_data)\n\n    def modify_stock(self, card_id, n):\n        \"\"\"\n        修改库存\n        \"\"\"\n        if n == 0:\n            return\n        card_data = {'card_id': card_id}\n        if n > 0:\n            card_data['increase_stock_value'] = n\n        elif n < 0:\n            card_data['reduce_stock_value'] = -n\n        return self._post('card/modifystock', data=card_data)\n\n    def get_activate_url(self, card_id, outer_str=None):\n        \"\"\"\n        获取开卡插件 Url, 内含调用开卡插件所需的参数\n        详情请参考\n        https://mp.weixin.qq.com/wiki?id=mp1499332673_Unm7V\n\n        :param card_id: 会员卡的card_id\n        :param outer_str: 渠道值，用于统计本次领取的渠道参数\n        :return: 内含调用开卡插件所需的参数的 Url\n        \"\"\"\n        return self._post('card/membercard/activate/geturl', data={'card_id': card_id, 'outer_str': outer_str}, result_processor=lambda x: x['url'])\n\n    def get_activate_info(self, activate_ticket):\n        \"\"\"\n        获取用户开卡时提交的信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n\n        :param activate_ticket: 跳转型开卡组件开卡后回调中的激活票据，可以用来获取用户开卡资料\n        :return: 用户开卡时填写的字段值\n        \"\"\"\n        return self._post('card/membercard/activatetempinfo/get', data={'activate_ticket': activate_ticket}, result_processor=itemgetter('info'))\n\n    def set_activate_user_form(self, card_id, **kwargs):\n        \"\"\"\n        设置开卡字段接口\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n\n        \"6 激活会员卡\" -> \"6.2 一键激活\" -> \"步骤二：设置开卡字段接口\"\n\n        参数示例：\n        {\n            \"card_id\": \"pbLatjnrwUUdZI641gKdTMJzHGfc\",\n            \"service_statement\": {\n                \"name\": \"会员守则\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"bind_old_card\": {\n                \"name\": \"老会员绑定\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"required_form\": {\n                \"can_modify\"：false,\n                \"rich_field_list\": [\n                    {\n                        \"type\": \"FORM_FIELD_RADIO\",\n                        \"name\": \"兴趣\",\n                        \"values\": [\n                            \"钢琴\",\n                            \"舞蹈\",\n                            \"足球\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_SELECT\",\n                        \"name\": \"喜好\",\n                        \"values\": [\n                            \"郭敬明\",\n                            \"韩寒\",\n                            \"南派三叔\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_CHECK_BOX\",\n                        \"name\": \"职业\",\n                        \"values\": [\n                            \"赛车手\",\n                            \"旅行家\"\n                        ]\n                    }\n                ],\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_MOBILE\"\n                ]\n            },\n            \"optional_form\": {\n                \"can_modify\"：false,\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_LOCATION\",\n                    \"USER_FORM_INFO_FLAG_BIRTHDAY\"\n                ],\n                \"custom_field_list\": [\n                    \"喜欢的电影\"\n                ]\n            }\n        }\n        common_field_id_list 值见常量 `wechatpy.constants.UserFormInfoFlag`\n\n        :param card_id: 卡券ID\n        :param kwargs: 其他非必填参数，见微信文档\n        \"\"\"\n        kwargs['card_id'] = card_id\n        return self._post('card/membercard/activateuserform/set', data=kwargs)\n\nExample skeleton:\n\n\nclass WeixinPayClient(Client):\n    '''\n    简化微信支付API操作\n    '''\n\n    def __init__(self, appid, pay_sign_key, pay_partner_id, pay_partner_key):\n        pass\n\n    def create_js_pay_package(self, **package):\n        '''\n        签名 pay package 需要的参数\n        详情请参考 支付开发文档\n        :param package: 需要签名的的参数\n        :return: 可以使用的packagestr\n        '''\n        pass\n\n    def create_js_pay_params(self, **package):\n        '''\n        签名 js 需要的参数\n        详情请参考 支付开发文档\n        ::\n            wxclient.create_js_pay_params(\n                body=标题, out_trade_no=本地订单号, total_fee=价格单位分,\n                notify_url=通知url,\n                spbill_create_ip=建议为支付人ip,\n            )\n        :param package: 需要签名的的参数\n        :return: 支付需要的对象\n        '''\n        pass\n\n    def create_js_edit_address_param(self, accesstoken, **params):\n        '''\n        alpha\n        暂时不建议使用\n        这个接口使用起来十分不友好\n        而且会引起巨大的误解\n        url 需要带上 code 和 state (url?code=xxx&state=1)\n        code 和state 是 oauth 时候回来的\n        token 要传用户的 token\n        这尼玛 你能相信这些支付接口都是腾讯出的？\n        '''\n        pass\n\n    def create_native_pay_url(self, productid):\n        '''\n        创建 native pay url\n        详情请参考 支付开发文档\n        :param productid: 本地商品ID\n        :return: 返回URL\n        '''\n        pass\n\n    def pay_deliver_notify(self, **deliver_info):\n        '''\n        通知 腾讯发货\n        一般形式 ::\n            wxclient.pay_delivernotify(\n                openid=openid,\n                transid=transaction_id,\n                out_trade_no=本地订单号,\n                deliver_timestamp=int(time.time()),\n                deliver_status=\"1\",\n                deliver_msg=\"ok\"\n            )\n        :param 需要签名的的参数\n        :return: 支付需要的对象\n        '''\n        pass\n\n    def pay_order_query(self, out_trade_no):\n        '''\n        查询订单状态\n        一般用于无法确定 订单状态时候补偿\n        :param out_trade_no: 本地订单号\n        :return: 订单信息dict\n        '''\n        pass\nCorresponding class implementation:\n\nfrom urllib import urlencode\nfrom hashlib import sha1, md5\nfrom functools import partial\nfrom werobot.utils import pay_sign_dict, generate_token\nfrom werobot.client import Client\nimport time\n\nclass WeixinPayClient(Client):\n    \"\"\"\n    简化微信支付API操作\n    \"\"\"\n\n    def __init__(self, appid, pay_sign_key, pay_partner_id, pay_partner_key):\n        self.pay_sign_key = pay_sign_key\n        self.pay_partner_id = pay_partner_id\n        self.pay_partner_key = pay_partner_key\n        self._pay_sign_dict = partial(pay_sign_dict, appid, pay_sign_key)\n        self._token = None\n        self.token_expires_at = None\n\n    def create_js_pay_package(self, **package):\n        \"\"\"\n        签名 pay package 需要的参数\n        详情请参考 支付开发文档\n\n        :param package: 需要签名的的参数\n        :return: 可以使用的packagestr\n        \"\"\"\n        assert self.pay_partner_id, 'PAY_PARTNER_ID IS EMPTY'\n        assert self.pay_partner_key, 'PAY_PARTNER_KEY IS EMPTY'\n        package.update({'partner': self.pay_partner_id})\n        package.setdefault('bank_type', 'WX')\n        package.setdefault('fee_type', '1')\n        package.setdefault('input_charset', 'UTF-8')\n        params = package.items()\n        params.sort()\n        sign = md5('&'.join(['%s=%s' % (str(p[0]), str(p[1])) for p in params + [('key', self.pay_partner_key)]])).hexdigest().upper()\n        return urlencode(params + [('sign', sign)])\n\n    def create_js_pay_params(self, **package):\n        \"\"\"\n        签名 js 需要的参数\n        详情请参考 支付开发文档\n\n        ::\n\n            wxclient.create_js_pay_params(\n                body=标题, out_trade_no=本地订单号, total_fee=价格单位分,\n                notify_url=通知url,\n                spbill_create_ip=建议为支付人ip,\n            )\n\n        :param package: 需要签名的的参数\n        :return: 支付需要的对象\n        \"\"\"\n        pay_param, sign, sign_type = self._pay_sign_dict(package=self.create_js_pay_package(**package))\n        pay_param['paySign'] = sign\n        pay_param['signType'] = sign_type\n        for key in ['appId', 'timeStamp', 'nonceStr']:\n            pay_param[key] = str(pay_param.pop(key.lower()))\n        return pay_param\n\n    def create_js_edit_address_param(self, accesstoken, **params):\n        \"\"\"\n        alpha\n        暂时不建议使用\n        这个接口使用起来十分不友好\n        而且会引起巨大的误解\n\n        url 需要带上 code 和 state (url?code=xxx&state=1)\n        code 和state 是 oauth 时候回来的\n\n        token 要传用户的 token\n\n        这尼玛 你能相信这些支付接口都是腾讯出的？\n        \"\"\"\n        params.update({'appId': self.appid, 'nonceStr': generate_token(8), 'timeStamp': int(time.time())})\n        _params = [(k.lower(), str(v)) for k, v in params.items()]\n        _params += [('accesstoken', accesstoken)]\n        _params.sort()\n        string1 = '&'.join(['%s=%s' % (p[0], p[1]) for p in _params])\n        sign = sha1(string1).hexdigest()\n        params = dict([(k, str(v)) for k, v in params.items()])\n        params['addrSign'] = sign\n        params['signType'] = 'sha1'\n        params['scope'] = params.get('scope', 'jsapi_address')\n        return params\n\n    def create_native_pay_url(self, productid):\n        \"\"\"\n        创建 native pay url\n        详情请参考 支付开发文档\n\n        :param productid: 本地商品ID\n        :return: 返回URL\n        \"\"\"\n        params, sign = self._pay_sign_dict(productid=productid)\n        params['sign'] = sign\n        return NATIVE_BASE_URL + urlencode(params)\n\n    def pay_deliver_notify(self, **deliver_info):\n        \"\"\"\n        通知 腾讯发货\n\n        一般形式 ::\n            wxclient.pay_delivernotify(\n                openid=openid,\n                transid=transaction_id,\n                out_trade_no=本地订单号,\n                deliver_timestamp=int(time.time()),\n                deliver_status=\"1\",\n                deliver_msg=\"ok\"\n            )\n\n        :param 需要签名的的参数\n        :return: 支付需要的对象\n        \"\"\"\n        params, sign, _ = self._pay_sign_dict(add_noncestr=False, add_timestamp=False, **deliver_info)\n        params['app_signature'] = sign\n        params['sign_method'] = 'sha1'\n        return self.post(url='https://api.weixin.qq.com/pay/delivernotify', data=params)\n\n    def pay_order_query(self, out_trade_no):\n        \"\"\"\n        查询订单状态\n        一般用于无法确定 订单状态时候补偿\n\n        :param out_trade_no: 本地订单号\n        :return: 订单信息dict\n        \"\"\"\n        package = {'partner': self.pay_partner_id, 'out_trade_no': out_trade_no}\n        _package = package.items()\n        _package.sort()\n        s = '&'.join(['%s=%s' % (p[0], str(p[1])) for p in _package + [('key', self.pay_partner_key)]])\n        package['sign'] = md5(s).hexdigest().upper()\n        package = '&'.join(['%s=%s' % (p[0], p[1]) for p in package.items()])\n        params, sign, _ = self._pay_sign_dict(add_noncestr=False, package=package)\n        params['app_signature'] = sign\n        params['sign_method'] = 'sha1'\n        return self.post(url='https://api.weixin.qq.com/pay/orderquery', data=params)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass CompactionManager:\n    '''\n    消息压缩管理器 - 提供智能消息历史压缩功能\n    实现了智能压缩算法，使得在保持语义和关键信息的同时减少token数量\n    '''\n\n    def __init__(self):\n        '''初始化压缩管理器'''\n        pass\n\n    def _estimate_token_count(self, text: str) -> int:\n        '''\n        简单估算文本的token数量 - 不使用tokenizer\n        Args:\n            text: 需要估算token数的文本\n        Returns:\n            估算的token数量\n        '''\n        pass\n\n    def _count_tokens_in_messages(self, messages: List[Dict[str, Any]]) -> int:\n        '''\n        计算消息列表中的总token数\n        Args:\n            messages: 消息列表\n        Returns:\n            总token数\n        '''\n        pass\n\n    def should_compact(self, messages: List[Dict[str, Any]], model_config: Dict[str, Any]) -> bool:\n        '''\n        根据token数量判断是否应该压缩消息历史\n        Args:\n            messages: 消息历史\n            model_config: 模型配置\n        Returns:\n            是否应该压缩\n        '''\n        pass\n\n    def _format_conversation_for_compression(self, messages: List[Dict[str, Any]]) -> str:\n        '''\n        将消息列表格式化为适合压缩的文本格式\n        Args:\n            messages: 消息列表\n        Returns:\n            格式化后的对话文本\n        '''\n        pass\n\n    def _expand_compressed_to_messages(self, compressed_text: str, original_messages: List[Dict[str, Any]]) -> List[Dict[str, Any]]:\n        '''\n        将压缩后的文本扩展为消息列表\n        Args:\n            compressed_text: 压缩后的对话摘要文本\n            original_messages: 原始消息列表\n        Returns:\n            包含压缩摘要的消息列表\n        '''\n        pass\n\n    def compact_messages(self, messages: List[Dict[str, Any]], model_config: Dict[str, Any]) -> Tuple[List[Dict[str, Any]], Dict[str, Any]]:\n        '''压缩消息历史，保留关键信息并减少 token 数量。'''\n        pass"
  }
]