[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass OutputSTACMixin:\n    '''Adds STAC related features.'''\n    @property\n    def stac_path(self) -> MPath:\n        '''Return path to STAC JSON file.'''\n        pass\n    @property\n    def stac_item_id(self) -> str:\n        '''\n        Return STAC item ID according to configuration.\n        Defaults to path basename.\n        '''\n        pass\n    @property\n    def stac_item_metadata(self):\n        '''Custom STAC metadata.'''\n        pass\n    @property\n    def stac_asset_type(self):\n        '''Asset MIME type.'''\n        pass\nCorresponding class implementation:\n\nfrom mapchete.path import MPath\n\nclass OutputSTACMixin:\n    \"\"\"Adds STAC related features.\"\"\"\n    path: MPath\n    output_params: dict\n\n    @property\n    def stac_path(self) -> MPath:\n        \"\"\"Return path to STAC JSON file.\"\"\"\n        return self.path / f'{self.stac_item_id}.json'\n\n    @property\n    def stac_item_id(self) -> str:\n        \"\"\"\n        Return STAC item ID according to configuration.\n\n        Defaults to path basename.\n        \"\"\"\n        return self.output_params.get('stac', {}).get('id') or self.path.stem\n\n    @property\n    def stac_item_metadata(self):\n        \"\"\"Custom STAC metadata.\"\"\"\n        return self.output_params.get('stac', {})\n\n    @property\n    def stac_asset_type(self):\n        \"\"\"Asset MIME type.\"\"\"\n        raise ValueError('no MIME type set for this output')\n\nExample skeleton:\n\n@dataclasses.dataclass()\nclass DatasetDocumentation:\n    '''Functionality to generate documentation for a community dataset.'''\n    @property\n    def tfds_id(self) -> str:\n        '''Returns the ID to use when loading this dataset in TFDS.'''\n        pass\n    @property\n    def name(self) -> str:\n        pass\n    @property\n    def namespace(self) -> str:\n        pass\n\n    def code_url(self, title: str='Code') -> str:\n        pass\n\n    def to_namespace_overview(self) -> str:\n        '''Returns the entry to be shown in the overview for a single namespace.'''\n        pass\n\n    def to_details_markdown(self) -> str:\n        '''Markdown to be shown on the details page for the namespace.'''\n        pass\n\n    def dataset_info_per_config(self) -> Mapping[str, dataset_info_pb2.DatasetInfo]:\n        pass\n\n    def documentation(self, keep_short: bool=False) -> str:\n        '''Returns detailed documentation for all configs of this dataset.'''\n        pass\n\n        def format_splits(split_infos: Sequence[dataset_info_pb2.SplitInfo]) -> str:\n                pass\n\n        def format_feature(feature: feature_pb2.Feature) -> str:\n                pass\n\n        def format_template(config_name: str, info: dataset_info_pb2.DatasetInfo) -> str:\n                pass\n\n    def extra_links(self) -> Sequence[str]:\n        '''List of extra links (formatted in Markdown) relevant for this dataset.'''\n        pass\n\n    def format_extra_links(self, prefix: str, infix: str) -> str:\n        pass\n\n    def to_toc_markdown(self) -> str:\n        '''Markdown to be shown in the TOC in the overview page.'''\n        pass\nCorresponding class implementation:\n\nfrom tensorflow_datasets.core.proto import feature_pb2\nfrom tensorflow_datasets.core.utils import conversion_utils\nfrom typing import Any, Iterator, List, Mapping, MutableMapping, Optional, Sequence, Tuple\nfrom tensorflow_datasets.core.proto import dataset_info_pb2\nfrom tensorflow_datasets.core.utils import py_utils\nimport textwrap\nimport dataclasses\n\n@dataclasses.dataclass()\nclass DatasetDocumentation:\n    \"\"\"Functionality to generate documentation for a community dataset.\"\"\"\n    dataset: DatasetPackage\n    templates: DocumentationTemplates\n    options: _Options\n\n    @property\n    def tfds_id(self) -> str:\n        \"\"\"Returns the ID to use when loading this dataset in TFDS.\"\"\"\n        return str(self.dataset.name)\n\n    @property\n    def name(self) -> str:\n        return self.dataset.name.name\n\n    @property\n    def namespace(self) -> str:\n        return self.dataset.name.namespace\n\n    def code_url(self, title: str='Code') -> str:\n        return f'[{title}]({self.dataset.source.root_path})'\n\n    def to_namespace_overview(self) -> str:\n        \"\"\"Returns the entry to be shown in the overview for a single namespace.\"\"\"\n        template = textwrap.dedent('*  [{dataset}]({namespace}/{dataset}.md)')\n        return template.format(dataset=self.name, namespace=self.namespace)\n\n    def to_details_markdown(self) -> str:\n        \"\"\"Markdown to be shown on the details page for the namespace.\"\"\"\n        extra_links = self.format_extra_links(prefix='*   ', infix='\\n')\n        details = self.templates.dataset_details_template.format(name=self.name, description=self.documentation(), namespace=self.namespace, tfds_id=self.tfds_id, references_bulleted_list=extra_links)\n        if len(details) < 2 * 1024 * 1024:\n            return details\n        return self.templates.dataset_details_template.format(name=self.name, description=self.documentation(keep_short=True), namespace=self.namespace, tfds_id=self.tfds_id, references_bulleted_list=extra_links)\n\n    def dataset_info_per_config(self) -> Mapping[str, dataset_info_pb2.DatasetInfo]:\n        return {}\n\n    def documentation(self, keep_short: bool=False) -> str:\n        \"\"\"Returns detailed documentation for all configs of this dataset.\"\"\"\n        header_template = '## {config_name}'\n        template = textwrap.dedent(\"\\n      Use the following command to load this dataset in TFDS:\\n\\n      ```python\\n      ds = tfds.load('{tfds_id}')\\n      ```\\n\\n      *   **Description**:\\n\\n      {description}\\n\\n      *   **License**: {license}\\n      *   **Version**: {version}\\n      *   **Splits**:\\n      {splits}\\n      *   **Features**:\\n      {features}\\n    \")\n\n        def format_splits(split_infos: Sequence[dataset_info_pb2.SplitInfo]) -> str:\n            splits_str = '\\n'.join(sorted([f\"`'{split.name}'` | {sum(split.shard_lengths)}\" for split in split_infos]))\n            return textwrap.dedent(f\"\\n            Split  | Examples\\n            :----- | -------:\\n            {py_utils.indent(splits_str, '            ')}\\n            \")\n\n        def format_feature(feature: feature_pb2.Feature) -> str:\n            if feature.HasField('json_feature'):\n                return textwrap.dedent(f'\\n```json\\n{feature.json_feature.json}\\n```\\n                               ')\n            if feature.HasField('features_dict'):\n                descriptions = [f'    *   `{name}`' for name, _ in feature.features_dict.features.items()]\n                return '\\n'.join(descriptions)\n            return ''\n\n        def format_template(config_name: str, info: dataset_info_pb2.DatasetInfo) -> str:\n            if self.namespace and self.namespace == 'huggingface':\n                tfds_id = conversion_utils.to_tfds_name(self.tfds_id)\n            else:\n                tfds_id = self.tfds_id\n            if config_name != 'default':\n                config_name = conversion_utils.to_tfds_name(config_name)\n                tfds_id = f'{tfds_id}/{config_name}'\n            if keep_short:\n                features = ''\n            else:\n                features = format_feature(info.features)\n            content = template.format(description=_clean_up_text(info.description), tfds_id=tfds_id, license=info.redistribution_info.license or 'No known license', version=info.version, splits=format_splits(info.splits), features=features, citation=info.citation)\n            if config_name == 'default':\n                return content\n            return '{header}\\n\\n{content}'.format(header=header_template.format(config_name=config_name), content=content)\n        config_descriptions = [format_template(config_name, info) for config_name, info in self.dataset_info_per_config().items()]\n        return '\\n\\n'.join(config_descriptions)\n\n    def extra_links(self) -> Sequence[str]:\n        \"\"\"List of extra links (formatted in Markdown) relevant for this dataset.\"\"\"\n        return [self.code_url()]\n\n    def format_extra_links(self, prefix: str, infix: str) -> str:\n        return infix.join([f'{prefix}{link}' for link in self.extra_links()])\n\n    def to_toc_markdown(self) -> str:\n        \"\"\"Markdown to be shown in the TOC in the overview page.\"\"\"\n        extra_links = self.format_extra_links(prefix='', infix=' / ')\n        return f'{self.name} ({extra_links})'\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass MultiSearchResult:\n    '''Enhanced search result with comprehensive snippet metadata.'''\n\n    def __str__(self) -> str:\n        '''Return enhanced formatted string representation.'''\n        pass\n\n    def to_json(self) -> str:\n        '''Return LLM-optimized JSON representation following the compact schema.'''\n        pass\n    @classmethod\n    def to_jsonlines(cls, results: list['MultiSearchResult']) -> str:\n        '''Convert multiple MultiSearchResult objects to JSON Lines format.\n        Args:\n            results: List of MultiSearchResult objects\n            include_summary: Whether to include summary fields\n        Returns:\n            JSON Lines string (one JSON object per line)\n        '''\n        pass\n    @classmethod\n    def to_string(cls, results: list['MultiSearchResult']) -> str:\n        '''Convert multiple MultiSearchResult objects to a string.'''\n        pass\n    @staticmethod\n    def calculate_relative_path(file_path: str, source_path: str) -> str:\n        '''Calculate relative path from source root.'''\n        pass\n    @staticmethod\n    def detect_language_from_extension(extension: str) -> str:\n        '''Detect programming language from file extension.'''\n        pass"
  }
]