[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass CachedFeatureSet(CachedArtifactMixin, FeatureSetCore):\n    '''CachedFeatureSet: Caches the method results for Workbench FeatureSets\n    Note: Cached method values may lag underlying FeatureSet changes.\n    Common Usage:\n        ```python\n        my_features = CachedFeatureSet(name)\n        my_features.details()\n        my_features.health_check()\n        my_features.workbench_meta()\n        ```\n    '''\n\n    def __init__(self, feature_set_name: str, database: str='workbench'):\n        '''CachedFeatureSet Initialization'''\n        pass\n    @CachedArtifactMixin.cache_result\n    def summary(self, **kwargs) -> dict:\n        '''Retrieve the FeatureSet Details.\n        Returns:\n            dict: A dictionary of details about the FeatureSet\n        '''\n        pass\n    @CachedArtifactMixin.cache_result\n    def details(self, **kwargs) -> dict:\n        '''Retrieve the FeatureSet Details.\n        Returns:\n            dict: A dictionary of details about the FeatureSet\n        '''\n        pass\n    @CachedArtifactMixin.cache_result\n    def health_check(self, **kwargs) -> dict:\n        '''Retrieve the FeatureSet Health Check.\n        Returns:\n            dict: A dictionary of health check details for the FeatureSet\n        '''\n        pass\n    @CachedArtifactMixin.cache_result\n    def workbench_meta(self) -> Union[str, None]:\n        '''Retrieve the Workbench Metadata for this DataSource.\n        Returns:\n            Union[dict, None]: Dictionary of Workbench metadata for this Artifact\n        '''\n        pass\n    @CachedArtifactMixin.cache_result\n    def smart_sample(self) -> pd.DataFrame:\n        '''Retrieve the Smart Sample for this FeatureSet.\n        Returns:\n            pd.DataFrame: The Smart Sample DataFrame\n        '''\n        pass\nCorresponding class implementation:\n\nimport pandas as pd\nfrom typing import Union\nfrom workbench.core.artifacts.feature_set_core import FeatureSetCore\nfrom workbench.core.artifacts.cached_artifact_mixin import CachedArtifactMixin\n\nclass CachedFeatureSet(CachedArtifactMixin, FeatureSetCore):\n    \"\"\"CachedFeatureSet: Caches the method results for Workbench FeatureSets\n\n    Note: Cached method values may lag underlying FeatureSet changes.\n\n    Common Usage:\n        ```python\n        my_features = CachedFeatureSet(name)\n        my_features.details()\n        my_features.health_check()\n        my_features.workbench_meta()\n        ```\n    \"\"\"\n\n    def __init__(self, feature_set_name: str, database: str='workbench'):\n        \"\"\"CachedFeatureSet Initialization\"\"\"\n        FeatureSetCore.__init__(self, feature_set_name=feature_set_name, use_cached_meta=True)\n\n    @CachedArtifactMixin.cache_result\n    def summary(self, **kwargs) -> dict:\n        \"\"\"Retrieve the FeatureSet Details.\n\n        Returns:\n            dict: A dictionary of details about the FeatureSet\n        \"\"\"\n        return super().summary(**kwargs)\n\n    @CachedArtifactMixin.cache_result\n    def details(self, **kwargs) -> dict:\n        \"\"\"Retrieve the FeatureSet Details.\n\n        Returns:\n            dict: A dictionary of details about the FeatureSet\n        \"\"\"\n        return super().details(**kwargs)\n\n    @CachedArtifactMixin.cache_result\n    def health_check(self, **kwargs) -> dict:\n        \"\"\"Retrieve the FeatureSet Health Check.\n\n        Returns:\n            dict: A dictionary of health check details for the FeatureSet\n        \"\"\"\n        return super().health_check(**kwargs)\n\n    @CachedArtifactMixin.cache_result\n    def workbench_meta(self) -> Union[str, None]:\n        \"\"\"Retrieve the Workbench Metadata for this DataSource.\n\n        Returns:\n            Union[dict, None]: Dictionary of Workbench metadata for this Artifact\n        \"\"\"\n        return super().workbench_meta()\n\n    @CachedArtifactMixin.cache_result\n    def smart_sample(self) -> pd.DataFrame:\n        \"\"\"Retrieve the Smart Sample for this FeatureSet.\n\n        Returns:\n            pd.DataFrame: The Smart Sample DataFrame\n        \"\"\"\n        return super().smart_sample()\n\nExample skeleton:\n\n\nclass Scheduler:\n    '''\n    Class representation of a Nylas Scheduler API.\n    '''\n\n    def __init__(self, http_client):\n        pass\n    @property\n    def configurations(self) -> Configurations:\n        '''\n        Access the Configurations API.\n        Returns:\n            The Configurations API.\n        '''\n        pass\n    @property\n    def bookings(self) -> Bookings:\n        '''\n        Access the Bookings API.\n        Returns:\n            The Bookings API.\n        '''\n        pass\n    @property\n    def sessions(self) -> Sessions:\n        '''\n        Access the Sessions API.\n        Returns:\n            The Sessions API.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom nylas.resources.sessions import Sessions\nfrom nylas.resources.bookings import Bookings\nfrom nylas.resources.configurations import Configurations\n\nclass Scheduler:\n    \"\"\"\n    Class representation of a Nylas Scheduler API.\n    \"\"\"\n\n    def __init__(self, http_client):\n        self.http_client = http_client\n\n    @property\n    def configurations(self) -> Configurations:\n        \"\"\"\n        Access the Configurations API.\n\n        Returns:\n            The Configurations API.\n        \"\"\"\n        return Configurations(self.http_client)\n\n    @property\n    def bookings(self) -> Bookings:\n        \"\"\"\n        Access the Bookings API.\n\n        Returns:\n            The Bookings API.\n        \"\"\"\n        return Bookings(self.http_client)\n\n    @property\n    def sessions(self) -> Sessions:\n        \"\"\"\n        Access the Sessions API.\n\n        Returns:\n            The Sessions API.\n        \"\"\"\n        return Sessions(self.http_client)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass RobustnessTemplate:\n    '''\n    RobustnessTemplate class for generating baseline robustness attack prompts\n    across different categories: input overreliance and hijacking.\n    Enhanced with agentic attack patterns from context amnesia and memory poisoning vulnerabilities.\n    '''\n    @staticmethod\n    def generate_baseline_attacks(vulnerability_type: RobustnessType, max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate baseline attack prompts for robustness vulnerabilities based on the specific type.\n        '''\n        pass\n    @staticmethod\n    def generate_input_overreliance_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate a prompt for input overreliance vulnerabilities.\n        Enhanced with context amnesia patterns that exploit memory and session boundaries.\n        '''\n        pass\n    @staticmethod\n    def generate_hijacking_baseline_attacks(max_goldens: int, purpose: Optional[str]) -> str:\n        '''\n        Generate a prompt for hijacking vulnerabilities.\n        Enhanced with memory poisoning patterns that inject fabricated context and bias workflows.\n        '''\n        pass"
  }
]