[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass MplPlotter(BasePlotter):\n    '''Matplotlib API for pulse drawer.\n    This plotter arranges bits along y axis of 2D canvas with vertical offset.\n    '''\n\n    def __init__(self, canvas: core.DrawerCanvas, axis: Optional[plt.Axes]=None):\n        '''Create new plotter.\n        Args:\n            canvas: Configured drawer canvas object. Canvas object should be updated\n                with `.update` method before initializing the plotter.\n            axis: Matplotlib axis object. When `axis` is provided, the plotter updates\n                given axis instead of creating and returning new matplotlib figure.\n        '''\n        pass\n\n    def initialize_canvas(self):\n        '''Format appearance of matplotlib canvas.'''\n        pass\n\n    def draw(self):\n        '''Output drawings stored in canvas object.'''\n        pass\n\n    def _time_bucket_outline(self, xvals: np.ndarray, yvals: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n        '''Generate outline of time bucket. Edges are smoothly faded.\n        Args:\n            xvals: Left and right point coordinates.\n            yvals: Bottom and top point coordinates.\n        Returns:\n            Coordinate vectors of time bucket fringe.\n        '''\n        pass\n\n    def save_file(self, filename: str):\n        '''Save image to file.\n        Args:\n            filename: File path to output image data.\n        '''\n        pass\n\n    def get_image(self, interactive: bool=False) -> matplotlib.pyplot.Figure:\n        '''Get image data to return.\n        Args:\n            interactive: When set `True` show the circuit in a new window.\n                This depends on the matplotlib backend being used supporting this.\n        Returns:\n            Matplotlib figure data.\n        '''\n        pass\nCorresponding class implementation:\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom matplotlib.collections import PatchCollection\nfrom qiskit.visualization.exceptions import VisualizationError\nfrom qiskit.visualization.timeline import core, types, drawings\nfrom typing import Optional, Tuple\nfrom qiskit.visualization.timeline.plotters.base_plotter import BasePlotter\nfrom qiskit.visualization.utils import matplotlib_close_if_inline\nfrom matplotlib.patches import Rectangle\nimport numpy as np\n\nclass MplPlotter(BasePlotter):\n    \"\"\"Matplotlib API for pulse drawer.\n\n    This plotter arranges bits along y axis of 2D canvas with vertical offset.\n    \"\"\"\n\n    def __init__(self, canvas: core.DrawerCanvas, axis: Optional[plt.Axes]=None):\n        \"\"\"Create new plotter.\n\n        Args:\n            canvas: Configured drawer canvas object. Canvas object should be updated\n                with `.update` method before initializing the plotter.\n            axis: Matplotlib axis object. When `axis` is provided, the plotter updates\n                given axis instead of creating and returning new matplotlib figure.\n        \"\"\"\n        super().__init__(canvas=canvas)\n        if axis is None:\n            fig_height = self.canvas.vmax - self.canvas.vmin\n            fig_h = self.canvas.formatter['general.fig_unit_height'] * fig_height\n            fig_w = self.canvas.formatter['general.fig_width']\n            self.figure = plt.figure(figsize=(fig_w, fig_h))\n            self.ax = self.figure.add_subplot(1, 1, 1)\n        else:\n            self.figure = axis.figure\n            self.ax = axis\n        self.initialize_canvas()\n\n    def initialize_canvas(self):\n        \"\"\"Format appearance of matplotlib canvas.\"\"\"\n        self.ax.set_facecolor(self.canvas.formatter['color.background'])\n        self.ax.spines['right'].set_color('none')\n        self.ax.spines['left'].set_color('none')\n        self.ax.spines['top'].set_color('none')\n        self.ax.set_yticks([])\n        axis_config = self.canvas.layout['time_axis_map'](time_window=self.canvas.time_range)\n        self.ax.set_xticks(list(axis_config.axis_map.keys()))\n        self.ax.set_xticklabels(list(axis_config.axis_map.values()), fontsize=self.canvas.formatter['text_size.axis_label'])\n        self.ax.set_xlabel(axis_config.label, fontsize=self.canvas.formatter['text_size.axis_label'])\n        self.ax.set_xlim(*self.canvas.time_range)\n        self.ax.set_ylim(self.canvas.vmin, self.canvas.vmax)\n\n    def draw(self):\n        \"\"\"Output drawings stored in canvas object.\"\"\"\n        for _, data in self.canvas.collections:\n            xvals = np.asarray(data.xvals, dtype=float)\n            yvals = np.asarray(data.yvals, dtype=float)\n            offsets = [self.canvas.assigned_coordinates[bit] for bit in data.bits]\n            if isinstance(data, drawings.BoxData):\n                if data.data_type in [str(types.BoxType.SCHED_GATE.value), str(types.BoxType.DELAY.value)]:\n                    xs, ys1, ys2 = self._time_bucket_outline(xvals, yvals)\n                    self.ax.fill_between(x=xs, y1=ys1 + offsets[0], y2=ys2 + offsets[0], **data.styles)\n                else:\n                    x0, x1 = xvals\n                    y0, y1 = yvals + offsets[0]\n                    rect = Rectangle(xy=(x0, y0), width=x1 - x0, height=y1 - y0)\n                    pc = PatchCollection([rect], **data.styles)\n                    self.ax.add_collection(pc)\n            elif isinstance(data, drawings.LineData):\n                self.ax.plot(xvals, yvals + offsets[0], **data.styles)\n            elif isinstance(data, drawings.TextData):\n                if data.latex is not None:\n                    s = f'${data.latex}$'\n                else:\n                    s = data.text\n                self.ax.text(x=xvals[0], y=yvals[0] + offsets[0], s=s, **data.styles)\n            elif isinstance(data, drawings.GateLinkData):\n                self.ax.plot(xvals.repeat(len(offsets)), offsets, **data.styles)\n            else:\n                raise VisualizationError(f'Data {data} is not supported by {self.__class__.__name__}')\n\n    def _time_bucket_outline(self, xvals: np.ndarray, yvals: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n        \"\"\"Generate outline of time bucket. Edges are smoothly faded.\n\n        Args:\n            xvals: Left and right point coordinates.\n            yvals: Bottom and top point coordinates.\n\n        Returns:\n            Coordinate vectors of time bucket fringe.\n        \"\"\"\n        x0, x1 = xvals\n        y0, y1 = yvals\n        width = x1 - x0\n        y_mid = 0.5 * (y0 + y1)\n        risefall = int(min(self.canvas.formatter['time_bucket.edge_dt'], max(width / 2 - 2, 0)))\n        edge = np.sin(np.pi / 2 * np.arange(0, risefall) / risefall)\n        xs = np.concatenate([np.arange(x0, x0 + risefall), [x0 + risefall, x1 - risefall], np.arange(x1 - risefall + 1, x1 + 1)])\n        l1 = (y1 - y_mid) * np.concatenate([edge, [1, 1], edge[::-1]])\n        l2 = (y0 - y_mid) * np.concatenate([edge, [1, 1], edge[::-1]])\n        return (xs, l1, l2)\n\n    def save_file(self, filename: str):\n        \"\"\"Save image to file.\n        Args:\n            filename: File path to output image data.\n        \"\"\"\n        plt.savefig(filename, bbox_inches='tight', dpi=self.canvas.formatter['general.dpi'])\n\n    def get_image(self, interactive: bool=False) -> matplotlib.pyplot.Figure:\n        \"\"\"Get image data to return.\n        Args:\n            interactive: When set `True` show the circuit in a new window.\n                This depends on the matplotlib backend being used supporting this.\n        Returns:\n            Matplotlib figure data.\n        \"\"\"\n        matplotlib_close_if_inline(self.figure)\n        if self.figure and interactive:\n            self.figure.show()\n        try:\n            self.figure.tight_layout()\n        except AttributeError:\n            pass\n        return self.figure\n\nExample skeleton:\n\n\nclass ScatterPlot(PluginInterface):\n    '''A Scatter Plot Plugin for Feature Sets.'''\n\n    def __init__(self, show_axes: bool=True):\n        '''Initialize the Scatter Plot Plugin\n        Args:\n            show_axes (bool): Whether to show the axes and grid. Default is True.\n        '''\n        pass\n\n    def create_component(self, component_id: str) -> html.Div:\n        '''Create a Dash Graph Component without any data.\n        Args:\n            component_id (str): The ID of the web component.\n        Returns:\n            html.Div: A Dash Div Component containing the graph and dropdowns.\n        '''\n        pass\n\n    def update_properties(self, input_data: pd.DataFrame, **kwargs) -> list:\n        '''Update the property values for the plugin component.\n        Args:\n            input_data (pd.DataFrame): The input data object.\n            **kwargs: Additional keyword arguments (plugins can define their own arguments).\n                      Note: The current kwargs processed are:\n                            - x: The default x-axis column\n                            - y: The default y-axis column\n                            - color: The default color column\n                            - dropdown_columns: The columns to use for the x and y options\n                            - hover_columns: The columns to show when hovering over a point\n                            - suppress_hover_display: Suppress hover display (default: False)\n                            - custom_data: Custom data that get passed to hoverData callbacks\n        Returns:\n            list: A list of updated property values (figure, x options, y options, color options,\n                                                    label options, x default, y default,\n                                                    color default).\n        '''\n        pass\n\n    def create_scatter_plot(self, df: pd.DataFrame, x_col: str, y_col: str, color_col: str, label_col: str, regression_line: bool=False, marker_size: int=15) -> go.Figure:\n        '''Create a Plotly Scatter Plot figure.\n        Args:\n            df (pd.DataFrame): The dataframe containing the data.\n            x_col (str): The column to use for the x-axis.\n            y_col (str): The column to use for the y-axis.\n            color_col (str): The column to use for the color scale.\n            label_col (str): The column to use for point labels.\n            regression_line (bool): Whether to include a regression line.\n            marker_size (int): Size of the markers. Default is 15.\n        Returns:\n            go.Figure: A Plotly Figure object.\n        '''\n        pass\n\n        def generate_hover_text(row):\n                pass\n\n    def register_internal_callbacks(self):\n        '''Register any internal callbacks for the plugin.'''\n        pass\n        @callback(Output(f'{self.component_id}-graph', 'figure', allow_duplicate=True), [Input(f'{self.component_id}-x-dropdown', 'value'), Input(f'{self.component_id}-y-dropdown', 'value'), Input(f'{self.component_id}-color-dropdown', 'value'), Input(f'{self.component_id}-label-dropdown', 'value'), Input(f'{self.component_id}-regression-line', 'value')], prevent_initial_call=True)\n        def _update_scatter_plot(x_value, y_value, color_value, label_value, regression_line):\n                '''Update the Scatter Plot Graph based on the dropdown values.'''\n                pass\n        @callback(Output(f'{self.component_id}-overlay', 'show'), Output(f'{self.component_id}-overlay', 'bbox'), Output(f'{self.component_id}-overlay', 'children'), Input(f'{self.component_id}-graph', 'hoverData'))\n        def _scatter_overlay(hover_data):\n                pass\nCorresponding class implementation:\n\nfrom workbench.utils.theme_manager import ThemeManager\nfrom dash import dcc, html, callback, Input, Output, no_update\nimport plotly.express as px\nimport base64\nimport pandas as pd\nfrom dash.exceptions import PreventUpdate\nfrom workbench.utils.plot_utils import prediction_intervals\nimport plotly.graph_objects as go\nfrom workbench.web_interface.components.plugin_interface import PluginInterface, PluginPage, PluginInputType\n\nclass ScatterPlot(PluginInterface):\n    \"\"\"A Scatter Plot Plugin for Feature Sets.\"\"\"\n    auto_load_page = PluginPage.NONE\n    plugin_input_type = PluginInputType.DATAFRAME\n\n    def __init__(self, show_axes: bool=True):\n        \"\"\"Initialize the Scatter Plot Plugin\n\n        Args:\n            show_axes (bool): Whether to show the axes and grid. Default is True.\n        \"\"\"\n        self.component_id = None\n        self.hover_columns = []\n        self.df = None\n        self.show_axes = show_axes\n        self.theme_manager = ThemeManager()\n        self.colorscale = self.theme_manager.colorscale()\n        super().__init__()\n\n    def create_component(self, component_id: str) -> html.Div:\n        \"\"\"Create a Dash Graph Component without any data.\n\n        Args:\n            component_id (str): The ID of the web component.\n\n        Returns:\n            html.Div: A Dash Div Component containing the graph and dropdowns.\n        \"\"\"\n        self.component_id = component_id\n        self.properties = [(f'{component_id}-graph', 'figure'), (f'{component_id}-x-dropdown', 'options'), (f'{component_id}-y-dropdown', 'options'), (f'{component_id}-color-dropdown', 'options'), (f'{component_id}-label-dropdown', 'options'), (f'{component_id}-x-dropdown', 'value'), (f'{component_id}-y-dropdown', 'value'), (f'{component_id}-color-dropdown', 'value')]\n        self.signals = [(f'{component_id}-graph', 'hoverData'), (f'{component_id}-graph', 'clickData')]\n        return html.Div(children=[dcc.Graph(id=f'{component_id}-graph', figure=self.display_text('Waiting for Data...'), config={'scrollZoom': True}, style={'height': '100%'}, clear_on_unhover=True), html.Div([html.Label('X', style={'marginLeft': '40px', 'marginRight': '5px', 'fontWeight': 'bold'}), dcc.Dropdown(id=f'{component_id}-x-dropdown', className='dropdown', style={'min-width': '50px', 'flex': 1}, clearable=False), html.Label('Y', style={'marginLeft': '30px', 'marginRight': '5px', 'fontWeight': 'bold'}), dcc.Dropdown(id=f'{component_id}-y-dropdown', className='dropdown', style={'min-width': '50px', 'flex': 1}, clearable=False), html.Label('Color', style={'marginLeft': '30px', 'marginRight': '5px', 'fontWeight': 'bold'}), dcc.Dropdown(id=f'{component_id}-color-dropdown', className='dropdown', style={'min-width': '50px', 'flex': 1}, clearable=False), html.Label('Label', style={'marginLeft': '30px', 'marginRight': '5px', 'fontWeight': 'bold'}), dcc.Dropdown(id=f'{component_id}-label-dropdown', className='dropdown', style={'min-width': '50px', 'flex': 1}, options=[{'label': 'None', 'value': 'none'}], value='none', clearable=False), dcc.Checklist(id=f'{component_id}-regression-line', options=[{'label': ' Diagonal', 'value': 'show'}], value=[], style={'margin': '10px'})], style={'padding': '0px 0px 10px 0px', 'display': 'flex', 'gap': '10px'}), dcc.Tooltip(id=f'{component_id}-overlay', background_color='rgba(0,0,0,0)', border_color='rgba(0,0,0,0)', direction='bottom', loading_text='')], style={'height': '100%', 'display': 'flex', 'flexDirection': 'column'})\n\n    def update_properties(self, input_data: pd.DataFrame, **kwargs) -> list:\n        \"\"\"Update the property values for the plugin component.\n\n        Args:\n            input_data (pd.DataFrame): The input data object.\n            **kwargs: Additional keyword arguments (plugins can define their own arguments).\n                      Note: The current kwargs processed are:\n                            - x: The default x-axis column\n                            - y: The default y-axis column\n                            - color: The default color column\n                            - dropdown_columns: The columns to use for the x and y options\n                            - hover_columns: The columns to show when hovering over a point\n                            - suppress_hover_display: Suppress hover display (default: False)\n                            - custom_data: Custom data that get passed to hoverData callbacks\n\n        Returns:\n            list: A list of updated property values (figure, x options, y options, color options,\n                                                    label options, x default, y default,\n                                                    color default).\n        \"\"\"\n        limit = kwargs.get('limit', 20000)\n        if isinstance(input_data, pd.DataFrame):\n            self.df = input_data.sample(n=limit) if len(input_data) > limit else input_data\n        else:\n            raise ValueError('The input data must be a Pandas DataFrame.')\n        aws_cols = ['write_time', 'api_invocation_time', 'is_deleted', 'event_time']\n        self.df = self.df.drop(columns=aws_cols, errors='ignore')\n        self.hover_columns = kwargs.get('hover_columns', self.df.columns.tolist()[:10])\n        self.suppress_hover_display = kwargs.get('suppress_hover_display', False)\n        self.custom_data = kwargs.get('custom_data', [])\n        numeric_columns = self.df.select_dtypes(include='number').columns.tolist()\n        if len(numeric_columns) < 3:\n            raise ValueError('At least three numeric columns are required for x, y, and color.')\n        x_default = kwargs.get('x', numeric_columns[0])\n        y_default = kwargs.get('y', numeric_columns[1])\n        color_default = kwargs.get('color', numeric_columns[2])\n        regression_line = kwargs.get('regression_line', False)\n        figure = self.create_scatter_plot(self.df, x_default, y_default, color_default, 'none', regression_line)\n        dropdown_columns = kwargs.get('dropdown_columns', numeric_columns)\n        x_options = [{'label': col, 'value': col} for col in dropdown_columns]\n        y_options = x_options.copy()\n        cat_columns = self.df.select_dtypes(include=['object', 'string', 'category']).columns.tolist()\n        cat_columns = [col for col in cat_columns if self.df[col].astype(str).nunique() < 20]\n        color_columns = numeric_columns + cat_columns\n        color_options = [{'label': col, 'value': col} for col in color_columns]\n        label_options = [{'label': 'None', 'value': 'none'}]\n        label_options.extend([{'label': col, 'value': col} for col in self.df.columns])\n        return [figure, x_options, y_options, color_options, label_options, x_default, y_default, color_default]\n\n    def create_scatter_plot(self, df: pd.DataFrame, x_col: str, y_col: str, color_col: str, label_col: str, regression_line: bool=False, marker_size: int=15) -> go.Figure:\n        \"\"\"Create a Plotly Scatter Plot figure.\n\n        Args:\n            df (pd.DataFrame): The dataframe containing the data.\n            x_col (str): The column to use for the x-axis.\n            y_col (str): The column to use for the y-axis.\n            color_col (str): The column to use for the color scale.\n            label_col (str): The column to use for point labels.\n            regression_line (bool): Whether to include a regression line.\n            marker_size (int): Size of the markers. Default is 15.\n\n        Returns:\n            go.Figure: A Plotly Figure object.\n        \"\"\"\n        show_labels = label_col != 'none' and len(df) < 1000\n\n        def generate_hover_text(row):\n            return '<br>'.join([f'{col}: {row[col]}' for col in self.hover_columns])\n        hovertext = df.apply(generate_hover_text, axis=1)\n        hovertemplate = '%{hovertext}<extra></extra>'\n        hoverinfo = 'none' if self.suppress_hover_display else None\n        if pd.api.types.is_numeric_dtype(df[color_col]):\n            marker_color = df[color_col]\n            colorbar = dict(title=color_col, thickness=10)\n            data = [go.Scattergl(x=df[x_col], y=df[y_col], mode='markers', text=df[label_col].astype(str) if show_labels else None, textposition='top center', hoverinfo=hoverinfo, hovertext=hovertext, hovertemplate=hovertemplate, customdata=df[self.custom_data], marker=dict(size=marker_size, color=marker_color, colorscale=self.colorscale, colorbar=colorbar, opacity=0.8, line=dict(color='rgba(0,0,0,0.25)', width=1)))]\n            showlegend = False\n        else:\n            categories = sorted(df[color_col].astype(str).unique())\n            discrete_colors = px.colors.qualitative.Plotly\n            data = []\n            for i, cat in enumerate(categories):\n                sub_df = df[df[color_col] == cat]\n                sub_hovertext = hovertext.loc[sub_df.index]\n                trace = go.Scattergl(x=sub_df[x_col], y=sub_df[y_col], mode='markers', text=sub_df[label_col] if show_labels else None, textposition='top center', name=cat, hoverinfo=hoverinfo, hovertext=sub_hovertext, hovertemplate=hovertemplate, customdata=sub_df[self.custom_data], marker=dict(size=marker_size, color=discrete_colors[i % len(discrete_colors)], opacity=0.8, line=dict(color='rgba(0,0,0,0.25)', width=1)))\n                data.append(trace)\n            showlegend = True\n        figure = go.Figure()\n        if y_col == 'prediction' or x_col == 'prediction':\n            figure = prediction_intervals(df, figure, x_col)\n        if regression_line:\n            axis_min = min(df[x_col].min(), df[y_col].min())\n            axis_max = max(df[x_col].max(), df[y_col].max())\n            figure.add_shape(type='line', line=dict(width=4, color='rgba(128, 128, 128, 1.0)'), x0=axis_min, x1=axis_max, y0=axis_min, y1=axis_max)\n        figure.add_traces(data)\n        if self.show_axes:\n            xaxis = dict(title=dict(text=x_col, font=dict(size=16), standoff=15), tickformat='.2f', tickfont=dict(size=10))\n            yaxis = dict(title=dict(text=y_col, font=dict(size=16), standoff=25), tickformat='.2f', tickfont=dict(size=10))\n        else:\n            xaxis = dict(visible=False)\n            yaxis = dict(visible=False)\n        figure.update_layout(margin={'t': 20, 'b': 55, 'r': 0, 'l': 35, 'pad': 0}, xaxis=xaxis, yaxis=yaxis, showlegend=showlegend, dragmode='pan', modebar={'bgcolor': 'rgba(0, 0, 0, 0)'}, uirevision='constant')\n        return figure\n\n    def register_internal_callbacks(self):\n        \"\"\"Register any internal callbacks for the plugin.\"\"\"\n\n        @callback(Output(f'{self.component_id}-graph', 'figure', allow_duplicate=True), [Input(f'{self.component_id}-x-dropdown', 'value'), Input(f'{self.component_id}-y-dropdown', 'value'), Input(f'{self.component_id}-color-dropdown', 'value'), Input(f'{self.component_id}-label-dropdown', 'value'), Input(f'{self.component_id}-regression-line', 'value')], prevent_initial_call=True)\n        def _update_scatter_plot(x_value, y_value, color_value, label_value, regression_line):\n            \"\"\"Update the Scatter Plot Graph based on the dropdown values.\"\"\"\n            if not self.df.empty and x_value and y_value and color_value:\n                figure = self.create_scatter_plot(self.df, x_value, y_value, color_value, label_value, regression_line)\n                return figure\n            raise PreventUpdate\n\n        @callback(Output(f'{self.component_id}-overlay', 'show'), Output(f'{self.component_id}-overlay', 'bbox'), Output(f'{self.component_id}-overlay', 'children'), Input(f'{self.component_id}-graph', 'hoverData'))\n        def _scatter_overlay(hover_data):\n            if hover_data is None:\n                return (False, no_update, no_update)\n            bbox = hover_data['points'][0]['bbox']\n            svg = '\\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" style=\"overflow: visible;\">\\n                <!-- Circle for the node -->\\n                <circle cx=\"50\" cy=\"50\" r=\"10\" stroke=\"rgba(255, 255, 255, 1)\" stroke-width=\"3\" fill=\"none\" />\\n            </svg>\\n            '\n            encoded_svg = base64.b64encode(svg.encode('utf-8')).decode('utf-8')\n            data_uri = f'data:image/svg+xml;base64,{encoded_svg}'\n            svg_image = html.Img(src=data_uri, style={'width': '100px', 'height': '100px'})\n            center_x = (bbox['x0'] + bbox['x1']) / 2\n            center_y = (bbox['y0'] + bbox['y1']) / 2\n            adjusted_bbox = {'x0': center_x - 50, 'x1': center_x + 50, 'y0': center_y - 162, 'y1': center_y - 62}\n            return (True, adjusted_bbox, [svg_image])\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass HeaderManager:\n    '''Manager for header layout and formatting.'''\n\n    def __init__(self) -> None:\n        '''Initialize header manager.'''\n        pass\n\n    def create_header(self, plan: str='pro', timezone: str='Europe/Warsaw') -> list[str]:\n        '''Create stylized header with sparkles.\n        Args:\n            plan: Current plan name\n            timezone: Display timezone\n        Returns:\n            List of formatted header lines\n        '''\n        pass"
  }
]