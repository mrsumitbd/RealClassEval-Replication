[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass Type(IntEnum):\n    '''[Type] L2TP Type'''\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        '''Backport support for original codes.\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n        :meta private:\n                        '''\n                        pass\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        '''Lookup function used when value is not found.\n        Args:\n            value: Value to get enum item.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom aenum import IntEnum, extend_enum\n\nclass Type(IntEnum):\n    \"\"\"[Type] L2TP Type\"\"\"\n    Control = 0\n    Data = 1\n\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        \"\"\"Backport support for original codes.\n\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n\n        :meta private:\n        \"\"\"\n        if isinstance(key, int):\n            return Type(key)\n        if key not in Type._member_map_:\n            return extend_enum(Type, key, default)\n        return Type[key]\n\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        \"\"\"Lookup function used when value is not found.\n\n        Args:\n            value: Value to get enum item.\n\n        \"\"\"\n        if not (isinstance(value, int) and 0 <= value <= 1):\n            raise ValueError('%r is not a valid %s' % (value, cls.__name__))\n        return extend_enum(cls, 'Unassigned_%d' % value, value)\n\nExample skeleton:\n\n\nclass OutputSTACMixin:\n    '''Adds STAC related features.'''\n    @property\n    def stac_path(self) -> MPath:\n        '''Return path to STAC JSON file.'''\n        pass\n    @property\n    def stac_item_id(self) -> str:\n        '''\n        Return STAC item ID according to configuration.\n        Defaults to path basename.\n        '''\n        pass\n    @property\n    def stac_item_metadata(self):\n        '''Custom STAC metadata.'''\n        pass\n    @property\n    def stac_asset_type(self):\n        '''Asset MIME type.'''\n        pass\nCorresponding class implementation:\n\nfrom mapchete.path import MPath\n\nclass OutputSTACMixin:\n    \"\"\"Adds STAC related features.\"\"\"\n    path: MPath\n    output_params: dict\n\n    @property\n    def stac_path(self) -> MPath:\n        \"\"\"Return path to STAC JSON file.\"\"\"\n        return self.path / f'{self.stac_item_id}.json'\n\n    @property\n    def stac_item_id(self) -> str:\n        \"\"\"\n        Return STAC item ID according to configuration.\n\n        Defaults to path basename.\n        \"\"\"\n        return self.output_params.get('stac', {}).get('id') or self.path.stem\n\n    @property\n    def stac_item_metadata(self):\n        \"\"\"Custom STAC metadata.\"\"\"\n        return self.output_params.get('stac', {})\n\n    @property\n    def stac_asset_type(self):\n        \"\"\"Asset MIME type.\"\"\"\n        raise ValueError('no MIME type set for this output')\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass SystemTimeDetector:\n    '''System timezone and time format detection.'''\n    @staticmethod\n    def get_timezone() -> str:\n        '''Detect system timezone.'''\n        pass\n    @staticmethod\n    def get_time_format() -> str:\n        '''Detect system time format ('12h' or '24h').'''\n        pass"
  }
]