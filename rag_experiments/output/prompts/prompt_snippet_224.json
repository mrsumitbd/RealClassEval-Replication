[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass AnalysisCost(Resource):\n    '''\n    AnalysisCost resource contains an information regarding the currency, the\n    monet value and breakdown of a analysis cost.\n    '''\n\n    def __str__(self):\n        pass\nCorresponding class implementation:\n\nfrom sevenbridges.models.compound.analysis_cost_breakdown import AnalysisCostBreakdown\nfrom sevenbridges.meta.fields import StringField, CompoundField\nfrom sevenbridges.meta.resource import Resource\n\nclass AnalysisCost(Resource):\n    \"\"\"\n    AnalysisCost resource contains an information regarding the currency, the\n    monet value and breakdown of a analysis cost.\n    \"\"\"\n    currency = StringField(read_only=True)\n    amount = StringField(read_only=True)\n    breakdown = CompoundField(AnalysisCostBreakdown, read_only=True)\n\n    def __str__(self):\n        return f'<AnalysisCost: currency={self.currency}, amount={self.amount}>'\n\nExample skeleton:\n\n\nclass Type(IntEnum):\n    '''[Type] L2TP Type'''\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        '''Backport support for original codes.\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n        :meta private:\n                        '''\n                        pass\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        '''Lookup function used when value is not found.\n        Args:\n            value: Value to get enum item.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom aenum import IntEnum, extend_enum\n\nclass Type(IntEnum):\n    \"\"\"[Type] L2TP Type\"\"\"\n    Control = 0\n    Data = 1\n\n    @staticmethod\n    def get(key: 'int | str', default: 'int'=-1) -> 'Type':\n        \"\"\"Backport support for original codes.\n\n        Args:\n            key: Key to get enum item.\n            default: Default value if not found.\n\n        :meta private:\n        \"\"\"\n        if isinstance(key, int):\n            return Type(key)\n        if key not in Type._member_map_:\n            return extend_enum(Type, key, default)\n        return Type[key]\n\n    @classmethod\n    def _missing_(cls, value: 'int') -> 'Type':\n        \"\"\"Lookup function used when value is not found.\n\n        Args:\n            value: Value to get enum item.\n\n        \"\"\"\n        if not (isinstance(value, int) and 0 <= value <= 1):\n            raise ValueError('%r is not a valid %s' % (value, cls.__name__))\n        return extend_enum(cls, 'Unassigned_%d' % value, value)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass TradeRecord:\n    '''Canonical representation of a single fill/order execution.'''\n    @property\n    def value(self) -> float:\n        '''Absolute dollar value of the fill (signed).'''\n        pass\n    @property\n    def realized_pnl(self) -> float:\n        '''Realized P&L for this trade (simplified calculation).'''\n        pass"
  }
]