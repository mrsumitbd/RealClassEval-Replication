[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass Config:\n    '''Object for configuration.'''\n\n    def __init__(self, pyvlx, path=None, host=None, password=None):\n        '''Initialize Config class.'''\n        pass\n\n    def read_config(self, path):\n        '''Read configuration file.'''\n        pass\nCorresponding class implementation:\n\nimport yaml\nfrom .exception import PyVLXException\n\nclass Config:\n    \"\"\"Object for configuration.\"\"\"\n\n    def __init__(self, pyvlx, path=None, host=None, password=None):\n        \"\"\"Initialize Config class.\"\"\"\n        self.pyvlx = pyvlx\n        if path is not None:\n            self.read_config(path)\n        if host is not None:\n            self.host = host\n        if password is not None:\n            self.password = password\n\n    def read_config(self, path):\n        \"\"\"Read configuration file.\"\"\"\n        self.pyvlx.logger.info('Reading config file: ', path)\n        try:\n            with open(path, 'r') as filehandle:\n                doc = yaml.load(filehandle)\n                if 'config' not in doc:\n                    raise PyVLXException('no element config found in: {0}'.format(path))\n                if 'host' not in doc['config']:\n                    raise PyVLXException('no element host found in: {0}'.format(path))\n                if 'password' not in doc['config']:\n                    raise PyVLXException('no element password found in: {0}'.format(path))\n                self.host = doc['config']['host']\n                self.password = doc['config']['password']\n        except FileNotFoundError as ex:\n            raise PyVLXException('file does not exist: {0}'.format(ex))\n\nExample skeleton:\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    '''A pressure sensor type.'''\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        '''Build a pressure sensor class.'''\n        pass\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        '''Set the sensor data on the class and return the new data.'''\n        pass\nCorresponding class implementation:\n\nfrom typing import List, Union\nfrom opentrons_hardware.firmware_bindings.constants import NodeId, SensorId, SensorType\nfrom opentrons_hardware.firmware_bindings.messages.fields import SensorTypeField\nfrom opentrons_hardware.sensors.types import SensorDataType, EnvironmentSensorDataType\nfrom dataclasses import dataclass\n\n@dataclass\nclass PressureSensor(ThresholdSensorType):\n    \"\"\"A pressure sensor type.\"\"\"\n    data: SensorDataType\n\n    @classmethod\n    def build(cls, sensor_id: SensorId, node_id: NodeId, offset: float=0.0, zero_threshold: float=0.0, stop_threshold: float=0.0) -> 'PressureSensor':\n        \"\"\"Build a pressure sensor class.\"\"\"\n        info = SensorInformation(SensorType.pressure, sensor_id, node_id)\n        sensor_data = SensorDataType.build(0, SensorTypeField(SensorType.pressure))\n        return cls(info, offset, 1, zero_threshold, stop_threshold, sensor_data)\n\n    def set_sensor_data(self, sensor_data: List[SensorDataType]) -> SensorDataType:\n        \"\"\"Set the sensor data on the class and return the new data.\"\"\"\n        self.data = sensor_data[0]\n        return self.data\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n@dataclass\nclass BaseConfig:\n    '''Base configuration class with common CLI options.'''\n    @property\n    def khive_config_dir(self) -> Path:\n        '''Path to the .khive configuration directory.'''\n        pass\n\n    def update_from_cli_args(self, args: Any) -> None:\n        '''Update configuration from CLI arguments.'''\n        pass"
  }
]