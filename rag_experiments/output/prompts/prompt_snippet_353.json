[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass InitTask(BaseTask):\n\n    def copy_starter_repo(self, project_name: str) -> None:\n        pass\n\n    def create_profiles_dir(self, profiles_dir: str) -> bool:\n        '''Create the user's profiles directory if it doesn't already exist.'''\n        pass\n\n    def create_profile_from_sample(self, adapter: str, profile_name: str):\n        '''Create a profile entry using the adapter's sample_profiles.yml\n        Renames the profile in sample_profiles.yml to match that of the project.'''\n        pass\n\n    def generate_target_from_input(self, profile_template: dict, target: dict={}) -> dict:\n        '''Generate a target configuration from profile_template and user input.'''\n        pass\n\n    def get_profile_name_from_current_project(self) -> str:\n        '''Reads dbt_project.yml in the current directory to retrieve the\n        profile name.\n        '''\n        pass\n\n    def write_profile(self, profile: dict, profile_name: str):\n        '''Given a profile, write it to the current project's profiles.yml.\n        This will overwrite any profile with a matching name.'''\n        pass\n\n    def create_profile_from_profile_template(self, profile_template: dict, profile_name: str):\n        '''Create and write a profile using the supplied profile_template.'''\n        pass\n\n    def create_profile_from_target(self, adapter: str, profile_name: str):\n        '''Create a profile without defaults using target's profile_template.yml if available, or\n        sample_profiles.yml as a fallback.'''\n        pass\n\n    def check_if_profile_exists(self, profile_name: str) -> bool:\n        '''\n        Validate that the specified profile exists. Can't use the regular profile validation\n        routine because it assumes the project file exists\n        '''\n        pass\n\n    def check_if_can_write_profile(self, profile_name: Optional[str]=None) -> bool:\n        '''Using either a provided profile name or that specified in dbt_project.yml,\n        check if the profile already exists in profiles.yml, and if so ask the\n        user whether to proceed and overwrite it.'''\n        pass\n\n    def create_profile_using_project_profile_template(self, profile_name):\n        '''Create a profile using the project's profile_template.yml'''\n        pass\n\n    def ask_for_adapter_choice(self) -> str:\n        '''Ask the user which adapter (database) they'd like to use.'''\n        pass\n\n    def setup_profile(self, profile_name: str) -> None:\n        '''Set up a new profile for a project'''\n        pass\n\n    def get_valid_project_name(self) -> str:\n        '''Returns a valid project name, either from CLI arg or user prompt.'''\n        pass\n\n    def create_new_project(self, project_name: str, profile_name: str):\n        pass\n\n    def run(self):\n        '''Entry point for the init task.'''\n        pass\nCorresponding class implementation:\n\nfrom dbt_common.events.functions import fire_event\nfrom dbt.flags import get_flags\nfrom dbt_common.exceptions import DbtRuntimeError\nimport copy\nfrom typing import Optional\nimport os\nimport shutil\nimport yaml\nfrom dbt.task.base import BaseTask, move_to_nearest_project_dir\nimport click\nfrom dbt.events.types import ConfigFolderDirectory, InvalidProfileTemplateYAML, NoSampleProfileFound, ProfileWrittenWithProjectTemplateYAML, ProfileWrittenWithSample, ProfileWrittenWithTargetTemplateYAML, ProjectCreated, ProjectNameAlreadyExists, SettingUpProfile, StarterProjectPath\nimport re\nimport dbt_common.clients.system\nfrom dbt.config.profile import read_profile\nfrom pathlib import Path\nfrom dbt.contracts.util import Identifier as ProjectName\nimport dbt.config\nfrom dbt.adapters.factory import get_include_paths, load_plugin\nfrom dbt.version import _get_adapter_plugin_names\n\nclass InitTask(BaseTask):\n\n    def copy_starter_repo(self, project_name: str) -> None:\n        from dbt.include.starter_project import PACKAGE_PATH as starter_project_directory\n        fire_event(StarterProjectPath(dir=starter_project_directory))\n        shutil.copytree(starter_project_directory, project_name, ignore=shutil.ignore_patterns(*IGNORE_FILES))\n\n    def create_profiles_dir(self, profiles_dir: str) -> bool:\n        \"\"\"Create the user's profiles directory if it doesn't already exist.\"\"\"\n        profiles_path = Path(profiles_dir)\n        if not profiles_path.exists():\n            fire_event(ConfigFolderDirectory(dir=str(profiles_dir)))\n            dbt_common.clients.system.make_directory(profiles_dir)\n            return True\n        return False\n\n    def create_profile_from_sample(self, adapter: str, profile_name: str):\n        \"\"\"Create a profile entry using the adapter's sample_profiles.yml\n\n        Renames the profile in sample_profiles.yml to match that of the project.\"\"\"\n        load_plugin(adapter)\n        adapter_path = get_include_paths(adapter)[0]\n        sample_profiles_path = adapter_path / 'sample_profiles.yml'\n        if not sample_profiles_path.exists():\n            fire_event(NoSampleProfileFound(adapter=adapter))\n        else:\n            with open(sample_profiles_path, 'r') as f:\n                sample_profile = f.read()\n            sample_profile_name = list(yaml.safe_load(sample_profile).keys())[0]\n            sample_profile = re.sub(f'^{sample_profile_name}:', f'{profile_name}:', sample_profile)\n            profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n            if profiles_filepath.exists():\n                with open(profiles_filepath, 'a') as f:\n                    f.write('\\n' + sample_profile)\n            else:\n                with open(profiles_filepath, 'w') as f:\n                    f.write(sample_profile)\n                fire_event(ProfileWrittenWithSample(name=profile_name, path=str(profiles_filepath)))\n\n    def generate_target_from_input(self, profile_template: dict, target: dict={}) -> dict:\n        \"\"\"Generate a target configuration from profile_template and user input.\"\"\"\n        profile_template_local = copy.deepcopy(profile_template)\n        for key, value in profile_template_local.items():\n            if key.startswith('_choose'):\n                choice_type = key[8:].replace('_', ' ')\n                option_list = list(value.keys())\n                prompt_msg = '\\n'.join([f'[{n + 1}] {v}' for n, v in enumerate(option_list)]) + f'\\nDesired {choice_type} option (enter a number)'\n                numeric_choice = click.prompt(prompt_msg, type=click.INT)\n                choice = option_list[numeric_choice - 1]\n                target = self.generate_target_from_input(profile_template_local[key][choice], target)\n            elif key.startswith('_fixed'):\n                target[key[7:]] = value\n            else:\n                hide_input = value.get('hide_input', False)\n                default = value.get('default', None)\n                hint = value.get('hint', None)\n                type = click_type_mapping[value.get('type', None)]\n                text = key + (f' ({hint})' if hint else '')\n                target[key] = click.prompt(text, default=default, hide_input=hide_input, type=type)\n        return target\n\n    def get_profile_name_from_current_project(self) -> str:\n        \"\"\"Reads dbt_project.yml in the current directory to retrieve the\n        profile name.\n        \"\"\"\n        with open('dbt_project.yml') as f:\n            dbt_project = yaml.safe_load(f)\n        return dbt_project['profile']\n\n    def write_profile(self, profile: dict, profile_name: str):\n        \"\"\"Given a profile, write it to the current project's profiles.yml.\n        This will overwrite any profile with a matching name.\"\"\"\n        profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        profiles = {profile_name: profile}\n        if profiles_filepath.exists():\n            with open(profiles_filepath, 'r') as f:\n                profiles = yaml.safe_load(f) or {}\n                profiles[profile_name] = profile\n        with open(profiles_filepath, 'w') as f:\n            yaml.dump(profiles, f)\n\n    def create_profile_from_profile_template(self, profile_template: dict, profile_name: str):\n        \"\"\"Create and write a profile using the supplied profile_template.\"\"\"\n        initial_target = profile_template.get('fixed', {})\n        prompts = profile_template.get('prompts', {})\n        target = self.generate_target_from_input(prompts, initial_target)\n        target_name = target.pop('target', 'dev')\n        profile = {'outputs': {target_name: target}, 'target': target_name}\n        self.write_profile(profile, profile_name)\n\n    def create_profile_from_target(self, adapter: str, profile_name: str):\n        \"\"\"Create a profile without defaults using target's profile_template.yml if available, or\n        sample_profiles.yml as a fallback.\"\"\"\n        load_plugin(adapter)\n        adapter_path = get_include_paths(adapter)[0]\n        profile_template_path = adapter_path / 'profile_template.yml'\n        if profile_template_path.exists():\n            with open(profile_template_path) as f:\n                profile_template = yaml.safe_load(f)\n            self.create_profile_from_profile_template(profile_template, profile_name)\n            profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n            fire_event(ProfileWrittenWithTargetTemplateYAML(name=profile_name, path=str(profiles_filepath)))\n        else:\n            self.create_profile_from_sample(adapter, profile_name)\n\n    def check_if_profile_exists(self, profile_name: str) -> bool:\n        \"\"\"\n        Validate that the specified profile exists. Can't use the regular profile validation\n        routine because it assumes the project file exists\n        \"\"\"\n        profiles_dir = get_flags().PROFILES_DIR\n        raw_profiles = read_profile(profiles_dir)\n        return profile_name in raw_profiles\n\n    def check_if_can_write_profile(self, profile_name: Optional[str]=None) -> bool:\n        \"\"\"Using either a provided profile name or that specified in dbt_project.yml,\n        check if the profile already exists in profiles.yml, and if so ask the\n        user whether to proceed and overwrite it.\"\"\"\n        profiles_file = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        if not profiles_file.exists():\n            return True\n        profile_name = profile_name or self.get_profile_name_from_current_project()\n        with open(profiles_file, 'r') as f:\n            profiles = yaml.safe_load(f) or {}\n        if profile_name in profiles.keys():\n            response = click.confirm(f'The profile {profile_name} already exists in {profiles_file}. Continue and overwrite it?')\n            return response\n        else:\n            return True\n\n    def create_profile_using_project_profile_template(self, profile_name):\n        \"\"\"Create a profile using the project's profile_template.yml\"\"\"\n        with open('profile_template.yml') as f:\n            profile_template = yaml.safe_load(f)\n        self.create_profile_from_profile_template(profile_template, profile_name)\n        profiles_filepath = Path(get_flags().PROFILES_DIR) / Path('profiles.yml')\n        fire_event(ProfileWrittenWithProjectTemplateYAML(name=profile_name, path=str(profiles_filepath)))\n\n    def ask_for_adapter_choice(self) -> str:\n        \"\"\"Ask the user which adapter (database) they'd like to use.\"\"\"\n        available_adapters = list(_get_adapter_plugin_names())\n        if not available_adapters:\n            raise dbt.exceptions.NoAdaptersAvailableError()\n        prompt_msg = 'Which database would you like to use?\\n' + '\\n'.join([f'[{n + 1}] {v}' for n, v in enumerate(available_adapters)]) + \"\\n\\n(Don't see the one you want? https://docs.getdbt.com/docs/available-adapters)\" + '\\n\\nEnter a number'\n        numeric_choice = click.prompt(prompt_msg, type=click.INT)\n        return available_adapters[numeric_choice - 1]\n\n    def setup_profile(self, profile_name: str) -> None:\n        \"\"\"Set up a new profile for a project\"\"\"\n        fire_event(SettingUpProfile())\n        if not self.check_if_can_write_profile(profile_name=profile_name):\n            return\n        profile_template_path = Path('profile_template.yml')\n        if profile_template_path.exists():\n            try:\n                self.create_profile_using_project_profile_template(profile_name)\n                return\n            except Exception:\n                fire_event(InvalidProfileTemplateYAML())\n        adapter = self.ask_for_adapter_choice()\n        self.create_profile_from_target(adapter, profile_name=profile_name)\n\n    def get_valid_project_name(self) -> str:\n        \"\"\"Returns a valid project name, either from CLI arg or user prompt.\"\"\"\n        from dbt.include.global_project import PROJECT_NAME as GLOBAL_PROJECT_NAME\n        name = self.args.project_name\n        internal_package_names = {GLOBAL_PROJECT_NAME}\n        available_adapters = list(_get_adapter_plugin_names())\n        for adapter_name in available_adapters:\n            internal_package_names.update(f'dbt_{adapter_name}')\n        while not ProjectName.is_valid(name) or name in internal_package_names:\n            if name:\n                click.echo(name + ' is not a valid project name.')\n            name = click.prompt('Enter a name for your project (letters, digits, underscore)')\n        return name\n\n    def create_new_project(self, project_name: str, profile_name: str):\n        self.copy_starter_repo(project_name)\n        os.chdir(project_name)\n        with open('dbt_project.yml', 'r') as f:\n            content = f'{f.read()}'.format(project_name=project_name, profile_name=profile_name)\n        with open('dbt_project.yml', 'w') as f:\n            f.write(content)\n        fire_event(ProjectCreated(project_name=project_name, docs_url=DOCS_URL, slack_url=SLACK_URL))\n\n    def run(self):\n        \"\"\"Entry point for the init task.\"\"\"\n        profiles_dir = get_flags().PROFILES_DIR\n        self.create_profiles_dir(profiles_dir)\n        try:\n            move_to_nearest_project_dir(self.args.project_dir)\n            in_project = True\n        except dbt_common.exceptions.DbtRuntimeError:\n            in_project = False\n        if in_project:\n            if self.args.profile:\n                raise DbtRuntimeError(msg='Can not init existing project with specified profile, edit dbt_project.yml instead')\n            if not self.args.skip_profile_setup:\n                profile_name = self.get_profile_name_from_current_project()\n                self.setup_profile(profile_name)\n        else:\n            project_name = self.get_valid_project_name()\n            project_path = Path(project_name)\n            if project_path.exists():\n                fire_event(ProjectNameAlreadyExists(name=project_name))\n                return\n            user_profile_name = self.args.profile\n            if user_profile_name:\n                if not self.check_if_profile_exists(user_profile_name):\n                    raise DbtRuntimeError(msg=\"Could not find profile named '{}'\".format(user_profile_name))\n                self.create_new_project(project_name, user_profile_name)\n            else:\n                profile_name = project_name\n                self.create_new_project(project_name, profile_name)\n                if not self.args.skip_profile_setup:\n                    self.setup_profile(profile_name)\n\nExample skeleton:\n\n\nclass StateTransitionWrapper(Generic[_P, _R, _T]):\n    '''\n    Wraps :class:`StateTransition` with the context of the object it is accessed from.\n    Automatically constructed by :class:`StateTransition`.\n        '''\n\n    def __init__(self, statetransition: StateTransition[_P, _R], obj: _T) -> None:\n        pass\n    @property\n    def data(self) -> dict[str, Any]:\n        '''Return data as provided to the :meth:`~StateManager.transition` decorator.'''\n        pass\n\n    def _validate_available(self) -> Optional[tuple[StateManager, Any, Any]]:\n        '''\n        If the state is invalid for the transition, return details on what didn't match.\n        :return: Tuple of (state manager, current state, label for current state)\n        '''\n        pass\n    @property\n    def is_available(self) -> bool:\n        '''Property that indicates whether this transition is currently available.'''\n        pass\n\n    def __getattr__(self, name: str) -> Any:\n        pass\n\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        '''Perform the state transition.'''\n        pass\nCorresponding class implementation:\n\nfrom typing import TYPE_CHECKING, Any, Callable, Generic, NoReturn, Optional, Union, cast, overload\nfrom ..utils import LabeledEnum, NameTitle, is_collection\n\nclass StateTransitionWrapper(Generic[_P, _R, _T]):\n    \"\"\"\n    Wraps :class:`StateTransition` with the context of the object it is accessed from.\n\n    Automatically constructed by :class:`StateTransition`.\n    \"\"\"\n\n    def __init__(self, statetransition: StateTransition[_P, _R], obj: _T) -> None:\n        self.statetransition = statetransition\n        self.obj = obj\n\n    @property\n    def data(self) -> dict[str, Any]:\n        \"\"\"Return data as provided to the :meth:`~StateManager.transition` decorator.\"\"\"\n        return self.statetransition.data\n\n    def _validate_available(self) -> Optional[tuple[StateManager, Any, Any]]:\n        \"\"\"\n        If the state is invalid for the transition, return details on what didn't match.\n\n        :return: Tuple of (state manager, current state, label for current state)\n        \"\"\"\n        for statemanager, conditions in self.statetransition.transitions.items():\n            current_state_value = statemanager._get_state_value(self.obj)\n            if conditions.from_ is None:\n                state_valid = True\n            else:\n                mstate = conditions.from_.get(current_state_value)\n                state_valid = mstate is not None and mstate.is_current_in(self.obj)\n            if not state_valid:\n                return (statemanager, current_state_value, statemanager.lenum.get(current_state_value))\n        return None\n\n    @property\n    def is_available(self) -> bool:\n        \"\"\"Property that indicates whether this transition is currently available.\"\"\"\n        return not self._validate_available()\n\n    def __getattr__(self, name: str) -> Any:\n        return getattr(self.statetransition, name)\n\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        \"\"\"Perform the state transition.\"\"\"\n        state_invalid = self._validate_available()\n        if state_invalid:\n            transition_error.send(self.obj, transition=self.statetransition, statemanager=state_invalid[0])\n            label = state_invalid[2]\n            if isinstance(label, NameTitle):\n                label = label.title\n            raise StateTransitionError(f'Invalid state for transition {self.statetransition.name}: {state_invalid[0]!r} = {label}')\n        transition_before.send(self.obj, transition=self.statetransition)\n        try:\n            result = self.statetransition.func(self.obj, *args, **kwargs)\n        except AbortTransition as e:\n            transition_exception.send(self.obj, transition=self.statetransition, exception=e)\n            return e.result\n        except Exception as e:\n            transition_exception.send(self.obj, transition=self.statetransition, exception=e)\n            raise\n        for statemanager, conditions in self.statetransition.transitions.items():\n            if conditions.to is not None:\n                statemanager._set_state_value(self.obj, conditions.to.value)\n        transition_after.send(self.obj, transition=self.statetransition)\n        return result\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass JSONSessionSerializer:\n    '''Serialize and deserialize ADK Session to/from JSON.\n    Notes: this is not a complete serializer. It saves and reads\n    only a necessary subset of fields.\n    '''\n\n    def __init__(self, storage_path: Path) -> None:\n        '''Initialize a new instance of JSONSessionSerializer.'''\n        pass\n\n    def _file_path(self, *, app_name: str | None=None, user_id: str | None=None, session_id: str | None=None, session: 'Session | None'=None) -> Path:\n        '''Construct the JSON file path for a session.'''\n        pass\n\n    def read(self, app_name: str, user_id: str, session_id: str) -> 'Session | None':\n        '''Read a session from a JSON file.\n        The config parameter is currently not used for filtering during read.\n        '''\n        pass\n\n    def write(self, session: 'Session') -> Path:\n        '''Write a session to a JSON file.'''\n        pass\n\n    def delete(self, app_name: str, user_id: str, session_id: str) -> None:\n        '''Delete a session's JSON file.'''\n        pass\n\n    def list_saved(self, *, app_name: str, user_id: str) -> 'Iterator[Session]':\n        '''List saved sessions.'''\n        pass"
  }
]