[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass RefLog(List[RefLogEntry], Serializable):\n    '''A reflog contains :class:`RefLogEntry`\\s, each of which defines a certain state\n    of the head in question. Custom query methods allow to retrieve log entries by date\n    or by other criteria.\n    Reflog entries are ordered. The first added entry is first in the list. The last\n    entry, i.e. the last change of the head or reference, is last in the list.\n    '''\n\n    def __new__(cls, filepath: Union[PathLike, None]=None) -> 'RefLog':\n        pass\n\n    def __init__(self, filepath: Union[PathLike, None]=None) -> None:\n        '''Initialize this instance with an optional filepath, from which we will\n        initialize our data. The path is also used to write changes back using the\n        :meth:`write` method.'''\n        pass\n\n    def _read_from_file(self) -> None:\n        pass\n    @classmethod\n    def from_file(cls, filepath: PathLike) -> 'RefLog':\n        '''\n        :return:\n            A new :class:`RefLog` instance containing all entries from the reflog at the\n            given `filepath`.\n        :param filepath:\n            Path to reflog.\n        :raise ValueError:\n            If the file could not be read or was corrupted in some way.\n        '''\n        pass\n    @classmethod\n    def path(cls, ref: 'SymbolicReference') -> str:\n        '''\n        :return:\n            String to absolute path at which the reflog of the given ref instance would\n            be found. The path is not guaranteed to point to a valid file though.\n        :param ref:\n            :class:`~git.refs.symbolic.SymbolicReference` instance\n        '''\n        pass\n    @classmethod\n    def iter_entries(cls, stream: Union[str, 'BytesIO', mmap]) -> Iterator[RefLogEntry]:\n        '''\n        :return:\n            Iterator yielding :class:`RefLogEntry` instances, one for each line read\n            from the given stream.\n        :param stream:\n            File-like object containing the revlog in its native format or string\n            instance pointing to a file to read.\n        '''\n        pass\n    @classmethod\n    def entry_at(cls, filepath: PathLike, index: int) -> 'RefLogEntry':\n        '''\n        :return:\n            :class:`RefLogEntry` at the given index.\n        :param filepath:\n            Full path to the index file from which to read the entry.\n        :param index:\n            Python list compatible index, i.e. it may be negative to specify an entry\n            counted from the end of the list.\n        :raise IndexError:\n            If the entry didn't exist.\n        :note:\n            This method is faster as it only parses the entry at index, skipping all\n            other lines. Nonetheless, the whole file has to be read if the index is\n            negative.\n        '''\n        pass\n\n    def to_file(self, filepath: PathLike) -> None:\n        '''Write the contents of the reflog instance to a file at the given filepath.\n        :param filepath:\n            Path to file. Parent directories are assumed to exist.\n        '''\n        pass\n    @classmethod\n    def append_entry(cls, config_reader: Union[Actor, 'GitConfigParser', 'SectionConstraint', None], filepath: PathLike, oldbinsha: bytes, newbinsha: bytes, message: str, write: bool=True) -> 'RefLogEntry':\n        '''Append a new log entry to the revlog at filepath.\n        :param config_reader:\n            Configuration reader of the repository - used to obtain user information.\n            May also be an :class:`~git.util.Actor` instance identifying the committer\n            directly or ``None``.\n        :param filepath:\n            Full path to the log file.\n        :param oldbinsha:\n            Binary sha of the previous commit.\n        :param newbinsha:\n            Binary sha of the current commit.\n        :param message:\n            Message describing the change to the reference.\n        :param write:\n            If ``True``, the changes will be written right away.\n            Otherwise the change will not be written.\n        :return:\n            :class:`RefLogEntry` objects which was appended to the log.\n        :note:\n            As we are append-only, concurrent access is not a problem as we do not\n            interfere with readers.\n        '''\n        pass\n\n    def write(self) -> 'RefLog':\n        '''Write this instance's data to the file we are originating from.\n        :return:\n            self\n        '''\n        pass\n\n    def _serialize(self, stream: 'BytesIO') -> 'RefLog':\n        pass\n\n    def _deserialize(self, stream: 'BytesIO') -> 'RefLog':\n        pass\nCorresponding class implementation:\n\nfrom git.types import PathLike\nfrom mmap import mmap\nfrom typing import Iterator, List, Tuple, TYPE_CHECKING, Union\nfrom git.compat import defenc\nfrom git.util import Actor, LockedFD, LockFile, assure_directory_exists, bin_to_hex, file_contents_ro_filepath, to_native_path\nimport time as _time\nimport os.path as osp\nfrom git.objects.util import Serializable, altz_to_utctz_str, parse_date\n\nclass RefLog(List[RefLogEntry], Serializable):\n    \"\"\"A reflog contains :class:`RefLogEntry`\\\\s, each of which defines a certain state\n    of the head in question. Custom query methods allow to retrieve log entries by date\n    or by other criteria.\n\n    Reflog entries are ordered. The first added entry is first in the list. The last\n    entry, i.e. the last change of the head or reference, is last in the list.\n    \"\"\"\n    __slots__ = ('_path',)\n\n    def __new__(cls, filepath: Union[PathLike, None]=None) -> 'RefLog':\n        inst = super().__new__(cls)\n        return inst\n\n    def __init__(self, filepath: Union[PathLike, None]=None) -> None:\n        \"\"\"Initialize this instance with an optional filepath, from which we will\n        initialize our data. The path is also used to write changes back using the\n        :meth:`write` method.\"\"\"\n        self._path = filepath\n        if filepath is not None:\n            self._read_from_file()\n\n    def _read_from_file(self) -> None:\n        try:\n            fmap = file_contents_ro_filepath(self._path, stream=True, allow_mmap=True)\n        except OSError:\n            return\n        try:\n            self._deserialize(fmap)\n        finally:\n            fmap.close()\n\n    @classmethod\n    def from_file(cls, filepath: PathLike) -> 'RefLog':\n        \"\"\"\n        :return:\n            A new :class:`RefLog` instance containing all entries from the reflog at the\n            given `filepath`.\n\n        :param filepath:\n            Path to reflog.\n\n        :raise ValueError:\n            If the file could not be read or was corrupted in some way.\n        \"\"\"\n        return cls(filepath)\n\n    @classmethod\n    def path(cls, ref: 'SymbolicReference') -> str:\n        \"\"\"\n        :return:\n            String to absolute path at which the reflog of the given ref instance would\n            be found. The path is not guaranteed to point to a valid file though.\n\n        :param ref:\n            :class:`~git.refs.symbolic.SymbolicReference` instance\n        \"\"\"\n        return osp.join(ref.repo.git_dir, 'logs', to_native_path(ref.path))\n\n    @classmethod\n    def iter_entries(cls, stream: Union[str, 'BytesIO', mmap]) -> Iterator[RefLogEntry]:\n        \"\"\"\n        :return:\n            Iterator yielding :class:`RefLogEntry` instances, one for each line read\n            from the given stream.\n\n        :param stream:\n            File-like object containing the revlog in its native format or string\n            instance pointing to a file to read.\n        \"\"\"\n        new_entry = RefLogEntry.from_line\n        if isinstance(stream, str):\n            _stream = file_contents_ro_filepath(stream)\n            assert isinstance(_stream, mmap)\n        else:\n            _stream = stream\n        while True:\n            line = _stream.readline()\n            if not line:\n                return\n            yield new_entry(line.strip())\n\n    @classmethod\n    def entry_at(cls, filepath: PathLike, index: int) -> 'RefLogEntry':\n        \"\"\"\n        :return:\n            :class:`RefLogEntry` at the given index.\n\n        :param filepath:\n            Full path to the index file from which to read the entry.\n\n        :param index:\n            Python list compatible index, i.e. it may be negative to specify an entry\n            counted from the end of the list.\n\n        :raise IndexError:\n            If the entry didn't exist.\n\n        :note:\n            This method is faster as it only parses the entry at index, skipping all\n            other lines. Nonetheless, the whole file has to be read if the index is\n            negative.\n        \"\"\"\n        with open(filepath, 'rb') as fp:\n            if index < 0:\n                return RefLogEntry.from_line(fp.readlines()[index].strip())\n            for i in range(index + 1):\n                line = fp.readline()\n                if not line:\n                    raise IndexError(f'Index file ended at line {i + 1}, before given index was reached')\n            return RefLogEntry.from_line(line.strip())\n\n    def to_file(self, filepath: PathLike) -> None:\n        \"\"\"Write the contents of the reflog instance to a file at the given filepath.\n\n        :param filepath:\n            Path to file. Parent directories are assumed to exist.\n        \"\"\"\n        lfd = LockedFD(filepath)\n        assure_directory_exists(filepath, is_file=True)\n        fp = lfd.open(write=True, stream=True)\n        try:\n            self._serialize(fp)\n            lfd.commit()\n        except BaseException:\n            lfd.rollback()\n            raise\n\n    @classmethod\n    def append_entry(cls, config_reader: Union[Actor, 'GitConfigParser', 'SectionConstraint', None], filepath: PathLike, oldbinsha: bytes, newbinsha: bytes, message: str, write: bool=True) -> 'RefLogEntry':\n        \"\"\"Append a new log entry to the revlog at filepath.\n\n        :param config_reader:\n            Configuration reader of the repository - used to obtain user information.\n            May also be an :class:`~git.util.Actor` instance identifying the committer\n            directly or ``None``.\n\n        :param filepath:\n            Full path to the log file.\n\n        :param oldbinsha:\n            Binary sha of the previous commit.\n\n        :param newbinsha:\n            Binary sha of the current commit.\n\n        :param message:\n            Message describing the change to the reference.\n\n        :param write:\n            If ``True``, the changes will be written right away.\n            Otherwise the change will not be written.\n\n        :return:\n            :class:`RefLogEntry` objects which was appended to the log.\n\n        :note:\n            As we are append-only, concurrent access is not a problem as we do not\n            interfere with readers.\n        \"\"\"\n        if len(oldbinsha) != 20 or len(newbinsha) != 20:\n            raise ValueError('Shas need to be given in binary format')\n        assure_directory_exists(filepath, is_file=True)\n        first_line = message.split('\\n')[0]\n        if isinstance(config_reader, Actor):\n            committer = config_reader\n        else:\n            committer = Actor.committer(config_reader)\n        entry = RefLogEntry((bin_to_hex(oldbinsha).decode('ascii'), bin_to_hex(newbinsha).decode('ascii'), committer, (int(_time.time()), _time.altzone), first_line))\n        if write:\n            lf = LockFile(filepath)\n            lf._obtain_lock_or_raise()\n            fd = open(filepath, 'ab')\n            try:\n                fd.write(entry.format().encode(defenc))\n            finally:\n                fd.close()\n                lf._release_lock()\n        return entry\n\n    def write(self) -> 'RefLog':\n        \"\"\"Write this instance's data to the file we are originating from.\n\n        :return:\n            self\n        \"\"\"\n        if self._path is None:\n            raise ValueError('Instance was not initialized with a path, use to_file(...) instead')\n        self.to_file(self._path)\n        return self\n\n    def _serialize(self, stream: 'BytesIO') -> 'RefLog':\n        write = stream.write\n        for e in self:\n            write(e.format().encode(defenc))\n        return self\n\n    def _deserialize(self, stream: 'BytesIO') -> 'RefLog':\n        self.extend(self.iter_entries(stream))\n        return self\n\nExample skeleton:\n\n\nclass LinuxSSH(CiscoSSHConnection):\n\n    def session_preparation(self) -> None:\n        '''Prepare the session after the connection has been established.'''\n        pass\n\n    def _enter_shell(self) -> str:\n        '''Already in shell.'''\n        pass\n\n    def _return_cli(self) -> str:\n        '''The shell is the CLI.'''\n        pass\n\n    def disable_paging(self, *args: Any, **kwargs: Any) -> str:\n        '''Linux doesn't have paging by default.'''\n        pass\n\n    def find_prompt(self, delay_factor: float=1.0, pattern: Optional[str]=None) -> str:\n        pass\n\n    def set_base_prompt(self, pri_prompt_terminator: str=LINUX_PROMPT_PRI, alt_prompt_terminator: str=LINUX_PROMPT_ALT, delay_factor: float=1.0, pattern: Optional[str]=None) -> str:\n        '''Determine base prompt.'''\n        pass\n\n    def send_config_set(self, config_commands: Union[str, Sequence[str], Iterator[str], TextIO, None]=None, exit_config_mode: bool=True, **kwargs: Any) -> str:\n        '''Can't exit from root (if root)'''\n        pass\n\n    def check_config_mode(self, check_string: str=LINUX_PROMPT_ROOT, pattern: str='', force_regex: bool=False) -> bool:\n        '''Verify root'''\n        pass\n\n    def config_mode(self, config_command: str='sudo -s', pattern: str='ssword', re_flags: int=re.IGNORECASE) -> str:\n        '''Attempt to become root.'''\n        pass\n\n    def exit_config_mode(self, exit_config: str='exit', pattern: str='') -> str:\n        pass\n\n    def check_enable_mode(self, check_string: str=LINUX_PROMPT_ROOT) -> bool:\n        '''Verify root'''\n        pass\n\n    def exit_enable_mode(self, exit_command: str='exit') -> str:\n        '''Exit enable mode.'''\n        pass\n\n    def enable(self, cmd: str='sudo -s', pattern: str='ssword', enable_pattern: Optional[str]=None, check_state: bool=True, re_flags: int=re.IGNORECASE) -> str:\n        '''Attempt to become root.'''\n        pass\n\n    def cleanup(self, command: str='exit') -> None:\n        '''Gracefully exit the SSH session.'''\n        pass\n\n    def save_config(self, *args: Any, **kwargs: Any) -> str:\n        '''Not Implemented'''\n        pass\nCorresponding class implementation:\n\nfrom netmiko.cisco_base_connection import CiscoSSHConnection\nfrom netmiko.exceptions import ReadTimeout\nfrom typing import Any, Optional, TYPE_CHECKING, Union, Sequence, Iterator, TextIO\nimport re\n\nclass LinuxSSH(CiscoSSHConnection):\n    prompt_pattern = f'[{re.escape(LINUX_PROMPT_PRI)}{re.escape(LINUX_PROMPT_ALT)}]'\n\n    def session_preparation(self) -> None:\n        \"\"\"Prepare the session after the connection has been established.\"\"\"\n        self.ansi_escape_codes = True\n        self._test_channel_read(pattern=self.prompt_pattern)\n        self.set_base_prompt()\n\n    def _enter_shell(self) -> str:\n        \"\"\"Already in shell.\"\"\"\n        return ''\n\n    def _return_cli(self) -> str:\n        \"\"\"The shell is the CLI.\"\"\"\n        return ''\n\n    def disable_paging(self, *args: Any, **kwargs: Any) -> str:\n        \"\"\"Linux doesn't have paging by default.\"\"\"\n        return ''\n\n    def find_prompt(self, delay_factor: float=1.0, pattern: Optional[str]=None) -> str:\n        if pattern is None:\n            pattern = self.prompt_pattern\n        return super().find_prompt(delay_factor=delay_factor, pattern=pattern)\n\n    def set_base_prompt(self, pri_prompt_terminator: str=LINUX_PROMPT_PRI, alt_prompt_terminator: str=LINUX_PROMPT_ALT, delay_factor: float=1.0, pattern: Optional[str]=None) -> str:\n        \"\"\"Determine base prompt.\"\"\"\n        if pattern is None:\n            pattern = self.prompt_pattern\n        return super().set_base_prompt(pri_prompt_terminator=pri_prompt_terminator, alt_prompt_terminator=alt_prompt_terminator, delay_factor=delay_factor, pattern=pattern)\n\n    def send_config_set(self, config_commands: Union[str, Sequence[str], Iterator[str], TextIO, None]=None, exit_config_mode: bool=True, **kwargs: Any) -> str:\n        \"\"\"Can't exit from root (if root)\"\"\"\n        if self.username == 'root':\n            exit_config_mode = False\n        return super().send_config_set(config_commands=config_commands, exit_config_mode=exit_config_mode, **kwargs)\n\n    def check_config_mode(self, check_string: str=LINUX_PROMPT_ROOT, pattern: str='', force_regex: bool=False) -> bool:\n        \"\"\"Verify root\"\"\"\n        return self.check_enable_mode(check_string=check_string)\n\n    def config_mode(self, config_command: str='sudo -s', pattern: str='ssword', re_flags: int=re.IGNORECASE) -> str:\n        \"\"\"Attempt to become root.\"\"\"\n        return self.enable(cmd=config_command, pattern=pattern, re_flags=re_flags)\n\n    def exit_config_mode(self, exit_config: str='exit', pattern: str='') -> str:\n        return self.exit_enable_mode(exit_command=exit_config)\n\n    def check_enable_mode(self, check_string: str=LINUX_PROMPT_ROOT) -> bool:\n        \"\"\"Verify root\"\"\"\n        return super().check_enable_mode(check_string=check_string)\n\n    def exit_enable_mode(self, exit_command: str='exit') -> str:\n        \"\"\"Exit enable mode.\"\"\"\n        output = ''\n        if self.check_enable_mode():\n            self.write_channel(self.normalize_cmd(exit_command))\n            output += self.read_until_pattern(pattern=exit_command)\n            output += self.read_until_pattern(pattern=self.prompt_pattern)\n            self.set_base_prompt(pattern=self.prompt_pattern)\n            if self.check_enable_mode():\n                raise ValueError('Failed to exit enable mode.')\n        return output\n\n    def enable(self, cmd: str='sudo -s', pattern: str='ssword', enable_pattern: Optional[str]=None, check_state: bool=True, re_flags: int=re.IGNORECASE) -> str:\n        \"\"\"Attempt to become root.\"\"\"\n        msg = \"\\n\\nNetmiko failed to elevate privileges.\\n\\nPlease ensure you pass the sudo password into ConnectHandler\\nusing the 'secret' argument and that the user has sudo\\npermissions.\\n\\n\"\n        output = ''\n        if check_state and self.check_enable_mode():\n            return output\n        self.write_channel(self.normalize_cmd(cmd))\n        root_prompt = f'(?m:{LINUX_PROMPT_ROOT}\\\\s*$)'\n        prompt_or_password = f'({root_prompt}|{pattern})'\n        output += self.read_until_pattern(pattern=prompt_or_password)\n        if re.search(pattern, output, flags=re_flags):\n            self.write_channel(self.normalize_cmd(self.secret))\n            try:\n                output += self.read_until_pattern(pattern=root_prompt)\n            except ReadTimeout:\n                raise ValueError(msg)\n        self.set_base_prompt(pattern=root_prompt)\n        if not self.check_enable_mode():\n            raise ValueError(msg)\n        return output\n\n    def cleanup(self, command: str='exit') -> None:\n        \"\"\"Gracefully exit the SSH session.\"\"\"\n        try:\n            if self.username != 'root' and self.check_config_mode():\n                self.exit_config_mode()\n        except Exception:\n            pass\n        if self.session_log:\n            self.session_log.fin = True\n        self.write_channel(command + self.RETURN)\n\n    def save_config(self, *args: Any, **kwargs: Any) -> str:\n        \"\"\"Not Implemented\"\"\"\n        raise NotImplementedError\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass SessionResetHandler:\n    '''Handles detection and recovery from Claude session resets'''\n\n    def __init__(self, log_func=None):\n        '''Initialize the handler\n        Args:\n            log_func: Optional logging function\n        '''\n        pass\n\n    def check_for_reset_command(self, command: str) -> bool:\n        '''Check if a command is a session reset command'''\n        pass\n\n    def mark_reset_detected(self, command: str) -> None:\n        '''Mark that a session reset has been detected'''\n        pass\n\n    def is_reset_pending(self) -> bool:\n        '''Check if a session reset is pending'''\n        pass\n\n    def clear_reset_state(self) -> None:\n        '''Clear the reset state after handling'''\n        pass\n\n    def get_reset_info(self) -> Tuple[Optional[str], Optional[float]]:\n        '''Get information about the pending reset'''\n        pass\n\n    def find_reset_session_file(self, project_dir: Path, current_file: Path, max_wait: float=10.0) -> Optional[Path]:\n        '''Find a new session file created after a reset\n        Looks for JSONL files created after the reset time that contain\n        <command-name>/clear</command-name> in the first few lines.\n        Args:\n            project_dir: Directory to search in\n            current_file: Current JSONL file being monitored\n            max_wait: Maximum time to wait in seconds\n        Returns:\n            Path to new JSONL file if found, None otherwise\n        '''\n        pass\n\n    def _file_has_clear_command(self, file: Path) -> bool:\n        '''Check if a JSONL file starts with the /clear command'''\n        pass"
  }
]