[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass UICommunitySchema(BaseObjectSchema):\n    '''Schema for dumping extra information of the community for the UI.'''\n\n    def get_organizations(self, obj):\n        '''Get organizations with metadata.'''\n        pass\n\n    def get_permissions(self, obj):\n        '''Get permission.'''\n        pass\n    @post_dump(pass_original=True)\n    def post_dump(self, data, original, many, **kwargs):\n        '''Pop tombstone field if not deleted/visible.'''\n        pass\nCorresponding class implementation:\n\nfrom flask import g\nfrom flask_resources import BaseObjectSchema\nfrom functools import partial\nfrom invenio_vocabularies.resources import VocabularyL10Schema\nfrom marshmallow import Schema, fields, post_dump\nfrom idutils import detect_identifier_schemes, to_url\nfrom invenio_communities.communities.schema import CommunityThemeSchema\nfrom invenio_records_resources.services.custom_fields import CustomFieldsSchemaUI\n\nclass UICommunitySchema(BaseObjectSchema):\n    \"\"\"Schema for dumping extra information of the community for the UI.\"\"\"\n    type = fields.Nested(VocabularyL10Schema, attribute='metadata.type')\n    funding = fields.List(fields.Nested(FundingSchema()), attribute='metadata.funding')\n    tombstone = fields.Nested(TombstoneSchema, attribute='tombstone')\n    organizations = fields.Method('get_organizations', dump_only=True)\n    theme = fields.Nested(CommunityThemeSchema, dump_only=True, load_default={})\n    custom_fields = fields.Nested(partial(CustomFieldsSchemaUI, fields_var='COMMUNITIES_CUSTOM_FIELDS'))\n    permissions = fields.Method('get_permissions', dump_only=True)\n\n    def get_organizations(self, obj):\n        \"\"\"Get organizations with metadata.\"\"\"\n        organizations = obj.get('metadata', {}).get('organizations', [])\n        for org in organizations:\n            if 'id' in org:\n                scheme = detect_identifier_schemes(org['id'])[0]\n                org['icon'] = f'/static/images/{scheme}-icon.svg'\n                org['url'] = to_url(org['id'], scheme)\n                org['label'] = scheme\n        return organizations\n\n    def get_permissions(self, obj):\n        \"\"\"Get permission.\"\"\"\n        if obj == {}:\n            return {}\n        can_include_directly = _community_permission_check('include_directly', community=obj, identity=g.identity)\n        can_update = _community_permission_check('update', community=obj, identity=g.identity)\n        can_submit_record = _community_permission_check('submit_record', community=obj, identity=g.identity)\n        return {'can_include_directly': can_include_directly, 'can_update': can_update, 'can_submit_record': can_submit_record}\n\n    @post_dump(pass_original=True)\n    def post_dump(self, data, original, many, **kwargs):\n        \"\"\"Pop tombstone field if not deleted/visible.\"\"\"\n        is_deleted = (original.get('deletion_status') or {}).get('is_deleted', False)\n        tombstone_visible = (original.get('tombstone') or {}).get('is_visible', True)\n        if not is_deleted or not tombstone_visible:\n            data.pop('tombstone', None)\n        return data\n\nExample skeleton:\n\n\nclass Converter(ABC):\n    '''XMP <-> DocumentInfo converter.'''\n    @staticmethod\n    @abstractmethod\n    def xmp_from_docinfo(docinfo_val: str | None) -> Any:\n        '''Derive XMP metadata from a DocumentInfo string.'''\n        pass\n    @staticmethod\n    @abstractmethod\n    def docinfo_from_xmp(xmp_val: Any) -> str | None:\n        '''Derive a DocumentInfo value from equivalent XMP metadata.'''\n        pass\nCorresponding class implementation:\n\nfrom abc import ABC, abstractmethod\nfrom typing import TYPE_CHECKING, Any, Callable, NamedTuple\n\nclass Converter(ABC):\n    \"\"\"XMP <-> DocumentInfo converter.\"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def xmp_from_docinfo(docinfo_val: str | None) -> Any:\n        \"\"\"Derive XMP metadata from a DocumentInfo string.\"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def docinfo_from_xmp(xmp_val: Any) -> str | None:\n        \"\"\"Derive a DocumentInfo value from equivalent XMP metadata.\"\"\"\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass SecureSerializer:\n    '''Security-focused serialization system with capability controls for Flock objects.'''\n    @staticmethod\n    def _get_module_capability(module_name):\n        '''Get the capability level for a module.'''\n        pass\n    @staticmethod\n    def _is_safe_callable(obj):\n        '''Check if a callable is safe to serialize.'''\n        pass\n    @staticmethod\n    def serialize(obj, allow_restricted=True, allow_high_risk=False):\n        '''Serialize an object with capability checks.'''\n        pass\n    @staticmethod\n    def deserialize(obj, allow_restricted=True, allow_high_risk=False):\n        '''Deserialize an object with capability enforcement.'''\n        pass"
  }
]