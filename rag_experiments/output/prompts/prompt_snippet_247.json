[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass RawMetricsOperator(BaseOperator):\n    '''Raw Metrics Operator.'''\n\n    def __init__(self, config: WilyConfig, targets: Iterable[str]):\n        '''\n        Instantiate a new raw operator.\n        :param config: The wily configuration.\n        :param targets: An iterable of paths from which to harvest metrics.\n        '''\n        pass\n\n    def run(self, module: str, options: Dict[str, Any]) -> Dict[Any, Any]:\n        '''\n        Run the operator.\n        :param module: The target module path.\n        :param options: Any runtime options.\n        :return: The operator results.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom wily.lang import _\nfrom wily.operators import BaseOperator, Metric, MetricType\nfrom typing import Any, Dict, Iterable\nfrom wily.config.types import WilyConfig\nfrom radon.cli import Config\nfrom wily import logger\nimport radon.cli.harvest as harvesters\n\nclass RawMetricsOperator(BaseOperator):\n    \"\"\"Raw Metrics Operator.\"\"\"\n    name = 'raw'\n    defaults = {'exclude': None, 'ignore': None, 'summary': False, 'include_ipynb': True, 'ipynb_cells': True}\n    metrics = (Metric('loc', _('Lines of Code'), int, MetricType.Informational, sum), Metric('lloc', _('L Lines of Code'), int, MetricType.AimLow, sum), Metric('sloc', _('S Lines of Code'), int, MetricType.AimLow, sum), Metric('comments', _('Multi-line comments'), int, MetricType.AimHigh, sum), Metric('multi', _('Multi lines'), int, MetricType.Informational, sum), Metric('blank', _('blank lines'), int, MetricType.Informational, sum), Metric('single_comments', _('Single comment lines'), int, MetricType.Informational, sum))\n    default_metric_index = 0\n\n    def __init__(self, config: WilyConfig, targets: Iterable[str]):\n        \"\"\"\n        Instantiate a new raw operator.\n\n        :param config: The wily configuration.\n        :param targets: An iterable of paths from which to harvest metrics.\n        \"\"\"\n        logger.debug('Using %s with %s for Raw metrics', targets, self.defaults)\n        self.harvester = harvesters.RawHarvester(targets, config=Config(**self.defaults))\n\n    def run(self, module: str, options: Dict[str, Any]) -> Dict[Any, Any]:\n        \"\"\"\n        Run the operator.\n\n        :param module: The target module path.\n        :param options: Any runtime options.\n        :return: The operator results.\n        \"\"\"\n        logger.debug('Running raw harvester')\n        results = {}\n        for filename, metrics in dict(self.harvester.results).items():\n            results[filename] = {'total': metrics}\n        return results\n\nExample skeleton:\n\n\nclass AttributeTypes(ObjectCollectionABC):\n    '''AttributeTypes Collection.\n    # Example of params input\n    {\n        \"result_limit\": 100,  # Limit the retrieved results.\n        \"result_start\": 10,  # Starting count used for pagination.\n        \"fields\": [\"caseId\", \"summary\"]  # Select additional return fields.\n    }\n    Args:\n        session (Session): Session object configured with TC API Auth.\n        tql_filters (list): List of TQL filters.\n        params (dict): Additional query params (see example above).\n    '''\n\n    def __init__(self, **kwargs):\n        '''Initialize instance properties.'''\n        pass\n\n    def __iter__(self) -> Iterator[AttributeType]:\n        '''Return CM objects.'''\n        pass\n    @property\n    def _api_endpoint(self) -> str:\n        '''Return the type specific API endpoint.'''\n        pass\n    @property\n    def filter(self) -> AttributeTypeFilter:\n        '''Return the type specific filter object.'''\n        pass\nCorresponding class implementation:\n\nfrom tcex.api.tc.v3.object_collection_abc import ObjectCollectionABC\nfrom tcex.api.tc.v3.attribute_types.attribute_type_filter import AttributeTypeFilter\nfrom tcex.api.tc.v3.api_endpoints import ApiEndpoints\nfrom tcex.api.tc.v3.attribute_types.attribute_type_model import AttributeTypeModel, AttributeTypesModel\nfrom collections.abc import Iterator\n\nclass AttributeTypes(ObjectCollectionABC):\n    \"\"\"AttributeTypes Collection.\n\n    # Example of params input\n    {\n        \"result_limit\": 100,  # Limit the retrieved results.\n        \"result_start\": 10,  # Starting count used for pagination.\n        \"fields\": [\"caseId\", \"summary\"]  # Select additional return fields.\n    }\n\n    Args:\n        session (Session): Session object configured with TC API Auth.\n        tql_filters (list): List of TQL filters.\n        params (dict): Additional query params (see example above).\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize instance properties.\"\"\"\n        super().__init__(kwargs.pop('session', None), kwargs.pop('tql_filter', None), kwargs.pop('params', None))\n        self._model = AttributeTypesModel(**kwargs)\n        self.type_ = 'attribute_types'\n\n    def __iter__(self) -> Iterator[AttributeType]:\n        \"\"\"Return CM objects.\"\"\"\n        return self.iterate(base_class=AttributeType)\n\n    @property\n    def _api_endpoint(self) -> str:\n        \"\"\"Return the type specific API endpoint.\"\"\"\n        return ApiEndpoints.ATTRIBUTE_TYPES.value\n\n    @property\n    def filter(self) -> AttributeTypeFilter:\n        \"\"\"Return the type specific filter object.\"\"\"\n        return AttributeTypeFilter(self.tql)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass MemoryMappingParser:\n    '''Parses memory mapping declarations into executable operations.'''\n\n    def parse(self, mapping: str) -> list[MemoryOperation]:\n        '''Parse a memory mapping string into operations.\n        Example mappings:\n        \"topic -> memory.semantic(threshold=0.9) | memory.exact -> output\"\n        \"query -> memory.semantic(scope='global') | memory.filter(recency='7d') | memory.sort(by='relevance')\"\n        '''\n        pass\n\n    def _parse_params(self, params_str: str) -> dict[str, Any]:\n        '''Parse parameters string into a dictionary.\n        Handles:\n        - Quoted strings: threshold='high'\n        - Numbers: threshold=0.9\n        - Lists: tools=['web_search', 'extract_numbers']\n        - Dictionaries: weights={'semantic': 0.7, 'exact': 0.3}\n        '''\n        pass"
  }
]