[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass WeChatOA(BaseWeChatAPI):\n    '''\n    OA管理\n    https://work.weixin.qq.com/api/doc/90000/90135/90264\n    '''\n\n    def get_template_detail(self, template_id):\n        '''\n        查询审批模板的详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91982\n        :param template_id: 模板Id\n        :return:\n        '''\n        pass\n\n    def get_approval_info(self, start_time, end_time, cursor, size=100, filters=None):\n        '''\n        批量获取审批单号\n        https://work.weixin.qq.com/api/doc/90000/90135/91816\n        :param start_time: 开始时间戳\n        :param end_time: 结束时间戳，请求的参数endtime需要大于startime， 起始时间跨度不能超过31天；\n        :param cursor: 分页查询游标，默认为0，后续使用返回的next_cursor进行分页拉取\n        :param size: 一次请求拉取审批单数量，默认值为100，上限值为100\n        :param filters: 请自行查看文档\n        :return:\n        '''\n        pass\n\n    def get_approval_detail(self, sp_no):\n        '''\n        获取审批申请详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91983\n        :param sp_no: 审批单编号\n        :return:\n        '''\n        pass\n\n    def apply_event(self, creator_userid, template_id, use_template_approver, approver, apply_data, summary_list, notifyer=None, notify_type=None):\n        '''\n        提交审批申请，这个函数的参数比较复杂，具体请查看官方文档\n        https://work.weixin.qq.com/api/doc/90000/90135/91853\n        :param creator_userid: 申请人userid，此审批申请将以此员工身份提交，申请人需在应用可见范围内\n        :param template_id: 模板id。可在“获取审批申请详情”、“审批状态变化回调通知”中获得，也可在审批模板的模板编辑页面链接中获得。暂不支持通过接口提交[打卡补卡][调班]模板审批单。\n        :param use_template_approver: 审批人模式：0-通过接口指定审批人、抄送人（此时approver、notifyer等参数可用）; 1-使用此模板在管理后台设置的审批流程，支持条件审批。\n        :param approver: 具体参数查看官方文档，审批流程信息，用于指定审批申请的审批流程，支持单人审批、多人会签、多人或签，可能有多个审批节点，仅use_template_approver为0时生效。\n        :param apply_data: 具体参数查看官方文档，审批申请数据，可定义审批申请中各个控件的值，其中必填项必须有值，选填项可为空，数据结构同“获取审批申请详情”接口返回值中同名参数“apply_data”\n        :param summary_list: 具体参数查看官方文档，摘要信息，用于显示在审批通知卡片、审批列表的摘要信息，最多3行\n        :param notifyer: 抄送人节点userid列表，仅use_template_approver为0时生效。\n        :param notify_type: 抄送方式：1-提单时抄送（默认值）； 2-单据通过后抄送；3-提单和单据通过后抄送。仅use_template_approver为0时生效。\n        :return:\n        '''\n        pass\n\n    def get_dial_record(self, start_time: Optional[int]=None, end_time: Optional[int]=None, offset: int=0, limit: int=100) -> dict:\n        '''\n        获取公费电话拨打记录\n        https://work.weixin.qq.com/api/doc/90000/90135/90267\n        企业可通过此接口，按时间范围拉取成功接通的公费电话拨打记录。\n        请注意，查询的时间范围为[start_time,end_time]，即前后均为闭区间。在两个参数都\n        指定了的情况下，结束时间不得小于开始时间，开始时间也不得早于当前时间，否则会返回\n        600018错误码(无效的起止时间)。\n        受限于网络传输，起止时间的最大跨度为30天，如超过30天，则以结束时间为基准向前取\n        30天进行查询。\n        如果未指定起止时间，则默认查询最近30天范围内数据。\n        :param start_time: 查询的起始时间戳\n        :param end_time: 查询的结束时间戳\n        :param offset: 分页查询的偏移量\n        :param limit: 分页查询的每页大小,默认为100条，如该参数大于100则按100处理\n        :return: 公费电话拨打记录\n        '''\n        pass\n\n    def get_checkin_data(self, data_type: int, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡数据\n        https://work.weixin.qq.com/api/doc/90000/90135/90262\n        - 获取记录时间跨度不超过30天\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 有打卡记录即可获取打卡数据，与当前”打卡应用”是否开启无关\n        :param data_type: 打卡类型。1：上下班打卡；2：外出打卡；3：全部打卡\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 需要获取打卡记录的用户列表\n        :return: 打卡数据\n        '''\n        pass\n\n    def get_checkin_daydata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡日报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n        - 接口调用频率限制为100次/分钟\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取日报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        '''\n        pass\n\n    def get_checkin_monthdata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡月报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n        - 接口调用频率限制为100次/分钟\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取月报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        '''\n        pass\n\n    def get_corp_checkin_option(self):\n        '''\n        获取企业所有打卡规则\n        https://developer.work.weixin.qq.com/document/path/93384\n        '''\n        pass\n\n    def get_checkin_option(self, datetime: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡规则\n        https://work.weixin.qq.com/api/doc/90000/90135/90263\n        - 用户列表不超过100个，若用户超过100个，请分批获取。\n        - 用户在不同日期的规则不一定相同，请按天获取。\n        :param datetime: 需要获取规则的日期当天0点的Unix时间戳\n        :param userid_list: 需要获取打卡规则的用户列表\n        :return: 打卡规则\n        '''\n        pass\n\n    def get_checkin_schedu_list(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        '''\n        获取打卡人员排班信息\n        https://developer.work.weixin.qq.com/document/path/93380\n        :param start_time: 获取排班信息的开始时间。Unix时间戳\n        :param end_time: 获取排班信息的结束时间。Unix时间戳（与 start_time 跨度不超过一个月）\n        :param userid_list: 需要获取排班信息的用户列表（不超过100个）\n        :return: 排班信息\n        '''\n        pass\n\n    def set_checkin_schedu_list(self, group_id: int, items: list, yearmonth: int) -> dict:\n        '''\n        为打卡人员排班\n        https://developer.work.weixin.qq.com/document/path/93385\n        :param group_id: 打卡规则的规则 id，可通过“获取打卡规则”、“获取打卡数据”、“获取打卡人员排班信息”等相关接口获取\n        :param items: 排班表信息，字典结构，包含 userid，day，schedule_id 三个字段\n                    - userid: 打卡人员userid\n                    - day: 要设置的天日期，取值在1-31之间。联合 yearmonth 组成唯一日期 比如20201205\n                    - schedule_id: 对应 groupid 规则下的班次 id，通过预先拉取规则信息获取，0 代表休息\n        :param yearmonth: 排班表月份，格式为年月，如202011\n        '''\n        pass\n\n    def add_checkin_userface(self, user_id: str, user_face: str) -> dict:\n        '''\n        录入打卡人员人脸信息\n        https://developer.work.weixin.qq.com/document/path/93378\n        :param user_id: 需要录入的用户id\n        :param user_face: 需要录入的人脸图片数据，需要将图片数据base64处理后填入，对已录入的人脸会进行更新处理\n        '''\n        pass\n\n    def get_hardware_checkin_data(self, start_time: int, end_time: int, userid_list: List[str], filter_type: int=1) -> dict:\n        '''\n        获取设备打卡数据\n        https://developer.work.weixin.qq.com/document/path/94126\n        :param filter_type: 过滤类型，1 表示按打卡时间过滤，2 表示按设备上传打卡记录的时间过滤，默认值是 1\n        :param start_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的开始时间；当 filter_type 为 2 时，表示设备上传记录的开始时间\n        :param end_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的结束时间；当 filter_type 为 2 时，表示设备上传记录的结束时间\n        :param userid_list: 需要获取打卡记录的用户列表（不超过100个）\n        - 获取记录时间跨度不超过一个月\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 获取的是通过考勤设备打卡的原始记录，不包含企业微信app手机打卡的记录\n        - userid无效时，忽略该参数，不报错\n        '''\n        pass\n\n    def get_open_approval_data(self, third_no: str) -> dict:\n        '''\n        查询自建应用审批单当前状态\n        https://work.weixin.qq.com/api/doc/90000/90135/90269\n        :param third_no: 开发者发起申请时定义的审批单号\n        :return: 审批单的当前审批状态\n        '''\n        pass\n\n    def get_journal_record_list(self, start_time: int, end_time: int, cursor: int, limit: int, filters=None) -> dict:\n        '''\n        批量获取汇报记录单号\n        https://developer.work.weixin.qq.com/document/path/93393\n        :param start_time: 开始时间\n        :param end_time: 结束时间,开始时间和结束时间间隔不能超过一个月\n        :param cursor: 游标首次请求传0，非首次请求携带上一次请求返回的next_cursor\n        :param limit: 拉取条数\n        :param filters: 过滤条件\n        '''\n        pass\n\n    def get_journal_record_detail(self, journal_uuid: str) -> dict:\n        '''\n        获取汇报记录详情\n        https://developer.work.weixin.qq.com/document/path/93394\n        :param journal_uuid: 汇报记录单号\n        '''\n        pass\n\n    def get_journal_stat_list(self, start_time: int, end_time: int, template_id: str) -> dict:\n        '''\n        获取汇报统计数据\n        https://developer.work.weixin.qq.com/document/path/93395\n        :param start_time: 开始时间\n        :param end_time: 结束时间，时间区间最大长度为一年\n        :param template_id: 汇报表单id\n        '''\n        pass\n\n    def add_meetingroom(self, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        '''\n        添加会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        '''\n        pass\n\n    def get_meetingroom_list(self, city: str=None, building: str=None, floor: str=None, equipment: list=None):\n        '''\n        查询会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        '''\n        pass\n\n    def edit_meetingroom(self, meetingroom_id: int, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        '''\n        编辑会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        :param meetingroom_id: 会议室的id\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        '''\n        pass\n\n    def delete_meetingroom(self, meetingroom_id: int) -> dict:\n        '''\n        删除会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        '''\n        pass\n\n    def get_meetingroom_booking_info(self, meetingroom_id: int=None, start_time: int=None, end_time: int=None, city: str=None, building: str=None, floor: str=None) -> dict:\n        '''\n        查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n        - 如果需要根据位置信息查询，则需要保证其上一级的位置信息已填写，即如需使用楼宇进行过滤，则必须同时填写城市字段。\n        :param meetingroom_id: 会议室id\n        :param start_time: 查询预定的起始时间，默认为当前时间\n        :param end_time: 查询预定的结束时间， 默认为明日0时\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        '''\n        pass\n\n    def book_meetingroom(self, meetingroom_id: int, start_time: int, end_time: int, booker: str, subject: str=None, attendees: list=None) -> dict:\n        '''\n        预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        :param meetingroom_id: 会议室id\n        :param start_time: 预定开始时间\n        :param end_time: 预定结束时间\n        :param booker: 预定人的userid\n        :param subject: 会议主题\n        :param attendees: 参与人的userid列表\n        '''\n        pass\n\n    def cancle_meetingroom_book(self, meeting_id: str, keep_schedule=None) -> dict:\n        '''\n        取消预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        :param meeting_id: 会议的id\n        :param keep_schedule: 是否保留日程，0-同步删除 1-保留\n        '''\n        pass\n\n    def get_booking_info_by_meeting_id(self, meetingroom_id: int, meeting_id: str) -> dict:\n        '''\n        根据会议ID查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n        :param meetingroom_id: 会议室id\n        :param meeting_id: 会议的id\n        '''\n        pass\nCorresponding class implementation:\n\nfrom typing import List, Optional\nfrom wechatpy.client.api.base import BaseWeChatAPI\nfrom optionaldict import optionaldict\n\nclass WeChatOA(BaseWeChatAPI):\n    \"\"\"\n    OA管理\n\n    https://work.weixin.qq.com/api/doc/90000/90135/90264\n    \"\"\"\n\n    def get_template_detail(self, template_id):\n        \"\"\"\n        查询审批模板的详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91982\n\n        :param template_id: 模板Id\n        :return:\n        \"\"\"\n        data = {'template_id': template_id}\n        return self._post('oa/gettemplatedetail', data=data)\n\n    def get_approval_info(self, start_time, end_time, cursor, size=100, filters=None):\n        \"\"\"\n        批量获取审批单号\n        https://work.weixin.qq.com/api/doc/90000/90135/91816\n\n        :param start_time: 开始时间戳\n        :param end_time: 结束时间戳，请求的参数endtime需要大于startime， 起始时间跨度不能超过31天；\n        :param cursor: 分页查询游标，默认为0，后续使用返回的next_cursor进行分页拉取\n        :param size: 一次请求拉取审批单数量，默认值为100，上限值为100\n        :param filters: 请自行查看文档\n        :return:\n        \"\"\"\n        data = optionaldict({'starttime': str(start_time), 'endtime': str(end_time), 'cursor': cursor, 'size': size, 'filters': filters})\n        return self._post('oa/getapprovalinfo', data=data)\n\n    def get_approval_detail(self, sp_no):\n        \"\"\"\n        获取审批申请详情\n        https://work.weixin.qq.com/api/doc/90000/90135/91983\n\n        :param sp_no: 审批单编号\n        :return:\n        \"\"\"\n        data = {'sp_no': sp_no}\n        return self._post('oa/getapprovaldetail', data=data)\n\n    def apply_event(self, creator_userid, template_id, use_template_approver, approver, apply_data, summary_list, notifyer=None, notify_type=None):\n        \"\"\"\n        提交审批申请，这个函数的参数比较复杂，具体请查看官方文档\n        https://work.weixin.qq.com/api/doc/90000/90135/91853\n\n        :param creator_userid: 申请人userid，此审批申请将以此员工身份提交，申请人需在应用可见范围内\n        :param template_id: 模板id。可在“获取审批申请详情”、“审批状态变化回调通知”中获得，也可在审批模板的模板编辑页面链接中获得。暂不支持通过接口提交[打卡补卡][调班]模板审批单。\n        :param use_template_approver: 审批人模式：0-通过接口指定审批人、抄送人（此时approver、notifyer等参数可用）; 1-使用此模板在管理后台设置的审批流程，支持条件审批。\n        :param approver: 具体参数查看官方文档，审批流程信息，用于指定审批申请的审批流程，支持单人审批、多人会签、多人或签，可能有多个审批节点，仅use_template_approver为0时生效。\n        :param apply_data: 具体参数查看官方文档，审批申请数据，可定义审批申请中各个控件的值，其中必填项必须有值，选填项可为空，数据结构同“获取审批申请详情”接口返回值中同名参数“apply_data”\n        :param summary_list: 具体参数查看官方文档，摘要信息，用于显示在审批通知卡片、审批列表的摘要信息，最多3行\n        :param notifyer: 抄送人节点userid列表，仅use_template_approver为0时生效。\n        :param notify_type: 抄送方式：1-提单时抄送（默认值）； 2-单据通过后抄送；3-提单和单据通过后抄送。仅use_template_approver为0时生效。\n        :return:\n        \"\"\"\n        data = optionaldict({'creator_userid': creator_userid, 'template_id': template_id, 'use_template_approver': use_template_approver, 'approver': approver, 'notifyer': notifyer, 'notify_type': notify_type, 'apply_data': apply_data, 'summary_list': summary_list})\n        return self._post('oa/applyevent', data=data)\n\n    def get_dial_record(self, start_time: Optional[int]=None, end_time: Optional[int]=None, offset: int=0, limit: int=100) -> dict:\n        \"\"\"\n        获取公费电话拨打记录\n        https://work.weixin.qq.com/api/doc/90000/90135/90267\n\n        企业可通过此接口，按时间范围拉取成功接通的公费电话拨打记录。\n\n        请注意，查询的时间范围为[start_time,end_time]，即前后均为闭区间。在两个参数都\n        指定了的情况下，结束时间不得小于开始时间，开始时间也不得早于当前时间，否则会返回\n        600018错误码(无效的起止时间)。\n\n        受限于网络传输，起止时间的最大跨度为30天，如超过30天，则以结束时间为基准向前取\n        30天进行查询。\n\n        如果未指定起止时间，则默认查询最近30天范围内数据。\n\n        :param start_time: 查询的起始时间戳\n        :param end_time: 查询的结束时间戳\n        :param offset: 分页查询的偏移量\n        :param limit: 分页查询的每页大小,默认为100条，如该参数大于100则按100处理\n        :return: 公费电话拨打记录\n        \"\"\"\n        if start_time and end_time and (end_time <= start_time):\n            raise ValueError('the end time must be greater than the beginning time')\n        data = {'start_time': start_time, 'end_time': end_time, 'offset': offset, 'limit': limit}\n        return self._post('dial/get_dial_record', data=data)\n\n    def get_checkin_data(self, data_type: int, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡数据\n        https://work.weixin.qq.com/api/doc/90000/90135/90262\n\n        - 获取记录时间跨度不超过30天\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 有打卡记录即可获取打卡数据，与当前”打卡应用”是否开启无关\n\n        :param data_type: 打卡类型。1：上下班打卡；2：外出打卡；3：全部打卡\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 需要获取打卡记录的用户列表\n        :return: 打卡数据\n        \"\"\"\n        checkin_data_type = {1: '上下班打卡', 2: '外出打卡', 3: '全部打卡'}\n        if data_type not in checkin_data_type:\n            raise ValueError(f'data_type must be in {list(checkin_data_type.keys())}')\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'opencheckindatatype': data_type, 'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckindata', data=data)\n\n    def get_checkin_daydata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡日报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n\n        - 接口调用频率限制为100次/分钟\n\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取日报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckin_daydata', data=data)\n\n    def get_checkin_monthdata(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡月报数据\n        https://developer.work.weixin.qq.com/document/path/93374\n\n        - 接口调用频率限制为100次/分钟\n\n        :param start_time: 获取打卡记录的开始时间。Unix时间戳\n        :param end_time: 获取打卡记录的结束时间。Unix时间戳\n        :param userid_list: 获取月报的userid列表。可填充个数：1 ~ 100\n        :return: 打卡数据\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckin_monthdata', data=data)\n\n    def get_corp_checkin_option(self):\n        \"\"\"\n        获取企业所有打卡规则\n        https://developer.work.weixin.qq.com/document/path/93384\n        \"\"\"\n        return self._post('checkin/getcorpcheckinoption')\n\n    def get_checkin_option(self, datetime: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡规则\n        https://work.weixin.qq.com/api/doc/90000/90135/90263\n\n        - 用户列表不超过100个，若用户超过100个，请分批获取。\n        - 用户在不同日期的规则不一定相同，请按天获取。\n\n        :param datetime: 需要获取规则的日期当天0点的Unix时间戳\n        :param userid_list: 需要获取打卡规则的用户列表\n        :return: 打卡规则\n        \"\"\"\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'datetime': datetime, 'useridlist': userid_list}\n        return self._post('checkin/getcheckinoption', data=data)\n\n    def get_checkin_schedu_list(self, start_time: int, end_time: int, userid_list: List[str]) -> dict:\n        \"\"\"\n        获取打卡人员排班信息\n        https://developer.work.weixin.qq.com/document/path/93380\n\n        :param start_time: 获取排班信息的开始时间。Unix时间戳\n        :param end_time: 获取排班信息的结束时间。Unix时间戳（与 start_time 跨度不超过一个月）\n        :param userid_list: 需要获取排班信息的用户列表（不超过100个）\n        :return: 排班信息\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if end_time - start_time > 31 * 86400:\n            raise ValueError('the difference between the start_time and the end_time cannot be more than one month')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        data = {'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('checkin/getcheckinschedulist', data=data)\n\n    def set_checkin_schedu_list(self, group_id: int, items: list, yearmonth: int) -> dict:\n        \"\"\"\n        为打卡人员排班\n        https://developer.work.weixin.qq.com/document/path/93385\n\n        :param group_id: 打卡规则的规则 id，可通过“获取打卡规则”、“获取打卡数据”、“获取打卡人员排班信息”等相关接口获取\n        :param items: 排班表信息，字典结构，包含 userid，day，schedule_id 三个字段\n                    - userid: 打卡人员userid\n                    - day: 要设置的天日期，取值在1-31之间。联合 yearmonth 组成唯一日期 比如20201205\n                    - schedule_id: 对应 groupid 规则下的班次 id，通过预先拉取规则信息获取，0 代表休息\n        :param yearmonth: 排班表月份，格式为年月，如202011\n        \"\"\"\n        data = {'groupid': group_id, 'items': items, 'yearmonth': yearmonth}\n        return self._post('checkin/setcheckinschedulist', data=data)\n\n    def add_checkin_userface(self, user_id: str, user_face: str) -> dict:\n        \"\"\"\n        录入打卡人员人脸信息\n        https://developer.work.weixin.qq.com/document/path/93378\n\n        :param user_id: 需要录入的用户id\n        :param user_face: 需要录入的人脸图片数据，需要将图片数据base64处理后填入，对已录入的人脸会进行更新处理\n        \"\"\"\n        data = {'userid': user_id, 'userface': user_face}\n        return self._post('checkin/addcheckinuserface', data=data)\n\n    def get_hardware_checkin_data(self, start_time: int, end_time: int, userid_list: List[str], filter_type: int=1) -> dict:\n        \"\"\"\n        获取设备打卡数据\n        https://developer.work.weixin.qq.com/document/path/94126\n\n        :param filter_type: 过滤类型，1 表示按打卡时间过滤，2 表示按设备上传打卡记录的时间过滤，默认值是 1\n        :param start_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的开始时间；当 filter_type 为 2 时，表示设备上传记录的开始时间\n        :param end_time: Unix时间戳，当 filter_type 为 1 时，表示打卡的结束时间；当 filter_type 为 2 时，表示设备上传记录的结束时间\n        :param userid_list: 需要获取打卡记录的用户列表（不超过100个）\n\n        - 获取记录时间跨度不超过一个月\n        - 用户列表不超过100个。若用户超过100个，请分批获取\n        - 获取的是通过考勤设备打卡的原始记录，不包含企业微信app手机打卡的记录\n        - userid无效时，忽略该参数，不报错\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if end_time - start_time > 31 * 86400:\n            raise ValueError('the difference between the start_time and the end_time cannot be more than one month')\n        if not userid_list:\n            raise ValueError(\"the userid_list can't be an empty list\")\n        if filter_type not in {1, 2}:\n            raise ValueError('Unsupported filter_type. Valid filter_type are 1 or 2')\n        data = {'filter_type': filter_type, 'starttime': start_time, 'endtime': end_time, 'useridlist': userid_list}\n        return self._post('hardware/get_hardware_checkin_data', data=data)\n\n    def get_open_approval_data(self, third_no: str) -> dict:\n        \"\"\"\n        查询自建应用审批单当前状态\n        https://work.weixin.qq.com/api/doc/90000/90135/90269\n\n        :param third_no: 开发者发起申请时定义的审批单号\n        :return: 审批单的当前审批状态\n        \"\"\"\n        data = {'thirdNo': third_no}\n        return self._post('corp/getopenapprovaldata', data=data)\n\n    def get_journal_record_list(self, start_time: int, end_time: int, cursor: int, limit: int, filters=None) -> dict:\n        \"\"\"\n        批量获取汇报记录单号\n        https://developer.work.weixin.qq.com/document/path/93393\n\n        :param start_time: 开始时间\n        :param end_time: 结束时间,开始时间和结束时间间隔不能超过一个月\n        :param cursor: 游标首次请求传0，非首次请求携带上一次请求返回的next_cursor\n        :param limit: 拉取条数\n        :param filters: 过滤条件\n        \"\"\"\n        if end_time <= start_time:\n            raise ValueError('the end time must be greater than the beginning time')\n        if end_time - start_time > 31 * 86400:\n            raise ValueError('the difference between the start_time and the end_time cannot be more than one month')\n        data = {'starttime': start_time, 'endtime': end_time, 'cursor': cursor, 'limit': limit}\n        if filters:\n            data['filters'] = filters\n        return self._post('oa/journal/get_record_list', data=data)\n\n    def get_journal_record_detail(self, journal_uuid: str) -> dict:\n        \"\"\"\n        获取汇报记录详情\n        https://developer.work.weixin.qq.com/document/path/93394\n\n        :param journal_uuid: 汇报记录单号\n        \"\"\"\n        return self._post('oa/journal/get_record_detail', data={'journaluuid': journal_uuid})\n\n    def get_journal_stat_list(self, start_time: int, end_time: int, template_id: str) -> dict:\n        \"\"\"\n        获取汇报统计数据\n        https://developer.work.weixin.qq.com/document/path/93395\n\n        :param start_time: 开始时间\n        :param end_time: 结束时间，时间区间最大长度为一年\n        :param template_id: 汇报表单id\n        \"\"\"\n        data = {'template_id': template_id, 'starttime': start_time, 'endtime': end_time}\n        return self._post('oa/journal/get_stat_list', data=data)\n\n    def add_meetingroom(self, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        \"\"\"\n        添加会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        \"\"\"\n        data = {'name': name, 'capacity': capacity}\n        if all([city, building, floor]):\n            data['city'] = city\n            data['building'] = building\n            data['floor'] = floor\n        if equipment:\n            data['equipment'] = equipment\n        if latitude and longitude:\n            data['coordinate'] = {'latitude': latitude, 'longitude': longitude}\n        return self._post('oa/meetingroom/add', data=data)\n\n    def get_meetingroom_list(self, city: str=None, building: str=None, floor: str=None, equipment: list=None):\n        \"\"\"\n        查询会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n        \"\"\"\n        data = {'city': city, 'building': building, 'floor': floor, 'equipment': equipment}\n        data = {k: v for k, v in data.items() if v is not None}\n        return self._post('oa/meetingroom/list', data=data)\n\n    def edit_meetingroom(self, meetingroom_id: int, name: str, capacity: int, city: str=None, building: str=None, floor: str=None, equipment: list=None, latitude: str=None, longitude: str=None):\n        \"\"\"\n        编辑会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要为会议室设置位置信息，则必须同时填写城市（city），楼宇（building）和楼层(floor)三个参数。\n\n        :param meetingroom_id: 会议室的id\n        :param name: 会议室名称，最多30个字符\n        :param capacity: 会议室所能容纳的人数\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        :param equipment: 会议室支持的设备列表,参数详细含义见附录\n        :param latitude: 会议室所在建筑纬度,可通过腾讯地图坐标拾取器获取\n        :param longitude: 会议室所在建筑经度,可通过腾讯地图坐标拾取器获取\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'name': name, 'capacity': capacity}\n        if all([city, building, floor]):\n            data['city'] = city\n            data['building'] = building\n            data['floor'] = floor\n        if equipment:\n            data['equipment'] = equipment\n        if latitude and longitude:\n            data['coordinate'] = {'latitude': latitude, 'longitude': longitude}\n        return self._post('oa/meetingroom/edit', data=data)\n\n    def delete_meetingroom(self, meetingroom_id: int) -> dict:\n        \"\"\"\n        删除会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n        \"\"\"\n        return self._post('oa/meetingroom/del', data={'meetingroom_id': meetingroom_id})\n\n    def get_meetingroom_booking_info(self, meetingroom_id: int=None, start_time: int=None, end_time: int=None, city: str=None, building: str=None, floor: str=None) -> dict:\n        \"\"\"\n        查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        - 如果需要根据位置信息查询，则需要保证其上一级的位置信息已填写，即如需使用楼宇进行过滤，则必须同时填写城市字段。\n\n        :param meetingroom_id: 会议室id\n        :param start_time: 查询预定的起始时间，默认为当前时间\n        :param end_time: 查询预定的结束时间， 默认为明日0时\n        :param city: 会议室所在城市\n        :param building: 会议室所在楼宇\n        :param floor: 会议室所在楼层\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'start_time': start_time, 'end_time': end_time, 'city': city, 'building': building, 'floor': floor}\n        data = {k: v for k, v in data.items() if v is not None}\n        return self._post('oa/meetingroom/get_booking_info', data=data)\n\n    def book_meetingroom(self, meetingroom_id: int, start_time: int, end_time: int, booker: str, subject: str=None, attendees: list=None) -> dict:\n        \"\"\"\n        预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        :param meetingroom_id: 会议室id\n        :param start_time: 预定开始时间\n        :param end_time: 预定结束时间\n        :param booker: 预定人的userid\n        :param subject: 会议主题\n        :param attendees: 参与人的userid列表\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'start_time': start_time, 'end_time': end_time, 'booker': booker}\n        if subject:\n            data['subject'] = subject\n        if attendees:\n            data['attendees'] = attendees\n        return self._post('oa/meetingroom/book', data=data)\n\n    def cancle_meetingroom_book(self, meeting_id: str, keep_schedule=None) -> dict:\n        \"\"\"\n        取消预定会议室\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        :param meeting_id: 会议的id\n        :param keep_schedule: 是否保留日程，0-同步删除 1-保留\n        \"\"\"\n        data = {'meeting_id': meeting_id}\n        if keep_schedule is not None:\n            data['keep_schedule'] = keep_schedule\n        return self._post('oa/meetingroom/cancel_book', data=data)\n\n    def get_booking_info_by_meeting_id(self, meetingroom_id: int, meeting_id: str) -> dict:\n        \"\"\"\n        根据会议ID查询会议室的预定信息\n        https://developer.work.weixin.qq.com/document/path/93619\n\n        :param meetingroom_id: 会议室id\n        :param meeting_id: 会议的id\n        \"\"\"\n        data = {'meetingroom_id': meetingroom_id, 'meeting_id': meeting_id}\n        return self._post('oa/meetingroom/get_booking_info_by_meeting_id', data=data)\n\nExample skeleton:\n\n\nclass WeChatCard(BaseWeChatAPI):\n\n    def create(self, card_data):\n        '''\n        创建卡券\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#8\n        :param card_data: 卡券信息\n        :return: 创建的卡券 ID\n        '''\n        pass\n\n    def batch_add_locations(self, location_data):\n        '''\n        ⚠️已废弃\n        批量导入门店信息\n        :param location_data: 门店信息\n        :return: 门店 ID 列表，插入失败的门店元素值为 -1\n        '''\n        pass\n\n    def batch_get_locations(self, offset=0, count=0):\n        '''\n        ⚠️已废弃\n        批量获取门店信息\n        '''\n        pass\n\n    def get_colors(self):\n        '''\n        获得卡券的最新颜色列表，用于创建卡券\n        目前微信提供包括十四种色值供开发者使用。\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#7\n        :return: 颜色列表\n        '''\n        pass\n\n    def create_qrcode(self, qrcode_data):\n        '''\n        创建卡券二维码\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#0\n        :param qrcode_data: 二维码信息\n        :return: 二维码 ticket，可使用 :func:show_qrcode 换取二维码文件\n        '''\n        pass\n\n    def create_landingpage(self, buffer_data):\n        '''\n        创建货架\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#3\n        '''\n        pass\n\n    def get_html(self, card_id):\n        '''\n        图文消息群发卡券\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#6\n        '''\n        pass\n\n    def consume_code(self, code, card_id=None):\n        '''\n        消耗 code\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        '''\n        pass\n\n    def decrypt_code(self, encrypt_code):\n        '''\n        解码加密的 code\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        '''\n        pass\n\n    def delete(self, card_id):\n        '''\n        删除卡券\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#7\n        '''\n        pass\n\n    def get_code(self, code, card_id=None, check_consume=True):\n        '''\n        查询 code 信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#0\n        '''\n        pass\n\n    def get_card_list(self, openid, card_id=None):\n        '''\n        用于获取用户卡包里的，属于该appid下的卡券。\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#1\n        '''\n        pass\n\n    def batch_get_locations(self, offset=0, count=0):\n        '''\n        批量查询卡券信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#3\n        :param offset: 查询卡列表的起始偏移量，从0开始，即offset: 5是指从从列表里的第六个开始读取。\n        :param count: 需要查询的卡片的数量（数量最大50）\n        :param status_list: 支持开发者拉出指定状态的卡券列表\n        '''\n        pass\n\n    def get_colors(self):\n        '''\n        查询卡券详情\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#2\n        '''\n        pass\n\n    def update_code(self, card_id, old_code, new_code):\n        '''\n        更新卡券 code\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#6\n        :param card_id: 卡券ID。自定义 Code 码卡券为必填\n        :param old_code: 需变更的 Code 码\n        :param new_code: 变更后的有效 Code 码\n        '''\n        pass\n\n    def invalid_code(self, code, card_id=None):\n        '''\n        设置卡券失效\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#8\n        '''\n        pass\n\n    def update_code(self, card_id, old_code, new_code):\n        '''\n        更新卡券信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#4\n        '''\n        pass\n\n    def set_paycell(self, card_id, is_open):\n        '''\n        设置买单接口\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#12\n        '''\n        pass\n\n    def set_test_whitelist(self, openids=None, usernames=None):\n        '''\n        设置卡券测试用户白名单\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#12\n        '''\n        pass\n\n    def activate_membercard(self, membership_number, code, **kwargs):\n        '''\n        激活会员卡 - 接口激活方式\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#14\n        参数示例：\n        {\n            \"init_bonus\": 100,\n            \"init_bonus_record\":\"旧积分同步\",\n            \"init_balance\": 200,\n            \"membership_number\": \"AAA00000001\",\n            \"code\": \"12312313\",\n            \"card_id\": \"xxxx_card_id\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"init_custom_field_value1\": \"xxxxx\",\n            \"init_custom_field_value2\": \"xxxxx\",\n            \"init_custom_field_value3\": \"xxxxx\"\n        }\n        返回示例：\n        {\"errcode\":0,   \"errmsg\":\"ok\"}\n        :param membership_number: 必填，会员卡编号，由开发者填入，作为序列号显示在用户的卡包里。可与Code码保持等值\n        :param code: 必填，领取会员卡用户获得的code\n        :return: 参见返回示例\n        '''\n        pass\n\n    def update_membercard(self, code, card_id, **kwargs):\n        '''\n        更新会员信息\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#18\n        注意事项：\n        1.开发者可以同时传入add_bonus和bonus解决由于同步失败带来的幂等性问题。同时传入add_bonus和bonus时\n            add_bonus作为积分变动消息中的变量值，而bonus作为卡面上的总积分额度显示。余额变动同理。\n        2.开发者可以传入is_notify_bonus控制特殊的积分对账变动不发送消息，余额变动同理。\n        参数示例：\n        {\n            \"code\": \"179011264953\",\n            \"card_id\": \"p1Pj9jr90_SQRaVqYI239Ka1erkI\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"record_bonus\": \"消费30元，获得3积分\",\n            \"bonus\": 3000,\n            \"add_bonus\": 30,\n            \"balance\": 3000,\n            \"add_balance\": -30,\n            \"record_balance\": \"购买焦糖玛琪朵一杯，扣除金额30元。\",\n            \"custom_field_value1\": \"xxxxx\"，\n            \"custom_field_value2\": \"xxxxx\"，\n            \"notify_optional\": {\n                \"is_notify_bonus\": true,\n                \"is_notify_balance\": true,\n                \"is_notify_custom_field1\":true\n            }\n        }\n        返回示例：\n        {\n            \"errcode\": 0,\n            \"errmsg\": \"ok\",\n            \"result_bonus\": 100,\n            \"result_balance\": 200,\n            \"openid\": \"oFS7Fjl0WsZ9AMZqrI80nbIq8xrA\"\n        }\n        :param code: 必填，卡券Code码\n        :param card_id: 必填，卡券ID\n        :param kwargs: 其他非必填字段，包含则更新对应字段。详情参见微信文档 “7 更新会员信息” 部分\n        :return: 参见返回示例\n        '''\n        pass\n\n    def get_membercard_user_info(self, card_id, code):\n        '''\n        查询会员卡的会员信息\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n        :param card_id: 查询会员卡的 Card ID\n        :param code: 所查询用户领取到的 code 值\n        :return: 会员信息，包括激活资料、积分信息以及余额等信息\n        '''\n        pass\n\n    def add_pay_giftcard(self, base_info, extra_info, is_membercard):\n        '''\n        新增支付后投放卡券的规则，支持支付后领卡，支付后赠券\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param base_info: 营销规则结构体\n        :type base_info: dict\n        :param extra_info: 支付规则结构体\n        :type extra_info: dict\n        :param is_membercard: 本次规则是否是领卡。（领卡传入 True, 赠券传入 False）\n        :type is_membercard: bool\n        :return: 规则 ID, 设置成功的列表，以及设置失败的列表\n        '''\n        pass\n\n    def del_pay_giftcard(self, rule_id):\n        '''\n        删除支付后投放卡券的规则\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param rule_id: 支付即会员的规则 ID\n        '''\n        pass\n\n    def get_pay_giftcard(self, rule_id):\n        '''\n        查询支付后投放卡券的规则\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param rule_id: 支付即会员的规则 ID\n        :return: 支付后投放卡券的规则\n        :rtype: dict\n        '''\n        pass\n\n    def batch_get_pay_giftcard(self, effective=True, offset=0, count=10):\n        '''\n        批量查询支付后投放卡券的规则\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n        :param effective: 是否仅查询生效的规则\n        :type effective: bool\n        :param offset: 起始偏移量\n        :type offset: int\n        :param count: 查询的数量\n        :type count: int\n        :return: 支付后投放卡券规则的总数，以及查询到的列表\n        '''\n        pass\n\n    def update_movie_ticket(self, code, ticket_class, show_time, duration, screening_room, seat_number, card_id=None):\n        '''\n        更新电影票\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#7\n        '''\n        pass\n\n    def checkin_boardingpass(self, code, passenger_name, seat_class, etkt_bnr, seat='', gate='', boarding_time=None, is_cancel=False, qrcode_data=None, card_id=None):\n        '''\n        飞机票接口\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#3\n        '''\n        pass\n\n    def update_luckymoney_balance(self, code, balance, card_id=None):\n        '''\n        ⚠️已废弃\n        更新红包余额\n        '''\n        pass\n\n    def get_redirect_url(self, url, encrypt_code, card_id):\n        '''\n        获取卡券跳转外链\n        '''\n        pass\n\n    def deposit_code(self, card_id, codes):\n        '''\n        导入code\n        '''\n        pass\n\n    def get_deposit_count(self, card_id):\n        '''\n        查询导入code数目\n        '''\n        pass\n\n    def check_code(self, card_id, codes):\n        '''\n        核查code\n        '''\n        pass\n\n    def modify_stock(self, card_id, n):\n        '''\n        修改库存\n        '''\n        pass\n\n    def get_activate_url(self, card_id, outer_str=None):\n        '''\n        获取开卡插件 Url, 内含调用开卡插件所需的参数\n        详情请参考\n        https://mp.weixin.qq.com/wiki?id=mp1499332673_Unm7V\n        :param card_id: 会员卡的card_id\n        :param outer_str: 渠道值，用于统计本次领取的渠道参数\n        :return: 内含调用开卡插件所需的参数的 Url\n        '''\n        pass\n\n    def get_activate_info(self, activate_ticket):\n        '''\n        获取用户开卡时提交的信息\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n        :param activate_ticket: 跳转型开卡组件开卡后回调中的激活票据，可以用来获取用户开卡资料\n        :return: 用户开卡时填写的字段值\n        '''\n        pass\n\n    def set_activate_user_form(self, card_id, **kwargs):\n        '''\n        设置开卡字段接口\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n        \"6 激活会员卡\" -> \"6.2 一键激活\" -> \"步骤二：设置开卡字段接口\"\n        参数示例：\n        {\n            \"card_id\": \"pbLatjnrwUUdZI641gKdTMJzHGfc\",\n            \"service_statement\": {\n                \"name\": \"会员守则\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"bind_old_card\": {\n                \"name\": \"老会员绑定\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"required_form\": {\n                \"can_modify\"：false,\n                \"rich_field_list\": [\n                    {\n                        \"type\": \"FORM_FIELD_RADIO\",\n                        \"name\": \"兴趣\",\n                        \"values\": [\n                            \"钢琴\",\n                            \"舞蹈\",\n                            \"足球\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_SELECT\",\n                        \"name\": \"喜好\",\n                        \"values\": [\n                            \"郭敬明\",\n                            \"韩寒\",\n                            \"南派三叔\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_CHECK_BOX\",\n                        \"name\": \"职业\",\n                        \"values\": [\n                            \"赛车手\",\n                            \"旅行家\"\n                        ]\n                    }\n                ],\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_MOBILE\"\n                ]\n            },\n            \"optional_form\": {\n                \"can_modify\"：false,\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_LOCATION\",\n                    \"USER_FORM_INFO_FLAG_BIRTHDAY\"\n                ],\n                \"custom_field_list\": [\n                    \"喜欢的电影\"\n                ]\n            }\n        }\n        common_field_id_list 值见常量 `wechatpy.constants.UserFormInfoFlag`\n        :param card_id: 卡券ID\n        :param kwargs: 其他非必填参数，见微信文档\n        '''\n        pass\nCorresponding class implementation:\n\nfrom wechatpy.client.api.base import BaseWeChatAPI\nfrom operator import itemgetter\n\nclass WeChatCard(BaseWeChatAPI):\n    API_BASE_URL = 'https://api.weixin.qq.com/'\n\n    def create(self, card_data):\n        \"\"\"\n        创建卡券\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#8\n\n        :param card_data: 卡券信息\n        :return: 创建的卡券 ID\n        \"\"\"\n        result = self._post('card/create', data=card_data, result_processor=itemgetter('card_id'))\n        return result\n\n    def batch_add_locations(self, location_data):\n        \"\"\"\n        ⚠️已废弃\n        批量导入门店信息\n\n        :param location_data: 门店信息\n        :return: 门店 ID 列表，插入失败的门店元素值为 -1\n        \"\"\"\n        result = self._post('card/location/batchadd', data=location_data, result_processor=itemgetter('location_id_list'))\n        return result\n\n    def batch_get_locations(self, offset=0, count=0):\n        \"\"\"\n        ⚠️已废弃\n        批量获取门店信息\n        \"\"\"\n        return self._post('card/location/batchget', data={'offset': offset, 'count': count})\n\n    def get_colors(self):\n        \"\"\"\n        获得卡券的最新颜色列表，用于创建卡券\n        目前微信提供包括十四种色值供开发者使用。\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#7\n\n        :return: 颜色列表\n        \"\"\"\n        return ['Color010', 'Color020', 'Color030', 'Color040', 'Color050', 'Color060', 'Color070', 'Color080', 'Color081', 'Color082', 'Color090', 'Color100', 'Color101', 'Color102']\n\n    def create_qrcode(self, qrcode_data):\n        \"\"\"\n        创建卡券二维码\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#0\n\n        :param qrcode_data: 二维码信息\n        :return: 二维码 ticket，可使用 :func:show_qrcode 换取二维码文件\n        \"\"\"\n        result = self._post('card/qrcode/create', data=qrcode_data, result_processor=itemgetter('ticket'))\n        return result\n\n    def create_landingpage(self, buffer_data):\n        \"\"\"\n        创建货架\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#3\n\n        \"\"\"\n        result = self._post('card/landingpage/create', data=buffer_data)\n        return result\n\n    def get_html(self, card_id):\n        \"\"\"\n        图文消息群发卡券\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#6\n        \"\"\"\n        result = self._post('card/mpnews/gethtml', data={'card_id': card_id}, result_processor=itemgetter('content'))\n        return result\n\n    def consume_code(self, code, card_id=None):\n        \"\"\"\n        消耗 code\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        \"\"\"\n        card_data = {'code': code}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/code/consume', data=card_data)\n\n    def decrypt_code(self, encrypt_code):\n        \"\"\"\n        解码加密的 code\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Redeeming_a_coupon_voucher_or_card.html#0\n        \"\"\"\n        result = self._post('card/code/decrypt', data={'encrypt_code': encrypt_code}, result_processor=itemgetter('code'))\n        return result\n\n    def delete(self, card_id):\n        \"\"\"\n        删除卡券\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#7\n        \"\"\"\n        return self._post('card/delete', data={'card_id': card_id})\n\n    def get_code(self, code, card_id=None, check_consume=True):\n        \"\"\"\n        查询 code 信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#0\n        \"\"\"\n        card_data = {'code': code}\n        if card_id:\n            card_data['card_id'] = card_id\n        if not check_consume:\n            card_data['check_consume'] = check_consume\n        return self._post('card/code/get', data=card_data)\n\n    def get_card_list(self, openid, card_id=None):\n        \"\"\"\n        用于获取用户卡包里的，属于该appid下的卡券。\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#1\n        \"\"\"\n        card_data = {'openid': openid}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/user/getcardlist', data=card_data)\n\n    def batch_get(self, offset=0, count=50, status_list=None):\n        \"\"\"\n        批量查询卡券信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#3\n\n        :param offset: 查询卡列表的起始偏移量，从0开始，即offset: 5是指从从列表里的第六个开始读取。\n        :param count: 需要查询的卡片的数量（数量最大50）\n        :param status_list: 支持开发者拉出指定状态的卡券列表\n        \"\"\"\n        if count > 50:\n            raise ValueError('count cannot be greater than 50')\n        card_data = {'offset': offset, 'count': count}\n        if status_list:\n            card_data['status_list'] = status_list\n        return self._post('card/batchget', data=card_data)\n\n    def get(self, card_id):\n        \"\"\"\n        查询卡券详情\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#2\n        \"\"\"\n        result = self._post('card/get', data={'card_id': card_id}, result_processor=itemgetter('card'))\n        return result\n\n    def update_code(self, card_id, old_code, new_code):\n        \"\"\"\n        更新卡券 code\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#6\n\n        :param card_id: 卡券ID。自定义 Code 码卡券为必填\n        :param old_code: 需变更的 Code 码\n        :param new_code: 变更后的有效 Code 码\n        \"\"\"\n        return self._post('card/code/update', data={'card_id': card_id, 'code': old_code, 'new_code': new_code})\n\n    def invalid_code(self, code, card_id=None):\n        \"\"\"\n        设置卡券失效\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#8\n        \"\"\"\n        card_data = {'code': code}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/code/unavailable', data=card_data)\n\n    def update(self, card_data):\n        \"\"\"\n        更新卡券信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Managing_Coupons_Vouchers_and_Cards.html#4\n        \"\"\"\n        return self._post('card/update', data=card_data)\n\n    def set_paycell(self, card_id, is_open):\n        \"\"\"\n        设置买单接口\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Create_a_Coupon_Voucher_or_Card.html#12\n        \"\"\"\n        return self._post('card/paycell/set', data={'card_id': card_id, 'is_open': is_open})\n\n    def set_test_whitelist(self, openids=None, usernames=None):\n        \"\"\"\n        设置卡券测试用户白名单\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Distributing_Coupons_Vouchers_and_Cards.html#12\n        \"\"\"\n        openids = openids or []\n        usernames = usernames or []\n        return self._post('card/testwhitelist/set', data={'openid': openids, 'username': usernames})\n\n    def activate_membercard(self, membership_number, code, **kwargs):\n        \"\"\"\n        激活会员卡 - 接口激活方式\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#14\n\n        参数示例：\n        {\n            \"init_bonus\": 100,\n            \"init_bonus_record\":\"旧积分同步\",\n            \"init_balance\": 200,\n            \"membership_number\": \"AAA00000001\",\n            \"code\": \"12312313\",\n            \"card_id\": \"xxxx_card_id\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"init_custom_field_value1\": \"xxxxx\",\n            \"init_custom_field_value2\": \"xxxxx\",\n            \"init_custom_field_value3\": \"xxxxx\"\n        }\n\n        返回示例：\n        {\"errcode\":0,   \"errmsg\":\"ok\"}\n\n        :param membership_number: 必填，会员卡编号，由开发者填入，作为序列号显示在用户的卡包里。可与Code码保持等值\n        :param code: 必填，领取会员卡用户获得的code\n        :return: 参见返回示例\n        \"\"\"\n        kwargs['membership_number'] = membership_number\n        kwargs['code'] = code\n        return self._post('card/membercard/activate', data=kwargs)\n\n    def update_membercard(self, code, card_id, **kwargs):\n        \"\"\"\n        更新会员信息\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#18\n\n        注意事项：\n        1.开发者可以同时传入add_bonus和bonus解决由于同步失败带来的幂等性问题。同时传入add_bonus和bonus时\n            add_bonus作为积分变动消息中的变量值，而bonus作为卡面上的总积分额度显示。余额变动同理。\n        2.开发者可以传入is_notify_bonus控制特殊的积分对账变动不发送消息，余额变动同理。\n\n        参数示例：\n        {\n            \"code\": \"179011264953\",\n            \"card_id\": \"p1Pj9jr90_SQRaVqYI239Ka1erkI\",\n            \"background_pic_url\": \"https://mmbiz.qlogo.cn/mmbiz/0?wx_fmt=jpeg\",\n            \"record_bonus\": \"消费30元，获得3积分\",\n            \"bonus\": 3000,\n            \"add_bonus\": 30,\n            \"balance\": 3000,\n            \"add_balance\": -30,\n            \"record_balance\": \"购买焦糖玛琪朵一杯，扣除金额30元。\",\n            \"custom_field_value1\": \"xxxxx\"，\n            \"custom_field_value2\": \"xxxxx\"，\n            \"notify_optional\": {\n                \"is_notify_bonus\": true,\n                \"is_notify_balance\": true,\n                \"is_notify_custom_field1\":true\n            }\n        }\n\n        返回示例：\n        {\n            \"errcode\": 0,\n            \"errmsg\": \"ok\",\n            \"result_bonus\": 100,\n            \"result_balance\": 200,\n            \"openid\": \"oFS7Fjl0WsZ9AMZqrI80nbIq8xrA\"\n        }\n\n        :param code: 必填，卡券Code码\n        :param card_id: 必填，卡券ID\n        :param kwargs: 其他非必填字段，包含则更新对应字段。详情参见微信文档 “7 更新会员信息” 部分\n        :return: 参见返回示例\n        \"\"\"\n        kwargs.update({'code': code, 'card_id': card_id})\n        return self._post('card/membercard/updateuser', data=kwargs)\n\n    def get_membercard_user_info(self, card_id, code):\n        \"\"\"\n        查询会员卡的会员信息\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n\n        :param card_id: 查询会员卡的 Card ID\n        :param code: 所查询用户领取到的 code 值\n        :return: 会员信息，包括激活资料、积分信息以及余额等信息\n        \"\"\"\n        return self._post('card/membercard/userinfo/get', data={'card_id': card_id, 'code': code})\n\n    def add_pay_giftcard(self, base_info, extra_info, is_membercard):\n        \"\"\"\n        新增支付后投放卡券的规则，支持支付后领卡，支付后赠券\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param base_info: 营销规则结构体\n        :type base_info: dict\n        :param extra_info: 支付规则结构体\n        :type extra_info: dict\n        :param is_membercard: 本次规则是否是领卡。（领卡传入 True, 赠券传入 False）\n        :type is_membercard: bool\n        :return: 规则 ID, 设置成功的列表，以及设置失败的列表\n        \"\"\"\n        if is_membercard:\n            rule_key = 'member_rule'\n            rule_type = 'RULE_TYPE_PAY_MEMBER_CARD'\n        else:\n            rule_key = 'single_pay'\n            rule_type = 'RULE_TYPE_SINGLE_PAY'\n        return self._post('card/paygiftcard/add', data={'rule_info': {'type': rule_type, 'base_info': base_info, rule_key: extra_info}})\n\n    def del_pay_giftcard(self, rule_id):\n        \"\"\"\n        删除支付后投放卡券的规则\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param rule_id: 支付即会员的规则 ID\n        \"\"\"\n        return self._post('card/paygiftcard/delete', data={'rule_id': rule_id})\n\n    def get_pay_giftcard(self, rule_id):\n        \"\"\"\n        查询支付后投放卡券的规则\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param rule_id: 支付即会员的规则 ID\n        :return: 支付后投放卡券的规则\n        :rtype: dict\n        \"\"\"\n        return self._post('card/paygiftcard/getbyid', data={'rule_id': rule_id}, result_processor=itemgetter('rule_info'))\n\n    def batch_get_pay_giftcard(self, effective=True, offset=0, count=10):\n        \"\"\"\n        批量查询支付后投放卡券的规则\n\n        详情请参见\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Manage_Member_Card.html#4\n\n        :param effective: 是否仅查询生效的规则\n        :type effective: bool\n        :param offset: 起始偏移量\n        :type offset: int\n        :param count: 查询的数量\n        :type count: int\n        :return: 支付后投放卡券规则的总数，以及查询到的列表\n        \"\"\"\n        return self._post('card/paygiftcard/batchget', data={'type': 'RULE_TYPE_PAY_MEMBER_CARD', 'effective': effective, 'offset': offset, 'count': count})\n\n    def update_movie_ticket(self, code, ticket_class, show_time, duration, screening_room, seat_number, card_id=None):\n        \"\"\"\n        更新电影票\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#7\n        \"\"\"\n        ticket = {'code': code, 'ticket_class': ticket_class, 'show_time': show_time, 'duration': duration, 'screening_room': screening_room, 'seat_number': seat_number}\n        if card_id:\n            ticket['card_id'] = card_id\n        return self._post('card/movieticket/updateuser', data=ticket)\n\n    def checkin_boardingpass(self, code, passenger_name, seat_class, etkt_bnr, seat='', gate='', boarding_time=None, is_cancel=False, qrcode_data=None, card_id=None):\n        \"\"\"\n        飞机票接口\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Special_ticket.html#3\n        \"\"\"\n        data = {'code': code, 'passenger_name': passenger_name, 'class': seat_class, 'etkt_bnr': etkt_bnr, 'seat': seat, 'gate': gate, 'is_cancel': is_cancel}\n        if boarding_time:\n            data['boarding_time'] = boarding_time\n        if qrcode_data:\n            data['qrcode_data'] = qrcode_data\n        if card_id:\n            data['card_id'] = card_id\n        return self._post('card/boardingpass/checkin', data=data)\n\n    def update_luckymoney_balance(self, code, balance, card_id=None):\n        \"\"\"\n        ⚠️已废弃\n        更新红包余额\n        \"\"\"\n        card_data = {'code': code, 'balance': balance}\n        if card_id:\n            card_data['card_id'] = card_id\n        return self._post('card/luckymoney/updateuserbalance', data=card_data)\n\n    def get_redirect_url(self, url, encrypt_code, card_id):\n        \"\"\"\n        获取卡券跳转外链\n        \"\"\"\n        from wechatpy.utils import WeChatSigner\n        code = self.decrypt_code(encrypt_code)\n        signer = WeChatSigner()\n        signer.add_data(self.secret)\n        signer.add_data(code)\n        signer.add_data(card_id)\n        signature = signer.signature\n        return f'{url}?encrypt_code={encrypt_code}&card_id={card_id}&signature={signature}'\n\n    def deposit_code(self, card_id, codes):\n        \"\"\"\n        导入code\n        \"\"\"\n        card_data = {'card_id': card_id, 'code': codes}\n        return self._post('card/code/deposit', data=card_data)\n\n    def get_deposit_count(self, card_id):\n        \"\"\"\n        查询导入code数目\n        \"\"\"\n        card_data = {'card_id': card_id}\n        return self._post('card/code/getdepositcount', data=card_data)\n\n    def check_code(self, card_id, codes):\n        \"\"\"\n        核查code\n        \"\"\"\n        card_data = {'card_id': card_id, 'code': codes}\n        return self._post('card/code/checkcode', data=card_data)\n\n    def modify_stock(self, card_id, n):\n        \"\"\"\n        修改库存\n        \"\"\"\n        if n == 0:\n            return\n        card_data = {'card_id': card_id}\n        if n > 0:\n            card_data['increase_stock_value'] = n\n        elif n < 0:\n            card_data['reduce_stock_value'] = -n\n        return self._post('card/modifystock', data=card_data)\n\n    def get_activate_url(self, card_id, outer_str=None):\n        \"\"\"\n        获取开卡插件 Url, 内含调用开卡插件所需的参数\n        详情请参考\n        https://mp.weixin.qq.com/wiki?id=mp1499332673_Unm7V\n\n        :param card_id: 会员卡的card_id\n        :param outer_str: 渠道值，用于统计本次领取的渠道参数\n        :return: 内含调用开卡插件所需的参数的 Url\n        \"\"\"\n        return self._post('card/membercard/activate/geturl', data={'card_id': card_id, 'outer_str': outer_str}, result_processor=lambda x: x['url'])\n\n    def get_activate_info(self, activate_ticket):\n        \"\"\"\n        获取用户开卡时提交的信息\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n\n        :param activate_ticket: 跳转型开卡组件开卡后回调中的激活票据，可以用来获取用户开卡资料\n        :return: 用户开卡时填写的字段值\n        \"\"\"\n        return self._post('card/membercard/activatetempinfo/get', data={'activate_ticket': activate_ticket}, result_processor=itemgetter('info'))\n\n    def set_activate_user_form(self, card_id, **kwargs):\n        \"\"\"\n        设置开卡字段接口\n\n        详情请参考\n        https://developers.weixin.qq.com/doc/offiaccount/Cards_and_Offer/Membership_Cards/Create_a_membership_card.html#16\n\n        \"6 激活会员卡\" -> \"6.2 一键激活\" -> \"步骤二：设置开卡字段接口\"\n\n        参数示例：\n        {\n            \"card_id\": \"pbLatjnrwUUdZI641gKdTMJzHGfc\",\n            \"service_statement\": {\n                \"name\": \"会员守则\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"bind_old_card\": {\n                \"name\": \"老会员绑定\",\n                \"url\": \"https://www.qq.com\"\n            },\n            \"required_form\": {\n                \"can_modify\"：false,\n                \"rich_field_list\": [\n                    {\n                        \"type\": \"FORM_FIELD_RADIO\",\n                        \"name\": \"兴趣\",\n                        \"values\": [\n                            \"钢琴\",\n                            \"舞蹈\",\n                            \"足球\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_SELECT\",\n                        \"name\": \"喜好\",\n                        \"values\": [\n                            \"郭敬明\",\n                            \"韩寒\",\n                            \"南派三叔\"\n                        ]\n                    },\n                    {\n                        \"type\": \"FORM_FIELD_CHECK_BOX\",\n                        \"name\": \"职业\",\n                        \"values\": [\n                            \"赛车手\",\n                            \"旅行家\"\n                        ]\n                    }\n                ],\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_MOBILE\"\n                ]\n            },\n            \"optional_form\": {\n                \"can_modify\"：false,\n                \"common_field_id_list\": [\n                    \"USER_FORM_INFO_FLAG_LOCATION\",\n                    \"USER_FORM_INFO_FLAG_BIRTHDAY\"\n                ],\n                \"custom_field_list\": [\n                    \"喜欢的电影\"\n                ]\n            }\n        }\n        common_field_id_list 值见常量 `wechatpy.constants.UserFormInfoFlag`\n\n        :param card_id: 卡券ID\n        :param kwargs: 其他非必填参数，见微信文档\n        \"\"\"\n        kwargs['card_id'] = card_id\n        return self._post('card/membercard/activateuserform/set', data=kwargs)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass ActionManager:\n    '''\n    动作管理器，用于管理各种类型的动作\n    现在统一使用新插件系统，简化了原有的新旧兼容逻辑。\n    '''\n\n    def __init__(self):\n        '''初始化动作管理器'''\n        pass\n\n    def create_action(self, action_name: str, action_data: dict, reasoning: str, cycle_timers: dict, thinking_id: str, chat_stream: ChatStream, log_prefix: str, shutting_down: bool=False, action_message: Optional[DatabaseMessages]=None) -> Optional[BaseAction]:\n        '''\n        创建动作处理器实例\n        Args:\n            action_name: 动作名称\n            action_data: 动作数据\n            reasoning: 执行理由\n            cycle_timers: 计时器字典\n            thinking_id: 思考ID\n            chat_stream: 聊天流\n            log_prefix: 日志前缀\n            shutting_down: 是否正在关闭\n        Returns:\n            Optional[BaseAction]: 创建的动作处理器实例，如果动作名称未注册则返回None\n        '''\n        pass\n\n    def get_using_actions(self) -> Dict[str, ActionInfo]:\n        '''获取当前正在使用的动作集合'''\n        pass\n\n    def remove_action_from_using(self, action_name: str) -> bool:\n        '''\n        从当前使用的动作集中移除指定动作\n        Args:\n            action_name: 动作名称\n        Returns:\n            bool: 移除是否成功\n        '''\n        pass\n\n    def restore_actions(self) -> None:\n        '''恢复到默认动作集'''\n        pass"
  }
]