[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass Client:\n    '''\n    API client for the Nylas API.\n    Attributes:\n        api_key: The Nylas API key to use for authentication\n        api_uri: The URL to use for communicating with the Nylas API\n        http_client: The HTTP client to use for requests to the Nylas API\n    '''\n\n    def __init__(self, api_key: str, api_uri: str=DEFAULT_SERVER_URL, timeout: int=90):\n        '''\n        Initialize the Nylas API client.\n        Args:\n            api_key: The Nylas API key to use for authentication\n            api_uri: The URL to use for communicating with the Nylas API\n            timeout: The timeout for requests to the Nylas API, in seconds\n        '''\n        pass\n    @property\n    def auth(self) -> Auth:\n        '''\n        Access the Auth API.\n        Returns:\n            The Auth API.\n        '''\n        pass\n    @property\n    def applications(self) -> Applications:\n        '''\n        Access the Applications API.\n        Returns:\n            The Applications API.\n        '''\n        pass\n    @property\n    def attachments(self) -> Attachments:\n        '''\n        Access the Attachments API.\n        Returns:\n            The Attachments API.\n        '''\n        pass\n    @property\n    def connectors(self) -> Connectors:\n        '''\n        Access the Connectors API.\n        Returns:\n            The Connectors API.\n        '''\n        pass\n    @property\n    def calendars(self) -> Calendars:\n        '''\n        Access the Calendars API.\n        Returns:\n            The Calendars API.\n        '''\n        pass\n    @property\n    def contacts(self) -> Contacts:\n        '''\n        Access the Contacts API.\n        Returns:\n            The Contacts API.\n        '''\n        pass\n    @property\n    def drafts(self) -> Drafts:\n        '''\n        Access the Drafts API.\n        Returns:\n            The Drafts API.\n        '''\n        pass\n    @property\n    def events(self) -> Events:\n        '''\n        Access the Events API.\n        Returns:\n            The Events API.\n        '''\n        pass\n    @property\n    def folders(self) -> Folders:\n        '''\n        Access the Folders API.\n        Returns:\n            The Folders API.\n        '''\n        pass\n    @property\n    def grants(self) -> Grants:\n        '''\n        Access the Grants API.\n        Returns:\n            The Grants API.\n        '''\n        pass\n    @property\n    def messages(self) -> Messages:\n        '''\n        Access the Messages API.\n        Returns:\n            The Messages API.\n        '''\n        pass\n    @property\n    def threads(self) -> Threads:\n        '''\n        Access the Threads API.\n        Returns:\n            The Threads API.\n        '''\n        pass\n    @property\n    def webhooks(self) -> Webhooks:\n        '''\n        Access the Webhooks API.\n        Returns:\n            The Webhooks API.\n        '''\n        pass\n    @property\n    def scheduler(self) -> Scheduler:\n        '''\n        Access the Scheduler API.\n        Returns:\n            The Scheduler API.\n        '''\n        pass\n    @property\n    def notetakers(self) -> Notetakers:\n        '''\n        Access the Notetakers API.\n        Returns:\n            The Notetakers API.\n        '''\n        pass\nCorresponding class implementation:\n\nfrom nylas.resources.folders import Folders\nfrom nylas.resources.attachments import Attachments\nfrom nylas.resources.calendars import Calendars\nfrom nylas.resources.webhooks import Webhooks\nfrom nylas.resources.auth import Auth\nfrom nylas.resources.messages import Messages\nfrom nylas.resources.contacts import Contacts\nfrom nylas.resources.drafts import Drafts\nfrom nylas.resources.notetakers import Notetakers\nfrom nylas.resources.grants import Grants\nfrom nylas.config import DEFAULT_SERVER_URL\nfrom nylas.resources.events import Events\nfrom nylas.resources.scheduler import Scheduler\nfrom nylas.handler.http_client import HttpClient\nfrom nylas.resources.applications import Applications\nfrom nylas.resources.threads import Threads\nfrom nylas.resources.connectors import Connectors\n\nclass Client:\n    \"\"\"\n    API client for the Nylas API.\n\n    Attributes:\n        api_key: The Nylas API key to use for authentication\n        api_uri: The URL to use for communicating with the Nylas API\n        http_client: The HTTP client to use for requests to the Nylas API\n    \"\"\"\n\n    def __init__(self, api_key: str, api_uri: str=DEFAULT_SERVER_URL, timeout: int=90):\n        \"\"\"\n        Initialize the Nylas API client.\n\n        Args:\n            api_key: The Nylas API key to use for authentication\n            api_uri: The URL to use for communicating with the Nylas API\n            timeout: The timeout for requests to the Nylas API, in seconds\n        \"\"\"\n        self.api_key = api_key\n        self.api_uri = api_uri\n        self.http_client = HttpClient(self.api_uri, self.api_key, timeout)\n\n    @property\n    def auth(self) -> Auth:\n        \"\"\"\n        Access the Auth API.\n\n        Returns:\n            The Auth API.\n        \"\"\"\n        return Auth(self.http_client)\n\n    @property\n    def applications(self) -> Applications:\n        \"\"\"\n        Access the Applications API.\n\n        Returns:\n            The Applications API.\n        \"\"\"\n        return Applications(self.http_client)\n\n    @property\n    def attachments(self) -> Attachments:\n        \"\"\"\n        Access the Attachments API.\n\n        Returns:\n            The Attachments API.\n        \"\"\"\n        return Attachments(self.http_client)\n\n    @property\n    def connectors(self) -> Connectors:\n        \"\"\"\n        Access the Connectors API.\n\n        Returns:\n            The Connectors API.\n        \"\"\"\n        return Connectors(self.http_client)\n\n    @property\n    def calendars(self) -> Calendars:\n        \"\"\"\n        Access the Calendars API.\n\n        Returns:\n            The Calendars API.\n        \"\"\"\n        return Calendars(self.http_client)\n\n    @property\n    def contacts(self) -> Contacts:\n        \"\"\"\n        Access the Contacts API.\n\n        Returns:\n            The Contacts API.\n        \"\"\"\n        return Contacts(self.http_client)\n\n    @property\n    def drafts(self) -> Drafts:\n        \"\"\"\n        Access the Drafts API.\n\n        Returns:\n            The Drafts API.\n        \"\"\"\n        return Drafts(self.http_client)\n\n    @property\n    def events(self) -> Events:\n        \"\"\"\n        Access the Events API.\n\n        Returns:\n            The Events API.\n        \"\"\"\n        return Events(self.http_client)\n\n    @property\n    def folders(self) -> Folders:\n        \"\"\"\n        Access the Folders API.\n\n        Returns:\n            The Folders API.\n        \"\"\"\n        return Folders(self.http_client)\n\n    @property\n    def grants(self) -> Grants:\n        \"\"\"\n        Access the Grants API.\n\n        Returns:\n            The Grants API.\n        \"\"\"\n        return Grants(self.http_client)\n\n    @property\n    def messages(self) -> Messages:\n        \"\"\"\n        Access the Messages API.\n\n        Returns:\n            The Messages API.\n        \"\"\"\n        return Messages(self.http_client)\n\n    @property\n    def threads(self) -> Threads:\n        \"\"\"\n        Access the Threads API.\n\n        Returns:\n            The Threads API.\n        \"\"\"\n        return Threads(self.http_client)\n\n    @property\n    def webhooks(self) -> Webhooks:\n        \"\"\"\n        Access the Webhooks API.\n\n        Returns:\n            The Webhooks API.\n        \"\"\"\n        return Webhooks(self.http_client)\n\n    @property\n    def scheduler(self) -> Scheduler:\n        \"\"\"\n        Access the Scheduler API.\n\n        Returns:\n            The Scheduler API.\n        \"\"\"\n        return Scheduler(self.http_client)\n\n    @property\n    def notetakers(self) -> Notetakers:\n        \"\"\"\n        Access the Notetakers API.\n\n        Returns:\n            The Notetakers API.\n        \"\"\"\n        return Notetakers(self.http_client)\n\nExample skeleton:\n\n\nclass ProjectManager:\n    '''\n    This singleton keeps track of available projects.\n    '''\n\n    def __init__(self):\n        pass\n    @classmethod\n    def instance(cls):\n        '''\n        Singleton to return only one instance of ProjectManager.\n        :returns: instance of ProjectManager\n        '''\n        pass\n    @property\n    def projects(self):\n        '''\n        Returns all projects.\n        :returns: Project instances\n        '''\n        pass\n\n    def get_project(self, project_id):\n        '''\n        Returns a Project instance.\n        :param project_id: Project identifier\n        :returns: Project instance\n        '''\n        pass\n\n    def _check_available_disk_space(self, project):\n        '''\n        Sends a warning notification if disk space is getting low.\n        :param project: project instance\n        '''\n        pass\n\n    def create_project(self, name=None, project_id=None, path=None, variables=None):\n        '''\n        Create a project and keep a references to it in project manager.\n        See documentation of Project for arguments\n        '''\n        pass\n\n    def remove_project(self, project_id):\n        '''\n        Removes a Project instance from the list of projects in use.\n        :param project_id: Project identifier\n        '''\n        pass\n\n    def check_hardware_virtualization(self, source_node):\n        '''\n        Checks if hardware virtualization can be used.\n        :returns: boolean\n        '''\n        pass\nCorresponding class implementation:\n\nfrom .project import Project\nfrom uuid import UUID\nimport aiohttp\nimport psutil\nfrom ..config import Config\nimport platform\n\nclass ProjectManager:\n    \"\"\"\n    This singleton keeps track of available projects.\n    \"\"\"\n\n    def __init__(self):\n        self._projects = {}\n\n    @classmethod\n    def instance(cls):\n        \"\"\"\n        Singleton to return only one instance of ProjectManager.\n\n        :returns: instance of ProjectManager\n        \"\"\"\n        if not hasattr(cls, '_instance'):\n            cls._instance = cls()\n        return cls._instance\n\n    @property\n    def projects(self):\n        \"\"\"\n        Returns all projects.\n\n        :returns: Project instances\n        \"\"\"\n        return self._projects.values()\n\n    def get_project(self, project_id):\n        \"\"\"\n        Returns a Project instance.\n\n        :param project_id: Project identifier\n\n        :returns: Project instance\n        \"\"\"\n        try:\n            UUID(project_id, version=4)\n        except ValueError:\n            raise aiohttp.web.HTTPBadRequest(text='Project ID {} is not a valid UUID'.format(project_id))\n        if project_id not in self._projects:\n            raise aiohttp.web.HTTPNotFound(text=\"Project ID {} doesn't exist\".format(project_id))\n        return self._projects[project_id]\n\n    def _check_available_disk_space(self, project):\n        \"\"\"\n        Sends a warning notification if disk space is getting low.\n\n        :param project: project instance\n        \"\"\"\n        try:\n            used_disk_space = psutil.disk_usage(project.path).percent\n        except FileNotFoundError:\n            log.warning('Could not find \"{}\" when checking for used disk space'.format(project.path))\n            return\n        if used_disk_space >= 90:\n            message = 'Only {:.2f}% or less of free disk space detected in \"{}\" on \"{}\"'.format(100 - used_disk_space, project.path, platform.node())\n            log.warning(message)\n            project.emit('log.warning', {'message': message})\n\n    def create_project(self, name=None, project_id=None, path=None, variables=None):\n        \"\"\"\n        Create a project and keep a references to it in project manager.\n\n        See documentation of Project for arguments\n        \"\"\"\n        if project_id is not None and project_id in self._projects:\n            return self._projects[project_id]\n        project = Project(name=name, project_id=project_id, path=path, variables=variables)\n        self._check_available_disk_space(project)\n        self._projects[project.id] = project\n        return project\n\n    def remove_project(self, project_id):\n        \"\"\"\n        Removes a Project instance from the list of projects in use.\n\n        :param project_id: Project identifier\n        \"\"\"\n        if project_id not in self._projects:\n            raise aiohttp.web.HTTPNotFound(text=\"Project ID {} doesn't exist\".format(project_id))\n        del self._projects[project_id]\n\n    def check_hardware_virtualization(self, source_node):\n        \"\"\"\n        Checks if hardware virtualization can be used.\n\n        :returns: boolean\n        \"\"\"\n        if Config.instance().get_section_config('Server').getboolean('hardware_virtualization_check', True):\n            for project in self._projects.values():\n                for node in project.nodes:\n                    if node == source_node:\n                        continue\n                    if node.hw_virtualization and node.__class__.__name__ != source_node.__class__.__name__:\n                        return False\n        return True\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass GitHubTokenPool:\n    '''\n    Manages a pool of GitHub tokens with round-robin selection.\n    '''\n\n    def __init__(self, tokens: List[str]):\n        '''\n        Initialize token pool.\n        Args:\n            tokens: List of GitHub personal access tokens\n        '''\n        pass\n\n    def get_next_token(self) -> str:\n        '''\n        Get the next token in round-robin fashion.\n        Returns:\n            The next GitHub token to use\n        '''\n        pass\n\n    def get_current_token(self) -> str:\n        '''\n        Get the current token without advancing the index.\n        Returns:\n            The current GitHub token\n        '''\n        pass\n    @property\n    def pool_size(self) -> int:\n        '''Get the number of tokens in the pool.'''\n        pass"
  }
]