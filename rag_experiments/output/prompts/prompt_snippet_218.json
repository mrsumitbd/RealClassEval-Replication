[
  {
    "role": "assistant",
    "content": "You are an expert Python programmer who can correctly implement complete Python classes based on the provided class skeleton."
  },
  {
    "role": "user",
    "content": "For your understanding, following are some (skeleton, code) examples:\n\nExample skeleton:\n\n\nclass OutputSTACMixin:\n    '''Adds STAC related features.'''\n    @property\n    def stac_path(self) -> MPath:\n        '''Return path to STAC JSON file.'''\n        pass\n    @property\n    def stac_item_id(self) -> str:\n        '''\n        Return STAC item ID according to configuration.\n        Defaults to path basename.\n        '''\n        pass\n    @property\n    def stac_item_metadata(self):\n        '''Custom STAC metadata.'''\n        pass\n    @property\n    def stac_asset_type(self):\n        '''Asset MIME type.'''\n        pass\nCorresponding class implementation:\n\nfrom mapchete.path import MPath\n\nclass OutputSTACMixin:\n    \"\"\"Adds STAC related features.\"\"\"\n    path: MPath\n    output_params: dict\n\n    @property\n    def stac_path(self) -> MPath:\n        \"\"\"Return path to STAC JSON file.\"\"\"\n        return self.path / f'{self.stac_item_id}.json'\n\n    @property\n    def stac_item_id(self) -> str:\n        \"\"\"\n        Return STAC item ID according to configuration.\n\n        Defaults to path basename.\n        \"\"\"\n        return self.output_params.get('stac', {}).get('id') or self.path.stem\n\n    @property\n    def stac_item_metadata(self):\n        \"\"\"Custom STAC metadata.\"\"\"\n        return self.output_params.get('stac', {})\n\n    @property\n    def stac_asset_type(self):\n        \"\"\"Asset MIME type.\"\"\"\n        raise ValueError('no MIME type set for this output')\n\nExample skeleton:\n\n\nclass SecurityLabel(Mapping):\n    '''Unique API calls for SecurityLabel API Endpoints'''\n\n    def __init__(self, ti: 'ThreatIntelligence', name, **kwargs):\n        '''.'''\n        pass\n    @property\n    def as_entity(self):\n        '''Return the object as an entity.'''\n        pass\n    @staticmethod\n    def is_security_label():\n        '''Return indication that this is a security label object.'''\n        pass\n\n    def can_create(self):\n        '''Return true if security label can be created.'''\n        pass\n\n    def add_key_value(self, key, value):\n        '''Convert the value and adds it as a data field.'''\n        pass\n\n    def name(self, name):\n        '''Update the security labels name.'''\n        pass\n\n    def color(self, color):\n        '''Update the security labels color.'''\n        pass\n\n    def description(self, description):\n        '''Update the security labels description.'''\n        pass\n\n    def date_added(self, date_added):\n        '''Update the security labels date_added.\n        Args:\n            date_added: Converted to %Y-%m-%dT%H:%M:%SZ date format\n        '''\n        pass\nCorresponding class implementation:\n\nfrom tcex.api.tc.v2.threat_intelligence.mapping.mapping import Mapping\n\nclass SecurityLabel(Mapping):\n    \"\"\"Unique API calls for SecurityLabel API Endpoints\"\"\"\n\n    def __init__(self, ti: 'ThreatIntelligence', name, **kwargs):\n        \"\"\".\"\"\"\n        super().__init__(ti, main_type='SecurityLabel', api_type='securitylabels', sub_type=None, api_entity='securityLabel', api_branch=None, owner=kwargs.pop('owner', None))\n        self._data['type'] = 'securityLabels'\n        self._data['sub_type'] = None\n        self._data['name'] = name\n        for arg, value in kwargs.items():\n            self.add_key_value(arg, value)\n\n    @property\n    def as_entity(self):\n        \"\"\"Return the object as an entity.\"\"\"\n        return {}\n\n    @staticmethod\n    def is_security_label():\n        \"\"\"Return indication that this is a security label object.\"\"\"\n        return True\n\n    def can_create(self):\n        \"\"\"Return true if security label can be created.\"\"\"\n        return bool(self._data.get('name'))\n\n    def add_key_value(self, key, value):\n        \"\"\"Convert the value and adds it as a data field.\"\"\"\n        self._data[key] = value\n\n    def name(self, name):\n        \"\"\"Update the security labels name.\"\"\"\n        self._data['name'] = name\n        data = {'name': name}\n        return self._tc_requests.update(self.api_type, self.api_branch, self.unique_id, data, owner=self.owner)\n\n    def color(self, color):\n        \"\"\"Update the security labels color.\"\"\"\n        self._data['color'] = color\n        data = {'color': color}\n        return self._tc_requests.update(self.api_type, self.api_branch, self.unique_id, data, owner=self.owner)\n\n    def description(self, description):\n        \"\"\"Update the security labels description.\"\"\"\n        self._data['description'] = description\n        data = {'description': description}\n        return self._tc_requests.update(self.api_type, self.api_branch, self.unique_id, data, owner=self.owner)\n\n    def date_added(self, date_added):\n        \"\"\"Update the security labels date_added.\n\n        Args:\n            date_added: Converted to %Y-%m-%dT%H:%M:%SZ date format\n        \"\"\"\n        date_added = self.util.any_to_datetime(date_added).strftime('%Y-%m-%dT%H:%M:%SZ')\n        self._data['dateAdded'] = date_added\n        data = {'dateAdded': date_added}\n        return self._tc_requests.update(self.api_type, self.api_branch, self.unique_id, data, owner=self.owner)\n\nNow, implement the following class. Do not explain the code. The given class skeleton is as follows:\n\nclass CBlock:\n    '''A `CBlock` is a block of content that can serve as input to or output from an LLM.'''\n\n    def __init__(self, value: str | None, meta: dict[str, Any] | None=None):\n        '''Initializes the CBlock with a string and some metadata.'''\n        pass\n    @property\n    def value(self) -> str | None:\n        '''Gets the value of the block.'''\n        pass\n    @value.setter\n    def value(self) -> str | None:\n        '''Sets the value of the block.'''\n        pass\n\n    def __str__(self):\n        '''Stringifies the block.'''\n        pass\n\n    def __repr__(self):\n        '''Provides a python-parsable representation of the block (usually).'''\n        pass"
  }
]