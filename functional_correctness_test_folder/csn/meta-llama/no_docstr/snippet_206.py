
class StreamCodeDebug:

    @staticmethod
    def op_id(op_id):
        op_id_map = {
            0x00: "OP_NOP",
            0x01: "OP_UNREACH",
            0x02: "OP_BLOCK",
            0x03: "OP_LOOP",
            0x04: "OP_IF",
            0x05: "OP_ELSE",
            0x0b: "OP_END",
            0x0c: "OP_BR",
            0x0d: "OP_BR_IF",
            0x0e: "OP_BR_TABLE",
            0x0f: "OP_RETURN",
            0x10: "OP_CALL",
            0x11: "OP_CALL_INDIRECT",
            0x1a: "OP_DROP",
            0x1b: "OP_SELECT",
            0x20: "OP_LOCAL_GET",
            0x21: "OP_LOCAL_SET",
            0x22: "OP_LOCAL_TEE",
            0x23: "OP_GLOBAL_GET",
            0x24: "OP_GLOBAL_SET",
            0x28: "OP_I32_LOAD",
            0x29: "OP_I64_LOAD",
            0x2a: "OP_F32_LOAD",
            0x2b: "OP_F64_LOAD",
            0x2c: "OP_I32_LOAD8_S",
            0x2d: "OP_I32_LOAD8_U",
            0x2e: "OP_I32_LOAD16_S",
            0x2f: "OP_I32_LOAD16_U",
            0x30: "OP_I64_LOAD8_S",
            0x31: "OP_I64_LOAD8_U",
            0x32: "OP_I64_LOAD16_S",
            0x33: "OP_I64_LOAD16_U",
            0x34: "OP_I64_LOAD32_S",
            0x35: "OP_I64_LOAD32_U",
            0x36: "OP_I32_STORE",
            0x37: "OP_I64_STORE",
            0x38: "OP_F32_STORE",
            0x39: "OP_F64_STORE",
            0x3a: "OP_I32_STORE8",
            0x3b: "OP_I32_STORE16",
            0x3c: "OP_I64_STORE8",
            0x3d: "OP_I64_STORE16",
            0x3e: "OP_I64_STORE32",
            0x3f: "OP_MEMORY_SIZE",
            0x40: "OP_MEMORY_GROW",
            0x41: "OP_I32_CONST",
            0x42: "OP_I64_CONST",
            0x43: "OP_F32_CONST",
            0x44: "OP_F64_CONST",
            0x45: "OP_I32_EQZ",
            0x46: "OP_I32_EQ",
            0x47: "OP_I32_NE",
            0x48: "OP_I32_LT_S",
            0x49: "OP_I32_LT_U",
            0x4a: "OP_I32_GT_S",
            0x4b: "OP_I32_GT_U",
            0x4c: "OP_I32_LE_S",
            0x4d: "OP_I32_LE_U",
            0x4e: "OP_I32_GE_S",
            0x4f: "OP_I32_GE_U",
            0x50: "OP_I64_EQZ",
            0x51: "OP_I64_EQ",
            0x52: "OP_I64_NE",
            0x53: "OP_I64_LT_S",
            0x54: "OP_I64_LT_U",
            0x55: "OP_I64_GT_S",
            0x56: "OP_I64_GT_U",
            0x57: "OP_I64_LE_S",
            0x58: "OP_I64_LE_U",
            0x59: "OP_I64_GE_S",
            0x5a: "OP_I64_GE_U",
            0x5b: "OP_F32_EQ",
            0x5c: "OP_F32_NE",
            0x5d: "OP_F32_LT",
            0x5e: "OP_F32_GT",
            0x5f: "OP_F32_LE",
            0x60: "OP_F32_GE",
            0x61: "OP_F64_EQ",
            0x62: "OP_F64_NE",
            0x63: "OP_F64_LT",
            0x64: "OP_F64_GT",
            0x65: "OP_F64_LE",
            0x66: "OP_F64_GE",
            0x67: "OP_I32_CLZ",
            0x68: "OP_I32_CTZ",
            0x69: "OP_I32_POPCNT",
            0x6a: "OP_I32_ADD",
            0x6b: "OP_I32_SUB",
            0x6c: "OP_I32_MUL",
            0x6d: "OP_I32_DIV_S",
            0x6e: "OP_I32_DIV_U",
            0x6f: "OP_I32_REM_S",
            0x70: "OP_I32_REM_U",
            0x71: "OP_I32_AND",
            0x72: "OP_I32_OR",
            0x73: "OP_I32_XOR",
            0x74: "OP_I32_SHL",
            0x75: "OP_I32_SHR_S",
            0x76: "OP_I32_SHR_U",
            0x77: "OP_I32_ROTL",
            0x78: "OP_I32_ROTR",
            0x79: "OP_I64_CLZ",
            0x7a: "OP_I64_CTZ",
            0x7b: "OP_I64_POPCNT",
            0x7c: "OP_I64_ADD",
            0x7d: "OP_I64_SUB",
            0x7e: "OP_I64_MUL",
            0x7f: "OP_I64_DIV_S",
            0x80: "OP_I64_DIV_U",
            0x81: "OP_I64_REM_S",
            0x82: "OP_I64_REM_U",
            0x83: "OP_I64_AND",
            0x84: "OP_I64_OR",
            0x85: "OP_I64_XOR",
            0x86: "OP_I64_SHL",
            0x87: "OP_I64_SHR_S",
            0x88: "OP_I64_SHR_U",
            0x89: "OP_I64_ROTL",
            0x8a: "OP_I64_ROTR",
            0x8b: "OP_F32_ABS",
            0x8c: "OP_F32_NEG",
            0x8d: "OP_F32_CEIL",
            0x8e: "OP_F32_FLOOR",
            0x8f: "OP_F32_TRUNC",
            0x90: "OP_F32_NEAREST",
            0x91: "OP_F32_SQRT",
            0x92: "OP_F32_ADD",
            0x93: "OP_F32_SUB",
            0x94: "OP_F32_MUL",
            0x95: "OP_F32_DIV",
            0x96: "OP_F32_MIN",
            0x97: "OP_F32_MAX",
            0x98: "OP_F32_COPYSIGN",
            0x99: "OP_F64_ABS",
            0x9a: "OP_F64_NEG",
            0x9b: "OP_F64_CEIL",
            0x9c: "OP_F64_FLOOR",
            0x9d: "OP_F64_TRUNC",
            0x9e: "OP_F64_NEAREST",
            0x9f: "OP_F64_SQRT",
            0xa0: "OP_F64_ADD",
            0xa1: "OP_F64_SUB",
            0xa2: "OP_F64_MUL",
            0xa3: "OP_F64_DIV",
            0xa4: "OP_F64_MIN",
            0xa5: "OP_F64_MAX",
            0xa6: "OP_F64_COPYSIGN",
            0xa7: "OP_I32_WRAP_I64",
            0xa8: "OP_I32_TRUNC_F32_S",
            0xa9: "OP_I32_TRUNC_F32_U",
            0xaa: "OP_I32_TRUNC_F64_S",
            0xab: "OP_I32_TRUNC_F64_U",
            0xac: "OP_I64_EXTEND_I32_S",
            0xad: "OP_I64_EXTEND_I32_U",
            0xae: "OP_I64_TRUNC_F32_S",
            0xaf: "OP_I64_TRUNC_F32_U",
            0xb0: "OP_I64_TRUNC_F64_S",
            0xb1: "OP_I64_TRUNC_F64_U",
            0xb2: "OP_F32_CONVERT_I32_S",
            0xb3: "OP_F32_CONVERT_I32_U",
            0xb4: "OP_F32_CONVERT_I64_S",
            0xb5: "OP_F32_CONVERT_I64_U",
            0xb6: "OP_F32_DEMOTE_F64",
            0xb7: "OP_F64_CONVERT_I32_S",
            0xb8: "OP_F64_CONVERT_I32_U",
            0xb9: "OP_F64_CONVERT_I64_S",
            0xba: "OP_F64_CONVERT_I64_U",
            0xbb: "OP_F64_PROMOTE_F32",
            0xbc: "OP_I32_REINTERPRET_F32",
            0xbd: "OP_I64_REINTERPRET_F64",
            0xbe: "OP_F32_REINTERPRET_I32",
            0xbf: "OP_F64_REINTERPRET_I64",
            0xc0: "OP_I32_EXTEND8_S",
            0xc1: "OP_I32_EXTEND16_S",
            0xc2: "OP_I64_EXTEND8_S",
            0xc3: "OP_I64_EXTEND16_S",
            0xc4: "OP_I64_EXTEND32_S"
        }
        return op_id_map.get(op_id, f"Unknown op_id: {op_id}")

    @staticmethod
    def type_code(type_id):
        type_code_map = {
            0x40: "func",
            0x60: "func_type",
            0x7f: "i32",
            0x7e: "i64",
            0x7d: "f32",
            0x7c: "f64",
            0x70: "funcref",
            0x6f: "externref"
        }
        return type_code_map.get(type_id, f"Unknown type_id: {type_id}")

    @staticmethod
    def flags(flags):
        flag_map = {
            0x0: "None",
            0x1: "mutable",
            0x2: "imported",
            0x4: "exported"
        }
        flag_list = [flag_map.get(flag, f"Unknown flag: {flag}") for flag in [
            flags & 0x1, (flags >> 1) & 0x1, (flags >> 2) & 0x1] if flag != 0]
        return flag_list if flag_list else ["None"]
