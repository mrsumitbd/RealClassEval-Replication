
from typing import List
import numpy as np
from PIL import Image


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0):
        self.im0 = []
        self.paths = []
        for idx, im in enumerate(im0):
            arr = self._single_check(im)
            self.im0.append(arr)
            self.paths.append(f"image_{idx}")
        self.mode = 'image'
        self.bs = len(self.im0)
        self._iterated = False

    @staticmethod
    def _single_check(im):
        if isinstance(im, np.ndarray):
            if im.ndim == 2:
                # grayscale, expand to (H, W, 1)
                im = im[:, :, None]
            elif im.ndim == 3:
                pass
            else:
                raise ValueError("Numpy array must be 2D or 3D (H, W, C)")
            if im.dtype != np.uint8:
                im = im.astype(np.uint8)
            return im
        elif isinstance(im, Image.Image):
            arr = np.array(im)
            if arr.ndim == 2:
                arr = arr[:, :, None]
            if arr.dtype != np.uint8:
                arr = arr.astype(np.uint8)
            return arr
        else:
            raise TypeError("Input must be a PIL.Image.Image or numpy.ndarray")

    def __len__(self):
        return self.bs

    def __next__(self):
        if self._iterated:
            raise StopIteration
        self._iterated = True
        return self.paths, self.im0, None

    def __iter__(self):
        self._iterated = False
        return self
