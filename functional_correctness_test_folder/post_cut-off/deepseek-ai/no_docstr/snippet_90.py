
import numpy as np
from PIL import Image
from typing import List, Union, Tuple


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0: List[Union[Image.Image, np.ndarray]]):
        self.paths = [f'image_{i}' for i in range(len(im0))]
        self.im0 = [self._single_check(im) for im in im0]
        self.mode = 'image'
        self.bs = len(self.im0)

    @staticmethod
    def _single_check(im: Union[Image.Image, np.ndarray]) -> np.ndarray:
        if isinstance(im, Image.Image):
            return np.array(im)
        elif isinstance(im, np.ndarray):
            return im
        else:
            raise TypeError(
                f'Expected PIL Image or numpy.ndarray, got {type(im)}')

    def __len__(self) -> int:
        return len(self.im0)

    def __next__(self) -> Tuple[List[str], List[np.ndarray], str]:
        return self.paths, self.im0, self.mode

    def __iter__(self):
        return self
