
import os
import subprocess
import shlex
from pathlib import Path
from typing import Optional


class Shell:
    '''Wrapper around subprocess supporting dry_run mode.'''

    def __init__(self, dry_run: bool = False, safe_mode: bool = True):
        '''Initialize shell wrapper.
        Args:
            dry_run: If True, commands will be logged but not executed
            safe_mode: If True, enables additional safety checks for commands
        '''
        self.dry_run = dry_run
        self.safe_mode = safe_mode

    def _validate_command_safety(self, cmd: str) -> None:
        '''Validate command for basic safety if safe_mode is enabled.
        Args:
            cmd: Command to validate
        Raises:
            RuntimeError: If command appears unsafe
        '''
        if not self.safe_mode:
            return

        # Basic unsafe patterns
        unsafe_patterns = [
            r'\brm\s+-rf\b',
            r'\bsudo\b',
            r'\bshutdown\b',
            r'\breboot\b',
            r'\bmkfs\b',
            r'\bdd\b',
            r'\b:(){.*};:\b',  # fork bomb
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*};:\b',
            r'\b:(){.*}; :\
