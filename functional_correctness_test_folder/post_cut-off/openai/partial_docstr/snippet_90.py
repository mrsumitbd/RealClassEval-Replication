
import numpy as np
from PIL import Image
from typing import List, Tuple, Any, Iterator


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0: List[Any]):
        '''Initializes a loader for PIL and Numpy images, converting inputs to a standardized format.'''
        # Validate and convert each image to a numpy array
        self.im0: List[np.ndarray] = []
        self.paths: List[str] = []
        for idx, im in enumerate(im0):
            arr = self._single_check(im)
            self.im0.append(arr)
            # Generate a placeholder path if not provided
            if isinstance(im, Image.Image):
                self.paths.append(f'pil_image_{idx}.png')
            else:
                self.paths.append(f'numpy_image_{idx}.npy')
        self.mode = 'image'
        self.bs = len(self.im0)
        self._iterated = False

    @staticmethod
    def _single_check(im: Any) -> np.ndarray:
        '''Validate and format a single image to a Numpy array.'''
        if isinstance(im, Image.Image):
            arr = np.array(im)
        elif isinstance(im, np.ndarray):
            arr = im
        else:
            raise TypeError(f'Unsupported image type: {type(im)}')

        if arr.ndim == 2:  # grayscale
            arr = np.stack([arr] * 3, axis=-1)
        elif arr.ndim == 3 and arr.shape[2] == 1:  # single channel
            arr = np.concatenate([arr] * 3, axis=2)
        elif arr.ndim != 3 or arr.shape[2] not in (3, 4):
            raise ValueError(f'Unsupported image shape: {arr.shape}')

        if arr.dtype != np.uint8:
            arr = arr.astype(np.uint8)

        return arr

    def __len__(self) -> int:
        '''Returns the length of the 'im0' attribute, representing the number of loaded images.'''
        return len(self.im0)

    def __iter__(self) -> Iterator[Tuple[List[str], List[np.ndarray], Any]]:
        '''Iterates through PIL/numpy images, yielding paths, raw images, and metadata for processing.'''
        self._iterated = False
        return self

    def __next__(self) -> Tuple[List[str], List[np.ndarray], Any]:
        '''Returns the next batch of images, paths, and metadata for processing.'''
        if self._iterated:
            raise StopIteration
        self._iterated = True
        # Return all images in one batch
        return self.paths, self.im0, None
