
import numpy as np
from PIL import Image
from typing import List, Tuple, Iterator, Any, Dict, Union


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0: List[Union[Image.Image, np.ndarray]]):
        '''Initializes a loader for PIL and Numpy images, converting inputs to a standardized format.'''
        self.paths: List[str] = []
        self.im0: List[np.ndarray] = []
        self.mode: str = 'image'
        self.bs: int = len(im0)
        self._iterated: bool = False

        for idx, im in enumerate(im0):
            arr = self._single_check(im)
            self.im0.append(arr)

            # Determine a path / name for the image
            if isinstance(im, Image.Image):
                # Use the filename if available, otherwise generate a placeholder
                path = im.filename if getattr(
                    im, 'filename', None) else f'image_{idx}'
            else:
                path = f'image_{idx}'
            self.paths.append(path)

    @staticmethod
    def _single_check(im: Union[Image.Image, np.ndarray]) -> np.ndarray:
        '''Validate and format an image to numpy array, ensuring RGB order and contiguous memory.'''
        if isinstance(im, Image.Image):
            # Convert to RGB if necessary
            if im.mode != 'RGB':
                im = im.convert('RGB')
            arr = np.asarray(im, dtype=np.uint8)
        elif isinstance(im, np.ndarray):
            arr = im
            if arr.dtype != np.uint8:
                raise ValueError(
                    f'Expected uint8 numpy array, got dtype {arr.dtype}')
            if arr.ndim == 2:
                # Grayscale -> replicate channels
                arr = np.stack([arr] * 3, axis=-1)
            elif arr.ndim == 3 and arr.shape[2] == 1:
                arr = np.concatenate([arr] * 3, axis=2)
            elif arr.ndim != 3 or arr.shape[2] not in (3, 4):
                raise ValueError(
                    f'Unsupported numpy array shape {arr.shape}. Expected (H,W,3) or (H,W,4).')
            if arr.shape[2] == 4:
                # Drop alpha channel
                arr = arr[:, :, :3]
        else:
            raise TypeError(
                f'Unsupported image type {type(im)}. Expected PIL.Image.Image or np.ndarray.')

        # Ensure contiguous memory
        arr = np.ascontiguousarray(arr, dtype=np.uint8)
        return arr

    def __len__(self) -> int:
        '''Returns the length of the 'im0' attribute, representing the number of loaded images.'''
        return self.bs

    def __iter__(self) -> Iterator[Tuple[List[str], List[np.ndarray], Dict[str, Any]]]:
        '''Iterates through PIL/numpy images, yielding paths, raw images, and metadata for processing.'''
        return self

    def __next__(self) -> Tuple[List[str], List[np.ndarray], Dict[str, Any]]:
        '''Returns the next batch of images, paths, and metadata for processing.'''
        if self._iterated:
            raise StopIteration
        self._iterated = True
        # Return all images in one batch
        return self.paths, self.im0, {}
