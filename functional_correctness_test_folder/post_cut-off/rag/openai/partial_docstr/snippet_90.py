
import numpy as np
from PIL import Image
from typing import List, Tuple, Any, Iterator, Union


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0: List[Union[Image.Image, np.ndarray, str]]):
        '''Initializes a loader for PIL and Numpy images, converting inputs to a standardized format.'''
        self.paths: List[str] = []
        self.im0: List[np.ndarray] = []
        self.mode: str = 'image'
        self.bs: int = 0
        self._iterated: bool = False

        for idx, item in enumerate(im0):
            # Determine the source type
            if isinstance(item, str):
                # Treat as a file path
                path = item
                try:
                    pil_img = Image.open(path)
                except Exception as e:
                    raise ValueError(
                        f"Unable to open image at path '{path}': {e}") from e
                arr = self._single_check(pil_img)
                self.paths.append(path)
            elif isinstance(item, Image.Image):
                arr = self._single_check(item)
                self.paths.append(f'image_{idx}')
            elif isinstance(item, np.ndarray):
                arr = self._single_check(item)
                self.paths.append(f'image_{idx}')
            else:
                raise TypeError(
                    f"Unsupported image type {type(item)} at index {idx}")

            self.im0.append(arr)

        self.bs = len(self.im0)

    @staticmethod
    def _single_check(im: Union[Image.Image, np.ndarray]) -> np.ndarray:
        '''Validate and format an image to numpy array, ensuring RGB order and contiguous memory.'''
        if isinstance(im, Image.Image):
            # Convert to RGB and then to numpy
            im = im.convert('RGB')
            arr = np.array(im, dtype=np.uint8)
        elif isinstance(im, np.ndarray):
            arr = im
            if arr.ndim == 2:
                # Grayscale -> replicate channels
                arr = np.stack([arr] * 3, axis=-1)
            elif arr.ndim == 3 and arr.shape[2] == 1:
                arr = np.concatenate([arr] * 3, axis=2)
            elif arr.ndim != 3 or arr.shape[2] != 3:
                raise ValueError(
                    f"Unsupported array shape {arr.shape}. Expected (H,W,3).")
            if arr.dtype != np.uint8:
                arr = arr.astype(np.uint8)
        else:
            raise TypeError(f"Unsupported image type {type(im)}")

        # Ensure contiguous memory
        arr = np.ascontiguousarray(arr)
        return arr

    def __len__(self) -> int:
        '''Returns the length of the 'im0' attribute, representing the number of loaded images.'''
        return len(self.im0)

    def __next__(self) -> Tuple[List[str], List[np.ndarray], Any]:
        '''Returns the next batch of images, paths, and metadata for processing.'''
        if self._iterated:
            raise StopIteration
        self._iterated = True
        # Return paths, images, and an empty metadata placeholder
        return self.paths, self.im0, None

    def __iter__(self) -> Iterator[Tuple[List[str], List[np.ndarray], Any]]:
        '''Iterates through PIL/numpy images, yielding paths, raw images, and metadata for processing.'''
        self._iterated = False
        return self
