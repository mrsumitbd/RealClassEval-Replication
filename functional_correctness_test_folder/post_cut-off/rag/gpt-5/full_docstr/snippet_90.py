import numpy as np
from PIL import Image


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0):
        '''Initializes a loader for PIL and Numpy images, converting inputs to a standardized format.'''
        if im0 is None:
            raise ValueError("im0 must not be None")
        if isinstance(im0, (list, tuple)):
            items = list(im0)
        else:
            items = [im0]

        if len(items) == 0:
            raise ValueError("Input collection 'im0' is empty.")

        self.im0 = []
        self.paths = []
        for i, im in enumerate(items):
            arr = self._single_check(im)
            self.im0.append(arr)
            path = None
            if isinstance(im, Image.Image):
                # Use filename if available, otherwise autogenerate
                path = getattr(im, "filename", None) or ""
            if not path:
                path = f"image_{i}.jpg"
            self.paths.append(path)

        self.mode = 'image'
        self.bs = len(self.im0)
        self._yielded = False

    @staticmethod
    def _single_check(im):
        '''Validate and format an image to numpy array, ensuring RGB order and contiguous memory.'''
        if isinstance(im, Image.Image):
            im = im.convert('RGB')
            arr = np.array(im)
        elif isinstance(im, np.ndarray):
            arr = im
        else:
            raise TypeError(
                f"Unsupported image type: {type(im)}. Expected PIL.Image.Image or numpy.ndarray.")

        # Convert to HWC, 3-channel uint8 RGB
        if arr.ndim == 2:
            arr = np.stack([arr] * 3, axis=-1)
        elif arr.ndim == 3:
            # Detect CHW and convert to HWC
            if arr.shape[0] in (1, 3, 4) and arr.shape[-1] not in (1, 3, 4):
                arr = np.transpose(arr, (1, 2, 0))
        else:
            raise ValueError(
                f"Unsupported array shape: {arr.shape}. Expected (H,W), (H,W,C) or (C,H,W).")

        # Ensure last dimension is channel
        if arr.ndim != 3:
            raise ValueError(f"Invalid processed array shape: {arr.shape}.")
        if arr.shape[2] == 1:
            arr = np.concatenate([arr] * 3, axis=2)
        elif arr.shape[2] == 4:
            arr = arr[:, :, :3]
        elif arr.shape[2] != 3:
            raise ValueError(
                f"Unsupported number of channels: {arr.shape[2]}. Expected 1, 3, or 4.")

        # Ensure dtype uint8
        if arr.dtype != np.uint8:
            if np.issubdtype(arr.dtype, np.floating):
                arr = np.clip(arr, 0.0, 1.0) * 255.0
            arr = np.clip(arr, 0, 255).astype(np.uint8)

        # Ensure contiguous
        arr = np.ascontiguousarray(arr)
        return arr

    def __len__(self):
        '''Returns the length of the 'im0' attribute, representing the number of loaded images.'''
        return len(self.im0)

    def __next__(self):
        '''Returns the next batch of images, paths, and metadata for processing.'''
        if self._yielded:
            raise StopIteration
        self._yielded = True
        return self.paths, self.im0, None

    def __iter__(self):
        '''Iterates through PIL/numpy images, yielding paths, raw images, and metadata for processing.'''
        self._yielded = False
        return self
