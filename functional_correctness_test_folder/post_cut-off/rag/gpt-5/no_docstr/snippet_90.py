import numpy as np
try:
    from PIL import Image as _PILImage
except Exception:  # PIL may not be available in some environments
    _PILImage = None


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0):
        '''Initializes a loader for PIL and Numpy images, converting inputs to a standardized format.'''
        if isinstance(im0, (list, tuple)):
            items = list(im0)
        else:
            items = [im0]

        self.paths = []
        self.im0 = []
        for i, item in enumerate(items):
            if _PILImage is not None and isinstance(item, _PILImage.Image):
                path = f"image_pil_{i}.jpg"
            elif isinstance(item, np.ndarray):
                path = f"image_numpy_{i}.jpg"
            else:
                path = f"image_{i}.jpg"
            self.paths.append(path)
            self.im0.append(self._single_check(item))

        self.mode = 'image'
        self.bs = len(self.im0)
        self._yielded = False

    @staticmethod
    def _single_check(im):
        '''Validate and format an image to numpy array, ensuring RGB order and contiguous memory.'''
        if _PILImage is not None and isinstance(im, _PILImage.Image):
            if im.mode not in ("RGB", "L"):
                im = im.convert("RGB")
            elif im.mode == "L":
                im = im.convert("RGB")
            im = np.array(im)

        if not isinstance(im, np.ndarray):
            raise TypeError(
                f"Unsupported image type: {type(im)}. Expected PIL.Image.Image or numpy.ndarray")

        if im.ndim == 2:
            im = np.stack([im] * 3, axis=-1)
        elif im.ndim == 3:
            if im.shape[0] in (1, 3) and im.shape[2] not in (1, 3, 4):
                im = np.transpose(im, (1, 2, 0))
        else:
            raise ValueError(
                f"Unsupported image shape: {im.shape}. Expected 2D or 3D array.")

        if im.shape[-1] == 4:
            im = im[..., :3]
        elif im.shape[-1] == 1:
            im = np.concatenate([im] * 3, axis=-1)

        if im.dtype == np.bool_:
            im = im.astype(np.uint8) * 255
        elif np.issubdtype(im.dtype, np.floating):
            max_val = float(np.nanmax(im)) if im.size else 1.0
            if max_val <= 1.0:
                im = (im * 255.0).clip(0, 255)
            im = im.astype(np.uint8)
        elif not np.issubdtype(im.dtype, np.integer):
            im = im.astype(np.uint8)

        im = np.ascontiguousarray(im)
        if im.ndim != 3 or im.shape[-1] != 3:
            raise ValueError(
                f"Image must be HxWx3 after processing, got shape {im.shape}")
        return im

    def __len__(self):
        '''Returns the length of the 'im0' attribute, representing the number of loaded images.'''
        return self.bs

    def __next__(self):
        '''Returns the next batch of images, paths, and metadata for processing.'''
        if self._yielded:
            raise StopIteration
        self._yielded = True
        return self.paths, self.im0, None

    def __iter__(self):
        '''Iterates through PIL/numpy images, yielding paths, raw images, and metadata for processing.'''
        self._yielded = False
        return self
