
import numpy as np
from PIL import Image
from typing import List


class LoadPilAndNumpy:
    '''
    Load images from PIL and Numpy arrays for batch processing.
    This class manages loading and pre-processing of image data from both PIL and Numpy formats. It performs basic
    validation and format conversion to ensure that the images are in the required format for downstream processing.
    Attributes:
        paths (List[str]): List of image paths or autogenerated filenames.
        im0 (List[np.ndarray]): List of images stored as Numpy arrays.
        mode (str): Type of data being processed, set to 'image'.
        bs (int): Batch size, equivalent to the length of `im0`.
    Methods:
        _single_check: Validate and format a single image to a Numpy array.
    Examples:
        >>> from PIL import Image
        >>> import numpy as np
        >>> pil_img = Image.new("RGB", (100, 100))
        >>> np_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        >>> loader = LoadPilAndNumpy([pil_img, np_img])
        >>> paths, images, _ = next(iter(loader))
        >>> print(f"Loaded {len(images)} images")
        Loaded 2 images
    '''

    def __init__(self, im0):
        '''Initializes a loader for PIL and Numpy images, converting inputs to a standardized format.'''
        self.paths = [f'image{i}.jpg' for i in range(len(im0))]
        self.im0 = [self._single_check(im) for im in im0]
        self.mode = 'image'
        self.bs = len(self.im0)

    @staticmethod
    def _single_check(im):
        '''Validate and format an image to numpy array, ensuring RGB order and contiguous memory.'''
        if isinstance(im, Image.Image):
            im = np.array(im)
        elif not isinstance(im, np.ndarray):
            raise TypeError(
                f'Expected PIL Image or numpy.ndarray, got {type(im)}')

        if im.ndim == 2:
            im = np.stack((im,) * 3, axis=-1)
        elif im.ndim == 3 and im.shape[-1] == 1:
            im = np.concatenate((im,) * 3, axis=-1)
        elif im.ndim == 3 and im.shape[-1] == 4:
            im = im[..., :3]
        elif im.ndim != 3 or im.shape[-1] != 3:
            raise ValueError(f'Expected 3-channel image, got shape {im.shape}')

        if not im.flags['C_CONTIGUOUS']:
            im = np.ascontiguousarray(im)
        return im

    def __len__(self):
        '''Returns the length of the 'im0' attribute, representing the number of loaded images.'''
        return len(self.im0)

    def __next__(self):
        '''Returns the next batch of images, paths, and metadata for processing.'''
        if not hasattr(self, '_iter_index'):
            self._iter_index = 0
        if self._iter_index >= len(self.im0):
            raise StopIteration
        im = self.im0[self._iter_index]
        path = self.paths[self._iter_index]
        self._iter_index += 1
        return [path], [im], None

    def __iter__(self):
        '''Iterates through PIL/numpy images, yielding paths, raw images, and metadata for processing.'''
        self._iter_index = 0
        return self
