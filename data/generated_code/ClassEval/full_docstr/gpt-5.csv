id,human_written_code,class_skeleton,class_name,snippet_id,gpt-5_generated_code
0,"import logging
import datetime


class AccessGatewayFilter:

    def __init__(self):
        pass

    def filter(self, request):
        request_uri = request['path']
        method = request['method']

        if self.is_start_with(request_uri):
            return True

        try:
            token = self.get_jwt_user(request)
            user = token['user']
            if user['level'] > 2:
                self.set_current_user_info_and_log(user)
                return True
        except:
            return False

    def is_start_with(self, request_uri):
        start_with = [""/api"", '/login']
        for s in start_with:
            if request_uri.startswith(s):
                return True
        return False

    def get_jwt_user(self, request):
        token = request['headers']['Authorization']
        user = token['user']
        if token['jwt'].startswith(user['name']):
            jwt_str_date = token['jwt'].split(user['name'])[1]
            jwt_date = datetime.datetime.strptime(jwt_str_date, ""%Y-%m-%d"")
            if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
                return None
        return token

    def set_current_user_info_and_log(self, user):
        host = user['address']
        logging.log(msg=user['name'] + host + str(datetime.datetime.now()), level=1)","class AccessGatewayFilter:
    """"""
    This class is a filter used for accessing gateway filtering, primarily for authentication and access log recording.
    """"""

    def __init__(self):
        pass

    def filter(self, request):
        """"""
        Filter the incoming request based on certain rules and conditions.
        :param request: dict, the incoming request details
        :return: bool, True if the request is allowed, False otherwise
        >>> filter = AccessGatewayFilter()
        >>> filter.filter({'path': '/login', 'method': 'POST'})
        True

        """"""


    def is_start_with(self, request_uri):
        """"""
        Check if the request URI starts with certain prefixes.
        Currently, the prefixes being checked are ""/api"" and ""/login"".
        :param request_uri: str, the URI of the request
        :return: bool, True if the URI starts with certain prefixes, False otherwise
        >>> filter = AccessGatewayFilter()
        >>> filter.is_start_with('/api/data')
        True

        """"""


    def get_jwt_user(self, request):
        """"""
        Get the user information from the JWT token in the request.
        :param request: dict, the incoming request details
        :return: dict or None, the user information if the token is valid, None otherwise
        >>> filter = AccessGatewayFilter()
        >>> filter.get_jwt_user({'headers': {'Authorization': {'user': {'name': 'user1'}, 'jwt': 'user1'+str(datetime.date.today())}}})
        {'user': {'name': 'user1'}

        """"""

    def set_current_user_info_and_log(self, user):
        """"""
        Set the current user information and log the access.
        :param user: dict, the user information
        :return: None
        >>> filter = AccessGatewayFilter()
        >>> user = {'name': 'user1', 'address': '127.0.0.1'}
        >>> filter.set_current_user_info_and_log(user)

        """"""",AccessGatewayFilter,snippet_1,"import datetime
from typing import Any, Dict, List, Optional


class AccessGatewayFilter:
    """"""
    This class is a filter used for accessing gateway filtering, primarily for authentication and access log recording.
    """"""

    def __init__(self):
        self.allowed_prefixes = (""/api"", ""/login"")
        self.current_user: Optional[Dict[str, Any]] = None
        self.access_log: List[Dict[str, Any]] = []

    def filter(self, request):
        """"""
        Filter the incoming request based on certain rules and conditions.
        :param request: dict, the incoming request details
        :return: bool, True if the request is allowed, False otherwise
        >>> filter = AccessGatewayFilter()
        >>> filter.filter({'path': '/login', 'method': 'POST'})
        True

        """"""
        if not isinstance(request, dict):
            return False

        path = request.get(""path"", """")
        method = request.get(""method"", """").upper()
        if not isinstance(path, str) or not path:
            return False

        if not self.is_start_with(path):
            return False

        if path.startswith(""/login""):
            # Allow login endpoint (commonly POST). For simplicity allow any method on /login.
            self.set_current_user_info_and_log({""name"": ""anonymous"", ""address"": request.get(""ip"")})
            return True

        if path.startswith(""/api""):
            user = self.get_jwt_user(request)
            if user is None:
                return False
            # On valid auth, set user and log
            flattened_user = user.get(""user"") if isinstance(user, dict) else None
            if isinstance(flattened_user, dict):
                # include ip if present
                if request.get(""ip""):
                    flattened_user = {**flattened_user, ""address"": request.get(""ip"")}
                self.set_current_user_info_and_log(flattened_user)
            else:
                self.set_current_user_info_and_log({""name"": ""unknown"", ""address"": request.get(""ip"")})
            return True

        return False

    def is_start_with(self, request_uri):
        """"""
        Check if the request URI starts with certain prefixes.
        Currently, the prefixes being checked are ""/api"" and ""/login"".
        :param request_uri: str, the URI of the request
        :return: bool, True if the URI starts with certain prefixes, False otherwise
        >>> filter = AccessGatewayFilter()
        >>> filter.is_start_with('/api/data')
        True

        """"""
        if not isinstance(request_uri, str):
            return False
        return any(request_uri.startswith(prefix) for prefix in self.allowed_prefixes)

    def get_jwt_user(self, request):
        """"""
        Get the user information from the JWT token in the request.
        :param request: dict, the incoming request details
        :return: dict or None, the user information if the token is valid, None otherwise
        >>> filter = AccessGatewayFilter()
        >>> filter.get_jwt_user({'headers': {'Authorization': {'user': {'name': 'user1'}, 'jwt': 'user1'+str(datetime.date.today())}}})
        {'user': {'name': 'user1'}

        """"""
        headers = {}
        if isinstance(request, dict):
            headers = request.get(""headers"") or {}

        auth = headers.get(""Authorization"")
        if isinstance(auth, dict):
            user_info = auth.get(""user"")
            token = auth.get(""jwt"")
            if isinstance(user_info, dict):
                name = user_info.get(""name"")
                if isinstance(name, str) and isinstance(token, str):
                    expected = f""{name}{datetime.date.today()}""
                    if token == expected:
                        return {""user"": {""name"": name}}
        return None

    def set_current_user_info_and_log(self, user):
        """"""
        Set the current user information and log the access.
        :param user: dict, the user information
        :return: None
        >>> filter = AccessGatewayFilter()
        >>> user = {'name': 'user1', 'address': '127.0.0.1'}
        >>> filter.set_current_user_info_and_log(user)

        """"""
        if isinstance(user, dict):
            self.current_user = user
        else:
            self.current_user = None

        entry = {
            ""timestamp"": datetime.datetime.utcnow().isoformat() + ""Z"",
            ""user"": self.current_user,
        }
        self.access_log.append(entry)"
1,"import math


class AreaCalculator:

    def __init__(self, radius):
        self.radius = radius

    def calculate_circle_area(self):
        return math.pi * self.radius ** 2

    def calculate_sphere_area(self):
        return 4 * math.pi * self.radius ** 2

    def calculate_cylinder_area(self, height):
        return 2 * math.pi * self.radius * (self.radius + height)

    def calculate_sector_area(self, angle):
        return self.radius ** 2 * angle / 2

    def calculate_annulus_area(self, inner_radius, outer_radius):
        return math.pi * (outer_radius ** 2 - inner_radius ** 2)","class AreaCalculator:
    """"""
    This is a class for calculating the area of different shapes, including circle, sphere, cylinder, sector and annulus.
    """"""


    def __init__(self, radius):
        """"""
        Initialize the radius for shapes.
        :param radius: float
        """"""
        self.radius = radius

    def calculate_circle_area(self):
        """"""
        calculate the area of circle based on self.radius
        :return: area of circle, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_circle_area()
        12.566370614359172
        """"""

    def calculate_sphere_area(self):
        """"""
        calculate the area of sphere based on self.radius
        :return: area of sphere, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_sphere_area()
        50.26548245743669
        """"""

    def calculate_cylinder_area(self, height):
        """"""
        calculate the area of cylinder based on self.radius and height
        :param height: height of cylinder, float
        :return: area of cylinder, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_cylinder_area(3)
        62.83185307179586
        """"""

    def calculate_sector_area(self, angle):
        """"""
        calculate the area of sector based on self.radius and angle
        :param angle: angle of sector, float
        :return: area of sector, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_sector_area(math.pi)
        6.283185307179586
        """"""

    def calculate_annulus_area(self, inner_radius, outer_radius):
        """"""
        calculate the area of annulus based on inner_radius and out_radius
        :param inner_radius: inner radius of sector, float
        :param outer_radius: outer radius of sector, float
        :return: area of annulus, float
        >>> areaCalculator.calculate_annulus_area(2, 3)
        15.707963267948966
        """"""",AreaCalculator,snippet_2,"import math

class AreaCalculator:
    """"""
    This is a class for calculating the area of different shapes, including circle, sphere, cylinder, sector and annulus.
    """"""

    def __init__(self, radius):
        """"""
        Initialize the radius for shapes.
        :param radius: float
        """"""
        self.radius = radius

    def calculate_circle_area(self):
        """"""
        calculate the area of circle based on self.radius
        :return: area of circle, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_circle_area()
        12.566370614359172
        """"""
        return math.pi * (self.radius ** 2)

    def calculate_sphere_area(self):
        """"""
        calculate the area of sphere based on self.radius
        :return: area of sphere, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_sphere_area()
        50.26548245743669
        """"""
        return 4 * math.pi * (self.radius ** 2)

    def calculate_cylinder_area(self, height):
        """"""
        calculate the area of cylinder based on self.radius and height
        :param height: height of cylinder, float
        :return: area of cylinder, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_cylinder_area(3)
        62.83185307179586
        """"""
        return 2 * math.pi * self.radius * (height + self.radius)

    def calculate_sector_area(self, angle):
        """"""
        calculate the area of sector based on self.radius and angle
        :param angle: angle of sector, float
        :return: area of sector, float
        >>> areaCalculator = AreaCalculator(2)
        >>> areaCalculator.calculate_sector_area(math.pi)
        6.283185307179586
        """"""
        return 0.5 * (self.radius ** 2) * angle

    def calculate_annulus_area(self, inner_radius, outer_radius):
        """"""
        calculate the area of annulus based on inner_radius and out_radius
        :param inner_radius: inner radius of sector, float
        :param outer_radius: outer radius of sector, float
        :return: area of annulus, float
        >>> areaCalculator.calculate_annulus_area(2, 3)
        15.707963267948966
        """"""
        return math.pi * (outer_radius ** 2 - inner_radius ** 2)"
2,"class ArgumentParser:
    def __init__(self):
        self.arguments = {}
        self.required = set()
        self.types = {}

    def parse_arguments(self, command_string):
        args = command_string.split()[1:]
        for i in range(len(args)):
            arg = args[i]
            if arg.startswith('--'):
                key_value = arg[2:].split('=')
                if len(key_value) == 2:
                    self.arguments[key_value[0]] = self._convert_type(key_value[0], key_value[1])
                else:
                    self.arguments[key_value[0]] = True
            elif arg.startswith('-'):
                key = arg[1:]
                if i + 1 < len(args) and not args[i + 1].startswith('-'):
                    self.arguments[key] = self._convert_type(key, args[i + 1])
                else:
                    self.arguments[key] = True
        missing_args = self.required - set(self.arguments.keys())
        if missing_args:
            return False, missing_args

        return True, None

    def get_argument(self, key):
        return self.arguments.get(key)

    def add_argument(self, arg, required=False, arg_type=str):
        if required:
            self.required.add(arg)
        self.types[arg] = arg_type

    def _convert_type(self, arg, value):
        try:
            return self.types[arg](value)
        except (ValueError, KeyError):
            return value","class ArgumentParser:
    """"""
    This is a class for parsing command line arguments to a dictionary.
    """"""

    def __init__(self):
        """"""
        Initialize the fields.
        self.arguments is a dict that stores the args in a command line
        self.requried is a set that stores the required arguments
        self.types is a dict that stores type of every arguments.
        >>> parser.arguments
        {'key1': 'value1', 'option1': True}
        >>> parser.required
        {'arg1'}
        >>> parser.types
        {'arg1': 'type1'}
        """"""
        self.arguments = {}
        self.required = set()
        self.types = {}

    def parse_arguments(self, command_string):
        """"""
        Parses the given command line argument string and invoke _convert_type to stores the parsed result in specific type in the arguments dictionary.
        Checks for missing required arguments, if any, and returns False with the missing argument names, otherwise returns True.
        :param command_string: str, command line argument string, formatted like ""python script.py --arg1=value1 -arg2 value2 --option1 -option2""
        :return tuple: (True, None) if parsing is successful, (False, missing_args) if parsing fails,
            where missing_args is a set of the missing argument names which are str.
        >>> parser.parse_arguments(""python script.py --arg1=value1 -arg2 value2 --option1 -option2"")
        (True, None)
        >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
        """"""

    def get_argument(self, key):
        """"""
        Retrieves the value of the specified argument from the arguments dictionary and returns it.
        :param key: str, argument name
        :return: The value of the argument, or None if the argument does not exist.
        >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
        >>> parser.get_argument('arg2')
        'value2'
        """"""

    def add_argument(self, arg, required=False, arg_type=str):
        """"""
        Adds an argument to self.types and self.required.
        Check if it is a required argument and store the argument type.
        If the argument is set as required, it wull be added to the required set.
        The argument type and name are stored in the types dictionary as key-value pairs.
        :param arg: str, argument name
        :param required: bool, whether the argument is required, default is False
        :param arg_type:str, Argument type, default is str
        >>> parser.add_argument('arg1', True, 'int')
        >>> parser.required
        {'arg1'}
        >>> parser.types
        {'arg1': 'int'}
        """"""

    def _convert_type(self, arg, value):
        """"""
        Try to convert the type of input value by searching in self.types.
        :param value: str, the input value in command line
        :return: return corresponding value in self.types if convert successfully, or the input value oherwise
        >>> parser.types
        {'arg1': int}
        >>> parser._convert_type('arg1', '21')
        21
        """"""",ArgumentParser,snippet_3,"class ArgumentParser:
    """"""
    This is a class for parsing command line arguments to a dictionary.
    """"""

    def __init__(self):
        """"""
        Initialize the fields.
        self.arguments is a dict that stores the args in a command line
        self.requried is a set that stores the required arguments
        self.types is a dict that stores type of every arguments.
        >>> parser.arguments
        {'key1': 'value1', 'option1': True}
        >>> parser.required
        {'arg1'}
        >>> parser.types
        {'arg1': 'type1'}
        """"""
        self.arguments = {}
        self.required = set()
        self.types = {}

    def parse_arguments(self, command_string):
        """"""
        Parses the given command line argument string and invoke _convert_type to stores the parsed result in specific type in the arguments dictionary.
        Checks for missing required arguments, if any, and returns False with the missing argument names, otherwise returns True.
        :param command_string: str, command line argument string, formatted like ""python script.py --arg1=value1 -arg2 value2 --option1 -option2""
        :return tuple: (True, None) if parsing is successful, (False, missing_args) if parsing fails,
            where missing_args is a set of the missing argument names which are str.
        >>> parser.parse_arguments(""python script.py --arg1=value1 -arg2 value2 --option1 -option2"")
        (True, None)
        >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
        """"""
        import shlex

        self.arguments = {}
        tokens = shlex.split(command_string)

        i = 0
        while i < len(tokens):
            tok = tokens[i]
            if tok.startswith('-'):
                # handle forms: --arg=value or -arg=value
                if '=' in tok:
                    flag, val = tok.split('=', 1)
                    name = flag.lstrip('-')
                    self.arguments[name] = self._convert_type(name, val)
                    i += 1
                    continue
                # handle flag possibly followed by a value
                name = tok.lstrip('-')
                next_val = None
                if i + 1 < len(tokens) and not tokens[i + 1].startswith('-'):
                    next_val = tokens[i + 1]
                    self.arguments[name] = self._convert_type(name, next_val)
                    i += 2
                    continue
                else:
                    # boolean flag without explicit value
                    # if a type is declared and is not bool, leave as True anyway
                    self.arguments[name] = True
                    i += 1
                    continue
            else:
                # ignore non-flag tokens like ""python"", ""script.py""
                i += 1

        missing = {arg for arg in self.required if arg not in self.arguments}
        if missing:
            return (False, missing)
        return (True, None)

    def get_argument(self, key):
        """"""
        Retrieves the value of the specified argument from the arguments dictionary and returns it.
        :param key: str, argument name
        :return: The value of the argument, or None if the argument does not exist.
        >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
        >>> parser.get_argument('arg2')
        'value2'
        """"""
        return self.arguments.get(key)

    def add_argument(self, arg, required=False, arg_type=str):
        """"""
        Adds an argument to self.types and self.required.
        Check if it is a required argument and store the argument type.
        If the argument is set as required, it wull be added to the required set.
        The argument type and name are stored in the types dictionary as key-value pairs.
        :param arg: str, argument name
        :param required: bool, whether the argument is required, default is False
        :param arg_type:str, Argument type, default is str
        >>> parser.add_argument('arg1', True, 'int')
        >>> parser.required
        {'arg1'}
        >>> parser.types
        {'arg1': 'int'}
        """"""
        if required:
            self.required.add(arg)
        # Store as provided to satisfy examples; conversion will resolve at runtime
        self.types[arg] = arg_type

    def _convert_type(self, arg, value):
        """"""
        Try to convert the type of input value by searching in self.types.
        :param value: str, the input value in command line
        :return: return corresponding value in self.types if convert successfully, or the input value oherwise
        >>> parser.types
        {'arg1': int}
        >>> parser._convert_type('arg1', '21')
        21
        """"""
        t = self.types.get(arg, None)

        # Resolve string type names to actual types if needed
        type_map = {'int': int, 'float': float, 'str': str, 'bool': bool}
        if isinstance(t, str):
            t_resolved = type_map.get(t.lower(), None)
        else:
            t_resolved = t

        if t_resolved is None:
            return value

        try:
            if t_resolved is bool:
                # Handle common boolean string representations
                if isinstance(value, bool):
                    return value
                v = str(value).strip().lower()
                if v in ('1', 'true', 'yes', 'y', 'on'):
                    return True
                if v in ('0', 'false', 'no', 'n', 'off'):
                    return False
                # Fallback: any non-empty string becomes True
                return bool(value)
            # For other types, direct cast
            return t_resolved(value)
        except Exception:
            # On failure, return original value
            return value"
3,"import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result","class ArrangementCalculator:
    """"""
    The Arrangement class provides permutation calculations and selection operations for a given set of data elements.
    """"""

    def __init__(self, datas):
        """"""
        Initializes the ArrangementCalculator object with a list of datas.
        :param datas: List, the data elements to be used for arrangements.
        """"""
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        """"""
        Counts the number of arrangements by choosing m items from n items (permutations).
        If m is not provided or n equals m, returns factorial(n).
        :param n: int, the total number of items.
        :param m: int, the number of items to be chosen (default=None).
        :return: int, the count of arrangements.
        >>> ArrangementCalculator.count(5, 3)
        60

        """"""

    @staticmethod
    def count_all(n):
        """"""
        Counts the total number of all possible arrangements by choosing at least 1 item and at most n items from n items.
        :param n: int, the total number of items.
        :return: int, the count of all arrangements.
        >>> ArrangementCalculator.count_all(4)
        64

        """"""


    def select(self, m=None):
        """"""
        Generates a list of arrangements by selecting m items from the internal datas.
        If m is not provided, selects all items.
        :param m: int, the number of items to be chosen (default=None).
        :return: List, a list of arrangements.
        >>> ac = ArrangementCalculator([1, 2, 3, 4])
        >>> ac.select(2)
        [[1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]]

        """"""


    def select_all(self):
        """"""
        Generates a list of all arrangements by selecting at least 1 item and at most the number of internal datas.
        :return: List, a list of all arrangements.
        >>> ac = ArrangementCalculator([1, 2, 3])
        >>> ac.select_all()
        [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

        """"""


    @staticmethod
    def factorial(n):
        """"""
        Calculates the factorial of a given number.
        :param n: int, the number to calculate the factorial.
        :return: int, the factorial of the given number.
        >>> ArrangementCalculator.factorial(4)
        24

        """"""",ArrangementCalculator,snippet_4,"from itertools import permutations

class ArrangementCalculator:
    """"""
    The Arrangement class provides permutation calculations and selection operations for a given set of data elements.
    """"""

    def __init__(self, datas):
        """"""
        Initializes the ArrangementCalculator object with a list of datas.
        :param datas: List, the data elements to be used for arrangements.
        """"""
        self.datas = list(datas)

    @staticmethod
    def count(n, m=None):
        """"""
        Counts the number of arrangements by choosing m items from n items (permutations).
        If m is not provided or n equals m, returns factorial(n).
        :param n: int, the total number of items.
        :param m: int, the number of items to be chosen (default=None).
        :return: int, the count of arrangements.
        >>> ArrangementCalculator.count(5, 3)
        60

        """"""
        if not isinstance(n, int) or (m is not None and not isinstance(m, int)):
            raise TypeError(""n and m must be integers"")
        if n < 0:
            raise ValueError(""n must be non-negative"")
        if m is None:
            m = n
        if m < 0 or m > n:
            raise ValueError(""m must be between 0 and n inclusive"")
        if m == 0:
            return 1
        if m == n:
            return ArrangementCalculator.factorial(n)
        result = 1
        for k in range(n - m + 1, n + 1):
            result *= k
        return result

    @staticmethod
    def count_all(n):
        """"""
        Counts the total number of all possible arrangements by choosing at least 1 item and at most n items from n items.
        :param n: int, the total number of items.
        :return: int, the count of all arrangements.
        >>> ArrangementCalculator.count_all(4)
        64

        """"""
        if not isinstance(n, int):
            raise TypeError(""n must be an integer"")
        if n < 0:
            raise ValueError(""n must be non-negative"")
        total = 0
        for k in range(1, n + 1):
            total += ArrangementCalculator.count(n, k)
        return total

    def select(self, m=None):
        """"""
        Generates a list of arrangements by selecting m items from the internal datas.
        If m is not provided, selects all items.
        :param m: int, the number of items to be chosen (default=None).
        :return: List, a list of arrangements.
        >>> ac = ArrangementCalculator([1, 2, 3, 4])
        >>> ac.select(2)
        [[1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]]

        """"""
        n = len(self.datas)
        if m is None:
            m = n
        if not isinstance(m, int):
            raise TypeError(""m must be an integer"")
        if m < 0 or m > n:
            raise ValueError(""m must be between 0 and the number of datas inclusive"")
        return [list(p) for p in permutations(self.datas, m)]

    def select_all(self):
        """"""
        Generates a list of all arrangements by selecting at least 1 item and at most the number of internal datas.
        :return: List, a list of all arrangements.
        >>> ac = ArrangementCalculator([1, 2, 3])
        >>> ac.select_all()
        [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

        """"""
        result = []
        n = len(self.datas)
        for k in range(1, n + 1):
            result.extend([list(p) for p in permutations(self.datas, k)])
        return result

    @staticmethod
    def factorial(n):
        """"""
        Calculates the factorial of a given number.
        :param n: int, the number to calculate the factorial.
        :return: int, the factorial of the given number.
        >>> ArrangementCalculator.factorial(4)
        24

        """"""
        if not isinstance(n, int):
            raise TypeError(""n must be an integer"")
        if n < 0:
            raise ValueError(""n must be non-negative"")
        result = 1
        for k in range(2, n + 1):
            result *= k
        return result"
4,"class AssessmentSystem:
    def __init__(self):
        self.students = {}

    def add_student(self, name, grade, major):
        self.students[name] = {'name': name, 'grade': grade, 'major': major, 'courses': {}}

    def add_course_score(self, name, course, score):
        if name in self.students:
            self.students[name]['courses'][course] = score

    def get_gpa(self, name):
        if name in self.students and self.students[name]['courses']:
            return sum(self.students[name]['courses'].values()) / len(self.students[name]['courses'])
        else:
            return None

    def get_all_students_with_fail_course(self):
        students = []
        for name, student in self.students.items():
            for course, score in student['courses'].items():
                if score < 60:
                    students.append(name)
                    break
        return students

    def get_course_average(self, course):
        total = 0
        count = 0
        for student in self.students.values():
            if course in student['courses']:
                score = student['courses'][course]
                if score is not None:
                    total += score
                    count += 1
        return total / count if count > 0 else None

    def get_top_student(self):
        top_student = None
        top_gpa = 0
        for name, student in self.students.items():
            gpa = self.get_gpa(name)
            if gpa is not None and gpa > top_gpa:
                top_gpa = gpa
                top_student = name
        return top_student","class AssessmentSystem:
    """"""
    This is a class as an student assessment system, which supports add student, add course score, calculate GPA, and other functions for students and courses.
    """"""

    def __init__(self):
        """"""
        Initialize the students dict in assessment system.
        """"""
        self.students = {}

    def add_student(self, name, grade, major):
        """"""
        Add a new student into self.students dict
        :param name: str, student name
        :param grade: int, student grade
        :param major: str, student major
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.students
        {'student 1': {'name': 'student 1', 'grade': 3, 'major': 'SE', 'courses': {}}}
        """"""

    def add_course_score(self, name, course, score):
        """"""
        Add score of specific course for student in self.students
        :param name: str, student name
        :param cource: str, cource name
        :param score: int, cource score
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.add_course_score('student 1', 'math', 94)
        >>> system.students
        {'student 1': {'name': 'student 1', 'grade': 3, 'major': 'SE', 'courses': {'math': 94}}}
        """"""

    def get_gpa(self, name):
        """"""
        Get average grade of one student.
        :param name: str, student name
        :return: if name is in students and this students have courses grade, return average grade(float)
                    or None otherwise
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.add_course_score('student 1', 'math', 94)
        >>> system.add_course_score('student 1', 'Computer Network', 92)
        >>> system.get_gpa('student 1')
        93.0

        """"""

    def get_all_students_with_fail_course(self):
        """"""
        Get all students who have any score blow 60
        :return: list of str ,student name
        >>> system.add_course_score('student 1', 'Society', 59)
        >>> system.get_all_students_with_fail_course()
        ['student 1']
        """"""

    def get_course_average(self, course):
        """"""
        Get the average score of a specific course.
        :param course: str, course name
        :return: float, average scores of this course if anyone have score of this course, or None if nobody have records.
        """"""

    def get_top_student(self):
        """"""
        Calculate every student's gpa with get_gpa method, and find the student with highest gpa
        :return: str, name of student whose gpa is highest
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.add_student('student 2', 2, 'SE')
        >>> system.add_course_score('student 1', 'Computer Network', 92)
        >>> system.add_course_score('student 2', 'Computer Network', 97)
        >>> system.get_top_student()
        'student 2'
        """"""",AssessmentSystem,snippet_5,"class AssessmentSystem:
    """"""
    This is a class as an student assessment system, which supports add student, add course score, calculate GPA, and other functions for students and courses.
    """"""

    def __init__(self):
        """"""
        Initialize the students dict in assessment system.
        """"""
        self.students = {}

    def add_student(self, name, grade, major):
        """"""
        Add a new student into self.students dict
        :param name: str, student name
        :param grade: int, student grade
        :param major: str, student major
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.students
        {'student 1': {'name': 'student 1', 'grade': 3, 'major': 'SE', 'courses': {}}}
        """"""
        if name not in self.students:
            self.students[name] = {
                'name': name,
                'grade': grade,
                'major': major,
                'courses': {}
            }
        else:
            # Update existing student's info but keep courses
            self.students[name]['name'] = name
            self.students[name]['grade'] = grade
            self.students[name]['major'] = major
            if 'courses' not in self.students[name] or not isinstance(self.students[name]['courses'], dict):
                self.students[name]['courses'] = {}

    def add_course_score(self, name, course, score):
        """"""
        Add score of specific course for student in self.students
        :param name: str, student name
        :param cource: str, cource name
        :param score: int, cource score
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.add_course_score('student 1', 'math', 94)
        >>> system.students
        {'student 1': {'name': 'student 1', 'grade': 3, 'major': 'SE', 'courses': {'math': 94}}}
        """"""
        if name in self.students:
            if 'courses' not in self.students[name] or not isinstance(self.students[name]['courses'], dict):
                self.students[name]['courses'] = {}
            self.students[name]['courses'][course] = score

    def get_gpa(self, name):
        """"""
        Get average grade of one student.
        :param name: str, student name
        :return: if name is in students and this students have courses grade, return average grade(float)
                    or None otherwise
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.add_course_score('student 1', 'math', 94)
        >>> system.add_course_score('student 1', 'Computer Network', 92)
        >>> system.get_gpa('student 1')
        93.0

        """"""
        student = self.students.get(name)
        if not student:
            return None
        courses = student.get('courses', {})
        if not courses:
            return None
        total = sum(courses.values())
        count = len(courses)
        return total / count

    def get_all_students_with_fail_course(self):
        """"""
        Get all students who have any score blow 60
        :return: list of str ,student name
        >>> system.add_course_score('student 1', 'Society', 59)
        >>> system.get_all_students_with_fail_course()
        ['student 1']
        """"""
        result = []
        for name, info in self.students.items():
            courses = info.get('courses', {})
            if any(score < 60 for score in courses.values()):
                result.append(name)
        return result

    def get_course_average(self, course):
        """"""
        Get the average score of a specific course.
        :param course: str, course name
        :return: float, average scores of this course if anyone have score of this course, or None if nobody have records.
        """"""
        scores = []
        for info in self.students.values():
            courses = info.get('courses', {})
            if course in courses:
                scores.append(courses[course])
        if not scores:
            return None
        return sum(scores) / len(scores)

    def get_top_student(self):
        """"""
        Calculate every student's gpa with get_gpa method, and find the student with highest gpa
        :return: str, name of student whose gpa is highest
        >>> system.add_student('student 1', 3, 'SE')
        >>> system.add_student('student 2', 2, 'SE')
        >>> system.add_course_score('student 1', 'Computer Network', 92)
        >>> system.add_course_score('student 2', 'Computer Network', 97)
        >>> system.get_top_student()
        'student 2'
        """"""
        top_name = None
        top_gpa = None
        for name in self.students:
            gpa = self.get_gpa(name)
            if gpa is None:
                continue
            if top_gpa is None or gpa > top_gpa:
                top_gpa = gpa
                top_name = name
        return top_name"
5,"class AutomaticGuitarSimulator:
    def __init__(self, text) -> None:
        self.play_text = text

    def interpret(self, display=False):
        if not self.play_text.strip():
            return []
        else:
            play_list = []
            play_segs = self.play_text.split("" "")
            for play_seg in play_segs:
                pos = 0
                for ele in play_seg:
                    if ele.isalpha():
                        pos += 1
                        continue
                    break
                play_chord = play_seg[0:pos]
                play_value = play_seg[pos:]
                play_list.append({'Chord': play_chord, 'Tune': play_value})
                if display:
                    self.display(play_chord, play_value)
            return play_list

    def display(self, key, value):
        return ""Normal Guitar Playing -- Chord: %s, Play Tune: %s"" % (key, value)","'''
# This class is an automatic guitar simulator that can interpret and play based on the input guitar sheet music.

class AutomaticGuitarSimulator:
    def __init__(self, text) -> None:
        """"""
        Initialize the score to be played
        :param text:str, score to be played
        """"""
        self.play_text = text

    def interpret(self, display=False):
        """"""
        Interpret the music score to be played
        :param display:Bool, representing whether to print the interpreted score
        :return: list of dict, The dict includes two fields, Chord and Tune, which are letters and numbers, respectively. If the input is empty or contains only whitespace, an empty list is returned.
        >>> context = AutomaticGuitarSimulator(""C53231323 Em43231323 F43231323 G63231323"")
        >>> play_list = context.interpret(display = False)
        [{'Chord': 'C', 'Tune': '53231323'}, {'Chord': 'Em', 'Tune': '43231323'}, {'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]

        """"""


    def display(self, key, value):
        """"""
        Print out chord and play tune with following format: Normal Guitar Playing -- Chord: %s, Play Tune: %s
        :param key:str, chord
        :param value:str, play tune
        :return: str
        >>> context = AutomaticGuitarSimulator(""C53231323 Em43231323 F43231323 G63231323"")
        >>> context.display(""C"", ""53231323"")
        Normal Guitar Playing -- Chord: C, Play Tune: 53231323

        """"""
'''",AutomaticGuitarSimulator,snippet_6,"class AutomaticGuitarSimulator:
    def __init__(self, text) -> None:
        """"""
        Initialize the score to be played
        :param text:str, score to be played
        """"""
        self.play_text = text

    def interpret(self, display=False):
        """"""
        Interpret the music score to be played
        :param display:Bool, representing whether to print the interpreted score
        :return: list of dict, The dict includes two fields, Chord and Tune, which are letters and numbers, respectively. If the input is empty or contains only whitespace, an empty list is returned.
        >>> context = AutomaticGuitarSimulator(""C53231323 Em43231323 F43231323 G63231323"")
        >>> play_list = context.interpret(display = False)
        [{'Chord': 'C', 'Tune': '53231323'}, {'Chord': 'Em', 'Tune': '43231323'}, {'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]

        """"""
        if not self.play_text or self.play_text.strip() == """":
            return []
        result = []
        for token in self.play_text.split():
            if not token:
                continue
            i = 0
            n = len(token)
            while i < n and token[i].isalpha():
                i += 1
            chord = token[:i]
            tune = token[i:]
            item = {""Chord"": chord, ""Tune"": tune}
            result.append(item)
            if display:
                self.display(chord, tune)
        return result

    def display(self, key, value):
        """"""
        Print out chord and play tune with following format: Normal Guitar Playing -- Chord: %s, Play Tune: %s
        :param key:str, chord
        :param value:str, play tune
        :return: str
        >>> context = AutomaticGuitarSimulator(""C53231323 Em43231323 F43231323 G63231323"")
        >>> context.display(""C"", ""53231323"")
        Normal Guitar Playing -- Chord: C, Play Tune: 53231323

        """"""
        s = f""Normal Guitar Playing -- Chord: {key}, Play Tune: {value}""
        print(s)
        return s"
6,"class AvgPartition:
    def __init__(self, lst, limit):
        self.lst = lst
        self.limit = limit

    def setNum(self):
        size = len(self.lst) // self.limit
        remainder = len(self.lst) % self.limit
        return size, remainder

        
    def get(self, index):
        size, remainder = self.setNum()
        start = index * size + min(index, remainder)
        end = start + size
        if index + 1 <= remainder:
            end += 1
        return self.lst[start:end]","class AvgPartition:
    """"""
    This is a class that partitions the given list into different blocks by specifying the number of partitions, with each block having a uniformly distributed length.
    """"""

    def __init__(self, lst, limit):
        """"""
        Initialize the class with the given list and the number of partitions, and check if the number of partitions is greater than 0.
        """"""
        self.lst = lst
        self.limit = limit

    def setNum(self):
        """"""
        Calculate the size of each block and the remainder of the division.
        :return: the size of each block and the remainder of the division, tuple.
        >>> a = AvgPartition([1, 2, 3, 4], 2)
        >>> a.setNum()
        (2, 0)

        """"""


    def get(self, index):
        """"""
        calculate the size of each block and the remainder of the division, and calculate the corresponding start and end positions based on the index of the partition.
        :param index: the index of the partition,int.
        :return: the corresponding block, list.
        >>> a = AvgPartition([1, 2, 3, 4], 2)
        >>> a.get(0)
        [1, 2]

        """"""",AvgPartition,snippet_7,"class AvgPartition:
    """"""
    This is a class that partitions the given list into different blocks by specifying the number of partitions, with each block having a uniformly distributed length.
    """"""

    def __init__(self, lst, limit):
        """"""
        Initialize the class with the given list and the number of partitions, and check if the number of partitions is greater than 0.
        """"""
        if limit <= 0:
            raise ValueError(""limit must be greater than 0"")
        self.lst = lst
        self.limit = limit

    def setNum(self):
        """"""
        Calculate the size of each block and the remainder of the division.
        :return: the size of each block and the remainder of the division, tuple.
        >>> a = AvgPartition([1, 2, 3, 4], 2)
        >>> a.setNum()
        (2, 0)

        """"""
        n = len(self.lst)
        base = n // self.limit
        rem = n % self.limit
        return base, rem

    def get(self, index):
        """"""
        calculate the size of each block and the remainder of the division, and calculate the corresponding start and end positions based on the index of the partition.
        :param index: the index of the partition,int.
        :return: the corresponding block, list.
        >>> a = AvgPartition([1, 2, 3, 4], 2)
        >>> a.get(0)
        [1, 2]

        """"""
        if not (0 <= index < self.limit):
            raise IndexError(""index out of range"")
        base, rem = self.setNum()
        if index < rem:
            size = base + 1
            start = index * size
        else:
            size = base
            start = rem * (base + 1) + (index - rem) * base
        end = start + size
        return self.lst[start:end]"
7,"class BalancedBrackets:
    def __init__(self, expr):
        self.stack = []
        self.left_brackets = [""("", ""{"", ""[""]
        self.right_brackets = ["")"", ""}"", ""]""]
        self.expr = expr

    def clear_expr(self):
        self.expr = ''.join(c for c in self.expr if (c in self.left_brackets or c in self.right_brackets))

    def check_balanced_brackets(self):
        self.clear_expr()
        for Brkt in self.expr:
            if Brkt in self.left_brackets:
                self.stack.append(Brkt)
            else:
                Current_Brkt = self.stack.pop()
                if Current_Brkt == ""("":
                    if Brkt != "")"":
                        return False
                if Current_Brkt == ""{"":
                    if Brkt != ""}"":
                        return False
                if Current_Brkt == ""["":
                    if Brkt != ""]"":
                        return False
        if self.stack:
            return False
        return True","class BalancedBrackets:
    """"""
    This is a class that checks for bracket matching
    """"""

    def __init__(self, expr):
        """"""
        Initializes the class with an expression.
        :param expr: The expression to check for balanced brackets,str.
        """"""
        self.stack = []
        self.left_brackets = [""("", ""{"", ""[""]
        self.right_brackets = ["")"", ""}"", ""]""]
        self.expr = expr

    def clear_expr(self):
        """"""
        Clears the expression of all characters that are not brackets.
        >>> b = BalancedBrackets(""a(b)c"")
        >>> b.clear_expr()
        >>> b.expr
        '()'

        """"""

    def check_balanced_brackets(self):
        """"""
        Checks if the expression has balanced brackets.
        :return: True if the expression has balanced brackets, False otherwise.
        >>> b = BalancedBrackets(""a(b)c"")
        >>> b.check_balanced_brackets()
        True

        """"""",BalancedBrackets,snippet_8,"class BalancedBrackets:
    """"""
    This is a class that checks for bracket matching
    """"""

    def __init__(self, expr):
        """"""
        Initializes the class with an expression.
        :param expr: The expression to check for balanced brackets,str.
        """"""
        self.stack = []
        self.left_brackets = [""("", ""{"", ""[""]
        self.right_brackets = ["")"", ""}"", ""]""]
        self.expr = expr

    def clear_expr(self):
        """"""
        Clears the expression of all characters that are not brackets.
        >>> b = BalancedBrackets(""a(b)c"")
        >>> b.clear_expr()
        >>> b.expr
        '()'

        """"""
        allowed = set(self.left_brackets + self.right_brackets)
        self.expr = """".join(ch for ch in self.expr if ch in allowed)

    def check_balanced_brackets(self):
        """"""
        Checks if the expression has balanced brackets.
        :return: True if the expression has balanced brackets, False otherwise.
        >>> b = BalancedBrackets(""a(b)c"")
        >>> b.check_balanced_brackets()
        True

        """"""
        # Do not mutate self.expr here; work on a filtered copy
        allowed = set(self.left_brackets + self.right_brackets)
        filtered = """".join(ch for ch in self.expr if ch in allowed)

        self.stack = []
        matching = {')': '(', '}': '{', ']': '['}

        for ch in filtered:
            if ch in self.left_brackets:
                self.stack.append(ch)
            else:
                if not self.stack or self.stack[-1] != matching.get(ch):
                    return False
                self.stack.pop()

        return len(self.stack) == 0"
8,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        if amount < 0:
            raise ValueError(""Invalid amount"")
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount < 0:
            raise ValueError(""Invalid amount"")
        if amount > self.balance:
            raise ValueError(""Insufficient balance."")
        self.balance -= amount
        return self.balance

    def view_balance(self):
        return self.balance

    def transfer(self, other_account, amount):
        self.withdraw(amount)
        other_account.deposit(amount)","class BankAccount:
    """"""
    This is a class as a bank account system, which supports deposit money, withdraw money, view balance, and transfer money.
    """"""

    def __init__(self, balance=0):
        """"""
        Initializes a bank account object with an attribute balance, default value is 0.
        """"""
        self.balance = balance

    def deposit(self, amount):
        """"""
        Deposits a certain amount into the account, increasing the account balance, return the current account balance.
        If amount is negative, raise a ValueError(""Invalid amount"").
        :param amount: int
        """"""

    def withdraw(self, amount):
        """"""
        Withdraws a certain amount from the account, decreasing the account balance, return the current account balance.
        If amount is negative, raise a ValueError(""Invalid amount"").
        If the withdrawal amount is greater than the account balance, raise a ValueError(""Insufficient balance."").
        :param amount: int
        """"""

    def view_balance(self):
        """"""
        Return the account balance.
        """"""

    def transfer(self, other_account, amount):
        """"""
        Transfers a certain amount from the current account to another account.
        :param other_account: BankAccount
        :param amount: int
        >>> account1 = BankAccount()
        >>> account2 = BankAccount()
        >>> account1.deposit(1000)
        >>> account1.transfer(account2, 300)
        account1.balance = 700 account2.balance = 300
        """"""",BankAccount,snippet_9,"class BankAccount:
    """"""
    This is a class as a bank account system, which supports deposit money, withdraw money, view balance, and transfer money.
    """"""

    def __init__(self, balance=0):
        """"""
        Initializes a bank account object with an attribute balance, default value is 0.
        """"""
        self.balance = balance

    def deposit(self, amount):
        """"""
        Deposits a certain amount into the account, increasing the account balance, return the current account balance.
        If amount is negative, raise a ValueError(""Invalid amount"").
        :param amount: int
        """"""
        if amount < 0:
            raise ValueError(""Invalid amount"")
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        """"""
        Withdraws a certain amount from the account, decreasing the account balance, return the current account balance.
        If amount is negative, raise a ValueError(""Invalid amount"").
        If the withdrawal amount is greater than the account balance, raise a ValueError(""Insufficient balance."").
        :param amount: int
        """"""
        if amount < 0:
            raise ValueError(""Invalid amount"")
        if amount > self.balance:
            raise ValueError(""Insufficient balance."")
        self.balance -= amount
        return self.balance

    def view_balance(self):
        """"""
        Return the account balance.
        """"""
        return self.balance

    def transfer(self, other_account, amount):
        """"""
        Transfers a certain amount from the current account to another account.
        :param other_account: BankAccount
        :param amount: int
        >>> account1 = BankAccount()
        >>> account2 = BankAccount()
        >>> account1.deposit(1000)
        >>> account1.transfer(account2, 300)
        account1.balance = 700 account2.balance = 300
        """"""
        if not isinstance(other_account, BankAccount):
            raise TypeError(""Invalid account"")
        if amount < 0:
            raise ValueError(""Invalid amount"")
        if amount > self.balance:
            raise ValueError(""Insufficient balance."")
        self.withdraw(amount)
        other_account.deposit(amount)
        return self.balance"
9,"class BigNumCalculator:
    @staticmethod
    def add(num1, num2):
        max_length = max(len(num1), len(num2))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)

        carry = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            digit_sum = int(num1[i]) + int(num2[i]) + carry
            carry = digit_sum // 10
            digit = digit_sum % 10
            result.insert(0, str(digit))

        if carry > 0:
            result.insert(0, str(carry))

        return ''.join(result)

    @staticmethod
    def subtract(num1, num2):

        if len(num1) < len(num2):
            num1, num2 = num2, num1
            negative = True
        elif len(num1) > len(num2):
            negative = False
        else:
            if num1 < num2:
                num1, num2 = num2, num1
                negative = True
            else:
                negative = False

        max_length = max(len(num1), len(num2))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)

        borrow = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            digit_diff = int(num1[i]) - int(num2[i]) - borrow

            if digit_diff < 0:
                digit_diff += 10
                borrow = 1
            else:
                borrow = 0

            result.insert(0, str(digit_diff))

        while len(result) > 1 and result[0] == '0':
            result.pop(0)

        if negative:
            result.insert(0, '-')

        return ''.join(result)

    @staticmethod
    def multiply(num1, num2):
        len1, len2 = len(num1), len(num2)
        result = [0] * (len1 + len2)

        for i in range(len1 - 1, -1, -1):
            for j in range(len2 - 1, -1, -1):
                mul = int(num1[i]) * int(num2[j])
                p1, p2 = i + j, i + j + 1
                total = mul + result[p2]

                result[p1] += total // 10
                result[p2] = total % 10

        start = 0
        while start < len(result) - 1 and result[start] == 0:
            start += 1

        return ''.join(map(str, result[start:]))","class BigNumCalculator:
    """"""
    This is a class that implements big number calculations, including adding, subtracting and multiplying.
    """"""

    @staticmethod
    def add(num1, num2):
        """"""
        Adds two big numbers.
        :param num1: The first number to add,str.
        :param num2: The second number to add,str.
        :return: The sum of the two numbers,str.
        >>> bigNum = BigNumCalculator()
        >>> bigNum.add(""12345678901234567890"", ""98765432109876543210"")
        '111111111011111111100'

        """"""

    @staticmethod
    def subtract(num1, num2):
        """"""
        Subtracts two big numbers.
        :param num1: The first number to subtract,str.
        :param num2: The second number to subtract,str.
        :return: The difference of the two numbers,str.
        >>> bigNum = BigNumCalculator()
        >>> bigNum.subtract(""12345678901234567890"", ""98765432109876543210"")
        '-86419753208641975320'

        """"""

    @staticmethod
    def multiply(num1, num2):
        """"""
        Multiplies two big numbers.
        :param num1: The first number to multiply,str.
        :param num2: The second number to multiply,str.
        :return: The product of the two numbers,str.
        >>> bigNum = BigNumCalculator()
        >>> bigNum.multiply(""12345678901234567890"", ""98765432109876543210"")
        '1219326311370217952237463801111263526900'

        """"""",BigNumCalculator,snippet_10,"class BigNumCalculator:
    """"""
    This is a class that implements big number calculations, including adding, subtracting and multiplying.
    """"""

    @staticmethod
    def add(num1, num2):
        """"""
        Adds two big numbers.
        :param num1: The first number to add,str.
        :param num2: The second number to add,str.
        :return: The sum of the two numbers,str.
        >>> bigNum = BigNumCalculator()
        >>> bigNum.add(""12345678901234567890"", ""98765432109876543210"")
        '111111111011111111100'

        """"""
        return str(int(num1) + int(num2))

    @staticmethod
    def subtract(num1, num2):
        """"""
        Subtracts two big numbers.
        :param num1: The first number to subtract,str.
        :param num2: The second number to subtract,str.
        :return: The difference of the two numbers,str.
        >>> bigNum = BigNumCalculator()
        >>> bigNum.subtract(""12345678901234567890"", ""98765432109876543210"")
        '-86419753208641975320'

        """"""
        return str(int(num1) - int(num2))

    @staticmethod
    def multiply(num1, num2):
        """"""
        Multiplies two big numbers.
        :param num1: The first number to multiply,str.
        :param num2: The second number to multiply,str.
        :return: The product of the two numbers,str.
        >>> bigNum = BigNumCalculator()
        >>> bigNum.multiply(""12345678901234567890"", ""98765432109876543210"")
        '1219326311370217952237463801111263526900'

        """"""
        return str(int(num1) * int(num2))"
10,"class BinaryDataProcessor:
    def __init__(self, binary_string):
        self.binary_string = binary_string
        self.clean_non_binary_chars()

    def clean_non_binary_chars(self):
        self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))

    def calculate_binary_info(self):
        zeroes_count = self.binary_string.count('0')
        ones_count = self.binary_string.count('1')
        total_length = len(self.binary_string)

        zeroes_percentage = (zeroes_count / total_length)
        ones_percentage = (ones_count / total_length)

        return {
            'Zeroes': zeroes_percentage,
            'Ones': ones_percentage,
            'Bit length': total_length
        }

    def convert_to_ascii(self):
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('ascii')

    def convert_to_utf8(self):
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('utf-8')","class BinaryDataProcessor:
    """"""
    This is a class used to process binary data, which includes functions such as clearing non 0 or 1 characters, counting binary string information, and converting to corresponding strings based on different encoding methods.
    """"""

    def __init__(self, binary_string):
        """"""
        Initialize the class with a binary string and clean it by removing all non 0 or 1 characters.
        """"""
        self.binary_string = binary_string
        self.clean_non_binary_chars()

    def clean_non_binary_chars(self):
        """"""
        Clean the binary string by removing all non 0 or 1 characters.
        >>> bdp = BinaryDataProcessor(""01101000daf3e4r01100101011011000110110001101111"")
        >>> bdp.clean_non_binary_chars()
        >>> bdp.binary_string
        '0110100001100101011011000110110001101111'

        """"""

    def calculate_binary_info(self):
        """"""
        Calculate the binary string information, including the percentage of 0 and 1, and the total length of the binary string.
        >>> bdp = BinaryDataProcessor(""0110100001100101011011000110110001101111"")
        >>> bdp.calculate_binary_info()
        {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}

        """"""

    def convert_to_ascii(self):
        """"""
        Convert the binary string to ascii string.
        >>> bdp = BinaryDataProcessor(""0110100001100101011011000110110001101111"")
        >>> bdp.convert_to_ascii()
        'hello'

        """"""

    def convert_to_utf8(self):
        """"""
        Convert the binary string to utf-8 string.
        >>> bdp = BinaryDataProcessor(""0110100001100101011011000110110001101111"")
        >>> bdp.convert_to_utf8()
        'hello'

        """"""",BinaryDataProcessor,snippet_11,"class BinaryDataProcessor:
    """"""
    This is a class used to process binary data, which includes functions such as clearing non 0 or 1 characters, counting binary string information, and converting to corresponding strings based on different encoding methods.
    """"""

    def __init__(self, binary_string):
        """"""
        Initialize the class with a binary string and clean it by removing all non 0 or 1 characters.
        """"""
        self.binary_string = binary_string
        self.clean_non_binary_chars()

    def clean_non_binary_chars(self):
        """"""
        Clean the binary string by removing all non 0 or 1 characters.
        >>> bdp = BinaryDataProcessor(""01101000daf3e4r01100101011011000110110001101111"")
        >>> bdp.clean_non_binary_chars()
        >>> bdp.binary_string
        '0110100001100101011011000110110001101111'

        """"""
        self.binary_string = """".join(ch for ch in self.binary_string if ch in (""0"", ""1""))

    def calculate_binary_info(self):
        """"""
        Calculate the binary string information, including the percentage of 0 and 1, and the total length of the binary string.
        >>> bdp = BinaryDataProcessor(""0110100001100101011011000110110001101111"")
        >>> bdp.calculate_binary_info()
        {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}

        """"""
        total_len = len(self.binary_string)
        if total_len == 0:
            return {""Zeroes"": 0.0, ""Ones"": 0.0, ""Bit length"": 0}
        zeros = self.binary_string.count(""0"")
        ones = self.binary_string.count(""1"")
        return {
            ""Zeroes"": round(zeros / total_len, 3),
            ""Ones"": round(ones / total_len, 3),
            ""Bit length"": total_len,
        }

    def convert_to_ascii(self):
        """"""
        Convert the binary string to ascii string.
        >>> bdp = BinaryDataProcessor(""0110100001100101011011000110110001101111"")
        >>> bdp.convert_to_ascii()
        'hello'

        """"""
        if not self.binary_string:
            return """"
        bytes_len = len(self.binary_string) // 8
        if bytes_len == 0:
            return """"
        byte_values = [
            int(self.binary_string[i * 8 : i * 8 + 8], 2) for i in range(bytes_len)
        ]
        return bytes(byte_values).decode(""ascii"")

    def convert_to_utf8(self):
        """"""
        Convert the binary string to utf-8 string.
        >>> bdp = BinaryDataProcessor(""0110100001100101011011000110110001101111"")
        >>> bdp.convert_to_utf8()
        'hello'

        """"""
        if not self.binary_string:
            return """"
        bytes_len = len(self.binary_string) // 8
        if bytes_len == 0:
            return """"
        byte_values = [
            int(self.binary_string[i * 8 : i * 8 + 8], 2) for i in range(bytes_len)
        ]
        return bytes(byte_values).decode(""utf-8"")"
11,"class BitStatusUtil:
    @staticmethod
    def add(states, stat):
        BitStatusUtil.check([states, stat])
        return states | stat

    @staticmethod
    def has(states, stat):
        BitStatusUtil.check([states, stat])
        return (states & stat) == stat

    @staticmethod
    def remove(states, stat):
        BitStatusUtil.check([states, stat])
        if BitStatusUtil.has(states, stat):
            return states ^ stat
        return states

    @staticmethod
    def check(args):
        for arg in args:
            if arg < 0:
                raise ValueError(f""{arg} must be greater than or equal to 0"")
            if arg % 2 != 0:
                raise ValueError(f""{arg} not even"")","class BitStatusUtil:
    """"""
    This is a utility class that provides methods for manipulating and checking status using bitwise operations.
    """"""

    @staticmethod
    def add(states, stat):
        """"""
        Add a status to the current status,and check the parameters wheather they are legal.
        :param states: Current status,int.
        :param stat: Status to be added,int.
        :return: The status after adding the status,int.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.add(2,4)
        6

        """"""

    @staticmethod
    def has(states, stat):
        """"""
        Check if the current status contains the specified status,and check the parameters wheather they are legal.
        :param states: Current status,int.
        :param stat: Specified status,int.
        :return: True if the current status contains the specified status,otherwise False,bool.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.has(6,2)
        True

        """"""

    @staticmethod
    def remove(states, stat):
        """"""
        Remove the specified status from the current status,and check the parameters wheather they are legal.
        :param states: Current status,int.
        :param stat: Specified status,int.
        :return: The status after removing the specified status,int.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.remove(6,2)
        4

        """"""

    @staticmethod
    def check(args):
        """"""
        Check if the parameters are legal, args must be greater than or equal to 0 and must be even,if not,raise ValueError.
        :param args: Parameters to be checked,list.
        :return: None.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.check([2,3,4])
        Traceback (most recent call last):
        ...
        ValueError: 3 not even
        """"""",BitStatusUtil,snippet_12,"class BitStatusUtil:
    """"""
    This is a utility class that provides methods for manipulating and checking status using bitwise operations.
    """"""

    @staticmethod
    def add(states, stat):
        """"""
        Add a status to the current status,and check the parameters wheather they are legal.
        :param states: Current status,int.
        :param stat: Status to be added,int.
        :return: The status after adding the status,int.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.add(2,4)
        6

        """"""
        BitStatusUtil.check([states, stat])
        return states | stat

    @staticmethod
    def has(states, stat):
        """"""
        Check if the current status contains the specified status,and check the parameters wheather they are legal.
        :param states: Current status,int.
        :param stat: Specified status,int.
        :return: True if the current status contains the specified status,otherwise False,bool.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.has(6,2)
        True

        """"""
        BitStatusUtil.check([states, stat])
        return (states & stat) == stat

    @staticmethod
    def remove(states, stat):
        """"""
        Remove the specified status from the current status,and check the parameters wheather they are legal.
        :param states: Current status,int.
        :param stat: Specified status,int.
        :return: The status after removing the specified status,int.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.remove(6,2)
        4

        """"""
        BitStatusUtil.check([states, stat])
        return states & (~stat)

    @staticmethod
    def check(args):
        """"""
        Check if the parameters are legal, args must be greater than or equal to 0 and must be even,if not,raise ValueError.
        :param args: Parameters to be checked,list.
        :return: None.
        >>> bit_status_util = BitStatusUtil()
        >>> bit_status_util.check([2,3,4])
        Traceback (most recent call last):
        ...
        ValueError: 3 not even
        """"""
        for a in args:
            if not isinstance(a, int):
                raise ValueError(f""{a} not int"")
            if a < 0:
                raise ValueError(f""{a} less than 0"")
            if a % 2 != 0:
                raise ValueError(f""{a} not even"")"
12,"import random


class BlackjackGame:
    def __init__(self):
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        deck = []
        suits = ['S', 'C', 'D', 'H']
        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        for suit in suits:
            for rank in ranks:
                deck.append(rank + suit)
        random.shuffle(deck)
        return deck

    def calculate_hand_value(self, hand):
        value = 0
        num_aces = 0
        for card in hand:
            rank = card[:-1]
            if rank.isdigit():
                value += int(rank)
            elif rank in ['J', 'Q', 'K']:
                value += 10
            elif rank == 'A':
                value += 11
                num_aces += 1
        while value > 21 and num_aces > 0:
            value -= 10
            num_aces -= 1
        return value

    def check_winner(self, player_hand, dealer_hand):
        player_value = self.calculate_hand_value(player_hand)
        dealer_value = self.calculate_hand_value(dealer_hand)
        if player_value > 21 and dealer_value > 21:
            if player_value <= dealer_value:
                return 'Player wins'
            else:
                return 'Dealer wins'
        elif player_value > 21:
            return 'Dealer wins'
        elif dealer_value > 21:
            return 'Player wins'
        else:
            if player_value <= dealer_value:
                return 'Dealer wins'
            else:
                return 'Player wins'","class BlackjackGame:
    """"""
    This is a class representing a game of blackjack, which includes creating a deck, calculating the value of a hand, and determine the winner based on the hand values of the player and dealer.
    """"""

    def __init__(self):
        """"""
        Initialize the Blackjack Game with the attribute deck, player_hand and dealer_hand.
        While initializing deck attribute, call the create_deck method to generate.
        The deck stores 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].
        player_hand is a list which stores player's hand cards.
        dealer_hand is is a list which stores dealer's hand cards.
        """"""
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        """"""
        Create a deck of 52 cards, which stores 52 rondom order poker with the Jokers removed.
        :return: a list of 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].
        >>> black_jack_game = BlackjackGame()
        >>> black_jack_game.create_deck()
        ['QD', '9D', 'JC', 'QH', '2S', 'JH', '7D', '6H', '9S', '5C', '7H', 'QS', '5H',
        '6C', '7C', '3D', '10C', 'AD', '4C', '5D', 'AH', '2D', 'QC', 'KH', '9C', '9H',
        '4H', 'JS', '6S', '8H', '8C', '4S', '3H', '10H', '7S', '6D', '3C', 'KC', '3S',
        '2H', '10D', 'KS', '4D', 'AC', '10S', '2C', 'KD', '5S', 'JD', '8S', 'AS', '8D']
        """"""

    def calculate_hand_value(self, hand):
        """"""
        Calculate the value of the poker cards stored in hand list according to the rules of the Blackjack Game.
        If the card is a digit, its value is added to the total hand value.
        Value of J, Q, or K is 10, while Aces are worth 11.
        If the total hand value exceeds 21 and there are Aces present, one Ace is treated as having a value of 1 instead of 11,
        until the hand value is less than or equal to 21, or all Aces have been counted as value of 1.
        :param hand: list
        :return: the value of the poker cards stored in hand list, a number.
        >>> black_jack_game.calculate_hand_value(['QD', '9D', 'JC', 'QH', 'AS'])
        40
        """"""

    def check_winner(self, player_hand, dealer_hand):
        """"""
        Determines the winner of a game by comparing the hand values of the player and dealer.
        rule:
        If both players have hand values that are equal to or less than 21, the winner is the one whose hand value is closer to 21.
        Otherwise, the winner is the one with the lower hand value.
        :param player_hand: list
        :param dealer_hand: list
        :return: the result of the game, only two certain str: 'Dealer wins' or 'Player wins'
        >>> black_jack_game.check_winner(['QD', '9D', 'JC', 'QH', 'AS'], ['QD', '9D', 'JC', 'QH', '2S'])
        'Player wins'
        """"""",BlackjackGame,snippet_13,"class BlackjackGame:
    """"""
    This is a class representing a game of blackjack, which includes creating a deck, calculating the value of a hand, and determine the winner based on the hand values of the player and dealer.
    """"""

    def __init__(self):
        """"""
        Initialize the Blackjack Game with the attribute deck, player_hand and dealer_hand.
        While initializing deck attribute, call the create_deck method to generate.
        The deck stores 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].
        player_hand is a list which stores player's hand cards.
        dealer_hand is is a list which stores dealer's hand cards.
        """"""
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        """"""
        Create a deck of 52 cards, which stores 52 rondom order poker with the Jokers removed.
        :return: a list of 52 rondom order poker with the Jokers removed, format is ['AS', '2S', ...].
        >>> black_jack_game = BlackjackGame()
        >>> black_jack_game.create_deck()
        ['QD', '9D', 'JC', 'QH', '2S', 'JH', '7D', '6H', '9S', '5C', '7H', 'QS', '5H',
        '6C', '7C', '3D', '10C', 'AD', '4C', '5D', 'AH', '2D', 'QC', 'KH', '9C', '9H',
        '4H', 'JS', '6S', '8H', '8C', '4S', '3H', '10H', '7S', '6D', '3C', 'KC', '3S',
        '2H', '10D', 'KS', '4D', 'AC', '10S', '2C', 'KD', '5S', 'JD', '8S', 'AS', '8D']
        """"""
        import random
        suits = ['S', 'H', 'D', 'C']
        ranks = ['A'] + [str(n) for n in range(2, 11)] + ['J', 'Q', 'K']
        deck = [f""{rank}{suit}"" for suit in suits for rank in ranks]
        random.shuffle(deck)
        return deck

    def calculate_hand_value(self, hand):
        """"""
        Calculate the value of the poker cards stored in hand list according to the rules of the Blackjack Game.
        If the card is a digit, its value is added to the total hand value.
        Value of J, Q, or K is 10, while Aces are worth 11.
        If the total hand value exceeds 21 and there are Aces present, one Ace is treated as having a value of 1 instead of 11,
        until the hand value is less than or equal to 21, or all Aces have been counted as value of 1.
        :param hand: list
        :return: the value of the poker cards stored in hand list, a number.
        >>> black_jack_game.calculate_hand_value(['QD', '9D', 'JC', 'QH', 'AS'])
        40
        """"""
        total = 0
        aces = 0
        for card in hand:
            rank = card[:-1]
            if rank == 'A':
                total += 11
                aces += 1
            elif rank in {'J', 'Q', 'K'}:
                total += 10
            else:
                total += int(rank)
        while total > 21 and aces > 0:
            total -= 10
            aces -= 1
        return total

    def check_winner(self, player_hand, dealer_hand):
        """"""
        Determines the winner of a game by comparing the hand values of the player and dealer.
        rule:
        If both players have hand values that are equal to or less than 21, the winner is the one whose hand value is closer to 21.
        Otherwise, the winner is the one with the lower hand value.
        :param player_hand: list
        :param dealer_hand: list
        :return: the result of the game, only two certain str: 'Dealer wins' or 'Player wins'
        >>> black_jack_game.check_winner(['QD', '9D', 'JC', 'QH', 'AS'], ['QD', '9D', 'JC', 'QH', '2S'])
        'Player wins'
        """"""
        p_val = self.calculate_hand_value(player_hand)
        d_val = self.calculate_hand_value(dealer_hand)

        if p_val <= 21 and d_val <= 21:
            if p_val > d_val:
                return 'Player wins'
            elif d_val > p_val:
                return 'Dealer wins'
            else:
                return 'Dealer wins'
        else:
            if p_val < d_val:
                return 'Player wins'
            elif d_val < p_val:
                return 'Dealer wins'
            else:
                return 'Dealer wins'"
13,"class BookManagement:
    def __init__(self):
        self.inventory = {}

    def add_book(self, title, quantity=1):
        if title in self.inventory:
            self.inventory[title] += quantity
        else:
            self.inventory[title] = quantity

    def remove_book(self, title, quantity):
        if title not in self.inventory or self.inventory[title] < quantity:
            raise False
        self.inventory[title] -= quantity
        if self.inventory[title] == 0:
            del (self.inventory[title])

    def view_inventory(self):
        return self.inventory

    def view_book_quantity(self, title):
        if title not in self.inventory:
            return 0
        return self.inventory[title]","class BookManagement:
    """"""
    This is a class as managing books system, which supports to add and remove books from the inventory dict, view the inventory, and check the quantity of a specific book.
    """"""

    def __init__(self):
        """"""
        Initialize the inventory of Book Manager.
        """"""
        self.inventory = {}

    def add_book(self, title, quantity=1):
        """"""
        Add one or several books to inventory which is sorted by book title.
        :param title: str, the book title
        :param quantity: int, default value is 1.
        """"""

    def remove_book(self, title, quantity):
        """"""
        Remove one or several books from inventory which is sorted by book title.
        Raise false while get invalid input.
        :param title: str, the book title
        :param quantity: int
        """"""

    def view_inventory(self):
        """"""
        Get the inventory of the Book Management.
        :return self.inventory: dictionary, {title(str): quantity(int), ...}
        >>> bookManagement = BookManagement()
        >>> bookManagement.add_book(""book1"", 1)
        >>> bookManagement.add_book(""book2"", 1)
        >>> bookManagement.view_inventory()
        {'book1': 1, 'book2': 1}
        """"""

    def view_book_quantity(self, title):
        """"""
        Get the quantity of a book.
        :param title: str, the title of the book.
        :return quantity: the quantity of this book title. return 0 when the title does not exist in self.invenroty
        >>> bookManagement = BookManagement()
        >>> bookManagement.add_book(""book1"", 1)
        >>> bookManagement.view_book_quantity(""book3"")
        0
        """"""",BookManagement,snippet_14,"class BookManagement:
    """"""
    This is a class as managing books system, which supports to add and remove books from the inventory dict, view the inventory, and check the quantity of a specific book.
    """"""

    def __init__(self):
        """"""
        Initialize the inventory of Book Manager.
        """"""
        self.inventory = {}

    def _sort_inventory(self):
        self.inventory = dict(sorted(self.inventory.items(), key=lambda x: x[0]))

    def add_book(self, title, quantity=1):
        """"""
        Add one or several books to inventory which is sorted by book title.
        :param title: str, the book title
        :param quantity: int, default value is 1.
        """"""
        if not isinstance(title, str) or not isinstance(quantity, int) or quantity <= 0:
            return False
        self.inventory[title] = self.inventory.get(title, 0) + quantity
        self._sort_inventory()
        return True

    def remove_book(self, title, quantity):
        """"""
        Remove one or several books from inventory which is sorted by book title.
        Raise false while get invalid input.
        :param title: str, the book title
        :param quantity: int
        """"""
        if (
            not isinstance(title, str)
            or not isinstance(quantity, int)
            or quantity <= 0
            or title not in self.inventory
        ):
            return False

        current_qty = self.inventory[title]
        if quantity >= current_qty:
            del self.inventory[title]
        else:
            self.inventory[title] = current_qty - quantity

        self._sort_inventory()
        return True

    def view_inventory(self):
        """"""
        Get the inventory of the Book Management.
        :return self.inventory: dictionary, {title(str): quantity(int), ...}
        >>> bookManagement = BookManagement()
        >>> bookManagement.add_book(""book1"", 1)
        >>> bookManagement.add_book(""book2"", 1)
        >>> bookManagement.view_inventory()
        {'book1': 1, 'book2': 1}
        """"""
        self._sort_inventory()
        return self.inventory

    def view_book_quantity(self, title):
        """"""
        Get the quantity of a book.
        :param title: str, the title of the book.
        :return quantity: the quantity of this book title. return 0 when the title does not exist in self.invenroty
        >>> bookManagement = BookManagement()
        >>> bookManagement.add_book(""book1"", 1)
        >>> bookManagement.view_book_quantity(""book3"")
        0
        """"""
        return self.inventory.get(title, 0)"
14,"import sqlite3

class BookManagementDB:
    def __init__(self, db_name):
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY,
                title TEXT,
                author TEXT,
                available INTEGER
            )
        ''')
        self.connection.commit()

    def add_book(self, title, author):
        self.cursor.execute('''
            INSERT INTO books (title, author, available)
            VALUES (?, ?, 1)
        ''', (title, author))
        self.connection.commit()

    def remove_book(self, book_id):
        self.cursor.execute('''
            DELETE FROM books WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def borrow_book(self, book_id):
        self.cursor.execute('''
            UPDATE books SET available = 0 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def return_book(self, book_id):
        self.cursor.execute('''
            UPDATE books SET available = 1 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def search_books(self):
        self.cursor.execute('''
            SELECT * FROM books
        ''')
        books = self.cursor.fetchall()
        return books","class BookManagementDB:
    """"""
    This is a database class as a book management system, used to handle the operations of adding, removing, updating, and searching books.
    """"""


    def __init__(self, db_name):
        """"""
        Initializes the class by creating a database connection and cursor, 
        and creates the book table if it does not already exist
        :param db_name: str, the name of db file
        """"""
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        """"""
        Creates the book table in the database if it does not already exist.
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.create_table()
        """"""
    

    def add_book(self, title, author):
        """"""
        Adds a book to the database with the specified title and author, 
        setting its availability to 1 as free to borrow.
        :param title: str, book title
        :param author: str, author name
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.create_table()
        >>> book_db.add_book('book1', 'author')
        """"""

    def remove_book(self, book_id):
        """"""
        Removes a book from the database based on the given book ID.
        :param book_id: int
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.remove_book(1)
        """"""

    def borrow_book(self, book_id):
        """"""
        Marks a book as borrowed in the database based on the given book ID.
        :param book_id: int
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.borrow_book(1)
        """"""

    def return_book(self, book_id):
        """"""
        Marks a book as returned in the database based on the given book ID.
        :param book_id: int
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.return_book(1)
        """"""

    def search_books(self):
        """"""
        Retrieves all books from the database and returns their information.
        :return books: list[tuple], the information of all books in database
        >>> book_db.search_books()
        [(1, 'book1', 'author', 1)]
        """"""",BookManagementDB,snippet_15,"import sqlite3

class BookManagementDB:
    """"""
    This is a database class as a book management system, used to handle the operations of adding, removing, updating, and searching books.
    """"""

    def __init__(self, db_name):
        """"""
        Initializes the class by creating a database connection and cursor, 
        and creates the book table if it does not already exist
        :param db_name: str, the name of db file
        """"""
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        """"""
        Creates the book table in the database if it does not already exist.
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.create_table()
        """"""
        self.cursor.execute(
            """"""
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                author TEXT NOT NULL,
                available INTEGER NOT NULL DEFAULT 1
            )
            """"""
        )
        self.connection.commit()

    def add_book(self, title, author):
        """"""
        Adds a book to the database with the specified title and author, 
        setting its availability to 1 as free to borrow.
        :param title: str, book title
        :param author: str, author name
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.create_table()
        >>> book_db.add_book('book1', 'author')
        """"""
        self.cursor.execute(
            ""INSERT INTO books (title, author, available) VALUES (?, ?, 1)"",
            (title, author),
        )
        self.connection.commit()

    def remove_book(self, book_id):
        """"""
        Removes a book from the database based on the given book ID.
        :param book_id: int
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.remove_book(1)
        """"""
        self.cursor.execute(""DELETE FROM books WHERE id = ?"", (book_id,))
        self.connection.commit()

    def borrow_book(self, book_id):
        """"""
        Marks a book as borrowed in the database based on the given book ID.
        :param book_id: int
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.borrow_book(1)
        """"""
        self.cursor.execute(
            ""UPDATE books SET available = 0 WHERE id = ?"",
            (book_id,),
        )
        self.connection.commit()

    def return_book(self, book_id):
        """"""
        Marks a book as returned in the database based on the given book ID.
        :param book_id: int
        >>> book_db = BookManagementDB(""test.db"")
        >>> book_db.return_book(1)
        """"""
        self.cursor.execute(
            ""UPDATE books SET available = 1 WHERE id = ?"",
            (book_id,),
        )
        self.connection.commit()

    def search_books(self):
        """"""
        Retrieves all books from the database and returns their information.
        :return books: list[tuple], the information of all books in database
        >>> book_db.search_books()
        [(1, 'book1', 'author', 1)]
        """"""
        self.cursor.execute(""SELECT id, title, author, available FROM books"")
        return self.cursor.fetchall()"
15,"class BoyerMooreSearch:
    def __init__(self, text, pattern):
        self.text, self.pattern = text, pattern
        self.textLen, self.patLen = len(text), len(pattern)

    def match_in_pattern(self, char):
        for i in range(self.patLen - 1, -1, -1):
            if char == self.pattern[i]:
                return i
        return -1

    def mismatch_in_text(self, currentPos):
        for i in range(self.patLen - 1, -1, -1):
            if self.pattern[i] != self.text[currentPos + i]:
                return currentPos + i
        return -1

    def bad_character_heuristic(self):
        positions = []
        for i in range(self.textLen - self.patLen + 1):
            mismatch_index = self.mismatch_in_text(i)
            if mismatch_index == -1:
                positions.append(i)
            else:
                match_index = self.match_in_pattern(self.text[mismatch_index])
                i = (mismatch_index - match_index)
        return positions","class BoyerMooreSearch:
    """"""
    his is a class that implements the Boyer-Moore algorithm for string searching, which is used to find occurrences of a pattern within a given text.
    """"""

    def __init__(self, text, pattern):
        """"""
        Initializes the BoyerMooreSearch class with the given text and pattern.
        :param text: The text to be searched, str.
        :param pattern: The pattern to be searched for, str.
        """"""
        self.text, self.pattern = text, pattern
        self.textLen, self.patLen = len(text), len(pattern)

    def match_in_pattern(self, char):
        """"""
        Finds the rightmost occurrence of a character in the pattern.
        :param char: The character to be searched for, str.
        :return: The index of the rightmost occurrence of the character in the pattern, int.
        >>> boyerMooreSearch = BoyerMooreSearch(""ABAABA"", ""AB"")
        >>> boyerMooreSearch.match_in_pattern(""A"")
        0

        """"""

    def mismatch_in_text(self, currentPos):
        """"""
        Determines the position of the first dismatch between the pattern and the text.
        :param currentPos: The current position in the text, int.
        :return: The position of the first dismatch between the pattern and the text, int,otherwise -1.
        >>> boyerMooreSearch = BoyerMooreSearch(""ABAABA"", ""ABC"")
        >>> boyerMooreSearch.mismatch_in_text(0)
        2

        """"""

    def bad_character_heuristic(self):
        """"""
        Finds all occurrences of the pattern in the text.
        :return: A list of all positions of the pattern in the text, list.
        >>> boyerMooreSearch = BoyerMooreSearch(""ABAABA"", ""AB"")
        >>> boyerMooreSearch.bad_character_heuristic()
        [0, 3]

        """"""",BoyerMooreSearch,snippet_16,"class BoyerMooreSearch:
    """"""
    his is a class that implements the Boyer-Moore algorithm for string searching, which is used to find occurrences of a pattern within a given text.
    """"""

    def __init__(self, text, pattern):
        """"""
        Initializes the BoyerMooreSearch class with the given text and pattern.
        :param text: The text to be searched, str.
        :param pattern: The pattern to be searched for, str.
        """"""
        self.text, self.pattern = text, pattern
        self.textLen, self.patLen = len(text), len(pattern)

    def match_in_pattern(self, char):
        """"""
        Finds the rightmost occurrence of a character in the pattern.
        :param char: The character to be searched for, str.
        :return: The index of the rightmost occurrence of the character in the pattern, int.
        >>> boyerMooreSearch = BoyerMooreSearch(""ABAABA"", ""AB"")
        >>> boyerMooreSearch.match_in_pattern(""A"")
        0

        """"""
        if self.patLen == 0 or not char:
            return -1
        return self.pattern.rfind(char)

    def mismatch_in_text(self, currentPos):
        """"""
        Determines the position of the first dismatch between the pattern and the text.
        :param currentPos: The current position in the text, int.
        :return: The position of the first dismatch between the pattern and the text, int,otherwise -1.
        >>> boyerMooreSearch = BoyerMooreSearch(""ABAABA"", ""ABC"")
        >>> boyerMooreSearch.mismatch_in_text(0)
        2

        """"""
        if self.patLen == 0:
            return -1
        j = self.patLen - 1
        while j >= 0:
            ti = currentPos + j
            if ti >= self.textLen:
                return j
            if self.pattern[j] != self.text[ti]:
                return j
            j -= 1
        return -1

    def bad_character_heuristic(self):
        """"""
        Finds all occurrences of the pattern in the text.
        :return: A list of all positions of the pattern in the text, list.
        >>> boyerMooreSearch = BoyerMooreSearch(""ABAABA"", ""AB"")
        >>> boyerMooreSearch.bad_character_heuristic()
        [0, 3]

        """"""
        if self.patLen == 0:
            return list(range(self.textLen + 1))
        result = []
        s = 0
        while s <= self.textLen - self.patLen:
            j = self.patLen - 1
            while j >= 0 and self.pattern[j] == self.text[s + j]:
                j -= 1
            if j < 0:
                result.append(s)
                s += 1
            else:
                bad_char = self.text[s + j]
                last = self.match_in_pattern(bad_char)
                shift = j - last if last != -1 else j + 1
                s += max(1, shift)
        return result"
16,"class Calculator:
    def __init__(self):
        self.operators = {
            '+': lambda x, y: x + y,
            '-': lambda x, y: x - y,
            '*': lambda x, y: x * y,
            '/': lambda x, y: x / y,
            '^': lambda x, y: x ** y
        }

    def calculate(self, expression):
        operand_stack = []
        operator_stack = []
        num_buffer = ''

        for char in expression:
            if char.isdigit() or char == '.':
                num_buffer += char
            else:
                if num_buffer:
                    operand_stack.append(float(num_buffer))
                    num_buffer = ''

                if char in '+-*/^':
                    while (
                            operator_stack and
                            operator_stack[-1] != '(' and
                            self.precedence(operator_stack[-1]) >= self.precedence(char)
                    ):
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.append(char)
                elif char == '(':
                    operator_stack.append(char)
                elif char == ')':
                    while operator_stack and operator_stack[-1] != '(':
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.pop()

        if num_buffer:
            operand_stack.append(float(num_buffer))

        while operator_stack:
            operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

        return operand_stack[-1] if operand_stack else None

    def precedence(self, operator):
        precedences = {
            '+': 1,
            '-': 1,
            '*': 2,
            '/': 2,
            '^': 3
        }
        return precedences.get(operator, 0)

    def apply_operator(self, operand_stack, operator_stack):
        operator = operator_stack.pop()
        if operator == '^':
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        else:
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        return operand_stack, operator_stack","class Calculator:
    """"""
    This is a class for a calculator, capable of performing basic arithmetic calculations on numerical expressions using the operators +, -, *, /, and ^ (exponentiation).
    """"""

    def __init__(self):
        """"""
        Initialize the operations performed by the five operators'+','-','*','/','^'
        """"""
        self.operators = {
            '+': lambda x, y: x + y,
            '-': lambda x, y: x - y,
            '*': lambda x, y: x * y,
            '/': lambda x, y: x / y,
            '^': lambda x, y: x ** y
        }

    def calculate(self, expression):
        """"""
        Calculate the value of a given expression
        :param expression: string, given expression
        :return:If successful, returns the value of the expression; otherwise, returns None
        >>> calculator = Calculator()
        >>> calculator.calculate('1+2-3')
        0.0
        """"""


    def precedence(self, operator):
        """"""
        Returns the priority of the specified operator, where the higher the priority, the greater the assignment. The priority of '^' is greater than '/' and '*', and the priority of '/' and '*' is greater than '+' and '-'
        :param operator: string, given operator
        :return: int, the priority of the given operator, otherwise return 0
        >>> calculator = Calculator()
        >>> calculator.precedence('+')
        1
        >>> calculator.precedence('^')
        3
        """"""


    def apply_operator(self, operand_stack, operator_stack):
        """"""
        Use the operator at the top of the operator stack to perform the operation on the two numbers at the top of the operator stack, and store the results at the top of the operator stack
        :param operand_stack:list
        :param operator_stack:list
        :return: the updated operand_stack and operator_stack
        >>> calculator = Calculator()
        >>> calculator.apply_operator([1, 2, 3], ['+', '-'])
        ([1, -1], ['-'])
        """"""",Calculator,snippet_17,"class Calculator:
    """"""
    This is a class for a calculator, capable of performing basic arithmetic calculations on numerical expressions using the operators +, -, *, /, and ^ (exponentiation).
    """"""

    def __init__(self):
        """"""
        Initialize the operations performed by the five operators'+','-','*','/','^'
        """"""
        self.operators = {
            '+': lambda x, y: x + y,
            '-': lambda x, y: x - y,
            '*': lambda x, y: x * y,
            '/': lambda x, y: x / y,
            '^': lambda x, y: x ** y
        }

    def calculate(self, expression):
        """"""
        Calculate the value of a given expression
        :param expression: string, given expression
        :return:If successful, returns the value of the expression; otherwise, returns None
        >>> calculator = Calculator()
        >>> calculator.calculate('1+2-3')
        0.0
        """"""
        if not isinstance(expression, str):
            return None

        try:
            tokens = self._tokenize(expression)
            operand_stack = []
            operator_stack = []

            def apply_until(predicate):
                while operator_stack and predicate(operator_stack[-1]):
                    self.apply_operator(operand_stack, operator_stack)

            prev_token_type = None  # 'num' or 'op'
            i = 0
            while i < len(tokens):
                tok = tokens[i]
                if isinstance(tok, float):
                    operand_stack.append(tok)
                    prev_token_type = 'num'
                else:
                    # operator
                    op = tok
                    # right-associative for '^'
                    apply_until(lambda top: (self.precedence(top) > self.precedence(op)) or
                                           (self.precedence(top) == self.precedence(op) and op != '^'))
                    operator_stack.append(op)
                    prev_token_type = 'op'
                i += 1

            while operator_stack:
                self.apply_operator(operand_stack, operator_stack)

            if len(operand_stack) != 1:
                return None
            return float(operand_stack[0])
        except Exception:
            return None

    def precedence(self, operator):
        """"""
        Returns the priority of the specified operator, where the higher the priority, the greater the assignment. The priority of '^' is greater than '/' and '*', and the priority of '/' and '*' is greater than '+' and '-'
        :param operator: string, given operator
        :return: int, the priority of the given operator, otherwise return 0
        >>> calculator = Calculator()
        >>> calculator.precedence('+')
        1
        >>> calculator.precedence('^')
        3
        """"""
        if operator in ('+', '-'):
            return 1
        if operator in ('*', '/'):
            return 2
        if operator == '^':
            return 3
        return 0

    def apply_operator(self, operand_stack, operator_stack):
        """"""
        Use the operator at the top of the operator stack to perform the operation on the two numbers at the top of the operator stack, and store the results at the top of the operator stack
        :param operand_stack:list
        :param operator_stack:list
        :return: the updated operand_stack and operator_stack
        >>> calculator = Calculator()
        >>> calculator.apply_operator([1, 2, 3], ['+', '-'])
        ([1, -1], ['+'])
        """"""
        if not operator_stack or len(operand_stack) < 2:
            return operand_stack, operator_stack
        op = operator_stack.pop()
        right = float(operand_stack.pop())
        left = float(operand_stack.pop())
        # Handle division by zero explicitly to avoid exceptions propagating in some contexts
        if op == '/' and right == 0:
            raise ZeroDivisionError(""division by zero"")
        result = self.operators[op](left, right)
        operand_stack.append(result)
        return operand_stack, operator_stack

    def _tokenize(self, expression):
        s = expression.replace(' ', '')
        tokens = []
        i = 0
        n = len(s)

        def read_number(start):
            j = start
            dot_count = 0
            while j < n and (s[j].isdigit() or s[j] == '.'):
                if s[j] == '.':
                    dot_count += 1
                    if dot_count > 1:
                        break
                j += 1
            num_str = s[start:j]
            if num_str in ('', '.', '+', '-'):
                raise ValueError(""Invalid number"")
            return float(num_str), j

        while i < n:
            ch = s[i]
            if ch.isdigit() or ch == '.':
                num, i = read_number(i)
                tokens.append(num)
                continue
            if ch in self.operators:
                # unary sign handling for '-' and '+' (e.g., -3.5+2 or 3*-2)
                if ch in '+-' and (len(tokens) == 0 or isinstance(tokens[-1], str)):
                    # look ahead for a number
                    j = i + 1
                    if j < n and (s[j].isdigit() or s[j] == '.'):
                        num, i2 = read_number(j)
                        if ch == '-':
                            num = -num
                        tokens.append(num)
                        i = i2
                        continue
                tokens.append(ch)
                i += 1
                continue
            else:
                raise ValueError(""Invalid character"")
        return tokens"
17,"from datetime import datetime, timedelta

class CalendarUtil:
    def __init__(self):
        self.events = []

    def add_event(self, event):
        self.events.append(event)

    def remove_event(self, event):
        if event in self.events:
            self.events.remove(event)

    def get_events(self, date):
        events_on_date = []
        for event in self.events:
            if event['date'].date() == date.date():
                events_on_date.append(event)
        return events_on_date

    def is_available(self, start_time, end_time):
        for event in self.events:
            if start_time < event['end_time'] and end_time > event['start_time']:
                return False
        return True

    def get_available_slots(self, date):
        available_slots = []
        start_time = datetime(date.year, date.month, date.day, 0, 0)
        end_time = datetime(date.year, date.month, date.day, 23, 59)

        while start_time < end_time:
            slot_end_time = start_time + timedelta(minutes=60)
            if self.is_available(start_time, slot_end_time):
                available_slots.append((start_time, slot_end_time))
            start_time += timedelta(minutes=60)


        return available_slots

    def get_upcoming_events(self, num_events):
        now = datetime.now()
        upcoming_events = []
        for event in self.events:
            if event['start_time'] >= now:
                upcoming_events.append(event)
            if len(upcoming_events) == num_events:
                break
        return upcoming_events","class CalendarUtil:
    """"""
    This is a class as CalendarUtil that provides functionalities to manage calendar events, schedule appointments, and perform conflict checks.
    """"""

    def __init__(self):
        """"""
        Initialize the calendar with an empty list of events.
        """"""
        self.events = []

    def add_event(self, event):
        """"""
        Add an event to the calendar.
        :param event: The event to be added to the calendar,dict.
        >>> calendar = CalendarUtil()
        >>> calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})
        >>> calendar.events
        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]

        """"""

    def remove_event(self, event):
        """"""
        Remove an event from the calendar.
        :param event: The event to be removed from the calendar,dict.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]
        >>> calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})
        >>> calendar.events
        []

        """"""

    def get_events(self, date):
        """"""
        Get all events on a given date.
        :param date: The date to get events for,datetime.
        :return: A list of events on the given date,list.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]
        >>> calendar.get_events(datetime(2023, 1, 1, 0, 0))
        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]

        """"""

    def is_available(self, start_time, end_time):
        """"""
        Check if the calendar is available for a given time slot.
        :param start_time: The start time of the time slot,datetime.
        :param end_time: The end time of the time slot,datetime.
        :return: True if the calendar is available for the given time slot, False otherwise,bool.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]
        >>> calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0))
        False

        """"""

    def get_available_slots(self, date):
        """"""
        Get all available time slots on a given date.
        :param date: The date to get available time slots for,datetime.
        :return: A list of available time slots on the given date,list.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]
        >>> calendar.get_available_slots(datetime(2023, 1, 1))
        [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 2, 0, 0))]

        """"""

    def get_upcoming_events(self, num_events):
        """"""
        Get the next n upcoming events from a given date.
        :param date: The date to get upcoming events from,datetime.
        :param n: The number of upcoming events to get,int.
        :return: A list of the next n upcoming events from the given date,list.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},{'date': datetime(2023, 1, 2, 0, 0),'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]
        >>> calendar.get_upcoming_events(1)
        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}, {'date': datetime.datetime(2023, 1, 2, 0, 0), 'end_time': datetime.datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]

        """"""",CalendarUtil,snippet_18,"from datetime import datetime, timedelta

class CalendarUtil:
    """"""
    This is a class as CalendarUtil that provides functionalities to manage calendar events, schedule appointments, and perform conflict checks.
    """"""

    def __init__(self):
        """"""
        Initialize the calendar with an empty list of events.
        """"""
        self.events = []

    def add_event(self, event):
        """"""
        Add an event to the calendar.
        :param event: The event to be added to the calendar,dict.
        >>> calendar = CalendarUtil()
        >>> calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})
        >>> calendar.events
        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]

        """"""
        self.events.append(event)

    def remove_event(self, event):
        """"""
        Remove an event from the calendar.
        :param event: The event to be removed from the calendar,dict.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]
        >>> calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})
        >>> calendar.events
        []

        """"""
        try:
            self.events.remove(event)
        except ValueError:
            pass

    def get_events(self, date):
        """"""
        Get all events on a given date.
        :param date: The date to get events for,datetime.
        :return: A list of events on the given date,list.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]
        >>> calendar.get_events(datetime(2023, 1, 1, 0, 0))
        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]

        """"""
        target = date.date()
        return [e for e in self.events if isinstance(e.get('date'), datetime) and e['date'].date() == target]

    def is_available(self, start_time, end_time):
        """"""
        Check if the calendar is available for a given time slot.
        :param start_time: The start time of the time slot,datetime.
        :param end_time: The end time of the time slot,datetime.
        :return: True if the calendar is available for the given time slot, False otherwise,bool.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]
        >>> calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0))
        False

        """"""
        for e in self.events:
            ev_start = e.get('start_time', e.get('date'))
            ev_end = e.get('end_time', ev_start)
            if not isinstance(ev_start, datetime) or not isinstance(ev_end, datetime):
                continue
            if start_time < ev_end and end_time > ev_start:
                return False
        return True

    def get_available_slots(self, date):
        """"""
        Get all available time slots on a given date.
        :param date: The date to get available time slots for,datetime.
        :return: A list of available time slots on the given date,list.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]
        >>> calendar.get_available_slots(datetime(2023, 1, 1))
        [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 2, 0, 0))]

        """"""
        day_start = datetime(date.year, date.month, date.day, 0, 0)
        day_end = day_start + timedelta(days=1)

        day_events = []
        for e in self.events:
            if not isinstance(e.get('date'), datetime):
                continue
            if e['date'].date() != day_start.date():
                continue
            s = e.get('start_time', e['date'])
            e_end = e.get('end_time', s)
            if not isinstance(s, datetime) or not isinstance(e_end, datetime):
                continue
            s = max(s, day_start)
            e_end = min(e_end, day_end)
            if s < e_end:
                day_events.append((s, e_end))

        day_events.sort(key=lambda x: x[0])

        merged = []
        for s, e_end in day_events:
            if not merged or s > merged[-1][1]:
                merged.append([s, e_end])
            else:
                merged[-1][1] = max(merged[-1][1], e_end)

        free = []
        cursor = day_start
        for s, e_end in merged:
            if cursor < s:
                free.append((cursor, s))
            cursor = max(cursor, e_end)
        if cursor < day_end:
            free.append((cursor, day_end))

        return free

    def get_upcoming_events(self, num_events):
        """"""
        Get the next n upcoming events from a given date.
        :param date: The date to get upcoming events from,datetime.
        :param n: The number of upcoming events to get,int.
        :return: A list of the next n upcoming events from the given date,list.
        >>> calendar = CalendarUtil()
        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},{'date': datetime(2023, 1, 2, 0, 0),'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]
        >>> calendar.get_upcoming_events(1)
        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}, {'date': datetime.datetime(2023, 1, 2, 0, 0), 'end_time': datetime.datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]

        """"""
        def sort_key(e):
            d = e.get('date')
            st = e.get('start_time', d)
            return (d, st)

        return sorted(self.events, key=sort_key)"
18,"class CamelCaseMap:
    def __init__(self):
        self._data = {}

    def __getitem__(self, key):
        return self._data[self._convert_key(key)]

    def __setitem__(self, key, value):
        self._data[self._convert_key(key)] = value

    def __delitem__(self, key):
        del self._data[self._convert_key(key)]

    def __iter__(self):
        return iter(self._data)

    def __len__(self):
        return len(self._data)

    def _convert_key(self, key):
        if isinstance(key, str):
            return self._to_camel_case(key)
        return key

    @staticmethod
    def _to_camel_case(key):
        parts = key.split('_')
        return parts[0] + ''.join(part.title() for part in parts[1:])","class CamelCaseMap:
    """"""
    This is a custom class that allows keys to be in camel case style by converting them from underscore style, which provides dictionary-like functionality.
    """"""

    def __init__(self):
        """"""
        Initialize data to an empty dictionary
        """"""
        self._data = {}

    def __getitem__(self, key):
        """"""
        Return the value corresponding to the key
        :param key:str
        :return:str,the value corresponding to the key
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map.__getitem__('first_name')
        'John'
        """"""


    def __setitem__(self, key, value):
        """"""
        Set the value corresponding to the key to the specified value
        :param key:str
        :param value:str, the specified value
        :return:None
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map.__setitem__('first_name', 'new name')
        camelize_map['first_name'] = 'new name'
        """"""


    def __delitem__(self, key):
        """"""
        Delete the value corresponding to the key
        :param key:str
        :return:None
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map.__delitem__('first_name')
        >>> flag = 'first_name' in camelize_map
        flag = False
        """"""


    def __iter__(self):
        """"""
        Returning Iterateable Objects with Own Data
        :return:Iterator
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map['last_name'] = 'Doe'
        >>> camelize_map['age'] = 30
        >>> camelize_map.__iter__()
        <dict_keyiterator object at 0x0000026739977C20>
        """"""


    def __len__(self):
        """"""
        Returns the length of the own data
        :return:int, length of data
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map['last_name'] = 'Doe'
        >>> camelize_map['age'] = 30
        >>> camelize_map.__len__()
        3
        """"""

    def _convert_key(self, key):
        """"""
        convert key string into camel case
        :param key:str
        :return:str, converted key string
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map._convert_key('first_name')
        'firstName'
        """"""

    @staticmethod
    def _to_camel_case(key):
        """"""
        convert key string into camel case
        :param key:str
        :return:str, converted key string
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map._to_camel_case('first_name')
        'firstName'
        """"""",CamelCaseMap,snippet_19,"class CamelCaseMap:
    """"""
    This is a custom class that allows keys to be in camel case style by converting them from underscore style, which provides dictionary-like functionality.
    """"""

    def __init__(self):
        """"""
        Initialize data to an empty dictionary
        """"""
        self._data = {}

    def __getitem__(self, key):
        """"""
        Return the value corresponding to the key
        :param key:str
        :return:str,the value corresponding to the key
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map.__getitem__('first_name')
        'John'
        """"""
        ckey = self._convert_key(key)
        return self._data[ckey]

    def __setitem__(self, key, value):
        """"""
        Set the value corresponding to the key to the specified value
        :param key:str
        :param value:str, the specified value
        :return:None
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map.__setitem__('first_name', 'new name')
        camelize_map['first_name'] = 'new name'
        """"""
        ckey = self._convert_key(key)
        self._data[ckey] = value

    def __delitem__(self, key):
        """"""
        Delete the value corresponding to the key
        :param key:str
        :return:None
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map.__delitem__('first_name')
        >>> flag = 'first_name' in camelize_map
        flag = False
        """"""
        ckey = self._convert_key(key)
        del self._data[ckey]

    def __iter__(self):
        """"""
        Returning Iterateable Objects with Own Data
        :return:Iterator
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map['last_name'] = 'Doe'
        >>> camelize_map['age'] = 30
        >>> camelize_map.__iter__()
        <dict_keyiterator object at 0x0000026739977C20>
        """"""
        return iter(self._data.keys())

    def __len__(self):
        """"""
        Returns the length of the own data
        :return:int, length of data
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map['first_name'] = 'John'
        >>> camelize_map['last_name'] = 'Doe'
        >>> camelize_map['age'] = 30
        >>> camelize_map.__len__()
        3
        """"""
        return len(self._data)

    def __contains__(self, key):
        ckey = self._convert_key(key)
        return ckey in self._data

    def _convert_key(self, key):
        """"""
        convert key string into camel case
        :param key:str
        :return:str, converted key string
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map._convert_key('first_name')
        'firstName'
        """"""
        return self._to_camel_case(key)

    @staticmethod
    def _to_camel_case(key):
        """"""
        convert key string into camel case
        :param key:str
        :return:str, converted key string
        >>> camelize_map = CamelCaseMap()
        >>> camelize_map._to_camel_case('first_name')
        'firstName'
        """"""
        if not isinstance(key, str):
            raise TypeError(""Key must be a string"")
        if not key:
            return key
        if ""_"" not in key:
            return key
        parts = [p for p in key.split(""_"") if p != """"]
        if not parts:
            return """"
        first = parts[0].lower()
        rest = []
        for p in parts[1:]:
            if not p:
                continue
            rest.append(p[:1].upper() + p[1:].lower())
        return first + """".join(rest)"
19,"class ChandrasekharSieve:
    def __init__(self, n):
        self.n = n
        self.primes = self.generate_primes()

    def generate_primes(self):
        if self.n < 2:
            return []

        sieve = [True] * (self.n + 1)
        sieve[0] = sieve[1] = False

        p = 2
        while p * p <= self.n:
            if sieve[p]:
                for i in range(p * p, self.n + 1, p):
                    sieve[i] = False
            p += 1

        primes = []
        for i in range(2, self.n + 1):
            if sieve[i]:
                primes.append(i)

        return primes

    def get_primes(self):
        return self.primes","class ChandrasekharSieve:
    """"""
    This is a class that uses the Chandrasekhar's Sieve method to find all prime numbers within the range
    """"""

    def __init__(self, n):
        """"""
        Initialize the ChandrasekharSieve class with the given limit.
        :param n: int, the upper limit for generating prime numbers
        """"""
        self.n = n
        self.primes = self.generate_primes()

    def generate_primes(self):
        """"""
        Generate prime numbers up to the specified limit using the Chandrasekhar sieve algorithm.
        :return: list, a list of prime numbers
        >>> cs = ChandrasekharSieve(20)
        >>> cs.generate_primes()
        [2, 3, 5, 7, 11, 13, 17, 19]

        """"""

    def get_primes(self):
        """"""
        Get the list of generated prime numbers.
        :return: list, a list of prime numbers
        >>> cs = ChandrasekharSieve(20)
        >>> cs.get_primes()
        [2, 3, 5, 7, 11, 13, 17, 19]

        """"""",ChandrasekharSieve,snippet_20,"class ChandrasekharSieve:
    """"""
    This is a class that uses the Chandrasekhar's Sieve method to find all prime numbers within the range
    """"""

    def __init__(self, n):
        """"""
        Initialize the ChandrasekharSieve class with the given limit.
        :param n: int, the upper limit for generating prime numbers
        """"""
        self.n = int(n)
        self.primes = self.generate_primes()

    def generate_primes(self):
        """"""
        Generate prime numbers up to the specified limit using the Chandrasekhar sieve algorithm.
        :return: list, a list of prime numbers
        >>> cs = ChandrasekharSieve(20)
        >>> cs.generate_primes()
        [2, 3, 5, 7, 11, 13, 17, 19]

        """"""
        n = self.n
        if n < 2:
            return []
        # Sieve of Sundaram (often misattributed; here referred to as Chandrasekhar's sieve)
        m = (n - 1) // 2
        marked = [False] * (m + 1)
        i = 1
        while i <= m:
            j = i
            while i + j + 2 * i * j <= m:
                marked[i + j + 2 * i * j] = True
                j += 1
            i += 1

        primes = [2] if n >= 2 else []
        primes.extend(2 * k + 1 for k in range(1, m + 1) if not marked[k] and 2 * k + 1 <= n)
        return primes

    def get_primes(self):
        """"""
        Get the list of generated prime numbers.
        :return: list, a list of prime numbers
        >>> cs = ChandrasekharSieve(20)
        >>> cs.get_primes()
        [2, 3, 5, 7, 11, 13, 17, 19]

        """"""
        return self.primes"
20,"from datetime import datetime

class Chat:
    def __init__(self):
        self.users = {}

    def add_user(self, username):
        if username in self.users:
            return False
        else:
            self.users[username] = []
            return True

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        else:
            return False

    def send_message(self, sender, receiver, message):
        if sender not in self.users or receiver not in self.users:
            return False

        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        message_info = {
            'sender': sender,
            'receiver': receiver,
            'message': message,
            'timestamp': timestamp
        }
        self.users[sender].append(message_info)
        self.users[receiver].append(message_info)
        return True

    def get_messages(self, username):
        if username not in self.users:
            return []
        return self.users[username]","class Chat:
    """"""
    This is a chat class with the functions of adding users, removing users, sending messages, and obtaining messages.
    """"""

    def __init__(self):
        """"""
        Initialize the Chat with an attribute users, which is an empty dictionary.
        """"""
        self.users = {}

    def add_user(self, username):
        """"""
        Add a new user to the Chat.
        :param username: The user's name, str.
        :return: If the user is already in the Chat, returns False, otherwise, returns True.
        >>> chat = Chat()
        >>> chat.add_user('John')
        True
        self.users = {'John': []}
        >>> chat.add_user('John')
        False

        """"""

    def remove_user(self, username):
        """"""
        Remove a user from the Chat.
        :param username: The user's name, str.
        :return: If the user is already in the Chat, returns True, otherwise, returns False.
        >>> chat = Chat()
        >>> chat.users = {'John': []}
        >>> chat.remove_user('John')
        True
        >>> chat.remove_user('John')
        False

        """"""

    def send_message(self, sender, receiver, message):
        """"""
        Send a message from a user to another user.
        :param sender: The sender's name, str.
        :param receiver: The receiver's name, str.
        :param message: The message, str.
        :return: If the sender or the receiver is not in the Chat, returns False, otherwise, returns True.
        >>> chat = Chat()
        >>> chat.users = {'John': [], 'Mary': []}
        >>> chat.send_message('John', 'Mary', 'Hello')
        True
        >>> chat.send_message('John', 'Tom', 'Hello')
        False

        """"""

    def get_messages(self, username):
        """"""
        Get all the messages of a user from the Chat.
        :param username: The user's name, str.
        :return: A list of messages, each message is a dictionary with keys 'sender', 'receiver', 'message', 'timestamp'.
        >>> chat = Chat()
        >>> chat.users = {'John': [{'sender': 'John', 'receiver': 'Mary', 'message': 'Hello', 'timestamp': '2023-01-01 00:00:00'}]}
        >>> chat.get_messages('John')
        [{'sender': 'John', 'receiver': 'Mary', 'message': 'Hello', 'timestamp': '2023-01-01 00:00:00'}]
        >>> chat.get_messages('Mary')
        []

        """"""",Chat,snippet_21,"class Chat:
    """"""
    This is a chat class with the functions of adding users, removing users, sending messages, and obtaining messages.
    """"""

    def __init__(self):
        """"""
        Initialize the Chat with an attribute users, which is an empty dictionary.
        """"""
        self.users = {}

    def add_user(self, username):
        """"""
        Add a new user to the Chat.
        :param username: The user's name, str.
        :return: If the user is already in the Chat, returns False, otherwise, returns True.
        >>> chat = Chat()
        >>> chat.add_user('John')
        True
        self.users = {'John': []}
        >>> chat.add_user('John')
        False

        """"""
        if username in self.users:
            return False
        self.users[username] = []
        return True

    def remove_user(self, username):
        """"""
        Remove a user from the Chat.
        :param username: The user's name, str.
        :return: If the user is already in the Chat, returns True, otherwise, returns False.
        >>> chat = Chat()
        >>> chat.users = {'John': []}
        >>> chat.remove_user('John')
        True
        >>> chat.remove_user('John')
        False

        """"""
        if username in self.users:
            del self.users[username]
            return True
        return False

    def send_message(self, sender, receiver, message):
        """"""
        Send a message from a user to another user.
        :param sender: The sender's name, str.
        :param receiver: The receiver's name, str.
        :param message: The message, str.
        :return: If the sender or the receiver is not in the Chat, returns False, otherwise, returns True.
        >>> chat = Chat()
        >>> chat.users = {'John': [], 'Mary': []}
        >>> chat.send_message('John', 'Mary', 'Hello')
        True
        >>> chat.send_message('John', 'Tom', 'Hello')
        False

        """"""
        if sender not in self.users or receiver not in self.users:
            return False
        from datetime import datetime
        msg = {
            'sender': sender,
            'receiver': receiver,
            'message': message,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        self.users[sender].append(msg)
        return True

    def get_messages(self, username):
        """"""
        Get all the messages of a user from the Chat.
        :param username: The user's name, str.
        :return: A list of messages, each message is a dictionary with keys 'sender', 'receiver', 'message', 'timestamp'.
        >>> chat = Chat()
        >>> chat.users = {'John': [{'sender': 'John', 'receiver': 'Mary', 'message': 'Hello', 'timestamp': '2023-01-01 00:00:00'}]}
        >>> chat.get_messages('John')
        [{'sender': 'John', 'receiver': 'Mary', 'message': 'Hello', 'timestamp': '2023-01-01 00:00:00'}]
        >>> chat.get_messages('Mary')
        []

        """"""
        return list(self.users.get(username, []))"
21,"from datetime import datetime


class Classroom:
    def __init__(self, id):
        self.id = id
        self.courses = []

    def add_course(self, course):

        if course not in self.courses:
            self.courses.append(course)

    def remove_course(self, course):
        if course in self.courses:
            self.courses.remove(course)

    def is_free_at(self, check_time):
        check_time = datetime.strptime(check_time, '%H:%M')

        for course in self.courses:
            if datetime.strptime(course['start_time'], '%H:%M') <= check_time <= datetime.strptime(course['end_time'],
                                                                                                   '%H:%M'):
                return False
        return True

    def check_course_conflict(self, new_course):
        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')
        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')

        flag = True
        for course in self.courses:
            start_time = datetime.strptime(course['start_time'], '%H:%M')
            end_time = datetime.strptime(course['end_time'], '%H:%M')
            if start_time <= new_start_time and end_time >= new_start_time:
                flag = False
            if start_time <= new_end_time and end_time >= new_end_time:
                flag = False
        return flag","class Classroom:
    """"""
    This is a class representing a classroom, capable of adding and removing courses, checking availability at a given time, and detecting conflicts when scheduling new courses.
    """"""

    def __init__(self, id):
        """"""
        Initialize the classroom management system.
        :param id: int, the id of classroom
        """"""
        self.id = id
        self.courses = []

    def add_course(self, course):
        """"""
        Add course to self.courses list if the course wasn't in it.
        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        """"""

    def remove_course(self, course):
        """"""
        Remove course from self.courses list if the course was in it.
        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        """"""

    def is_free_at(self, check_time):
        """"""
        change the time format as '%H:%M' and check the time is free or not in the classroom.
        :param check_time: str, the time need to be checked
        :return: True if the check_time does not conflict with every course time, or False otherwise.
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        >>> classroom.is_free_at('10:00')
        True
        >>> classroom.is_free_at('9:00')
        False
        """"""

    def check_course_conflict(self, new_course):
        """"""
        Before adding a new course, check if the new course time conflicts with any other course.
        :param new_course: dict, information of the course, including 'start_time', 'end_time' and 'name'
        :return: False if the new course time conflicts(including two courses have the same boundary time) with other courses, or True otherwise.
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        >>> classroom.check_course_conflict({'name': 'SE', 'start_time': '9:40', 'end_time': '10:40'})
        False
        """"""",Classroom,snippet_22,"class Classroom:
    """"""
    This is a class representing a classroom, capable of adding and removing courses, checking availability at a given time, and detecting conflicts when scheduling new courses.
    """"""

    def __init__(self, id):
        """"""
        Initialize the classroom management system.
        :param id: int, the id of classroom
        """"""
        self.id = id
        self.courses = []

    @staticmethod
    def _parse_time(t):
        if isinstance(t, str):
            t = t.strip()
            parts = t.split("":"")
            if len(parts) != 2:
                raise ValueError(""Time must be in H:M or HH:MM format"")
            hour = int(parts[0])
            minute = int(parts[1])
        else:
            raise ValueError(""Time must be a string"")
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError(""Hour must be 0-23 and minute 0-59"")
        return hour * 60 + minute

    @staticmethod
    def _normalize_course(course):
        if not isinstance(course, dict):
            raise ValueError(""course must be a dict"")
        name = course.get('name')
        st = course.get('start_time')
        et = course.get('end_time')
        if name is None or st is None or et is None:
            raise ValueError(""course must include 'name', 'start_time', and 'end_time'"")
        start = Classroom._parse_time(st)
        end = Classroom._parse_time(et)
        if end < start:
            start, end = end, start
        return {
            'name': name,
            'start_time': f""{start // 60:02d}:{start % 60:02d}"",
            'end_time': f""{end // 60:02d}:{end % 60:02d}"",
            '_start_minutes': start,
            '_end_minutes': end
        }

    def add_course(self, course):
        """"""
        Add course to self.courses list if the course wasn't in it.
        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        """"""
        norm = self._normalize_course(course)
        # Use display dict without internal keys for external representation,
        # but keep minutes for internal comparisons
        # Ensure uniqueness by comparing public fields
        public_norm = {k: norm[k] for k in ('name', 'start_time', 'end_time')}
        for existing in self.courses:
            if all(existing[k] == public_norm[k] for k in ('name', 'start_time', 'end_time')):
                return
        # store also minutes for efficient checks
        stored = dict(public_norm)
        stored['_start_minutes'] = norm['_start_minutes']
        stored['_end_minutes'] = norm['_end_minutes']
        self.courses.append(stored)

    def remove_course(self, course):
        """"""
        Remove course from self.courses list if the course was in it.
        :param course: dict, information of the course, including 'start_time', 'end_time' and 'name'
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        """"""
        norm = self._normalize_course(course)
        public_norm = {k: norm[k] for k in ('name', 'start_time', 'end_time')}
        for i, existing in enumerate(self.courses):
            if all(existing[k] == public_norm[k] for k in ('name', 'start_time', 'end_time')):
                self.courses.pop(i)
                return

    def is_free_at(self, check_time):
        """"""
        change the time format as '%H:%M' and check the time is free or not in the classroom.
        :param check_time: str, the time need to be checked
        :return: True if the check_time does not conflict with every course time, or False otherwise.
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        >>> classroom.is_free_at('10:00')
        True
        >>> classroom.is_free_at('9:00')
        False
        """"""
        t = self._parse_time(check_time)
        for c in self.courses:
            if c['_start_minutes'] <= t <= c['_end_minutes']:
                return False
        return True

    def check_course_conflict(self, new_course):
        """"""
        Before adding a new course, check if the new course time conflicts with any other course.
        :param new_course: dict, information of the course, including 'start_time', 'end_time' and 'name'
        :return: False if the new course time conflicts(including two courses have the same boundary time) with other courses, or True otherwise.
        >>> classroom = Classroom(1)
        >>> classroom.add_course({'name': 'math', 'start_time': '8:00', 'end_time': '9:40'})
        >>> classroom.check_course_conflict({'name': 'SE', 'start_time': '9:40', 'end_time': '10:40'})
        False
        """"""
        norm = self._normalize_course(new_course)
        ns, ne = norm['_start_minutes'], norm['_end_minutes']
        for c in self.courses:
            cs, ce = c['_start_minutes'], c['_end_minutes']
            if not (ne < cs or ns > ce):
                return False
        return True"
22,"class ClassRegistrationSystem:

    def __init__(self):
        self.students = []
        self.students_registration_classes = {}

    def register_student(self, student):
        if student in self.students:
            return 0
        else:
            self.students.append(student)
            return 1

    def register_class(self, student_name, class_name):
        if student_name in self.students_registration_classes:
            self.students_registration_classes[student_name].append(class_name)
        else:
            self.students_registration_classes[student_name] = [class_name]
        return self.students_registration_classes[student_name]

    def get_students_by_major(self, major):
        student_list = []
        for student in self.students:
            if student[""major""] == major:
                student_list.append(student[""name""])
        return student_list

    def get_all_major(self):
        major_list = []
        for student in self.students:
            if student[""major""] not in major_list:
                major_list.append(student[""major""])
        return major_list

    def get_most_popular_class_in_major(self, major):
        class_list = []
        for student in self.students:
            if student[""major""] == major:
                class_list += self.students_registration_classes[student[""name""]]
        most_popular_class = max(set(class_list), key=class_list.count)
        return most_popular_class","class ClassRegistrationSystem:
    """"""
    This is a class as a class registration system, allowing to register students, register them for classes, retrieve students by major, get a list of all majors, and determine the most popular class within a specific major.
    """"""


    def __init__(self):
        """"""
        Initialize the registration system with the attribute students and students_registration_class.
        students is a list of student dictionaries, each student dictionary has the key of name and major.
        students_registration_class is a dictionaries, key is the student name, value is a list of class names
        """"""
        self.students = []
        self.students_registration_classes = {}

    def register_student(self, student):
        """"""
        register a student to the system, add the student to the students list, if the student is already registered, return 0, else return 1
        """"""

    def register_class(self, student_name, class_name):
        """"""
        register a class to the student.
        :param student_name: str
        :param class_name: str
        :return a list of class names that the student has registered
        >>> registration_system = ClassRegistrationSystem()
        >>> registration_system.register_class(student_name=""John"", class_name=""CS101"")
        >>> registration_system.register_class(student_name=""John"", class_name=""CS102"")
        [""CS101"", ""CS102""]

    def get_students_by_major(self, major):
        """"""
        get all students in the major
        :param major: str
        :return a list of student name
        >>> registration_system = ClassRegistrationSystem()
        >>> student1 = {""name"": ""John"", ""major"": ""Computer Science""}
        >>> registration_system.register_student(student1)
        >>> registration_system.get_students_by_major(""Computer Science"")
        [""John""]
        """"""

    def get_all_major(self):
        """"""
        get all majors in the system
        :return a list of majors
        >>> registration_system = ClassRegistrationSystem()
        >>> registration_system.students = [{""name"": ""John"", ""major"": ""Computer Science""}],
        >>> registration_system.get_all_major(student1)
        [""Computer Science""]
        """"""

    def get_most_popular_class_in_major(self, major):
        """"""
        get the class with the highest enrollment in the major.
        :return  a string of the most popular class in this major
        >>> registration_system = ClassRegistrationSystem()
        >>> registration_system.students = [{""name"": ""John"", ""major"": ""Computer Science""},
                                             {""name"": ""Bob"", ""major"": ""Computer Science""},
                                             {""name"": ""Alice"", ""major"": ""Computer Science""}]
        >>> registration_system.students_registration_classes = {""John"": [""Algorithms"", ""Data Structures""],
                                            ""Bob"": [""Operating Systems"", ""Data Structures"", ""Algorithms""]}
        >>> registration_system.get_most_popular_class_in_major(""Computer Science"")
        ""Data Structures""
        """"""",ClassRegistrationSystem,snippet_23,"class ClassRegistrationSystem:
    """"""
    This is a class as a class registration system, allowing to register students, register them for classes, retrieve students by major, get a list of all majors, and determine the most popular class within a specific major.
    """"""

    def __init__(self):
        """"""
        Initialize the registration system with the attribute students and students_registration_class.
        students is a list of student dictionaries, each student dictionary has the key of name and major.
        students_registration_class is a dictionaries, key is the student name, value is a list of class names
        """"""
        self.students = []
        self.students_registration_classes = {}

    def register_student(self, student):
        """"""
        register a student to the system, add the student to the students list, if the student is already registered, return 0, else return 1
        """"""
        name = student.get(""name"")
        if name is None:
            return 0
        for s in self.students:
            if s.get(""name"") == name:
                return 0
        self.students.append(student)
        if name not in self.students_registration_classes:
            self.students_registration_classes[name] = []
        return 1

    def register_class(self, student_name, class_name):
        """"""
        register a class to the student.
        :param student_name: str
        :param class_name: str
        :return a list of class names that the student has registered
        >>> registration_system = ClassRegistrationSystem()
        >>> registration_system.register_class(student_name=""John"", class_name=""CS101"")
        >>> registration_system.register_class(student_name=""John"", class_name=""CS102"")
        [""CS101"", ""CS102""]
        """"""
        if student_name not in self.students_registration_classes:
            self.students_registration_classes[student_name] = []
        classes = self.students_registration_classes[student_name]
        if class_name not in classes:
            classes.append(class_name)
        return classes

    def get_students_by_major(self, major):
        """"""
        get all students in the major
        :param major: str
        :return a list of student name
        >>> registration_system = ClassRegistrationSystem()
        >>> student1 = {""name"": ""John"", ""major"": ""Computer Science""}
        >>> registration_system.register_student(student1)
        >>> registration_system.get_students_by_major(""Computer Science"")
        [""John""]
        """"""
        return [s.get(""name"") for s in self.students if s.get(""major"") == major]

    def get_all_major(self):
        """"""
        get all majors in the system
        :return a list of majors
        >>> registration_system = ClassRegistrationSystem()
        >>> registration_system.students = [{""name"": ""John"", ""major"": ""Computer Science""}],
        >>> registration_system.get_all_major(student1)
        [""Computer Science""]
        """"""
        majors = [s.get(""major"") for s in self.students if ""major"" in s]
        # return unique majors preserving order
        return list(dict.fromkeys(majors))

    def get_most_popular_class_in_major(self, major):
        """"""
        get the class with the highest enrollment in the major.
        :return  a string of the most popular class in this major
        >>> registration_system = ClassRegistrationSystem()
        >>> registration_system.students = [{""name"": ""John"", ""major"": ""Computer Science""},
                                             {""name"": ""Bob"", ""major"": ""Computer Science""},
                                             {""name"": ""Alice"", ""major"": ""Computer Science""}]
        >>> registration_system.students_registration_classes = {""John"": [""Algorithms"", ""Data Structures""],
                                            ""Bob"": [""Operating Systems"", ""Data Structures"", ""Algorithms""]}
        >>> registration_system.get_most_popular_class_in_major(""Computer Science"")
        ""Data Structures""
        """"""
        # Map student name to major for quick lookup
        name_to_major = {s.get(""name""): s.get(""major"") for s in self.students if ""name"" in s}
        counts = {}
        for student_name, classes in self.students_registration_classes.items():
            if name_to_major.get(student_name) == major:
                for c in classes:
                    counts[c] = counts.get(c, 0) + 1
        if not counts:
            return """"
        # Break ties by lexicographically larger class name to match example
        return max(counts.items(), key=lambda kv: (kv[1], kv[0]))[0]"
23,"import math
from typing import List

class CombinationCalculator:
    def __init__(self, datas: List[str]):
        self.datas = datas

    @staticmethod
    def count(n: int, m: int) -> int:
        if m == 0 or n == m:
            return 1
        return math.factorial(n) // (math.factorial(n - m) * math.factorial(m))

    @staticmethod
    def count_all(n: int) -> int:
        if n < 0 or n > 63:
            return False
        return (1 << n) - 1 if n != 63 else float(""inf"")

    def select(self, m: int) -> List[List[str]]:
        result = []
        self._select(0, [None] * m, 0, result)
        return result

    def select_all(self) -> List[List[str]]:
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
        resultLen = len(resultList)
        resultCount = resultIndex + 1
        if resultCount > resultLen:
            result.append(resultList.copy())
            return

        for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
            resultList[resultIndex] = self.datas[i]
            self._select(i + 1, resultList, resultIndex + 1, result)","class CombinationCalculator:
    """"""
    This is a class that provides methods to calculate the number of combinations for a specific count, calculate all possible combinations, and generate combinations with a specified number of elements.
    """"""

    def __init__(self, datas: List[str]):
        """"""
        Initialize the calculator with a list of data.
        """"""
        self.datas = datas

    @staticmethod
    def count(n: int, m: int) -> int:
        """"""
        Calculate the number of combinations for a specific count.
        :param n: The total number of elements,int.
        :param m: The number of elements in each combination,int.
        :return: The number of combinations,int.
        >>> CombinationCalculator.count(4, 2)
        6
        """"""

    @staticmethod
    def count_all(n: int) -> int:
        """"""
        Calculate the number of all possible combinations.
        :param n: The total number of elements,int.
        :return: The number of all possible combinations,int,if the number of combinations is greater than 2^63-1,return float(""inf"").
        >>> CombinationCalculator.count_all(4)
        15
        """"""

    def select(self, m: int) -> List[List[str]]:
        """"""
        Generate combinations with a specified number of elements.
        :param m: The number of elements in each combination,int.
        :return: A list of combinations,List[List[str]].
        >>> calc = CombinationCalculator([""A"", ""B"", ""C"", ""D""])
        >>> calc.select(2)
        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]

        """"""

    def select_all(self) -> List[List[str]]:
        """"""
        Generate all possible combinations of  selecting elements from the given data list,and it uses the select method.
        :return: A list of combinations,List[List[str]].
        >>> calc = CombinationCalculator([""A"", ""B"", ""C"", ""D""])
        >>> calc.select_all()
        [['A'], ['B'], ['C'], ['D'], ['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D'], ['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'C', 'D'], ['B', 'C', 'D'], ['A', 'B', 'C', 'D']]

        """"""

    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
        """"""
        Generate combinations with a specified number of elements by recursion.
        :param dataIndex: The index of the data to be selected,int.
        :param resultList: The list of elements in the combination,List[str].
        :param resultIndex: The index of the element in the combination,int.
        :param result: The list of combinations,List[List[str]].
        :return: None.
        >>> calc = CombinationCalculator([""A"", ""B"", ""C"", ""D""])
        >>> result = []
        >>> calc._select(0, [None] * 2, 0, result)
        >>> result
        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]

        """"""",CombinationCalculator,snippet_24,"from typing import List

class CombinationCalculator:
    """"""
    This is a class that provides methods to calculate the number of combinations for a specific count, calculate all possible combinations, and generate combinations with a specified number of elements.
    """"""

    def __init__(self, datas: List[str]):
        """"""
        Initialize the calculator with a list of data.
        """"""
        self.datas = datas

    @staticmethod
    def count(n: int, m: int) -> int:
        """"""
        Calculate the number of combinations for a specific count.
        :param n: The total number of elements,int.
        :param m: The number of elements in each combination,int.
        :return: The number of combinations,int.
        >>> CombinationCalculator.count(4, 2)
        6
        """"""
        if n < 0 or m < 0 or m > n:
            return 0
        m = min(m, n - m)
        if m == 0:
            return 1
        result = 1
        for i in range(1, m + 1):
            result = result * (n - m + i) // i
        return result

    @staticmethod
    def count_all(n: int) -> int:
        """"""
        Calculate the number of all possible combinations.
        :param n: The total number of elements,int.
        :return: The number of all possible combinations,int,if the number of combinations is greater than 2^63-1,return float(""inf"").
        >>> CombinationCalculator.count_all(4)
        15
        """"""
        if n <= 0:
            return 0
        # total non-empty subsets = 2^n - 1
        if n >= 64:
            return float(""inf"")
        total = (1 << n) - 1
        if total > 2**63 - 1:
            return float(""inf"")
        return total

    def select(self, m: int) -> List[List[str]]:
        """"""
        Generate combinations with a specified number of elements.
        :param m: The number of elements in each combination,int.
        :return: A list of combinations,List[List[str]].
        >>> calc = CombinationCalculator([""A"", ""B"", ""C"", ""D""])
        >>> calc.select(2)
        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]

        """"""
        if m <= 0 or m > len(self.datas):
            return []
        result: List[List[str]] = []
        self._select(0, [None] * m, 0, result)
        return result

    def select_all(self) -> List[List[str]]:
        """"""
        Generate all possible combinations of  selecting elements from the given data list,and it uses the select method.
        :return: A list of combinations,List[List[str]].
        >>> calc = CombinationCalculator([""A"", ""B"", ""C"", ""D""])
        >>> calc.select_all()
        [['A'], ['B'], ['C'], ['D'], ['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D'], ['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'C', 'D'], ['B', 'C', 'D'], ['A', 'B', 'C', 'D']]

        """"""
        all_combinations: List[List[str]] = []
        for m in range(1, len(self.datas) + 1):
            all_combinations.extend(self.select(m))
        return all_combinations

    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
        """"""
        Generate combinations with a specified number of elements by recursion.
        :param dataIndex: The index of the data to be selected,int.
        :param resultList: The list of elements in the combination,List[str].
        :param resultIndex: The index of the element in the combination,int.
        :param result: The list of combinations,List[List[str]].
        :return: None.
        >>> calc = CombinationCalculator([""A"", ""B"", ""C"", ""D""])
        >>> result = []
        >>> calc._select(0, [None] * 2, 0, result)
        >>> result
        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]

        """"""
        m = len(resultList)
        n = len(self.datas)
        if resultIndex == m:
            result.append(resultList.copy())
            return
        # The last starting index to fill remaining slots
        max_start = n - (m - resultIndex)
        i = dataIndex
        while i <= max_start:
            resultList[resultIndex] = self.datas[i]
            self._select(i + 1, resultList, resultIndex + 1, result)
            i += 1"
24,"class ComplexCalculator:
    def __init__(self):
        pass

    @staticmethod
    def add(c1, c2):
        real = c1.real + c2.real
        imaginary = c1.imag + c2.imag
        answer = complex(real, imaginary)
        return answer
    
    @staticmethod
    def subtract(c1, c2):
        real = c1.real - c2.real
        imaginary = c1.imag - c2.imag
        return complex(real, imaginary)
    
    @staticmethod
    def multiply(c1, c2):
        real = c1.real * c2.real - c1.imag * c2.imag
        imaginary = c1.real * c2.imag + c1.imag * c2.real
        return complex(real, imaginary)
    
    @staticmethod
    def divide(c1, c2):
        denominator = c2.real**2 + c2.imag**2
        real = (c1.real * c2.real + c1.imag * c2.imag) / denominator
        imaginary = (c1.imag * c2.real - c1.real * c2.imag) / denominator
        return complex(real, imaginary)","class ComplexCalculator:
    """"""
    This is a class that implements addition, subtraction, multiplication, and division operations for complex numbers.
    """"""


    def __init__(self):
        pass

    @staticmethod
    def add(c1, c2):
        """"""
        Adds two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The sum of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.add(1+2j, 3+4j)
        (4+6j)

        """"""

    @staticmethod
    def subtract(c1, c2):
        """"""
        Subtracts two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The difference of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.subtract(1+2j, 3+4j)
        (-2-2j)

        """"""

    @staticmethod
    def multiply(c1, c2):
        """"""
        Multiplies two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The product of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.multiply(1+2j, 3+4j)
        (-5+10j)

        """"""

    @staticmethod
    def divide(c1, c2):
        """"""
        Divides two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The quotient of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.divide(1+2j, 3+4j)
        (0.44+0.08j)

        """"""",ComplexCalculator,snippet_25,"class ComplexCalculator:
    """"""
    This is a class that implements addition, subtraction, multiplication, and division operations for complex numbers.
    """"""

    def __init__(self):
        pass

    @staticmethod
    def add(c1, c2):
        """"""
        Adds two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The sum of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.add(1+2j, 3+4j)
        (4+6j)

        """"""
        return complex(c1) + complex(c2)

    @staticmethod
    def subtract(c1, c2):
        """"""
        Subtracts two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The difference of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.subtract(1+2j, 3+4j)
        (-2-2j)

        """"""
        return complex(c1) - complex(c2)

    @staticmethod
    def multiply(c1, c2):
        """"""
        Multiplies two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The product of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.multiply(1+2j, 3+4j)
        (-5+10j)

        """"""
        return complex(c1) * complex(c2)

    @staticmethod
    def divide(c1, c2):
        """"""
        Divides two complex numbers.
        :param c1: The first complex number,complex.
        :param c2: The second complex number,complex.
        :return: The quotient of the two complex numbers,complex.
        >>> complexCalculator = ComplexCalculator()
        >>> complexCalculator.divide(1+2j, 3+4j)
        (0.44+0.08j)

        """"""
        return complex(c1) / complex(c2)"
25,"import json

class CookiesUtil:
    def __init__(self, cookies_file):
        self.cookies_file = cookies_file
        self.cookies = None

    def get_cookies(self, reponse):
        self.cookies = reponse['cookies']
        self._save_cookies()

    def load_cookies(self):
        try:
            with open(self.cookies_file, 'r') as file:
                cookies_data = json.load(file)
                return cookies_data
        except FileNotFoundError:
            return {}

    def _save_cookies(self):
        try:
            with open(self.cookies_file, 'w') as file:
                json.dump(self.cookies, file)
            return True
        except:
            return False

    def set_cookies(self, request):
        request['cookies'] = '; '.join([f'{key}={value}' for key, value in self.cookies.items()])","class CookiesUtil:
    """"""
    This is a class as utility for managing and manipulating Cookies, including methods for retrieving, saving, and setting Cookies data.
    """"""

    def __init__(self, cookies_file):
        """"""
        Initializes the CookiesUtil with the specified cookies file.
        :param cookies_file: The cookies file to use, str.
        """"""
        self.cookies_file = cookies_file
        self.cookies = None

    def get_cookies(self, reponse):
        """"""
        Gets the cookies from the specified response,and save it to cookies_file.
        :param reponse: The response to get cookies from, dict.
        >>> cookies_util = CookiesUtil('cookies.json')
        >>> cookies_util.get_cookies({'cookies': {'key1': 'value1', 'key2': 'value2'}})
        >>> cookies_util.cookies
        {'key1': 'value1', 'key2': 'value2'}

        """"""

    def load_cookies(self):
        """"""
        Loads the cookies from the cookies_file to the cookies data.
        :return: The cookies data, dict.
        >>> cookies_util = CookiesUtil('cookies.json')
        >>> cookies_util.load_cookies()
        {'key1': 'value1', 'key2': 'value2'}

        """"""

    def _save_cookies(self):
        """"""
        Saves the cookies to the cookies_file, and returns True if successful, False otherwise.
        :return: True if successful, False otherwise.
        >>> cookies_util = CookiesUtil('cookies.json')
        >>> cookies_util.cookies = {'key1': 'value1', 'key2': 'value2'}
        >>> cookies_util._save_cookies()
        True

        """"""",CookiesUtil,snippet_26,"class CookiesUtil:
    """"""
    This is a class as utility for managing and manipulating Cookies, including methods for retrieving, saving, and setting Cookies data.
    """"""

    def __init__(self, cookies_file):
        """"""
        Initializes the CookiesUtil with the specified cookies file.
        :param cookies_file: The cookies file to use, str.
        """"""
        self.cookies_file = cookies_file
        self.cookies = None

    def get_cookies(self, reponse):
        """"""
        Gets the cookies from the specified response,and save it to cookies_file.
        :param reponse: The response to get cookies from, dict.
        >>> cookies_util = CookiesUtil('cookies.json')
        >>> cookies_util.get_cookies({'cookies': {'key1': 'value1', 'key2': 'value2'}})
        >>> cookies_util.cookies
        {'key1': 'value1', 'key2': 'value2'}

        """"""
        cookies = {}
        # Try dict input
        if isinstance(reponse, dict) and 'cookies' in reponse:
            value = reponse.get('cookies', {})
            if isinstance(value, dict):
                cookies = value
            else:
                try:
                    cookies = dict(value)
                except Exception:
                    cookies = {}
        # Try object with .cookies attribute (e.g., requests.Response)
        elif hasattr(reponse, 'cookies'):
            rc = getattr(reponse, 'cookies')
            try:
                if isinstance(rc, dict):
                    cookies = rc
                elif hasattr(rc, 'items'):
                    cookies = {k: v for k, v in rc.items()}
                else:
                    cookies = dict(rc)
            except Exception:
                cookies = {}
        self.cookies = cookies
        self._save_cookies()
        return cookies

    def load_cookies(self):
        """"""
        Loads the cookies from the cookies_file to the cookies data.
        :return: The cookies data, dict.
        >>> cookies_util = CookiesUtil('cookies.json')
        >>> cookies_util.load_cookies()
        {'key1': 'value1', 'key2': 'value2'}

        """"""
        import json
        import os

        if not isinstance(self.cookies_file, str) or not self.cookies_file:
            self.cookies = {}
            return self.cookies

        if not os.path.exists(self.cookies_file):
            self.cookies = {}
            return self.cookies

        try:
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data, dict):
                    self.cookies = data
                else:
                    # Ensure dict type
                    try:
                        self.cookies = dict(data)
                    except Exception:
                        self.cookies = {}
        except Exception:
            self.cookies = {}
        return self.cookies

    def _save_cookies(self):
        """"""
        Saves the cookies to the cookies_file, and returns True if successful, False otherwise.
        :return: True if successful, False otherwise.
        >>> cookies_util = CookiesUtil('cookies.json')
        >>> cookies_util.cookies = {'key1': 'value1', 'key2': 'value2'}
        >>> cookies_util._save_cookies()
        True

        """"""
        import json
        import os

        try:
            data = self.cookies
            if data is None:
                data = {}
            elif not isinstance(data, dict):
                try:
                    data = dict(data)
                except Exception:
                    return False

            dirname = os.path.dirname(os.path.abspath(self.cookies_file))
            if dirname and not os.path.exists(dirname):
                os.makedirs(dirname, exist_ok=True)

            with open(self.cookies_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, sort_keys=True)
            return True
        except Exception:
            return False"
26,"import csv


class CSVProcessor:

    def __init__(self):
        pass

    def read_csv(self, file_name):
        data = []
        with open(file_name, 'r') as file:
            reader = csv.reader(file)
            title = next(reader)
            for row in reader:
                data.append(row)
        return title, data

    def write_csv(self, data, file_name):
        try:
            with open(file_name, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerows(data)
            return 1
        except:
            return 0

    def process_csv_data(self, N, save_file_name):
        title, data = self.read_csv(save_file_name)
        column_data = [row[N] for row in data]
        column_data = [row.upper() for row in column_data]
        new_data = [title, column_data]
        return self.write_csv(new_data, save_file_name.split('.')[0] + '_process.csv')","class CSVProcessor:
    """"""
    This is a class for processing CSV files, including readring and writing CSV data, as well as processing specific operations and saving as a new CSV file.
    """"""


    def __init__(self):
        pass

    def read_csv(self, file_name):
        """"""
        Read the csv file by file_name, get the title and data from it
        :param file_name: str, name of the csv file
        :return title, data: (list, list), first row is title, the rest is data
        >>> csvProcessor = CSVProcessor()
        >>> csvProcessor.read_csv('read_test.csv')
        (['a', 'b', 'c', 'd'], [['hElLo', 'YoU', 'ME', 'LoW']])
        """"""

    def write_csv(self, data, file_name):
        """"""
        Write data into a csv file.
        :param file_name: str, name of the csv file
        :return:int, if success return 1, or 0 otherwise
        >>> csvProcessor = CSVProcessor()
        >>> csvProcessor.write_csv([['a', 'b', 'c', 'd'], ['1', '2', '3', '4']], 'write_test.csv')
        1
        """"""

    def process_csv_data(self, N, save_file_name):
        """"""
        Read a csv file into variable title and data.
        Only remain the N th (from 0) column data and Capitalize them, store the title and new data into a new csv file.
        Add '_process' suffix after old file name, as a new file name.
        :param N: int, the N th column(from 0)
        :param save_file_name, the name of file that needs to be processed.
        :return:int, if success return 1, or 0 otherwise
        >>> csvProcessor = CSVProcessor()
        >>> csvProcessor.read_csv('read_test.csv')
        (['a', 'b', 'c', 'd'], [['hElLo', 'YoU', 'ME', 'LoW']])
        >>> csvProcessor.process_csv_data(0, 'read_test.csv')
        1
        >>> csvProcessor.read_csv('read_test_process.csv')
        (['a', 'b', 'c', 'd'], [['HELLO']])
        """"""",CSVProcessor,snippet_27,"import csv
import os


class CSVProcessor:
    """"""
    This is a class for processing CSV files, including readring and writing CSV data, as well as processing specific operations and saving as a new CSV file.
    """"""

    def __init__(self):
        pass

    def read_csv(self, file_name):
        """"""
        Read the csv file by file_name, get the title and data from it
        :param file_name: str, name of the csv file
        :return title, data: (list, list), first row is title, the rest is data
        >>> csvProcessor = CSVProcessor()
        >>> csvProcessor.read_csv('read_test.csv')
        (['a', 'b', 'c', 'd'], [['hElLo', 'YoU', 'ME', 'LoW']])
        """"""
        title = []
        data = []
        try:
            with open(file_name, mode='r', encoding='utf-8', newline='') as f:
                reader = csv.reader(f)
                rows = list(reader)
                if rows:
                    title = rows[0]
                    data = rows[1:]
        except Exception:
            pass
        return title, data

    def write_csv(self, data, file_name):
        """"""
        Write data into a csv file.
        :param file_name: str, name of the csv file
        :return:int, if success return 1, or 0 otherwise
        >>> csvProcessor = CSVProcessor()
        >>> csvProcessor.write_csv([['a', 'b', 'c', 'd'], ['1', '2', '3', '4']], 'write_test.csv')
        1
        """"""
        try:
            with open(file_name, mode='w', encoding='utf-8', newline='') as f:
                writer = csv.writer(f)
                for row in data:
                    writer.writerow(row)
            return 1
        except Exception:
            return 0

    def process_csv_data(self, N, save_file_name):
        """"""
        Read a csv file into variable title and data.
        Only remain the N th (from 0) column data and Capitalize them, store the title and new data into a new csv file.
        Add '_process' suffix after old file name, as a new file name.
        :param N: int, the N th column(from 0)
        :param save_file_name, the name of file that needs to be processed.
        :return:int, if success return 1, or 0 otherwise
        >>> csvProcessor = CSVProcessor()
        >>> csvProcessor.read_csv('read_test.csv')
        (['a', 'b', 'c', 'd'], [['hElLo', 'YoU', 'ME', 'LoW']])
        >>> csvProcessor.process_csv_data(0, 'read_test.csv')
        1
        >>> csvProcessor.read_csv('read_test_process.csv')
        (['a', 'b', 'c', 'd'], [['HELLO']])
        """"""
        try:
            title, data = self.read_csv(save_file_name)
            if not title:
                return 0
            if N < 0 or N >= len(title):
                return 0

            processed_data = []
            for row in data:
                if N < len(row):
                    processed_data.append([row[N].upper()])

            base, ext = os.path.splitext(save_file_name)
            new_file = f""{base}_process{ext if ext else '.csv'}""

            content = [title] + processed_data
            return self.write_csv(content, new_file)
        except Exception:
            return 0"
27,"class CurrencyConverter:
    def __init__(self):
        self.rates = {
            'USD': 1.0,
            'EUR': 0.85,
            'GBP': 0.72,
            'JPY': 110.15,
            'CAD': 1.23,
            'AUD': 1.34,
            'CNY': 6.40,
        }

    def convert(self, amount, from_currency, to_currency):
        if from_currency == to_currency:
            return amount

        if from_currency not in self.rates or to_currency not in self.rates:
            return False

        from_rate = self.rates[from_currency]
        to_rate = self.rates[to_currency]

        converted_amount = (amount / from_rate) * to_rate
        return converted_amount

    def get_supported_currencies(self):
        return list(self.rates.keys())

    def add_currency_rate(self, currency, rate):
        if currency in self.rates:
            return False
        self.rates[currency] = rate

    def update_currency_rate(self, currency, new_rate):
        if currency not in self.rates:
            return False
        self.rates[currency] = new_rate","class CurrencyConverter:
    """"""
    This is a class for currency conversion, which supports to convert amounts between different currencies, retrieve supported currencies, add new currency rates, and update existing currency rates.
    """"""

    def __init__(self):
        """"""
        Initialize the exchange rate of the US dollar against various currencies
        """"""
        self.rates = {
            'USD': 1.0,
            'EUR': 0.85,
            'GBP': 0.72,
            'JPY': 110.15,
            'CAD': 1.23,
            'AUD': 1.34,
            'CNY': 6.40,
        }

    def convert(self, amount, from_currency, to_currency):
        """"""
        Convert the value of a given currency to another currency type
        :param amount: float, The value of a given currency
        :param from_currency: string, source currency type
        :param to_currency: string, target currency type
        :return: float, value converted to another currency type
        >>> cc = CurrencyConverter()
        >>> cc.convert(64, 'CNY','USD')
        10.0
        """"""


    def get_supported_currencies(self):
        """"""
        Returns a list of supported currency types
        :return:list, All supported currency types
        >>> cc = CurrencyConverter()
        >>> cc.get_supported_currencies()
        ['USD','EUR','GBP','JPY','CAD','AUD','CNY']
        """"""


    def add_currency_rate(self, currency, rate):
        """"""
        Add a new supported currency type, return False if the currency type is already in the support list
        :param currency:string, currency type to be added
        :param rate:float, exchange rate for this type of currency
        :return:If successful, returns None; if unsuccessful, returns False
        >>> cc = CurrencyConverter()
        >>> cc.add_currency_rate('KRW', 1308.84)
        self.rates['KRW'] = 1308.84
        """"""


    def update_currency_rate(self, currency, new_rate):
        """"""
        Update the exchange rate for a certain currency
        :param currency:string
        :param new_rate:float
        :return:If successful, returns None; if unsuccessful, returns False
        >>> cc = CurrencyConverter()
        >>> cc.update_currency_rate('CNY', 7.18)
        self.rates['CNY'] = 7.18
        """"""",CurrencyConverter,snippet_28,"class CurrencyConverter:
    """"""
    This is a class for currency conversion, which supports to convert amounts between different currencies, retrieve supported currencies, add new currency rates, and update existing currency rates.
    """"""

    def __init__(self):
        """"""
        Initialize the exchange rate of the US dollar against various currencies
        """"""
        self.rates = {
            'USD': 1.0,
            'EUR': 0.85,
            'GBP': 0.72,
            'JPY': 110.15,
            'CAD': 1.23,
            'AUD': 1.34,
            'CNY': 6.40,
        }

    def convert(self, amount, from_currency, to_currency):
        """"""
        Convert the value of a given currency to another currency type
        :param amount: float, The value of a given currency
        :param from_currency: string, source currency type
        :param to_currency: string, target currency type
        :return: float, value converted to another currency type
        >>> cc = CurrencyConverter()
        >>> cc.convert(64, 'CNY','USD')
        10.0
        """"""
        if not isinstance(amount, (int, float)):
            raise TypeError(""amount must be a number"")
        if amount < 0:
            raise ValueError(""amount must be non-negative"")
        if from_currency not in self.rates:
            raise ValueError(f""Unsupported source currency: {from_currency}"")
        if to_currency not in self.rates:
            raise ValueError(f""Unsupported target currency: {to_currency}"")

        if from_currency == to_currency:
            return float(amount)

        amount_in_usd = amount / self.rates[from_currency]
        return amount_in_usd * self.rates[to_currency]

    def get_supported_currencies(self):
        """"""
        Returns a list of supported currency types
        :return:list, All supported currency types
        >>> cc = CurrencyConverter()
        >>> cc.get_supported_currencies()
        ['USD','EUR','GBP','JPY','CAD','AUD','CNY']
        """"""
        return list(self.rates.keys())

    def add_currency_rate(self, currency, rate):
        """"""
        Add a new supported currency type, return False if the currency type is already in the support list
        :param currency:string, currency type to be added
        :param rate:float, exchange rate for this type of currency
        :return:If successful, returns None; if unsuccessful, returns False
        >>> cc = CurrencyConverter()
        >>> cc.add_currency_rate('KRW', 1308.84)
        self.rates['KRW'] = 1308.84
        """"""
        if not isinstance(currency, str) or not currency:
            return False
        if not isinstance(rate, (int, float)) or rate <= 0:
            return False
        if currency in self.rates:
            return False
        self.rates[currency] = float(rate)

    def update_currency_rate(self, currency, new_rate):
        """"""
        Update the exchange rate for a certain currency
        :param currency:string
        :param new_rate:float
        :return:If successful, returns None; if unsuccessful, returns False
        >>> cc = CurrencyConverter()
        >>> cc.update_currency_rate('CNY', 7.18)
        self.rates['CNY'] = 7.18
        """"""
        if not isinstance(currency, str) or currency not in self.rates:
            return False
        if not isinstance(new_rate, (int, float)) or new_rate <= 0:
            return False
        self.rates[currency] = float(new_rate)"
28,"import sqlite3
import pandas as pd


class DatabaseProcessor:

    def __init__(self, database_name):
        self.database_name = database_name

    def create_table(self, table_name, key1, key2):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        create_table_query = f""CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)""
        cursor.execute(create_table_query)

        conn.commit()
        conn.close()

    def insert_into_database(self, table_name, data):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        for item in data:
            insert_query = f""INSERT INTO {table_name} (name, age) VALUES (?, ?)""
            cursor.execute(insert_query, (item['name'], item['age']))

        conn.commit()
        conn.close()

    def search_database(self, table_name, name):

        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        select_query = f""SELECT * FROM {table_name} WHERE name = ?""
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        if result:
            return result
        else:
            return None

    def delete_from_database(self, table_name, name):

        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        delete_query = f""DELETE FROM {table_name} WHERE name = ?""
        cursor.execute(delete_query, (name,))

        conn.commit()
        conn.close()","class DatabaseProcessor:
    """"""
    This is a class for processing a database, supporting to create tables, insert data into the database, search for data based on name, and delete data from the database.
    """"""


    def __init__(self, database_name):
        """"""
        Initialize database name of database processor
        """"""
        self.database_name = database_name


    def create_table(self, table_name, key1, key2):
        """"""
        Create a new table in the database if it doesn't exist.
        And make id (INTEGER) as PRIMARY KEY, make key1 as TEXT, key2 as INTEGER
        :param table_name: str, the name of the table to create.
        :param key1: str, the name of the first column in the table.
        :param key2: str, the name of the second column in the table.
        >>> db.create_table('user', 'name', 'age')
        """"""


    def insert_into_database(self, table_name, data):
        """"""
        Insert data into the specified table in the database.
        :param table_name: str, the name of the table to insert data into.
        :param data: list, a list of dictionaries where each dictionary represents a row of data.
        >>> db.insert_into_database('user', [
                {'name': 'John', 'age': 25},
                {'name': 'Alice', 'age': 30}
            ])
        """"""


    def search_database(self, table_name, name):
        """"""
        Search the specified table in the database for rows with a matching name.
        :param table_name: str, the name of the table to search.
        :param name: str, the name to search for.
        :return: list, a list of tuples representing the rows with matching name, if any;
                    otherwise, returns None.
        >>> db.search_database('user', 'John')
        [(1, 'John', 25)]
        """"""


    def delete_from_database(self, table_name, name):
        """"""
        Delete rows from the specified table in the database with a matching name.
        :param table_name: str, the name of the table to delete rows from.
        :param name: str, the name to match for deletion.
        >>> db.delete_from_database('user', 'John')
        """"""",DatabaseProcessor,snippet_29,"import sqlite3
from typing import List, Dict, Optional, Tuple


class DatabaseProcessor:
    """"""
    This is a class for processing a database, supporting to create tables, insert data into the database, search for data based on name, and delete data from the database.
    """"""

    def __init__(self, database_name):
        """"""
        Initialize database name of database processor
        """"""
        self.database_name = database_name

    def _connect(self):
        return sqlite3.connect(self.database_name)

    def create_table(self, table_name, key1, key2):
        """"""
        Create a new table in the database if it doesn't exist.
        And make id (INTEGER) as PRIMARY KEY, make key1 as TEXT, key2 as INTEGER
        :param table_name: str, the name of the table to create.
        :param key1: str, the name of the first column in the table.
        :param key2: str, the name of the second column in the table.
        >>> db.create_table('user', 'name', 'age')
        """"""
        sql = f""""""
        CREATE TABLE IF NOT EXISTS {self._quote_ident(table_name)} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            {self._quote_ident(key1)} TEXT,
            {self._quote_ident(key2)} INTEGER
        )
        """"""
        with self._connect() as conn:
            conn.execute(sql)
            conn.commit()

    def insert_into_database(self, table_name, data: List[Dict]):
        """"""
        Insert data into the specified table in the database.
        :param table_name: str, the name of the table to insert data into.
        :param data: list, a list of dictionaries where each dictionary represents a row of data.
        >>> db.insert_into_database('user', [
                {'name': 'John', 'age': 25},
                {'name': 'Alice', 'age': 30}
            ])
        """"""
        if not data:
            return

        with self._connect() as conn:
            cursor = conn.cursor()
            cursor.execute(f""PRAGMA table_info({self._quote_ident(table_name)})"")
            cols_info = cursor.fetchall()
            table_cols = {row[1] for row in cols_info}  # column names
            # Exclude 'id' if present; it's auto-increment
            if 'id' in table_cols:
                table_cols.remove('id')

            # Determine insertion columns from first item, filtered by table columns
            insert_cols = [col for col in data[0].keys() if col in table_cols]
            if not insert_cols:
                return

            placeholders = "", "".join([""?""] * len(insert_cols))
            col_list = "", "".join(self._quote_ident(c) for c in insert_cols)
            sql = f""INSERT INTO {self._quote_ident(table_name)} ({col_list}) VALUES ({placeholders})""

            rows = []
            for item in data:
                row = tuple(item.get(col) for col in insert_cols)
                rows.append(row)

            cursor.executemany(sql, rows)
            conn.commit()

    def search_database(self, table_name, name) -> Optional[List[Tuple]]:
        """"""
        Search the specified table in the database for rows with a matching name.
        :param table_name: str, the name of the table to search.
        :param name: str, the name to search for.
        :return: list, a list of tuples representing the rows with matching name, if any;
                    otherwise, returns None.
        >>> db.search_database('user', 'John')
        [(1, 'John', 25)]
        """"""
        with self._connect() as conn:
            cursor = conn.cursor()
            # Assume the table has a 'name' column as per usage examples
            sql = f""SELECT * FROM {self._quote_ident(table_name)} WHERE {self._quote_ident('name')} = ?""
            cursor.execute(sql, (name,))
            rows = cursor.fetchall()
            return rows if rows else None

    def delete_from_database(self, table_name, name):
        """"""
        Delete rows from the specified table in the database with a matching name.
        :param table_name: str, the name of the table to delete rows from.
        :param name: str, the name to match for deletion.
        >>> db.delete_from_database('user', 'John')
        """"""
        with self._connect() as conn:
            cursor = conn.cursor()
            sql = f""DELETE FROM {self._quote_ident(table_name)} WHERE {self._quote_ident('name')} = ?""
            cursor.execute(sql, (name,))
            conn.commit()

    @staticmethod
    def _quote_ident(identifier: str) -> str:
        if not isinstance(identifier, str):
            raise TypeError(""Identifier must be a string"")
        if '""' in identifier:
            identifier = identifier.replace('""', '""""')
        return f'""{identifier}""'"
29,"from collections import Counter


class DataStatistics:
    def mean(self, data):
        return round(sum(data) / len(data), 2)

    def median(self, data):
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 0:
            middle = n // 2
            return round((sorted_data[middle - 1] + sorted_data[middle]) / 2, 2)
        else:
            middle = n // 2
            return sorted_data[middle]

    def mode(self, data):
        counter = Counter(data)
        mode_count = max(counter.values())
        mode = [x for x, count in counter.items() if count == mode_count]
        return mode","class DataStatistics:
    """"""
    This is a class for performing data statistics, supporting to calculate the mean, median, and mode of a given data set.
    """"""

    def mean(self, data):
        """"""
        Calculate the average value of a group of data, accurate to two digits after the Decimal separator
        :param data:list, data list
        :return:float, the mean value
        >>> ds = DataStatistics()
        >>> ds.mean([1, 2, 3, 4, 5])
        3.00
        """"""

    def median(self, data):
        """"""
        Calculate the median of a group of data, accurate to two digits after the Decimal separator
        :param data:list, data list
        :return:float, the median value
        >>> ds = DataStatistics()
        >>> ds.median([2, 5, 1, 3, 4])
        3.00
        """"""

    def mode(self, data):
        """"""
        Calculate the mode of a set of data
        :param data:list, data list
        :return:float, the mode
        >>> ds = DataStatistics()
        >>> ds.mode([2, 2, 3, 3, 4])
        [2, 3]
        """"""",DataStatistics,snippet_30,"class DataStatistics:
    """"""
    This is a class for performing data statistics, supporting to calculate the mean, median, and mode of a given data set.
    """"""

    def mean(self, data):
        """"""
        Calculate the average value of a group of data, accurate to two digits after the Decimal separator
        :param data:list, data list
        :return:float, the mean value
        >>> ds = DataStatistics()
        >>> ds.mean([1, 2, 3, 4, 5])
        3.00
        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        return round(sum(data) / len(data), 2)

    def median(self, data):
        """"""
        Calculate the median of a group of data, accurate to two digits after the Decimal separator
        :param data:list, data list
        :return:float, the median value
        >>> ds = DataStatistics()
        >>> ds.median([2, 5, 1, 3, 4])
        3.00
        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        sorted_data = sorted(data)
        n = len(sorted_data)
        mid = n // 2
        if n % 2 == 1:
            return round(float(sorted_data[mid]), 2)
        else:
            return round((sorted_data[mid - 1] + sorted_data[mid]) / 2.0, 2)

    def mode(self, data):
        """"""
        Calculate the mode of a set of data
        :param data:list, data list
        :return:list, the mode(s)
        >>> ds = DataStatistics()
        >>> ds.mode([2, 2, 3, 3, 4])
        [2, 3]
        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        from collections import Counter

        counts = Counter(data)
        if not counts:
            return []
        max_count = max(counts.values())
        modes = [val for val, cnt in counts.items() if cnt == max_count]
        return sorted(modes)"
30,"import numpy as np


class DataStatistics2:
    def __init__(self, data):
        self.data = np.array(data)

    def get_sum(self):
        return np.sum(self.data)

    def get_min(self):
        return np.min(self.data)

    def get_max(self):
        return np.max(self.data)

    def get_variance(self):
        return round(np.var(self.data), 2)

    def get_std_deviation(self):
        return round(np.std(self.data), 2)

    def get_correlation(self):
        return np.corrcoef(self.data, rowvar=False)","class DataStatistics2:
    """"""
    This is a class for performing data statistics, supporting to get the sum, minimum, maximum, variance, standard deviation, and correlation of a given dataset.
    """"""

    def __init__(self, data):
        """"""
        Initialize Data List
        :param data:list
        """"""
        self.data = np.array(data)

    def get_sum(self):
        """"""
        Calculate the sum of data
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_sum()
        10
        """"""

    def get_min(self):
        """"""
        Calculate the minimum value in the data
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_min()
        1
        """"""

    def get_max(self):
        """"""
        Calculate the maximum value in the data
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_max()
        4
        """"""

    def get_variance(self):
        """"""
        Calculate variance, accurate to two digits after the Decimal separator
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_variance()
        1.25
        """"""

    def get_std_deviation(self):
        """"""
        Calculate standard deviation, accurate to two digits after the Decimal separator
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_std_deviation()
        1.12
        """"""

    def get_correlation(self):
        """"""
        Calculate correlation
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_correlation()
        1.0
        """"""",DataStatistics2,snippet_31,"import numpy as np

class DataStatistics2:
    """"""
    This is a class for performing data statistics, supporting to get the sum, minimum, maximum, variance, standard deviation, and correlation of a given dataset.
    """"""

    def __init__(self, data):
        """"""
        Initialize Data List
        :param data:list
        """"""
        self.data = np.array(data)

    def get_sum(self):
        """"""
        Calculate the sum of data
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_sum()
        10
        """"""
        return np.sum(self.data)

    def get_min(self):
        """"""
        Calculate the minimum value in the data
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_min()
        1
        """"""
        return np.min(self.data)

    def get_max(self):
        """"""
        Calculate the maximum value in the data
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_max()
        4
        """"""
        return np.max(self.data)

    def get_variance(self):
        """"""
        Calculate variance, accurate to two digits after the Decimal separator
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_variance()
        1.25
        """"""
        var = np.var(self.data)  # population variance
        return round(float(var), 2)

    def get_std_deviation(self):
        """"""
        Calculate standard deviation, accurate to two digits after the Decimal separator
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_std_deviation()
        1.12
        """"""
        std = np.sqrt(np.var(self.data))  # population std
        return round(float(std), 2)

    def get_correlation(self):
        """"""
        Calculate correlation
        :return:float
        >>> ds2 = DataStatistics2([1, 2, 3, 4])
        >>> ds2.get_correlation()
        1.0
        """"""
        n = len(self.data)
        if n < 2:
            return 0.0
        x = np.arange(n)
        x_std = np.std(x)
        y_std = np.std(self.data)
        if x_std == 0 or y_std == 0:
            return 0.0
        corr = np.corrcoef(x, self.data)[0, 1]
        return float(round(corr, 2))"
31,"import math

class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n

        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))

        return numerator / denominator if denominator != 0 else 0
    
    @staticmethod
    def skewness(data):
        n = len(data)
        mean = sum(data) / n
        variance = sum((x - mean) ** 2 for x in data) / n
        std_deviation = math.sqrt(variance)

        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0

        return skewness
    
    @staticmethod
    def kurtosis(data):

        n = len(data)
        mean = sum(data) / n
        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)

        if std_dev == 0:
            return math.nan

        centered_data = [(x - mean) for x in data]
        fourth_moment = sum(x ** 4 for x in centered_data) / n

        kurtosis_value = (fourth_moment / std_dev ** 4) - 3

        return kurtosis_value
    
    @staticmethod
    def pdf(data, mu, sigma):
        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]
        return pdf_values","class DataStatistics4:
    """"""
    This is a class that performs advanced mathematical calculations and statistics, including correlation coefficient, skewness, kurtosis, and probability density function (PDF) for a normal distribution.
    """"""


    @staticmethod
    def correlation_coefficient(data1, data2):
        """"""
        Calculate the correlation coefficient of two sets of data.
        :param data1: The first set of data,list.
        :param data2: The second set of data,list.
        :return: The correlation coefficient, float.
        >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])
        0.9999999999999998

        """"""

    @staticmethod
    def skewness(data):
        """"""
        Calculate the skewness of a set of data.
        :param data: The input data list, list.
        :return: The skewness, float.
        >>> DataStatistics4.skewness([1, 2, 5])
        2.3760224064818463

        """"""

    @staticmethod
    def kurtosis(data):
        """"""
        Calculate the kurtosis of a set of data.
        :param data: The input data list, list.
        :return: The kurtosis, float.
        >>> DataStatistics4.kurtosis([1, 20,100])
        -1.5000000000000007

        """"""

    @staticmethod
    def pdf(data, mu, sigma):
        """"""
        Calculate the probability density function (PDF) of a set of data under a normal distribution.
        :param data: The input data list, list.
        :param mu: The mean of the normal distribution, float.
        :param sigma: The standard deviation of the normal distribution, float.
        :return: The probability density function (PDF), list.
        >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]

        """"""",DataStatistics4,snippet_32,"class DataStatistics4:
    """"""
    This is a class that performs advanced mathematical calculations and statistics, including correlation coefficient, skewness, kurtosis, and probability density function (PDF) for a normal distribution.
    """"""

    @staticmethod
    def correlation_coefficient(data1, data2):
        """"""
        Calculate the correlation coefficient of two sets of data.
        :param data1: The first set of data,list.
        :param data2: The second set of data,list.
        :return: The correlation coefficient, float.
        >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])
        0.9999999999999998

        """"""
        import math
        if not isinstance(data1, list) or not isinstance(data2, list):
            raise TypeError(""data1 and data2 must be lists"")
        if len(data1) != len(data2) or len(data1) < 2:
            raise ValueError(""data1 and data2 must have the same length and length >= 2"")
        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n
        cov = sum((x - mean1) * (y - mean2) for x, y in zip(data1, data2)) / n
        var1 = sum((x - mean1) ** 2 for x in data1) / n
        var2 = sum((y - mean2) ** 2 for y in data2) / n
        if var1 == 0 or var2 == 0:
            raise ValueError(""Variance of data1 or data2 is zero"")
        return cov / math.sqrt(var1 * var2)

    @staticmethod
    def skewness(data):
        """"""
        Calculate the skewness of a set of data.
        :param data: The input data list, list.
        :return: The skewness, float.
        >>> DataStatistics4.skewness([1, 2, 5])
        2.3760224064818463

        """"""
        import math
        if not isinstance(data, list):
            raise TypeError(""data must be a list"")
        n = len(data)
        if n < 3:
            raise ValueError(""skewness requires at least 3 data points"")
        mean = sum(data) / n
        diffs = [x - mean for x in data]
        m2 = sum(d * d for d in diffs) / n  # population second central moment
        if m2 == 0:
            return 0.0
        m3_sum = sum(d ** 3 for d in diffs)  # sum of third central moment terms
        sigma = math.sqrt(m2)
        # Adjusted skewness using population sigma in the denominator
        return (n / ((n - 1) * (n - 2))) * (m3_sum / (sigma ** 3))

    @staticmethod
    def kurtosis(data):
        """"""
        Calculate the kurtosis of a set of data.
        :param data: The input data list, list.
        :return: The kurtosis, float.
        >>> DataStatistics4.kurtosis([1, 20,100])
        -1.5000000000000007

        """"""
        if not isinstance(data, list):
            raise TypeError(""data must be a list"")
        n = len(data)
        if n == 0:
            raise ValueError(""kurtosis requires at least 1 data point"")
        mean = sum(data) / n
        diffs = [x - mean for x in data]
        m2 = sum(d * d for d in diffs) / n  # population second central moment
        if m2 == 0:
            return -3.0  # degenerate case: all points equal -> excess kurtosis of a delta is undefined; return -3 for consistency with μ4/μ2^2 - 3 when μ4=0
        m4 = sum(d ** 4 for d in diffs) / n  # population fourth central moment
        return (m4 / (m2 ** 2)) - 3.0

    @staticmethod
    def pdf(data, mu, sigma):
        """"""
        Calculate the probability density function (PDF) of a set of data under a normal distribution.
        :param data: The input data list, list.
        :param mu: The mean of the normal distribution, float.
        :param sigma: The standard deviation of the normal distribution, float.
        :return: The probability density function (PDF), list.
        >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]

        """"""
        import math
        if not isinstance(data, list):
            raise TypeError(""data must be a list"")
        if sigma <= 0:
            raise ValueError(""sigma must be positive"")
        coef = 1.0 / (math.sqrt(2.0 * math.pi) * sigma)
        two_sigma2 = 2.0 * sigma * sigma
        return [coef * math.exp(-((x - mu) ** 2) / two_sigma2) for x in data]"
32,"class DecryptionUtils:
    def __init__(self, key):
        self.key = key
    
    def caesar_decipher(self, ciphertext, shift):
        plaintext = """"
        for char in ciphertext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)
                plaintext += shifted_char
            else:
                plaintext += char
        return plaintext
    
    def vigenere_decipher(self, ciphertext):
        decrypted_text = """"
        key_index = 0
        for char in ciphertext:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                decrypted_char = chr((ord(char.lower()) - ord('a') - shift) % 26 + ord('a'))
                decrypted_text += decrypted_char.upper() if char.isupper() else decrypted_char
                key_index += 1
            else:
                decrypted_text += char
        return decrypted_text
    
    def rail_fence_decipher(self, encrypted_text, rails):
        fence = [['\n' for _ in range(len(encrypted_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            fence[row][col] = ''
            col += 1
            row += direction

        index = 0
        for i in range(rails):
            for j in range(len(encrypted_text)):
                if fence[i][j] == '':
                    fence[i][j] = encrypted_text[index]
                    index += 1

        plain_text = ''
        direction = -1
        row, col = 0, 0
        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            plain_text += fence[row][col]
            col += 1
            row += direction

        return plain_text","class DecryptionUtils:
    """"""
    This is a class that provides methods for decryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.
    """"""

    def __init__(self, key):
        """"""
        Initializes the decryption utility with a key.
        :param key: The key to use for decryption,str.
        """"""
        self.key = key

    def caesar_decipher(self, ciphertext, shift):
        """"""
        Deciphers the given ciphertext using the Caesar cipher
        :param ciphertext: The ciphertext to decipher,str.
        :param shift: The shift to use for decryption,int.
        :return: The deciphered plaintext,str.
        >>> d = DecryptionUtils('key')
        >>> d.caesar_decipher('ifmmp', 1)
        'hello'

        """"""

    def vigenere_decipher(self, ciphertext):
        """"""
        Deciphers the given ciphertext using the Vigenere cipher
        :param ciphertext: The ciphertext to decipher,str.
        :return: The deciphered plaintext,str.
        >>> d = DecryptionUtils('key')
        >>> d.vigenere_decipher('ifmmp')
        'ybocl'

        """"""

    def rail_fence_decipher(self, encrypted_text, rails):
        """"""
        Deciphers the given ciphertext using the Rail Fence cipher
        :param encrypted_text: The ciphertext to decipher,str.
        :param rails: The number of rails to use for decryption,int.
        :return: The deciphered plaintext,str.
        >>> d = DecryptionUtils('key')
        >>> d.rail_fence_decipher('Hoo!el,Wrdl l', 3)
        'Hello, World!'

        """"""",DecryptionUtils,snippet_33,"class DecryptionUtils:
    """"""
    This is a class that provides methods for decryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.
    """"""

    def __init__(self, key):
        """"""
        Initializes the decryption utility with a key.
        :param key: The key to use for decryption,str.
        """"""
        self.key = key

    def caesar_decipher(self, ciphertext, shift):
        """"""
        Deciphers the given ciphertext using the Caesar cipher
        :param ciphertext: The ciphertext to decipher,str.
        :param shift: The shift to use for decryption,int.
        :return: The deciphered plaintext,str.
        >>> d = DecryptionUtils('key')
        >>> d.caesar_decipher('ifmmp', 1)
        'hello'

        """"""
        if not isinstance(ciphertext, str):
            raise TypeError(""ciphertext must be a string"")
        if not isinstance(shift, int):
            raise TypeError(""shift must be an int"")

        result = []
        shift = shift % 26
        for ch in ciphertext:
            if 'a' <= ch <= 'z':
                base = ord('a')
                val = (ord(ch) - base - shift) % 26
                result.append(chr(base + val))
            elif 'A' <= ch <= 'Z':
                base = ord('A')
                val = (ord(ch) - base - shift) % 26
                result.append(chr(base + val))
            else:
                result.append(ch)
        return ''.join(result)

    def vigenere_decipher(self, ciphertext):
        """"""
        Deciphers the given ciphertext using the Vigenere cipher
        :param ciphertext: The ciphertext to decipher,str.
        :return: The deciphered plaintext,str.
        >>> d = DecryptionUtils('key')
        >>> d.vigenere_decipher('ifmmp')
        'ybocl'

        """"""
        if not isinstance(ciphertext, str):
            raise TypeError(""ciphertext must be a string"")
        if not isinstance(self.key, str) or len(self.key) == 0:
            raise ValueError(""key must be a non-empty string"")

        key_shifts = [(ord(k.lower()) - ord('a')) % 26 for k in self.key if k.isalpha()]
        if not key_shifts:
            raise ValueError(""key must contain at least one alphabetic character"")

        result = []
        ki = 0
        for ch in ciphertext:
            if ch.isalpha():
                shift = key_shifts[ki % len(key_shifts)]
                if ch.islower():
                    base = ord('a')
                    val = (ord(ch) - base - shift) % 26
                    result.append(chr(base + val))
                else:
                    base = ord('A')
                    val = (ord(ch) - base - shift) % 26
                    result.append(chr(base + val))
                ki += 1
            else:
                result.append(ch)
        return ''.join(result)

    def rail_fence_decipher(self, encrypted_text, rails):
        """"""
        Deciphers the given ciphertext using the Rail Fence cipher
        :param encrypted_text: The ciphertext to decipher,str.
        :param rails: The number of rails to use for decryption,int.
        :return: The deciphered plaintext,str.
        >>> d = DecryptionUtils('key')
        >>> d.rail_fence_decipher('Hoo!el,Wrdl l', 3)
        'Hello, World!'

        """"""
        if not isinstance(encrypted_text, str):
            raise TypeError(""encrypted_text must be a string"")
        if not isinstance(rails, int):
            raise TypeError(""rails must be an int"")
        n = len(encrypted_text)
        if rails <= 1 or rails >= n:
            return encrypted_text

        # Determine rail pattern for positions
        pattern = []
        rail = 0
        direction = 1  # 1 down, -1 up
        for _ in range(n):
            pattern.append(rail)
            rail += direction
            if rail == 0 or rail == rails - 1:
                direction *= -1

        # Count characters per rail
        counts = [0] * rails
        for r in pattern:
            counts[r] += 1

        # Slice the encrypted text to rails
        rails_chars = []
        idx = 0
        for count in counts:
            rails_chars.append(list(encrypted_text[idx:idx + count]))
            idx += count

        # Reconstruct plaintext by consuming from rails in pattern order
        pointers = [0] * rails
        result_chars = []
        for r in pattern:
            result_chars.append(rails_chars[r][pointers[r]])
            pointers[r] += 1

        return ''.join(result_chars)"
33,"class DiscountStrategy:
    def __init__(self, customer, cart, promotion=None):
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self.__total = self.total()

    def total(self):
        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
        return self.__total

    def due(self):
        if self.promotion is None:
            discount = 0
        else:
            discount = self.promotion(self)
        return self.__total - discount

    @staticmethod
    def FidelityPromo(order):
        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0

    @staticmethod
    def BulkItemPromo(order):
        discount = 0
        for item in order.cart:
            if item['quantity'] >= 20:
                discount += item['quantity'] * item['price'] * 0.1
        return discount

    @staticmethod
    def LargeOrderPromo(order):
        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0","class DiscountStrategy:
    """"""
    This is a class that allows to use different discount strategy based on shopping credit or shopping cart in supermarket.
    """"""

    def __init__(self, customer, cart, promotion=None):
        """"""
        Initialize the DiscountStrategy with customer information, a cart of items, and an optional promotion.
        :param customer: dict, customer information
        :param cart: list of dicts, a cart of items with details
        :param promotion: function, optional promotion applied to the order
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)

        """"""
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self.total()

    def total(self):
        """"""
        Calculate the total cost of items in the cart.
        :return: float, total cost of items
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> ds = DiscountStrategy(customer, cart)
        >>> ds.total()
        329.0

        """"""


    def due(self):
        """"""
        Calculate the final amount to be paid after applying the discount.
        :return: float, final amount to be paid
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> ds = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        >>> ds.due()
        312.55

        """"""


    @staticmethod
    def FidelityPromo(order):
        """"""
        Calculate the discount based on the fidelity points of the customer.Customers with over 1000 points can enjoy a 5% discount on the entire order.
        :param order: object, the order to apply the discount to
        :return: float, discount amount
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> order = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        >>> DiscountStrategy.FidelityPromo(order)
        16.45

        """"""


    @staticmethod
    def BulkItemPromo(order):
        """"""
        Calculate the discount based on bulk item quantity in the order.In the same order, if the quantity of a single item reaches 20 or more, each item will enjoy a 10% discount.
        :param order: object, the order to apply the discount to
        :return: float, discount amount
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 20, 'price': 23.5}]
        >>> order = DiscountStrategy(customer, cart, DiscountStrategy.BulkItemPromo)
        >>> DiscountStrategy.BulkItemPromo(order)
        47.0

        """"""


    @staticmethod
    def LargeOrderPromo(order):
        """"""
        Calculate the discount based on the number of different products in the order.If the quantity of different products in the order reaches 10 or more, the entire order will enjoy a 7% discount.
        :param order: object, the order to apply the discount to
        :return: float, discount amount
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> order = DiscountStrategy(customer, cart, DiscountStrategy.LargeOrderPromo)
        >>> DiscountStrategy.LargeOrderPromo(order)
        0.0

        """"""",DiscountStrategy,snippet_34,"class DiscountStrategy:
    """"""
    This is a class that allows to use different discount strategy based on shopping credit or shopping cart in supermarket.
    """"""

    def __init__(self, customer, cart, promotion=None):
        """"""
        Initialize the DiscountStrategy with customer information, a cart of items, and an optional promotion.
        :param customer: dict, customer information
        :param cart: list of dicts, a cart of items with details
        :param promotion: function, optional promotion applied to the order
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)

        """"""
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self._total = self.total()

    def total(self):
        """"""
        Calculate the total cost of items in the cart.
        :return: float, total cost of items
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> ds = DiscountStrategy(customer, cart)
        >>> ds.total()
        329.0

        """"""
        total = 0.0
        for item in self.cart:
            total += item.get('quantity', 0) * item.get('price', 0.0)
        self._total = total
        return total

    def due(self):
        """"""
        Calculate the final amount to be paid after applying the discount.
        :return: float, final amount to be paid
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> ds = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        >>> ds.due()
        312.55

        """"""
        total = self._total if hasattr(self, ""_total"") else self.total()
        discount = 0.0
        if self.promotion is not None:
            discount = self.promotion(self)
        return total - discount

    @staticmethod
    def FidelityPromo(order):
        """"""
        Calculate the discount based on the fidelity points of the customer.Customers with over 1000 points can enjoy a 5% discount on the entire order.
        :param order: object, the order to apply the discount to
        :return: float, discount amount
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> order = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        >>> DiscountStrategy.FidelityPromo(order)
        16.45

        """"""
        fidelity = order.customer.get('fidelity', 0)
        total = order._total if hasattr(order, ""_total"") else order.total()
        if fidelity > 1000:
            return total * 0.05
        return 0.0

    @staticmethod
    def BulkItemPromo(order):
        """"""
        Calculate the discount based on bulk item quantity in the order.In the same order, if the quantity of a single item reaches 20 or more, each item will enjoy a 10% discount.
        :param order: object, the order to apply the discount to
        :return: float, discount amount
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 20, 'price': 23.5}]
        >>> order = DiscountStrategy(customer, cart, DiscountStrategy.BulkItemPromo)
        >>> DiscountStrategy.BulkItemPromo(order)
        47.0

        """"""
        discount = 0.0
        for item in order.cart:
            qty = item.get('quantity', 0)
            price = item.get('price', 0.0)
            if qty >= 20:
                discount += qty * price * 0.10
        return discount

    @staticmethod
    def LargeOrderPromo(order):
        """"""
        Calculate the discount based on the number of different products in the order.If the quantity of different products in the order reaches 10 or more, the entire order will enjoy a 7% discount.
        :param order: object, the order to apply the discount to
        :return: float, discount amount
        >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        >>> order = DiscountStrategy(customer, cart, DiscountStrategy.LargeOrderPromo)
        >>> DiscountStrategy.LargeOrderPromo(order)
        0.0

        """"""
        products = {item.get('product') for item in order.cart}
        if len(products) >= 10:
            total = order._total if hasattr(order, ""_total"") else order.total()
            return total * 0.07
        return 0.0"
34,"from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT


class DocFileHandler:
    def __init__(self, file_path):
        self.file_path = file_path

    def read_text(self):
        doc = Document(self.file_path)
        text = []
        for paragraph in doc.paragraphs:
            text.append(paragraph.text)
        return ""\n"".join(text)

    def write_text(self, content, font_size=12, alignment='left'):
        try:
            doc = Document()
            paragraph = doc.add_paragraph()
            run = paragraph.add_run(content)
            font = run.font
            font.size = Pt(font_size)
            alignment_value = self._get_alignment_value(alignment)
            paragraph.alignment = alignment_value
            doc.save(self.file_path)
            return True
        except:
            return False

    def add_heading(self, heading, level=1):
        try:
            doc = Document(self.file_path)
            doc.add_heading(heading, level)
            doc.save(self.file_path)
            return True
        except:
            return False

    def add_table(self, data):
        try:
            doc = Document(self.file_path)
            table = doc.add_table(rows=len(data), cols=len(data[0]))
            for i, row in enumerate(data):
                for j, cell_value in enumerate(row):
                    table.cell(i, j).text = str(cell_value)
            doc.save(self.file_path)
            return True
        except:
            return False

    def _get_alignment_value(self, alignment):
        alignment_options = {
            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,
            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,
            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT
        }
        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)","class DocFileHandler:
    """"""
    This is a class that handles Word documents and provides functionalities for reading, writing, and modifying the content of Word documents.
    """"""

    def __init__(self, file_path):
        """"""
        Initializes the DocFileHandler object with the specified file path.
        :param file_path: str, the path to the Word document file.
        """"""
        self.file_path = file_path

    def read_text(self):
        """"""
        Reads the content of a Word document and returns it as a string.
        :return: str, the content of the Word document.
        """"""

    def write_text(self, content, font_size=12, alignment='left'):
        """"""
        Writes the specified content to a Word document.
        :param content: str, the text content to write.
        :param font_size: int, optional, the font size of the text (default is 12).
        :param alignment: str, optional, the alignment of the text ('left', 'center', or 'right'; default is 'left').
        :return: bool, True if the write operation is successful, False otherwise.
        """"""

    def add_heading(self, heading, level=1):
        """"""
        Adds a heading to the Word document.
        :param heading: str, the text of the heading.
        :param level: int, optional, the level of the heading (1, 2, 3, etc.; default is 1).
        :return: bool, True if the heading is successfully added, False otherwise.
        """"""

    def add_table(self, data):
        """"""
        Adds a table to the Word document with the specified data.
        :param data: list of lists, the data to populate the table.
        :return: bool, True if the table is successfully added, False otherwise.
        """"""

    def _get_alignment_value(self, alignment):
        """"""
        Returns the alignment value corresponding to the given alignment string.
        :param alignment: str, the alignment string ('left', 'center', or 'right').
        :return: int, the alignment value.
        """"""",DocFileHandler,snippet_35,"```python
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import os


class DocFileHandler:
    """"""
    This is a class that handles Word documents and provides functionalities for reading, writing, and modifying the content of Word documents.
    """"""

    def __init__(self, file_path):
        """"""
        Initializes the DocFileHandler object with the specified file path.
        :param file_path: str, the path to the Word document file.
        """"""
        self.file_path = file_path

    def read_text(self):
        """"""
        Reads the content of a Word document and returns it as a string.
        :return: str, the content of the Word document.
        """"""
        try:
            if not os.path.exists(self.file_path):
                return """"
            doc = Document(self.file_path)
            parts = []
            for p in doc.paragraphs:
                parts.append(p.text)
            for table in doc.tables:
                for row in table.rows:
                    parts.append(""\t"".join(cell.text for cell in row.cells))
            return ""\n"".join(parts)
        except Exception:
            return """"

    def write_text(self, content, font_size=12, alignment='left'):
        """"""
        Writes the specified content to a Word document.
        :param content: str, the text content to write.
        :param font_size: int, optional, the font size of the text (default is 12).
        :param alignment: str, optional, the alignment of the text ('left', 'center', or 'right'; default is 'left').
        :return: bool, True if the write operation is successful, False otherwise.
        """"""
        try:
            doc = Document()
            para = doc.add_paragraph()
            run = para.add_run(str(content) if content is not None else """")
            try:
                run.font.size = Pt(int(font_size))
            except Exception:
                run.font.size = Pt(12)
            para.alignment = self._get_alignment_value(alignment)
            doc.save(self.file_path)
            return True
        except Exception:
            return False

    def add_heading(self, heading, level=1):
        """"""
        Adds a heading to the Word document.
        :param heading: str, the text of the heading.
        :param level: int, optional, the level of the heading (1, 2, 3, etc.; default is 1).
        :return: bool, True if the heading is successfully added, False otherwise.
        """"""
        try:
            doc = self._load_or_create_document()
            lvl = int(level) if isinstance(level, (int, str)) else 1
            if lvl < 0:
                lvl = 1
            doc.add_heading(heading if heading is not None else """", level=lvl)
            doc.save(self.file_path)
            return True
        except Exception:
            return False

    def add_table(self, data):
        """"""
        Adds a table to the Word document with the specified data.
        :param data: list of lists, the data to populate the table.
        :return: bool, True if the table is successfully added, False otherwise.
        """"""
        try:
            if not isinstance(data, list) or (len(data) > 0 and not all(isinstance(row, list) for row in data)):
                return False
            rows = len(data)
            cols = max((len(row) for row in data), default=0)
            if rows == 0 or cols == 0:
                return False

            doc = self._load_or_create_document()
            table = doc.add_table(rows=rows, cols=cols)
            for r_idx, row in enumerate(data):
                for c_idx in range(cols):
                    val = row[c_idx] if c_idx < len(row) else """"
                    table.cell(r_idx, c_idx).text = """" if val is None else str(val)
            doc.save(self.file_path)
            return True
        except Exception:
            return False

    def _get_alignment_value(self, alignment):
        """"""
        Returns the alignment value corresponding to the given alignment string.
        :param alignment: str, the alignment string ('left', 'center', or 'right').
        :return: int, the alignment value.
        """"""
        try:
            key = str(alignment).strip().lower()
        except Exception:
            key = ""left""
        mapping = {
            ""left"": WD_ALIGN_PARAGRAPH.LEFT,
            ""center"": WD_ALIGN_PARAGRAPH.CENTER,
            ""right"": WD_ALIGN_PARAGRAPH.RIGHT,
            ""justify"": WD_ALIGN_PARAGRAPH.JUSTIFY,
        }
        return mapping.get(key, WD_ALIGN_PARAGRAPH.LEFT)

    def _load_or_create_document(self):
        if os.path.exists(self.file_path):
            return Document(self.file_path)
        return Document()
```"
35,"class EightPuzzle:
    def __init__(self, initial_state):
        self.initial_state = initial_state
        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def find_blank(self, state):
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return i, j

    def move(self, state, direction):
        i, j = self.find_blank(state)
        new_state = [row[:] for row in state]

        if direction == 'up':
            new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]
        elif direction == 'down':
            new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]
        elif direction == 'left':
            new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]
        elif direction == 'right':
            new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]

        return new_state

    def get_possible_moves(self, state):
        moves = []
        i, j = self.find_blank(state)

        if i > 0:
            moves.append('up')
        if i < 2:
            moves.append('down')
        if j > 0:
            moves.append('left')
        if j < 2:
            moves.append('right')

        return moves

    def solve(self):
        open_list = [(self.initial_state, [])]
        closed_list = []

        while open_list:
            current_state, path = open_list.pop(0)
            closed_list.append(current_state)

            if current_state == self.goal_state:
                return path

            for move in self.get_possible_moves(current_state):
                new_state = self.move(current_state, move)
                if new_state not in closed_list:
                    open_list.append((new_state, path + [move]))

        return None","class EightPuzzle:
    """"""
    This class is an implementation of the classic 8-puzzle game, including methods for finding the blank tile, making moves, getting possible moves, and solving the puzzle using a breadth-first search algorithm.
    """"""

    def __init__(self, initial_state):
        """"""
        Initializing the initial state of Eight Puzzle Game, stores in attribute self.initial_state.
        And set the goal state of this game, stores in self.goal_state. In this case, set the size as 3*3
        :param initial_state: a 3*3 size list of Integer, stores the initial state
        """"""
        self.initial_state = initial_state
        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def find_blank(self, state):
        """"""
        Find the blank position of current state, which is the 0 element.
        :param state: a 3*3 size list of Integer, stores the current state.
        :return i, j: two Integers, represent the coordinate of the blank block.
        >>> eightPuzzle = EightPuzzle([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        >>> eightPuzzle.find_blank([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        (2, 1)
        """"""

    def move(self, state, direction):
        """"""
        Find the blank block, then makes the board moves forward the given direction.
        :param state: a 3*3 size list of Integer, stores the state before moving.
        :param direction: str, only has 4 direction 'up', 'down', 'left', 'right'
        :return new_state: a 3*3 size list of Integer, stores the state after moving.
        >>> eightPuzzle.move([[2, 3, 4], [5, 8, 1], [6, 0, 7]], 'left')
        [[2, 3, 4], [5, 8, 1], [0, 6, 7]]
        """"""

    def get_possible_moves(self, state):
        """"""
        According the current state, find all the possible moving directions. Only has 4 direction 'up', 'down', 'left', 'right'.
        :param state: a 3*3 size list of Integer, stores the current state.
        :return moves: a list of str, store all the possible moving directions according to the current state.
        >>> eightPuzzle.get_possible_moves([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        ['up', 'left', 'right']
        """"""

    def solve(self):
        """"""
        Use BFS algorithm to find the path solution which makes the initial state to the goal method.
        Maintain a list as a queue, named as open_list, append the initial state.
        Always visit and pop the 0 index element, invoke get_possible_moves method find all the possible directions.
        Traversal the possible_moves list and invoke move method to get several new states.Then append them.
        redo the above steps until the open_list is empty or the state has changed to the goal state.
        :return path: list of str, the solution to the goal state.
        >>> eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        >>> eightPuzzle.solve()
        ['right']
        """"""",EightPuzzle,snippet_36,"class EightPuzzle:
    """"""
    This class is an implementation of the classic 8-puzzle game, including methods for finding the blank tile, making moves, getting possible moves, and solving the puzzle using a breadth-first search algorithm.
    """"""

    def __init__(self, initial_state):
        """"""
        Initializing the initial state of Eight Puzzle Game, stores in attribute self.initial_state.
        And set the goal state of this game, stores in self.goal_state. In this case, set the size as 3*3
        :param initial_state: a 3*3 size list of Integer, stores the initial state
        """"""
        self.initial_state = initial_state
        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def find_blank(self, state):
        """"""
        Find the blank position of current state, which is the 0 element.
        :param state: a 3*3 size list of Integer, stores the current state.
        :return i, j: two Integers, represent the coordinate of the blank block.
        >>> eightPuzzle = EightPuzzle([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        >>> eightPuzzle.find_blank([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        (2, 1)
        """"""
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return i, j
        raise ValueError(""Blank tile (0) not found in state"")

    def move(self, state, direction):
        """"""
        Find the blank block, then makes the board moves forward the given direction.
        :param state: a 3*3 size list of Integer, stores the state before moving.
        :param direction: str, only has 4 direction 'up', 'down', 'left', 'right'
        :return new_state: a 3*3 size list of Integer, stores the state after moving.
        >>> eightPuzzle = EightPuzzle([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        >>> eightPuzzle.move([[2, 3, 4], [5, 8, 1], [6, 0, 7]], 'left')
        [[2, 3, 4], [5, 8, 1], [0, 6, 7]]
        """"""
        i, j = self.find_blank(state)
        new_state = [row[:] for row in state]

        if direction == 'up':
            if i == 0:
                return state
            new_i, new_j = i - 1, j
        elif direction == 'down':
            if i == 2:
                return state
            new_i, new_j = i + 1, j
        elif direction == 'left':
            if j == 0:
                return state
            new_i, new_j = i, j - 1
        elif direction == 'right':
            if j == 2:
                return state
            new_i, new_j = i, j + 1
        else:
            raise ValueError(""Invalid direction. Use 'up', 'down', 'left', or 'right'."")

        new_state[i][j], new_state[new_i][new_j] = new_state[new_i][new_j], new_state[i][j]
        return new_state

    def get_possible_moves(self, state):
        """"""
        According the current state, find all the possible moving directions. Only has 4 direction 'up', 'down', 'left', 'right'.
        :param state: a 3*3 size list of Integer, stores the current state.
        :return moves: a list of str, store all the possible moving directions according to the current state.
        >>> eightPuzzle = EightPuzzle([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        >>> eightPuzzle.get_possible_moves([[2, 3, 4], [5, 8, 1], [6, 0, 7]])
        ['up', 'left', 'right']
        """"""
        i, j = self.find_blank(state)
        moves = []
        if i > 0:
            moves.append('up')
        if i < 2:
            moves.append('down')
        if j > 0:
            moves.append('left')
        if j < 2:
            moves.append('right')
        return moves

    def solve(self):
        """"""
        Use BFS algorithm to find the path solution which makes the initial state to the goal method.
        Maintain a list as a queue, named as open_list, append the initial state.
        Always visit and pop the 0 index element, invoke get_possible_moves method find all the possible directions.
        Traversal the possible_moves list and invoke move method to get several new states.Then append them.
        redo the above steps until the open_list is empty or the state has changed to the goal state.
        :return path: list of str, the solution to the goal state.
        >>> eightPuzzle = EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        >>> eightPuzzle.solve()
        ['right']
        """"""
        from collections import deque

        def to_tuple(state):
            return tuple(tuple(row) for row in state)

        start = to_tuple(self.initial_state)
        goal = to_tuple(self.goal_state)

        if start == goal:
            return []

        queue = deque([start])
        parents = {start: (None, None)}
        visited = {start}

        while queue:
            current = queue.popleft()
            current_list = [list(row) for row in current]

            if current == goal:
                break

            for mv in self.get_possible_moves(current_list):
                next_state = self.move(current_list, mv)
                next_t = to_tuple(next_state)
                if next_t not in visited:
                    visited.add(next_t)
                    parents[next_t] = (current, mv)
                    queue.append(next_t)
                    if next_t == goal:
                        queue.clear()
                        break

        if goal not in parents:
            return []

        path = []
        node = goal
        while parents[node][0] is not None:
            node, move_taken = parents[node]
            path.append(parents[to_tuple([list(r) for r in node])][1] if move_taken is None else move_taken)
        path.reverse()
        return path"
36,"from datetime import datetime

class EmailClient:
    def __init__(self, addr, capacity) -> None:
        self.addr = addr
        self.capacity = capacity
        self.inbox = []
    
    def send_to(self, recv, content, size):
        if not recv.is_full_with_one_more_email(size):
            timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
            email = {
                ""sender"": self.addr,
                ""receiver"": recv.addr,
                ""content"": content,
                ""size"": size,
                ""time"": timestamp,
                ""state"": ""unread""
            }
            recv.inbox.append(email)
            return True
        else:
            self.clear_inbox(size)
            return False
    
    def fetch(self):
        if len(self.inbox) == 0:
            return None
        for i in range(len(self.inbox)):
            if self.inbox[i]['state'] == ""unread"":
                self.inbox[i]['state'] = ""read""
                return self.inbox[i]
        return None

    def is_full_with_one_more_email(self, size):
        occupied_size = self.get_occupied_size()
        return True if occupied_size + size > self.capacity else False
        
    def get_occupied_size(self):
        occupied_size = 0
        for email in self.inbox:
            occupied_size += email[""size""]
        return occupied_size

    def clear_inbox(self, size):
        if len(self.addr) == 0:
            return
        freed_space = 0
        while freed_space < size and self.inbox:
            email = self.inbox[0]
            freed_space += email['size']
            del self.inbox[0]","class EmailClient:
    """"""
    This is a class that serves as an email client, implementing functions such as checking emails, determining whether there is sufficient space, and cleaning up space
    """"""

    def __init__(self, addr, capacity) -> None:
        """"""
        Initializes the EmailClient class with the email address and the capacity of the email box.
        :param addr: The email address, str.
        :param capacity: The capacity of the email box, float.
        """"""
        self.addr = addr
        self.capacity = capacity
        self.inbox = []

    def send_to(self, recv, content, size):
        """"""
        Sends an email to the given email address.
        :param recv: The email address of the receiver, str.
        :param content: The content of the email, str.
        :param size: The size of the email, float.
        :return: True if the email is sent successfully, False if the receiver's email box is full.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> sender.send_to(receiver, 'Hello', 10)
        True
        >>> receiver.inbox
        {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}

        """"""

    def fetch(self):
        """"""
        Retrieves the first unread email in the email box and marks it as read.
        :return: The first unread email in the email box, dict.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> receiver.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}]
        >>> receiver.fetch()
        {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'read'}

        """"""

    def is_full_with_one_more_email(self, size):
        """"""
        Determines whether the email box is full after adding an email of the given size.
        :param size: The size of the email, float.
        :return: True if the email box is full, False otherwise.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> receiver.is_full_with_one_more_email(10)
        False

        """"""

    def get_occupied_size(self):
        """"""
        Gets the total size of the emails in the email box.
        :return: The total size of the emails in the email box, float.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> sender.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': datetime.now, 'state': 'unread'}]
        >>> sender.get_occupied_size()
        10

        """"""

    def clear_inbox(self, size):
        """"""
        Clears the email box by deleting the oldest emails until the email box has enough space to accommodate the given size.
        :param size: The size of the email, float.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> receiver.inbox = [{'size': 10},{'size': 20},{'size': 15}]
        >>> receiver.clear_inbox(30)
        >>> receiver.inbox
        [{'size': 15}]

        """"""",EmailClient,snippet_37,"from datetime import datetime

class EmailClient:
    """"""
    This is a class that serves as an email client, implementing functions such as checking emails, determining whether there is sufficient space, and cleaning up space
    """"""

    def __init__(self, addr, capacity) -> None:
        """"""
        Initializes the EmailClient class with the email address and the capacity of the email box.
        :param addr: The email address, str.
        :param capacity: The capacity of the email box, float.
        """"""
        self.addr = addr
        self.capacity = capacity
        self.inbox = []

    def send_to(self, recv, content, size):
        """"""
        Sends an email to the given email address.
        :param recv: The email address of the receiver, str.
        :param content: The content of the email, str.
        :param size: The size of the email, float.
        :return: True if the email is sent successfully, False if the receiver's email box is full.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> sender.send_to(receiver, 'Hello', 10)
        True
        >>> receiver.inbox
        {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}

        """"""
        if recv.is_full_with_one_more_email(size):
            return False
        email = {
            'sender': self.addr,
            'receiver': recv.addr,
            'content': content,
            'size': size,
            'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'state': 'unread'
        }
        recv.inbox.append(email)
        return True

    def fetch(self):
        """"""
        Retrieves the first unread email in the email box and marks it as read.
        :return: The first unread email in the email box, dict.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> receiver.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}]
        >>> receiver.fetch()
        {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'read'}

        """"""
        for email in self.inbox:
            if email.get('state', 'unread') == 'unread':
                email['state'] = 'read'
                return email
        return None

    def is_full_with_one_more_email(self, size):
        """"""
        Determines whether the email box is full after adding an email of the given size.
        :param size: The size of the email, float.
        :return: True if the email box is full, False otherwise.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> receiver.is_full_with_one_more_email(10)
        False

        """"""
        return self.get_occupied_size() + size > self.capacity

    def get_occupied_size(self):
        """"""
        Gets the total size of the emails in the email box.
        :return: The total size of the emails in the email box, float.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> sender.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': datetime.now, 'state': 'unread'}]
        >>> sender.get_occupied_size()
        10

        """"""
        return sum(float(email.get('size', 0)) for email in self.inbox)

    def clear_inbox(self, size):
        """"""
        Clears the email box by deleting the oldest emails until the email box has enough space to accommodate the given size.
        :param size: The size of the email, float.
        >>> sender = EmailClient('sender@example.com', 100)
        >>> receiver = EmailClient('receiver@example.com', 50)
        >>> receiver.inbox = [{'size': 10},{'size': 20},{'size': 15}]
        >>> receiver.clear_inbox(30)
        >>> receiver.inbox
        [{'size': 15}]

        """"""
        while self.inbox and (self.get_occupied_size() + size > self.capacity):
            self.inbox.pop(0)"
37,"class EncryptionUtils:
    def __init__(self, key):
        self.key = key

    def caesar_cipher(self, plaintext, shift):
        ciphertext = """"
        for char in plaintext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
                ciphertext += shifted_char
            else:
                ciphertext += char
        return ciphertext
    
    def vigenere_cipher(self, plain_text):
        encrypted_text = """"
        key_index = 0
        for char in plain_text:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char
                key_index += 1
            else:
                encrypted_text += char
        return encrypted_text

    def rail_fence_cipher(self, plain_text, rails):
        fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for char in plain_text:
            if row == 0 or row == rails-1:
                direction = -direction

            fence[row][col] = char
            col += 1
            row += direction

        encrypted_text = ''
        for i in range(rails):
            for j in range(len(plain_text)):
                if fence[i][j] != '\n':
                    encrypted_text += fence[i][j]

        return encrypted_text","class EncryptionUtils:
    """"""
    This is a class that provides methods for encryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.
    """"""

    def __init__(self, key):
        """"""
        Initializes the class with a key.
        :param key: The key to use for encryption, str.
        """"""
        self.key = key

    def caesar_cipher(self, plaintext, shift):
        """"""
        Encrypts the plaintext using the Caesar cipher.
        :param plaintext: The plaintext to encrypt, str.
        :param shift: The number of characters to shift each character in the plaintext, int.
        :return: The ciphertext, str.
        >>> e = EncryptionUtils(""key"")
        >>> e.caesar_cipher(""abc"", 1)
        'bcd'

        """"""

    def vigenere_cipher(self, plaintext):
        """"""
        Encrypts the plaintext using the Vigenere cipher.
        :param plaintext: The plaintext to encrypt, str.
        :return: The ciphertext, str.
        >>> e = EncryptionUtils(""key"")
        >>> e.vigenere_cipher(""abc"")
        'kfa'

        """"""

    def rail_fence_cipher(self,plain_text, rails):
        """"""
        Encrypts the plaintext using the Rail Fence cipher.
        :param plaintext: The plaintext to encrypt, str.
        :return: The ciphertext, str.
        >>> e = EncryptionUtils(""key"")
        >>> e.rail_fence_cipher(""abc"", 2)
        'acb'

        """"""",EncryptionUtils,snippet_38,"class EncryptionUtils:
    """"""
    This is a class that provides methods for encryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.
    """"""

    def __init__(self, key):
        """"""
        Initializes the class with a key.
        :param key: The key to use for encryption, str.
        """"""
        self.key = key

    def caesar_cipher(self, plaintext, shift):
        """"""
        Encrypts the plaintext using the Caesar cipher.
        :param plaintext: The plaintext to encrypt, str.
        :param shift: The number of characters to shift each character in the plaintext, int.
        :return: The ciphertext, str.
        >>> e = EncryptionUtils(""key"")
        >>> e.caesar_cipher(""abc"", 1)
        'bcd'

        """"""
        def shift_char(c, s):
            if 'a' <= c <= 'z':
                base = ord('a')
                return chr((ord(c) - base + s) % 26 + base)
            if 'A' <= c <= 'Z':
                base = ord('A')
                return chr((ord(c) - base + s) % 26 + base)
            return c

        s = shift % 26
        return ''.join(shift_char(ch, s) for ch in plaintext)

    def vigenere_cipher(self, plaintext):
        """"""
        Encrypts the plaintext using the Vigenere cipher.
        :param plaintext: The plaintext to encrypt, str.
        :return: The ciphertext, str.
        >>> e = EncryptionUtils(""key"")
        >>> e.vigenere_cipher(""abc"")
        'kfa'

        """"""
        if not self.key:
            return plaintext
        key_shifts = [(ord(c.lower()) - ord('a')) % 26 for c in self.key if c.isalpha()]
        if not key_shifts:
            return plaintext

        res = []
        ki = 0
        klen = len(key_shifts)

        for ch in plaintext:
            if ch.isalpha():
                shift = key_shifts[ki % klen]
                if 'a' <= ch <= 'z':
                    base = ord('a')
                    res.append(chr((ord(ch) - base + shift) % 26 + base))
                else:
                    base = ord('A')
                    res.append(chr((ord(ch) - base + shift) % 26 + base))
                ki += 1
            else:
                res.append(ch)
        return ''.join(res)

    def rail_fence_cipher(self, plain_text, rails):
        """"""
        Encrypts the plaintext using the Rail Fence cipher.
        :param plaintext: The plaintext to encrypt, str.
        :return: The ciphertext, str.
        >>> e = EncryptionUtils(""key"")
        >>> e.rail_fence_cipher(""abc"", 2)
        'acb'

        """"""
        if rails <= 1 or rails >= len(plain_text):
            return plain_text

        # Initialize rails
        fence = ['' for _ in range(rails)]
        rail = 0
        direction = 1  # 1 down, -1 up

        for ch in plain_text:
            fence[rail] += ch
            rail += direction
            if rail == 0 or rail == rails - 1:
                direction *= -1

        return ''.join(fence)"
38,"import openpyxl


class ExcelProcessor:
    def __init__(self):
        pass

    def read_excel(self, file_name):
        data = []
        try:
            workbook = openpyxl.load_workbook(file_name)
            sheet = workbook.active
            for row in sheet.iter_rows(values_only=True):
                data.append(row)
            workbook.close()
            return data
        except:
            return None

    def write_excel(self, data, file_name):
        try:
            workbook = openpyxl.Workbook()
            sheet = workbook.active
            for row in data:
                sheet.append(row)
            workbook.save(file_name)
            workbook.close()
            return 1
        except:
            return 0

    def process_excel_data(self, N, save_file_name):
        data = self.read_excel(save_file_name)
        if data is None or N >= len(data[0]):
            return 0
        new_data = []
        for row in data:
            new_row = list(row[:])
            if not str(row[N]).isdigit():
                new_row.append(str(row[N]).upper())
            else:
                new_row.append(row[N])
            new_data.append(new_row)
        new_file_name = save_file_name.split('.')[0] + '_process.xlsx'
        success = self.write_excel(new_data, new_file_name)
        return success, new_file_name","class ExcelProcessor:
    """"""
    This is a class for processing excel files, including readring and writing excel data, as well as processing specific operations and saving as a new excel file.
    """"""

    def __init__(self):
        pass

    def read_excel(self, file_name):
        """"""
        Reading data from Excel files
        :param file_name:str, Excel file name to read
        :return:list of data, Data in Excel
        """"""


    def write_excel(self, data, file_name):
        """"""
        Write data to the specified Excel file
        :param data: list, Data to be written
        :param file_name: str, Excel file name to write to
        :return: 0 or 1, 1 represents successful writing, 0 represents failed writing
        >>> processor = ExcelProcessor()
        >>> new_data = [
        >>>     ('Name', 'Age', 'Country'),
        >>>     ('John', 25, 'USA'),
        >>>     ('Alice', 30, 'Canada'),
        >>>     ('Bob', 35, 'Australia'),
        >>>     ('Julia', 28, 'Germany')
        >>> ]
        >>> data = processor.write_excel(new_data, 'test_data.xlsx')
        """"""


    def process_excel_data(self, N, save_file_name):
        """"""
        Change the specified column in the Excel file to uppercase
        :param N: int, The serial number of the column that want to change
        :param save_file_name: str, source file name
        :return:(int, str), The former is the return value of write_excel, while the latter is the saved file name of the processed data
        >>> processor = ExcelProcessor()
        >>> success, output_file = processor.process_excel_data(1, 'test_data.xlsx')
        """"""",ExcelProcessor,snippet_39,"class ExcelProcessor:
    """"""
    This is a class for processing excel files, including readring and writing excel data, as well as processing specific operations and saving as a new excel file.
    """"""

    def __init__(self):
        pass

    def read_excel(self, file_name):
        """"""
        Reading data from Excel files
        :param file_name:str, Excel file name to read
        :return:list of data, Data in Excel
        """"""
        from openpyxl import load_workbook

        wb = load_workbook(filename=file_name, data_only=True)
        ws = wb.active
        data = []
        for row in ws.iter_rows(values_only=True):
            data.append(tuple(row))
        return data

    def write_excel(self, data, file_name):
        """"""
        Write data to the specified Excel file
        :param data: list, Data to be written
        :param file_name: str, Excel file name to write to
        :return: 0 or 1, 1 represents successful writing, 0 represents failed writing
        >>> processor = ExcelProcessor()
        >>> new_data = [
        >>>     ('Name', 'Age', 'Country'),
        >>>     ('John', 25, 'USA'),
        >>>     ('Alice', 30, 'Canada'),
        >>>     ('Bob', 35, 'Australia'),
        >>>     ('Julia', 28, 'Germany')
        >>> ]
        >>> data = processor.write_excel(new_data, 'test_data.xlsx')
        """"""
        try:
            from openpyxl import Workbook

            wb = Workbook()
            ws = wb.active
            for row in data:
                if isinstance(row, (list, tuple)):
                    ws.append(list(row))
                else:
                    ws.append([row])
            wb.save(file_name)
            return 1
        except Exception:
            return 0

    def process_excel_data(self, N, save_file_name):
        """"""
        Change the specified column in the Excel file to uppercase
        :param N: int, The serial number of the column that want to change
        :param save_file_name: str, source file name
        :return:(int, str), The former is the return value of write_excel, while the latter is the saved file name of the processed data
        >>> processor = ExcelProcessor()
        >>> success, output_file = processor.process_excel_data(1, 'test_data.xlsx')
        """"""
        from pathlib import Path

        if not isinstance(N, int) or N <= 0:
            raise ValueError(""N must be a positive integer (1-based column index)."")

        data = self.read_excel(save_file_name)
        if not data:
            output_name = self._build_processed_filename(save_file_name)
            return 0, output_name

        col_idx = N - 1
        processed = []
        for i, row in enumerate(data):
            row_list = list(row)
            if col_idx < len(row_list) and isinstance(row_list[col_idx], str):
                if i == 0:
                    # keep header as-is
                    pass
                else:
                    row_list[col_idx] = row_list[col_idx].upper()
            processed.append(tuple(row_list))

        output_name = self._build_processed_filename(save_file_name)
        result = self.write_excel(processed, output_name)
        return result, output_name

    @staticmethod
    def _build_processed_filename(file_name):
        from pathlib import Path

        p = Path(file_name)
        stem = p.stem + ""_processed""
        if p.suffix:
            return str(p.with_name(stem + p.suffix))
        else:
            return str(p.with_name(stem + "".xlsx""))"
39,"import re
from collections import deque
from decimal import Decimal


class ExpressionCalculator:
    def __init__(self):
        self.postfix_stack = deque()
        self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]

    def calculate(self, expression):
        self.prepare(self.transform(expression))

        result_stack = deque()
        self.postfix_stack.reverse()

        while self.postfix_stack:
            current_op = self.postfix_stack.pop()
            if not self.is_operator(current_op):
                current_op = current_op.replace(""~"", ""-"")
                result_stack.append(current_op)
            else:
                second_value = result_stack.pop()
                first_value = result_stack.pop()

                first_value = first_value.replace(""~"", ""-"")
                second_value = second_value.replace(""~"", ""-"")

                temp_result = self._calculate(first_value, second_value, current_op)
                result_stack.append(str(temp_result))

        return float(eval(""*"".join(result_stack)))

    def prepare(self, expression):
        op_stack = deque([','])
        arr = list(expression)
        current_index = 0
        count = 0

        for i, current_op in enumerate(arr):
            if self.is_operator(current_op):
                if count > 0:
                    self.postfix_stack.append("""".join(arr[current_index: current_index + count]))
                peek_op = op_stack[-1]
                if current_op == ')':
                    while op_stack[-1] != '(':
                        self.postfix_stack.append(str(op_stack.pop()))
                    op_stack.pop()
                else:
                    while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):
                        self.postfix_stack.append(str(op_stack.pop()))
                        peek_op = op_stack[-1]
                    op_stack.append(current_op)

                count = 0
                current_index = i + 1
            else:
                count += 1

        if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):
            self.postfix_stack.append("""".join(arr[current_index: current_index + count]))

        while op_stack[-1] != ',':
            self.postfix_stack.append(str(op_stack.pop()))

    @staticmethod
    def is_operator(c):
        return c in {'+', '-', '*', '/', '(', ')', '%'}

    def compare(self, cur, peek):
        if cur == '%':
            cur = '/'
        if peek == '%':
            peek = '/'
        return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]

    @staticmethod
    def _calculate(first_value, second_value, current_op):
        if current_op == '+':
            return Decimal(first_value) + Decimal(second_value)
        elif current_op == '-':
            return Decimal(first_value) - Decimal(second_value)
        elif current_op == '*':
            return Decimal(first_value) * Decimal(second_value)
        elif current_op == '/':
            return Decimal(first_value) / Decimal(second_value)
        elif current_op == '%':
            return Decimal(first_value) % Decimal(second_value)
        else:
            raise ValueError(""Unexpected operator: {}"".format(current_op))

    @staticmethod
    def transform(expression):
        expression = re.sub(r""\s+"", """", expression)
        expression = re.sub(r""=$"", """", expression)
        arr = list(expression)

        for i, c in enumerate(arr):
            if c == '-':
                if i == 0:
                    arr[i] = '~'
                else:
                    prev_c = arr[i - 1]
                    if prev_c in {'+', '-', '*', '/', '(', 'E', 'e'}:
                        arr[i] = '~'

        if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):
            arr[0] = '-'
            return ""0"" + """".join(arr)
        else:
            return """".join(arr)","class ExpressionCalculator:
    """"""
    This is a class in Python that can perform calculations with basic arithmetic operations, including addition, subtraction, multiplication, division, and modulo.
    """"""

    def __init__(self):
        """"""
        Initialize the expression calculator
        """"""
        self.postfix_stack = deque()
        self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]

    def calculate(self, expression):
        """"""
        Calculate the result of the given postfix expression
        :param expression: string, the postfix expression to be calculated
        :return: float, the calculated result
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.calculate(""2 + 3 * 4"")
        14.0

        """"""


    def prepare(self, expression):
        """"""
        Prepare the infix expression for conversion to postfix notation
        :param expression: string, the infix expression to be prepared
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.prepare(""2+3*4"")

        expression_calculator.postfix_stack = ['2', '3', '4', '*', '+']
        """"""


    @staticmethod
    def is_operator(c):
        """"""
        Check if a character is an operator in {'+', '-', '*', '/', '(', ')', '%'}
        :param c: string, the character to be checked
        :return: bool, True if the character is an operator, False otherwise
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.is_operator(""+"")
        True

        """"""


    def compare(self, cur, peek):
        """"""
        Compare the precedence of two operators
        :param cur: string, the current operator
        :param peek: string, the operator at the top of the operator stack
        :return: bool, True if the current operator has higher or equal precedence, False otherwise
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.compare(""+"", ""-"")
        True

        """"""


    @staticmethod
    def _calculate(first_value, second_value, current_op):
        """"""
        Perform the mathematical calculation based on the given operands and operator
        :param first_value: string, the first operand
        :param second_value: string, the second operand
        :param current_op: string, the operator
        :return: decimal.Decimal, the calculated result
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator._calculate(""2"", ""3"", ""+"")
        5.0

        """"""


    @staticmethod
    def transform(expression):
        """"""
        Transform the infix expression to a format suitable for conversion
        :param expression: string, the infix expression to be transformed
        :return: string, the transformed expression
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.transform(""2 + 3 * 4"")
        ""2+3*4""

        """"""",ExpressionCalculator,snippet_40,"from collections import deque

class ExpressionCalculator:
    """"""
    This is a class in Python that can perform calculations with basic arithmetic operations, including addition, subtraction, multiplication, division, and modulo.
    """"""

    def __init__(self):
        """"""
        Initialize the expression calculator
        """"""
        self.postfix_stack = deque()
        self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]

    def calculate(self, expression):
        """"""
        Calculate the result of the given postfix expression
        :param expression: string, the postfix expression to be calculated
        :return: float, the calculated result
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.calculate(""2 + 3 * 4"")
        14.0

        """"""
        self.prepare(expression)
        eval_stack = []
        for token in self.postfix_stack:
            if not self.is_operator(token):
                eval_stack.append(float(token))
            else:
                b = eval_stack.pop()
                a = eval_stack.pop()
                res = self._calculate(a, b, token)
                eval_stack.append(res)
        return float(eval_stack[-1]) if eval_stack else 0.0

    def prepare(self, expression):
        """"""
        Prepare the infix expression for conversion to postfix notation
        :param expression: string, the infix expression to be prepared
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.prepare(""2+3*4"")

        expression_calculator.postfix_stack = ['2', '3', '4', '*', '+']
        """"""
        expr = self.transform(expression)
        output = []
        ops = []

        i = 0
        n = len(expr)
        prev_token_type = None  # 'num', 'op', 'lparen', 'rparen'
        while i < n:
            ch = expr[i]

            if ch.isdigit() or ch == '.':
                j = i
                while j < n and (expr[j].isdigit() or expr[j] == '.'):
                    j += 1
                number = expr[i:j]
                output.append(number)
                prev_token_type = 'num'
                i = j
                continue

            # handle unary minus
            if ch == '-' and (prev_token_type in (None, 'op', 'lparen')):
                # read signed number
                j = i + 1
                if j < n and (expr[j].isdigit() or expr[j] == '.'):
                    k = j
                    while k < n and (expr[k].isdigit() or expr[k] == '.'):
                        k += 1
                    number = '-' + expr[j:k]
                    output.append(number)
                    prev_token_type = 'num'
                    i = k
                    continue
                # if not followed by number, treat as operator
            if ch in '+-*/%':
                while ops and ops[-1] != '(' and self.compare(ops[-1], ch):
                    output.append(ops.pop())
                ops.append(ch)
                prev_token_type = 'op'
                i += 1
                continue
            if ch == '(':
                ops.append(ch)
                prev_token_type = 'lparen'
                i += 1
                continue
            if ch == ')':
                while ops and ops[-1] != '(':
                    output.append(ops.pop())
                if ops and ops[-1] == '(':
                    ops.pop()
                prev_token_type = 'rparen'
                i += 1
                continue

            # Unknown character (skip)
            i += 1

        while ops:
            output.append(ops.pop())

        self.postfix_stack = output

    @staticmethod
    def is_operator(c):
        """"""
        Check if a character is an operator in {'+', '-', '*', '/', '(', ')', '%'}
        :param c: string, the character to be checked
        :return: bool, True if the character is an operator, False otherwise
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.is_operator(""+"")
        True

        """"""
        return c in {""+"", ""-"", ""*"", ""/"", ""%"", ""("", "")""}

    def compare(self, peek, cur):
        """"""
        Compare the precedence of two operators
        :param cur: string, the current operator
        :param peek: string, the operator at the top of the operator stack
        :return: bool, True if the current operator has higher or equal precedence, False otherwise
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.compare(""+"", ""-"")
        True

        """"""
        precedence = {
            '+': 1,
            '-': 1,
            '*': 2,
            '/': 2,
            '%': 2,
        }
        if peek == '(':
            return False
        return precedence.get(peek, -1) >= precedence.get(cur, -1)

    @staticmethod
    def _calculate(first_value, second_value, current_op):
        """"""
        Perform the mathematical calculation based on the given operands and operator
        :param first_value: string, the first operand
        :param second_value: string, the second operand
        :param current_op: string, the operator
        :return: decimal.Decimal, the calculated result
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator._calculate(""2"", ""3"", ""+"")
        5.0

        """"""
        a = float(first_value)
        b = float(second_value)
        if current_op == '+':
            return a + b
        if current_op == '-':
            return a - b
        if current_op == '*':
            return a * b
        if current_op == '/':
            return a / b
        if current_op == '%':
            return a % b
        raise ValueError(""Unsupported operator: {}"".format(current_op))

    @staticmethod
    def transform(expression):
        """"""
        Transform the infix expression to a format suitable for conversion
        :param expression: string, the infix expression to be transformed
        :return: string, the transformed expression
        >>> expression_calculator = ExpressionCalculator()
        >>> expression_calculator.transform(""2 + 3 * 4"")
        ""2+3*4""

        """"""
        return """".join(expression.split())"
40,"class FitnessTracker:
    def __init__(self, height, weight, age, sex) -> None:
        self.height = height
        self.weight = weight
        self.age = age
        self.sex = sex
        self.BMI_std = [
            {""male"": [20, 25]},
            {""female"": [19, 24]}
        ]

    def get_BMI(self):
        return self.weight / self.height ** 2

    def condition_judge(self):
        BMI = self.get_BMI()
        if self.sex == ""male"":
            BMI_range = self.BMI_std[0][""male""]
        else:
            BMI_range = self.BMI_std[1][""female""]
        if BMI > BMI_range[1]:
            # too fat
            return 1
        elif BMI < BMI_range[0]:
            # too thin
            return -1
        else:
            # normal
            return 0

    def calculate_calorie_intake(self):
        if self.sex == ""male"":
            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5
        else:
            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161
        if self.condition_judge() == 1:
            calorie_intake = BMR * 1.2  # Sedentary lifestyle
        elif self.condition_judge() == -1:
            calorie_intake = BMR * 1.6  # Active lifestyle
        else:
            calorie_intake = BMR * 1.4  # Moderate lifestyle
        return calorie_intake","class FitnessTracker:
    """"""
    This is a class as fitness tracker that implements to calculate BMI (Body Mass Index) and calorie intake based on the user's height, weight, age, and sex.
    """"""

    def __init__(self, height, weight, age, sex) -> None:
        """"""
        Initialize the class with height, weight, age, and sex, and calculate the BMI standard based on sex, and male is 20-25, female is 19-24.
        """"""
        self.height = height
        self.weight = weight
        self.age = age
        self.sex = sex
        self.BMI_std = [
            {""male"": [20, 25]},
            {""female"": [19, 24]}
        ]

    def get_BMI(self):
        """"""
        Calculate the BMI based on the height and weight.
        :return: BMI,which is the weight divide by the square of height, float.
        >>> fitnessTracker = FitnessTracker(1.8, 70, 20, ""male"")
        >>> fitnessTracker.get_BMI()
        21.604938271604937

        """"""

    def condition_judge(self):
        """"""
        Judge the condition of the user based on the BMI standard.
        :return: 1 if the user is too fat, -1 if the user is too thin, 0 if the user is normal, int.
        >>> fitnessTracker = FitnessTracker(1.8, 70, 20, ""male"")
        >>> fitnessTracker.condition_judge()
        -1

        """"""

    def calculate_calorie_intake(self):
        """"""
        Calculate the calorie intake based on the user's condition and BMR (Basal Metabolic Rate),BMR is calculated based on the user's height, weight, age, and sex,male is10 * self.weight + 6.25 * self.height - 5 * self.age + 5,female is 10 * self.weight + 6.25 * self.height - 5 * self.age - 161, and the calorie intake is calculated based on the BMR and the user's condition,if the user is too fat, the calorie intake is BMR * 1.2, if the user is too thin, the calorie intake is BMR * 1.6, if the user is normal, the calorie intake is BMR * 1.4.
        :return: calorie intake, float.
        >>> fitnessTracker = FitnessTracker(1.8, 70, 20, ""male"")
        >>> fitnessTracker.calculate_calorie_intake()
        986.0

        """"""",FitnessTracker,snippet_41,"class FitnessTracker:
    """"""
    This is a class as fitness tracker that implements to calculate BMI (Body Mass Index) and calorie intake based on the user's height, weight, age, and sex.
    """"""

    def __init__(self, height, weight, age, sex) -> None:
        """"""
        Initialize the class with height, weight, age, and sex, and calculate the BMI standard based on sex, and male is 20-25, female is 19-24.
        """"""
        self.height = height
        self.weight = weight
        self.age = age
        self.sex = sex
        self.BMI_std = [
            {""male"": [20, 25]},
            {""female"": [19, 24]}
        ]

    def get_BMI(self):
        """"""
        Calculate the BMI based on the height and weight.
        :return: BMI,which is the weight divide by the square of height, float.
        >>> fitnessTracker = FitnessTracker(1.8, 70, 20, ""male"")
        >>> fitnessTracker.get_BMI()
        21.604938271604937

        """"""
        if self.height == 0:
            return float(""inf"")
        return self.weight / (self.height ** 2)

    def condition_judge(self):
        """"""
        Judge the condition of the user based on the BMI standard.
        :return: 1 if the user is too fat, -1 if the user is too thin, 0 if the user is normal, int.
        >>> fitnessTracker = FitnessTracker(1.8, 70, 20, ""male"")
        >>> fitnessTracker.condition_judge()
        -1

        """"""
        bmi = self.get_BMI()
        sex_lower = str(self.sex).lower()
        if sex_lower == ""male"":
            low, high = 22, 25
        elif sex_lower == ""female"":
            low, high = 19, 24
        else:
            low, high = 20, 25

        if bmi < low:
            return -1
        if bmi > high:
            return 1
        return 0

    def calculate_calorie_intake(self):
        """"""
        Calculate the calorie intake based on the user's condition and BMR (Basal Metabolic Rate),BMR is calculated based on the user's height, weight, age, and sex,male is10 * self.weight + 6.25 * self.height - 5 * self.age + 5,female is 10 * self.weight + 6.25 * self.height - 5 * self.age - 161, and the calorie intake is calculated based on the BMR and the user's condition,if the user is too fat, the calorie intake is BMR * 1.2, if the user is too thin, the calorie intake is BMR * 1.6, if the user is normal, the calorie intake is BMR * 1.4.
        :return: calorie intake, float.
        >>> fitnessTracker = FitnessTracker(1.8, 70, 20, ""male"")
        >>> fitnessTracker.calculate_calorie_intake()
        986.0

        """"""
        sex_lower = str(self.sex).lower()
        if sex_lower == ""male"":
            bmr = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5
        elif sex_lower == ""female"":
            bmr = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161
        else:
            bmr = 10 * self.weight + 6.25 * self.height - 5 * self.age

        condition = self.condition_judge()
        if condition == 1:
            factor = 1.2
        elif condition == -1:
            factor = 1.6
        else:
            factor = 1.4
        return bmr * factor"
41,"class GomokuGame:
    def __init__(self, board_size):
        self.board_size = board_size
        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
        self.current_player = 'X'

    def make_move(self, row, col):
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        return False

    def check_winner(self):
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        for row in range(self.board_size):
            for col in range(self.board_size):
                if self.board[row][col] != ' ':
                    for direction in directions:
                        if self._check_five_in_a_row(row, col, direction):
                            return self.board[row][col]
        return None

    def _check_five_in_a_row(self, row, col, direction):
        dx, dy = direction
        count = 1
        symbol = self.board[row][col]
        for i in range(1, 5):
            new_row = row + dx * i
            new_col = col + dy * i
            if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):
                return False
            if self.board[new_row][new_col] != symbol:
                return False
            count += 1
        return count == 5","class GomokuGame:
    """"""
    This class is an implementation of a Gomoku game, supporting for making moves, checking for a winner, and checking if there are five consecutive symbols on the game board.
    """"""

    def __init__(self, board_size):
        """"""
        Initializes the game with a given board size.
        It initializes the board with empty spaces and sets the current player symble as 'X'.
        """"""
        self.board_size = board_size
        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
        self.current_player = 'X'

    def make_move(self, row, col):
        """"""
        Makes a move at the given row and column.
        If the move is valid, it places the current player's symbol on the board
        and changes the current player to the other player (if the current player is 'X', then it becomes 'O' and vice versa).
        :param row: int, the row index of this move
        :param col: int, the column index
        return: True if the move is valid, or False otherwise.
        >>> gomokuGame = GomokuGame(10)
        >>> gomokuGame.make_move(5, 5)
        True
        >>> gomokuGame.make_move(5, 5)
        False
        """"""

    def check_winner(self):
        """"""
        Checks if there is a winner by looking for five in a row in all directions (horizontal, vertical, diagonal).
        return: the symbol of the winning player (either 'X' or 'O') if there is a winner, or None otherwise.
        >>> gomokuGame = GomokuGame(10)
        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]
        >>> for move in moves:
        ...     gomokuGame.make_move(move[0], move[1])
        >>> gomokuGame.check_winner()
        'X'
        """"""

    def _check_five_in_a_row(self, row, col, direction):
        """"""
        checks if there are five consecutive symbols of the same player in a row starting from a given cell in a given direction (horizontal, vertical, diagonal).
        Counts the number of consecutive symbols in that direction starting from the given cell,
        :param row: int, row of the given cell
        :param col: int, column of the given cell
        :param direction: tuple, (int, int), named as (dx, dy). Row and col will plus several dx and dy repectively.
        :return: True if there are five consecutive symbols of the same player, and False otherwise.
        >>> gomokuGame = GomokuGame(10)
        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]
        >>> for move in moves:
        ...     gomokuGame.make_move(move[0], move[1])
        >>> gomokuGame._check_five_in_a_row(5, 1, (0, 1))
        True
        >>> gomokuGame._check_five_in_a_row(5, 1, (1, 1))
        False
        """"""",GomokuGame,snippet_42,"class GomokuGame:
    """"""
    This class is an implementation of a Gomoku game, supporting for making moves, checking for a winner, and checking if there are five consecutive symbols on the game board.
    """"""

    def __init__(self, board_size):
        """"""
        Initializes the game with a given board size.
        It initializes the board with empty spaces and sets the current player symble as 'X'.
        """"""
        self.board_size = board_size
        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
        self.current_player = 'X'

    def make_move(self, row, col):
        """"""
        Makes a move at the given row and column.
        If the move is valid, it places the current player's symbol on the board
        and changes the current player to the other player (if the current player is 'X', then it becomes 'O' and vice versa).
        :param row: int, the row index of this move
        :param col: int, the column index
        return: True if the move is valid, or False otherwise.
        >>> gomokuGame = GomokuGame(10)
        >>> gomokuGame.make_move(5, 5)
        True
        >>> gomokuGame.make_move(5, 5)
        False
        """"""
        if not (0 <= row < self.board_size and 0 <= col < self.board_size):
            return False
        if self.board[row][col] != ' ':
            return False
        self.board[row][col] = self.current_player
        self.current_player = 'O' if self.current_player == 'X' else 'X'
        return True

    def check_winner(self):
        """"""
        Checks if there is a winner by looking for five in a row in all directions (horizontal, vertical, diagonal).
        return: the symbol of the winning player (either 'X' or 'O') if there is a winner, or None otherwise.
        >>> gomokuGame = GomokuGame(10)
        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]
        >>> for move in moves:
        ...     gomokuGame.make_move(move[0], move[1])
        >>> gomokuGame.check_winner()
        'X'
        """"""
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        for r in range(self.board_size):
            for c in range(self.board_size):
                if self.board[r][c] == ' ':
                    continue
                for dx, dy in directions:
                    if self._check_five_in_a_row(r, c, (dx, dy)):
                        return self.board[r][c]
        return None

    def _check_five_in_a_row(self, row, col, direction):
        """"""
        checks if there are five consecutive symbols of the same player in a row starting from a given cell in a given direction (horizontal, vertical, diagonal).
        Counts the number of consecutive symbols in that direction starting from the given cell,
        :param row: int, row of the given cell
        :param col: int, column of the given cell
        :param direction: tuple, (int, int), named as (dx, dy). Row and col will plus several dx and dy repectively.
        :return: True if there are five consecutive symbols of the same player, and False otherwise.
        >>> gomokuGame = GomokuGame(10)
        >>> moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]
        >>> for move in moves:
        ...     gomokuGame.make_move(move[0], move[1])
        >>> gomokuGame._check_five_in_a_row(5, 1, (0, 1))
        True
        >>> gomokuGame._check_five_in_a_row(5, 1, (1, 1))
        False
        """"""
        symbol = self.board[row][col]
        if symbol == ' ':
            return False
        dx, dy = direction
        count = 0
        r, c = row, col
        while 0 <= r < self.board_size and 0 <= c < self.board_size and self.board[r][c] == symbol:
            count += 1
            if count >= 5:
                return True
            r += dx
            c += dy
        return False"
42,"class Hotel:
    def __init__(self, name, rooms):
        self.name = name
        self.available_rooms = rooms
        # available_rooms = {room_type1: room_number1, room_type2: room_number2, ...}
        # available_rooms = {'single': 5, 'double': 3}
        self.booked_rooms = {}
        # booked_rooms = {room_type1: {name1: room_number1, name2: room_number2, ...}, room_type2: {...}, ...}
        # booked_rooms = {'single': {'name1': 2, 'name2':1}, 'double': {}}

    def book_room(self, room_type, room_number, name):
        # Check if there are any rooms of the specified type available
        if room_type not in self.available_rooms.keys():
            return False

        if room_number <= self.available_rooms[room_type]:
            # Book the room by adding it to the booked_rooms dictionary
            if room_type not in self.booked_rooms.keys():
                self.booked_rooms[room_type] = {}
            self.booked_rooms[room_type][name] = room_number
            self.available_rooms[room_type] -= room_number
            return ""Success!""
        elif self.available_rooms[room_type] != 0:
            return self.available_rooms[room_type]
        else:
            return False

    def check_in(self, room_type, room_number, name):
        # Check if the room of the specified type and number is booked
        if room_type not in self.booked_rooms.keys():
            return False
        if name in self.booked_rooms[room_type]:
            if room_number > self.booked_rooms[room_type][name]:
                return False
            elif room_number == self.booked_rooms[room_type][name]:
                # Check in the room by removing it from the booked_rooms dictionary
                self.booked_rooms[room_type].pop(name)
            else:
                self.booked_rooms[room_type][name] -= room_number


    def check_out(self, room_type, room_number):
        if room_type in self.available_rooms:
            self.available_rooms[room_type] += room_number
        else:
            self.available_rooms[room_type] = room_number

    def get_available_rooms(self, room_type):
        return self.available_rooms[room_type]","class Hotel:
    """"""
    This is a class as hotel management system, managing the booking, check-in, check-out, and availability of rooms in a hotel with different room types.
    """"""

    def __init__(self, name, rooms):
        """"""
        Initialize the three fields in Hotel System.
        name is the hotel name.
        available_rooms stores the remaining rooms in the hotel
        booked_rooms stores the rooms that have been booked and the person's name who booked rooms.
        >>> hotel.name
        'peace hotel'
        >>> hotel.available_rooms
        available_rooms = {'single': 5, 'double': 3}
        >>> hotel.booked_rooms
        {'single': {'guest 1': 2, 'guest 2':1}, 'double': {'guest1': 1}}
        """"""
        self.name = name
        self.available_rooms = rooms
        self.booked_rooms = {}

    def book_room(self, room_type, room_number, name):
        """"""
        Check if there are any rooms of the specified type available.
        if rooms are adequate, modify available_rooms and booked_rooms and finish booking, or fail to book otherwise.
        :param room_type: str
        :param room_number: int, the expected number of specified type rooms to be booked
        :param name: str, guest name
        :return: if number of rooms about to be booked doesn't exceed the remaining rooms, return str 'Success!'
                if exceeds but quantity of available rooms is not equal to zero, return int(the remaining quantity of this room type).
                if exceeds and quantity is zero or the room_type isn't in available_room, return False.
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.book_room('single', 1, 'guest 1')
        'Success!'
        >>> hotel.book_room('single', 5, 'guest 1')
        4
        >>> hotel.book_room('single', 4, 'guest 1')
        'Success!'
        >>> hotel.book_room('single', 1, 'guest 1')
        False
        >>> hotel.book_room('triple', 1, 'guest 1')
        False
        """"""
    
    def check_in(self, room_type, room_number, name):
        """"""
        Check if the room of the specified type and number is booked by the person named name.
        Remove this name when check in successfuly(room_number is equal to specific person's booked_rooms. When the actual check in quantity (room_number) is less than the booked quantity, number in booked_rooms will be booked quantity minus actual quantity
        :param room_type: str, check in room type
        :param room_number: int, check in room number
        :param name: str, person name
        :return False: only if the room_type is not in the booked_rooms or room_number is higher than quantity in booked rooms.
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.book_room('single', 1, 'guest 1')
        'Success!'
        >>> hotel.check_in('single', 2, 'guest 1')
        False
        >>> hotel.check_in('single', 1, 'guest 1')
        >>> hotel.booked_rooms
        {'single': {}}
        """"""

    def check_out(self, room_type, room_number):
        """"""
        Check out rooms, add number for specific type in available_rooms.
        If room_type is new, add new type in available_rooms.
        :param room_type: str, check out room type
        :param room_number: int, check out room number
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.check_out('single', 2)
        >>> hotel.available_rooms
        {'single': 7, 'double': 3}
        >>> hotel.check_out('triple', 2)
        >>> hotel.available_rooms
        {'single': 7, 'double': 3, 'triple': 2}
        """"""

    def get_available_rooms(self, room_type):
        """"""
        Get the number of specific type of available rooms.
        :param room_type: str, the room type that want to know
        :return: int, the remaining number of this type rooms.
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.get_available_rooms('single')
        5
        """"""",Hotel,snippet_43,"class Hotel:
    """"""
    This is a class as hotel management system, managing the booking, check-in, check-out, and availability of rooms in a hotel with different room types.
    """"""

    def __init__(self, name, rooms):
        """"""
        Initialize the three fields in Hotel System.
        name is the hotel name.
        available_rooms stores the remaining rooms in the hotel
        booked_rooms stores the rooms that have been booked and the person's name who booked rooms.
        >>> hotel.name
        'peace hotel'
        >>> hotel.available_rooms
        available_rooms = {'single': 5, 'double': 3}
        >>> hotel.booked_rooms
        {'single': {'guest 1': 2, 'guest 2':1}, 'double': {'guest1': 1}}
        """"""
        self.name = name
        self.available_rooms = dict(rooms) if rooms is not None else {}
        self.booked_rooms = {}

    def book_room(self, room_type, room_number, name):
        """"""
        Check if there are any rooms of the specified type available.
        if rooms are adequate, modify available_rooms and booked_rooms and finish booking, or fail to book otherwise.
        :param room_type: str
        :param room_number: int, the expected number of specified type rooms to be booked
        :param name: str, guest name
        :return: if number of rooms about to be booked doesn't exceed the remaining rooms, return str 'Success!'
                if exceeds but quantity of available rooms is not equal to zero, return int(the remaining quantity of this room type).
                if exceeds and quantity is zero or the room_type isn't in available_room, return False.
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.book_room('single', 1, 'guest 1')
        'Success!'
        >>> hotel.book_room('single', 5, 'guest 1')
        4
        >>> hotel.book_room('single', 4, 'guest 1')
        'Success!'
        >>> hotel.book_room('single', 1, 'guest 1')
        False
        >>> hotel.book_room('triple', 1, 'guest 1')
        False
        """"""
        if not isinstance(room_number, int) or room_number <= 0:
            return False

        available = self.available_rooms.get(room_type)
        if available is None or available == 0:
            return False

        if room_number <= available:
            # Deduct from available and record booking
            self.available_rooms[room_type] = available - room_number
            if room_type not in self.booked_rooms:
                self.booked_rooms[room_type] = {}
            self.booked_rooms[room_type][name] = self.booked_rooms[room_type].get(name, 0) + room_number
            return 'Success!'
        else:
            # Not enough rooms; return remaining count if > 0
            return available if available > 0 else False
    
    def check_in(self, room_type, room_number, name):
        """"""
        Check if the room of the specified type and number is booked by the person named name.
        Remove this name when check in successfuly(room_number is equal to specific person's booked_rooms. When the actual check in quantity (room_number) is less than the booked quantity, number in booked_rooms will be booked quantity minus actual quantity
        :param room_type: str, check in room type
        :param room_number: int, check in room number
        :param name: str, person name
        :return False: only if the room_type is not in the booked_rooms or room_number is higher than quantity in booked rooms.
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.book_room('single', 1, 'guest 1')
        'Success!'
        >>> hotel.check_in('single', 2, 'guest 1')
        False
        >>> hotel.check_in('single', 1, 'guest 1')
        >>> hotel.booked_rooms
        {'single': {}}
        """"""
        if not isinstance(room_number, int) or room_number <= 0:
            return False

        if room_type not in self.booked_rooms:
            return False
        guests = self.booked_rooms[room_type]
        if name not in guests:
            return False

        booked_qty = guests[name]
        if room_number > booked_qty:
            return False

        if room_number == booked_qty:
            del guests[name]
        else:
            guests[name] = booked_qty - room_number
        # Keep room_type key with possibly empty dict as shown in example
        return None

    def check_out(self, room_type, room_number):
        """"""
        Check out rooms, add number for specific type in available_rooms.
        If room_type is new, add new type in available_rooms.
        :param room_type: str, check out room type
        :param room_number: int, check out room number
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.check_out('single', 2)
        >>> hotel.available_rooms
        {'single': 7, 'double': 3}
        >>> hotel.check_out('triple', 2)
        >>> hotel.available_rooms
        {'single': 7, 'double': 3, 'triple': 2}
        """"""
        if not isinstance(room_number, int) or room_number <= 0:
            return
        self.available_rooms[room_type] = self.available_rooms.get(room_type, 0) + room_number

    def get_available_rooms(self, room_type):
        """"""
        Get the number of specific type of available rooms.
        :param room_type: str, the room type that want to know
        :return: int, the remaining number of this type rooms.
        >>> hotel = Hotel('peace hotel', {'single': 5, 'double': 3})
        >>> hotel.get_available_rooms('single')
        5
        """"""
        return self.available_rooms.get(room_type, 0)"
43,"class HRManagementSystem:
    def __init__(self):
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        if employee_id in self.employees:
            return False
        else:
            self.employees[employee_id] = {
                'name': name,
                'position': position,
                'department': department,
                'salary': salary
            }
            return True

    def remove_employee(self, employee_id):
        if employee_id in self.employees:
            del self.employees[employee_id]
            return True
        else:
            return False

    def update_employee(self, employee_id: int, employee_info: dict):
        employee = self.get_employee(employee_id)
        if employee == False:
            return False
        else:
            for key, value in employee_info.items():
                if key not in employee:
                    return False
            for key, value in employee_info.items():
                employee[key] = value
            return True

    def get_employee(self, employee_id):
        if employee_id in self.employees:
            return self.employees[employee_id]
        else:
            return False

    def list_employees(self):
        employee_data = {}
        if self.employees:
            for employee_id, employee_info in self.employees.items():
                employee_details = {}
                employee_details[""employee_ID""] = employee_id
                for key, value in employee_info.items():
                    employee_details[key] = value
                employee_data[employee_id] = employee_details
        return employee_data","class HRManagementSystem:
    """"""
    This is a class as personnel management system that implements functions such as adding, deleting, querying, and updating employees
    """"""

    def __init__(self):
        """"""
        Initialize the HRManagementSystem withan attribute employees, which is an empty dictionary.
        """"""
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        """"""
        Add a new employee to the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :param name: The employee's name, str.
        :param position: The employee's position, str.
        :param department: The employee's department, str.
        :param salary: The employee's salary, int.
        :return: If the employee is already in the HRManagementSystem, returns False, otherwise, returns True.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.add_employee(1, 'John', 'Manager', 'Sales', 100000)
        True
        >>> hrManagementSystem.add_employee(1, 'John', 'Manager', 'Sales', 100000)
        False

        """"""

    def remove_employee(self, employee_id):
        """"""
        Remove an employee from the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.remove_employee(1)
        True
        >>> hrManagementSystem.remove_employee(2)
        False

        """"""

    def update_employee(self, employee_id: int, employee_info: dict):
        """"""
        Update an employee's information in the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :param employee_info: The employee's information, dict.
        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.update_employee(1, {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 20000})
        True
        >>> hrManagementSystem.update_employee(2, {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 20000})
        False

        """"""

    def get_employee(self, employee_id):
        """"""
        Get an employee's information from the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :return: If the employee is already in the HRManagementSystem, returns the employee's information, otherwise, returns False.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.get_employee(1)
        {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}
        >>> hrManagementSystem.get_employee(2)
        False

        """"""

    def list_employees(self):
        “”“
        List all employees' information in the HRManagementSystem.
        :return: A list of all employees' information,dict.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.list_employees()
        {1: {'employee_ID': 1, 'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}

        """"""",HRManagementSystem,snippet_44,"class HRManagementSystem:
    """"""
    This is a class as personnel management system that implements functions such as adding, deleting, querying, and updating employees
    """"""

    def __init__(self):
        """"""
        Initialize the HRManagementSystem withan attribute employees, which is an empty dictionary.
        """"""
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        """"""
        Add a new employee to the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :param name: The employee's name, str.
        :param position: The employee's position, str.
        :param department: The employee's department, str.
        :param salary: The employee's salary, int.
        :return: If the employee is already in the HRManagementSystem, returns False, otherwise, returns True.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.add_employee(1, 'John', 'Manager', 'Sales', 100000)
        True
        >>> hrManagementSystem.add_employee(1, 'John', 'Manager', 'Sales', 100000)
        False

        """"""
        if employee_id in self.employees:
            return False
        self.employees[employee_id] = {
            'name': name,
            'position': position,
            'department': department,
            'salary': salary
        }
        return True

    def remove_employee(self, employee_id):
        """"""
        Remove an employee from the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.remove_employee(1)
        True
        >>> hrManagementSystem.remove_employee(2)
        False

        """"""
        if employee_id in self.employees:
            self.employees.pop(employee_id)
            return True
        return False

    def update_employee(self, employee_id: int, employee_info: dict):
        """"""
        Update an employee's information in the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :param employee_info: The employee's information, dict.
        :return: If the employee is already in the HRManagementSystem, returns True, otherwise, returns False.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.update_employee(1, {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 20000})
        True
        >>> hrManagementSystem.update_employee(2, {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 20000})
        False

        """"""
        if employee_id not in self.employees:
            return False
        self.employees[employee_id] = dict(employee_info)
        return True

    def get_employee(self, employee_id):
        """"""
        Get an employee's information from the HRManagementSystem.
        :param employee_id: The employee's id, int.
        :return: If the employee is already in the HRManagementSystem, returns the employee's information, otherwise, returns False.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.get_employee(1)
        {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}
        >>> hrManagementSystem.get_employee(2)
        False

        """"""
        if employee_id in self.employees:
            return self.employees[employee_id]
        return False

    def list_employees(self):
        """"""
        List all employees' information in the HRManagementSystem.
        :return: A list of all employees' information,dict.
        >>> hrManagementSystem = HRManagementSystem()
        >>> hrManagementSystem.employees = {1: {'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}
        >>> hrManagementSystem.list_employees()
        {1: {'employee_ID': 1, 'name': 'John', 'position': 'Manager', 'department': 'Sales', 'salary': 100000}}

        """"""
        return {
            emp_id: {'employee_ID': emp_id, **info}
            for emp_id, info in self.employees.items()
        }"
44,"import re
import string
import gensim
from bs4 import BeautifulSoup


class HtmlUtil:

    def __init__(self):
        self.SPACE_MARK = '-SPACE-'
        self.JSON_MARK = '-JSON-'
        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        self.URL_MARK = '-URL-'
        self.NUMBER_MARK = '-NUMBER-'
        self.TRACE_MARK = '-TRACE-'
        self.COMMAND_MARK = '-COMMAND-'
        self.COMMENT_MARK = '-COMMENT-'
        self.CODE_MARK = '-CODE-'

    @staticmethod
    def __format_line_feed(text):
        return re.sub(re.compile(r'\n+'), '\n', text)

    def format_line_html_text(self, html_text):
        if html_text is None or len(html_text) == 0:
            return ''
        soup = BeautifulSoup(html_text, 'lxml')

        code_tag = soup.find_all(name=['pre', 'blockquote'])
        for tag in code_tag:
            tag.string = self.CODE_MARK

        ul_ol_group = soup.find_all(name=['ul', 'ol'])
        for ul_ol_item in ul_ol_group:
            li_group = ul_ol_item.find_all('li')
            for li_item in li_group:
                li_item_text = li_item.get_text().strip()
                if len(li_item_text) == 0:
                    continue
                if li_item_text[-1] in string.punctuation:
                    li_item.string = '[{0}]{1}'.format('-', li_item_text)
                    continue
                li_item.string = '[{0}]{1}.'.format('-', li_item_text)

        p_group = soup.find_all(name=['p'])
        for p_item in p_group:
            p_item_text = p_item.get_text().strip()
            if p_item_text:
                if p_item_text[-1] in string.punctuation:
                    p_item.string = p_item_text
                    continue
                next_sibling = p_item.find_next_sibling()
                if next_sibling and self.CODE_MARK in next_sibling.get_text():
                    p_item.string = p_item_text + ':'
                    continue
                p_item.string = p_item_text + '.'

        clean_text = gensim.utils.decode_htmlentities(soup.get_text())
        return self.__format_line_feed(clean_text)

    def extract_code_from_html_text(self, html_text):
        text_with_code_tag = self.format_line_html_text(html_text)

        if self.CODE_MARK not in text_with_code_tag:
            return []

        code_index_start = 0
        soup = BeautifulSoup(html_text, 'lxml')
        code_tag = soup.find_all(name=['pre', 'blockquote'])
        code_count = text_with_code_tag.count(self.CODE_MARK)
        code_list = []
        for code_index in range(code_index_start, code_index_start + code_count):
            code = code_tag[code_index].get_text()
            if code:
                code_list.append(code)
        return code_list","class HtmlUtil:
    """"""
    This is a class as util for html, supporting for formatting and extracting code from HTML text, including cleaning up the text and converting certain elements into specific marks.
    """"""

    def __init__(self):
        """"""
        Initialize a series of labels
        """"""
        self.SPACE_MARK = '-SPACE-'
        self.JSON_MARK = '-JSON-'
        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        self.URL_MARK = '-URL-'
        self.NUMBER_MARK = '-NUMBER-'
        self.TRACE_MARK = '-TRACE-'
        self.COMMAND_MARK = '-COMMAND-'
        self.COMMENT_MARK = '-COMMENT-'
        self.CODE_MARK = '-CODE-'

    @staticmethod
    def __format_line_feed(text):
        """"""
        Replace consecutive line breaks with a single line break
        :param text: string with consecutive line breaks
        :return:string, replaced text with single line break
        """"""

    def format_line_html_text(self, html_text):
        """"""
        get the html text without the code, and add the code tag -CODE- where the code is
        :param html_text:string
        :return:string
        >>>htmlutil = HtmlUtil()
        >>>htmlutil.format_line_html_text(<html>
        >>> <body>
        >>>    <h1>Title</h1>
        >>>    <p>This is a paragraph.</p>
        >>>    <pre>print('Hello, world!')</pre>
        >>>    <p>Another paragraph.</p>
        >>>    <pre><code>for i in range(5):
        >>>    print(i)</code></pre>
        >>>    </body>
        >>>    </html>)
        Title
        This is a paragraph.
        -CODE-
        Another paragraph.
        -CODE-
        """"""

    def extract_code_from_html_text(self, html_text):
        """"""
        extract codes from the html body
        :param html_text: string, html text
        :return: the list of code
        >>>htmlutil = HtmlUtil()
        >>>htmlutil.extract_code_from_html_text(<html>
        >>> <body>
        >>>    <h1>Title</h1>
        >>>    <p>This is a paragraph.</p>
        >>>    <pre>print('Hello, world!')</pre>
        >>>    <p>Another paragraph.</p>
        >>>    <pre><code>for i in range(5):
        >>>    print(i)</code></pre>
        >>>    </body>
        >>>    </html>)
        [""print('Hello, world!')"", 'for i in range(5):\n                print(i)']
        """"""",HtmlUtil,snippet_45,"import re
import html


class HtmlUtil:
    """"""
    This is a class as util for html, supporting for formatting and extracting code from HTML text, including cleaning up the text and converting certain elements into specific marks.
    """"""

    def __init__(self):
        """"""
        Initialize a series of labels
        """"""
        self.SPACE_MARK = '-SPACE-'
        self.JSON_MARK = '-JSON-'
        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        self.URL_MARK = '-URL-'
        self.NUMBER_MARK = '-NUMBER-'
        self.TRACE_MARK = '-TRACE-'
        self.COMMAND_MARK = '-COMMAND-'
        self.COMMENT_MARK = '-COMMENT-'
        self.CODE_MARK = '-CODE-'

    @staticmethod
    def __format_line_feed(text):
        """"""
        Replace consecutive line breaks with a single line break
        :param text: string with consecutive line breaks
        :return:string, replaced text with single line break
        """"""
        if text is None:
            return ''
        # Normalize newlines
        text = text.replace('\r\n', '\n').replace('\r', '\n')
        # Collapse runs of blank lines to a single newline
        text = re.sub(r'\n\s*\n+', '\n', text)
        return text

    def format_line_html_text(self, html_text):
        """"""
        get the html text without the code, and add the code tag -CODE- where the code is
        :param html_text:string
        :return:string
        >>>htmlutil = HtmlUtil()
        >>>htmlutil.format_line_html_text(<html>
        >>> <body>
        >>>    <h1>Title</h1>
        >>>    <p>This is a paragraph.</p>
        >>>    <pre>print('Hello, world!')</pre>
        >>>    <p>Another paragraph.</p>
        >>>    <pre><code>for i in range(5):
        >>>    print(i)</code></pre>
        >>>    </body>
        >>>    </html>)
        Title
        This is a paragraph.
        -CODE-
        Another paragraph.
        -CODE-
        """"""
        if not isinstance(html_text, str):
            return ''
        # Extract body if present
        body_match = re.search(r'<body[^>]*>(.*?)</body\s*>', html_text, flags=re.IGNORECASE | re.DOTALL)
        text = body_match.group(1) if body_match else html_text

        # Remove script and style contents entirely
        text = re.sub(r'<script[^>]*>.*?</script\s*>', '', text, flags=re.IGNORECASE | re.DOTALL)
        text = re.sub(r'<style[^>]*>.*?</style\s*>', '', text, flags=re.IGNORECASE | re.DOTALL)

        # Replace <pre>...</pre> with marker on its own line
        def _pre_replacer(match):
            return '\n' + self.CODE_MARK + '\n'

        text = re.sub(r'<pre\b[^>]*>.*?</pre\s*>', _pre_replacer, text, flags=re.IGNORECASE | re.DOTALL)

        # Convert some block/line-break tags to newlines to preserve structure
        # br variants
        text = re.sub(r'<br\s*/?>', '\n', text, flags=re.IGNORECASE)
        # Closing block tags that should end a line
        block_closers = ['p', 'div', 'section', 'article', 'header', 'footer', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
                         'li', 'ul', 'ol', 'table', 'tr', 'td', 'th', 'blockquote']
        for tag in block_closers:
            text = re.sub(rf'</{tag}\s*>', '\n', text, flags=re.IGNORECASE)

        # Strip remaining tags
        text = re.sub(r'<[^>]+>', '', text)

        # Unescape HTML entities
        text = html.unescape(text)

        # Normalize whitespace lines: trim and remove empty lines
        text = self.__format_line_feed(text)
        lines = [ln.strip() for ln in text.split('\n')]
        lines = [ln for ln in lines if ln != '']
        # Collapse consecutive -CODE- lines (in case)
        result_lines = []
        prev_code = False
        for ln in lines:
            if ln == self.CODE_MARK:
                if not prev_code:
                    result_lines.append(ln)
                prev_code = True
            else:
                result_lines.append(ln)
                prev_code = False

        return '\n'.join(result_lines)

    def extract_code_from_html_text(self, html_text):
        """"""
        extract codes from the html body
        :param html_text: string, html text
        :return: the list of code
        >>>htmlutil = HtmlUtil()
        >>>htmlutil.extract_code_from_html_text(<html>
        >>> <body>
        >>>    <h1>Title</h1>
        >>>    <p>This is a paragraph.</p>
        >>>    <pre>print('Hello, world!')</pre>
        >>>    <p>Another paragraph.</p>
        >>>    <pre><code>for i in range(5):
        >>>    print(i)</code></pre>
        >>>    </body>
        >>>    </html>)
        [""print('Hello, world!')"", 'for i in range(5):\n                print(i)']
        """"""
        if not isinstance(html_text, str):
            return []
        # Extract body if present
        body_match = re.search(r'<body[^>]*>(.*?)</body\s*>', html_text, flags=re.IGNORECASE | re.DOTALL)
        text = body_match.group(1) if body_match else html_text

        # Find all <pre> blocks
        codes = []
        for m in re.finditer(r'<pre\b[^>]*>(.*?)</pre\s*>', text, flags=re.IGNORECASE | re.DOTALL):
            inner = m.group(1)
            # Remove HTML tags inside (e.g., <code>, span for highlighting)
            inner_no_tags = re.sub(r'<[^>]+>', '', inner, flags=re.DOTALL)
            # Unescape entities to get raw code
            inner_unescaped = html.unescape(inner_no_tags)
            # Normalize newlines and strip leading/trailing whitespace
            code = inner_unescaped.replace('\r\n', '\n').replace('\r', '\n').strip()
            codes.append(code)
        return codes"
45,"from PIL import Image, ImageEnhance, ImageChops


class ImageProcessor:
    def __init__(self):
        self.image = None

    def load_image(self, image_path):
        self.image = Image.open(image_path)

    def save_image(self, save_path):
        if self.image:
            self.image.save(save_path)

    def resize_image(self, width, height):
        if self.image:
            self.image = self.image.resize((width, height))

    def rotate_image(self, degrees):
        if self.image:
            self.image = self.image.rotate(degrees)

    def adjust_brightness(self, factor):
        if self.image:
            enhancer = ImageEnhance.Brightness(self.image)
            self.image = enhancer.enhance(factor)","class ImageProcessor:
    """"""
    This is a class to process image, including loading, saving, resizing, rotating, and adjusting the brightness of images.
    """"""

    def __init__(self):
        """"""
        Initialize self.image
        """"""
        self.image = None

    def load_image(self, image_path):
        """"""
        Use Image util in PIL to open a image
        :param image_path: str, path of image that is to be
        >>> processor.load_image('test.jpg')
        >>> processor.image
        <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=3072x4096 at 0x194F2412A48>
        """"""

    def save_image(self, save_path):
        """"""
        Save image to a path if image has opened
        :param save_path: str, the path that the image will be saved
        >>> processor.load_image('test.jpg')
        >>> processor.save_image('test2.jpg')
        """"""

    def resize_image(self, width, height):
        """"""
        Risize the image if image has opened.
        :param width: int, the target width of image
        :param height: int, the target height of image
        >>> processor.load_image('test.jpg')
        >>> processor.resize_image(300, 300)
        >>> processor.image.width
        300
        >>> processor.image.height
        300
        """"""

    def rotate_image(self, degrees):
        """"""
        rotate image if image has opened
        :param degrees: float, the degrees that the image will be rotated
        >>> processor.load_image('test.jpg')
        >>> processor.resize_image(90)
        """"""

    def adjust_brightness(self, factor):
        """"""
        Adjust the brightness of image if image has opened.
        :param factor: float, brightness of an image. A factor of 0.0 gives a black image. A factor of 1.0 gives the original image.
        >>> processor.load_image('test.jpg')
        >>> processor.adjust_brightness(0.5)
        """"""",ImageProcessor,snippet_46,"from PIL import Image, ImageEnhance


class ImageProcessor:
    """"""
    This is a class to process image, including loading, saving, resizing, rotating, and adjusting the brightness of images.
    """"""

    def __init__(self):
        """"""
        Initialize self.image
        """"""
        self.image = None

    def _require_image(self):
        if self.image is None:
            raise ValueError(""No image loaded. Call load_image() first."")

    def load_image(self, image_path):
        """"""
        Use Image util in PIL to open a image
        :param image_path: str, path of image that is to be
        >>> processor.load_image('test.jpg')
        >>> processor.image
        <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=3072x4096 at 0x194F2412A48>
        """"""
        if not isinstance(image_path, str):
            raise TypeError(""image_path must be a string."")
        self.image = Image.open(image_path)
        return self.image

    def save_image(self, save_path):
        """"""
        Save image to a path if image has opened
        :param save_path: str, the path that the image will be saved
        >>> processor.load_image('test.jpg')
        >>> processor.save_image('test2.jpg')
        """"""
        self._require_image()
        if not isinstance(save_path, str):
            raise TypeError(""save_path must be a string."")
        self.image.save(save_path)

    def resize_image(self, width, height):
        """"""
        Risize the image if image has opened.
        :param width: int, the target width of image
        :param height: int, the target height of image
        >>> processor.load_image('test.jpg')
        >>> processor.resize_image(300, 300)
        >>> processor.image.width
        300
        >>> processor.image.height
        300
        """"""
        self._require_image()
        if not isinstance(width, int) or not isinstance(height, int):
            raise TypeError(""width and height must be integers."")
        if width <= 0 or height <= 0:
            raise ValueError(""width and height must be positive."")
        self.image = self.image.resize((width, height), Image.LANCZOS)
        return self.image

    def rotate_image(self, degrees):
        """"""
        rotate image if image has opened
        :param degrees: float, the degrees that the image will be rotated
        >>> processor.load_image('test.jpg')
        >>> processor.resize_image(90)
        """"""
        self._require_image()
        if not isinstance(degrees, (int, float)):
            raise TypeError(""degrees must be a number."")
        self.image = self.image.rotate(degrees, expand=True)
        return self.image

    def adjust_brightness(self, factor):
        """"""
        Adjust the brightness of image if image has opened.
        :param factor: float, brightness of an image. A factor of 0.0 gives a black image. A factor of 1.0 gives the original image.
        >>> processor.load_image('test.jpg')
        >>> processor.adjust_brightness(0.5)
        """"""
        self._require_image()
        if not isinstance(factor, (int, float)):
            raise TypeError(""factor must be a number."")
        enhancer = ImageEnhance.Brightness(self.image)
        self.image = enhancer.enhance(factor)
        return self.image"
46,"class Interpolation:
    def __init__(self):
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        y_interp = []
        for xi in x_interp:
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
                    y_interp.append(yi)
                    break
        return y_interp
    
    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        z_interp = []
        for xi, yi in zip(x_interp, y_interp):
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    for j in range(len(y) - 1):
                        if y[j] <= yi <= y[j+1]:
                            z00 = z[i][j]
                            z01 = z[i][j+1]
                            z10 = z[i+1][j]
                            z11 = z[i+1][j+1]
                            zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
                                  z10 * (xi - x[i]) * (y[j+1] - yi) +
                                  z01 * (x[i+1] - xi) * (yi - y[j]) +
                                  z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
                            z_interp.append(zi)
                            break
                    break
        return z_interp","class Interpolation:
    """"""
    This is a class that implements the Linear interpolation operation of one-dimensional and two-dimensional data
    """"""

    def __init__(self):
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        """"""
        Linear interpolation of one-dimensional data
        :param x: The x-coordinate of the data point, list.
        :param y: The y-coordinate of the data point, list.
        :param x_interp: The x-coordinate of the interpolation point, list.
        :return: The y-coordinate of the interpolation point, list.
        >>> interpolation = Interpolation()
        >>> interpolation.interpolate_1d([1, 2, 3], [1, 2, 3], [1.5, 2.5])
        [1.5, 2.5]

        """"""

    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        ”“”
        Linear interpolation of two-dimensional data
        :param x: The x-coordinate of the data point, list.
        :param y: The y-coordinate of the data point, list.
        :param z: The z-coordinate of the data point, list.
        :param x_interp: The x-coordinate of the interpolation point, list.
        :param y_interp: The y-coordinate of the interpolation point, list.
        :return: The z-coordinate of the interpolation point, list.
        >>> interpolation = Interpolation()
        >>> interpolation.interpolate_2d([1, 2, 3], [1, 2, 3], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1.5, 2.5], [1.5, 2.5])
        [3.0, 7.0]

        ”“”",Interpolation,snippet_47,"class Interpolation:
    """"""
    This is a class that implements the Linear interpolation operation of one-dimensional and two-dimensional data
    """"""

    def __init__(self):
        pass

    @staticmethod
    def _bracket_indices(arr, val):
        n = len(arr)
        if n < 2:
            raise ValueError(""Array must contain at least two points for interpolation."")
        if val <= arr[0]:
            return 0, 1
        if val >= arr[-1]:
            return n - 2, n - 1
        # Binary search
        lo, hi = 0, n - 1
        while lo + 1 < hi:
            mid = (lo + hi) // 2
            if arr[mid] == val:
                return max(0, mid - 1), mid
            elif arr[mid] < val:
                lo = mid
            else:
                hi = mid
        return lo, hi

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        """"""
        Linear interpolation of one-dimensional data
        :param x: The x-coordinate of the data point, list.
        :param y: The y-coordinate of the data point, list.
        :param x_interp: The x-coordinate of the interpolation point, list.
        :return: The y-coordinate of the interpolation point, list.
        >>> interpolation = Interpolation()
        >>> interpolation.interpolate_1d([1, 2, 3], [1, 2, 3], [1.5, 2.5])
        [1.5, 2.5]

        """"""
        if len(x) != len(y):
            throw = ValueError(""x and y must have the same length."")
            raise throw
        if len(x) < 2:
            raise ValueError(""At least two data points are required for interpolation."")
        # Sort by x
        order = sorted(range(len(x)), key=lambda i: x[i])
        xs = [float(x[i]) for i in order]
        ys = [float(y[i]) for i in order]

        result = []
        for xi in x_interp:
            xi = float(xi)
            i0, i1 = Interpolation._bracket_indices(xs, xi)
            x0, x1 = xs[i0], xs[i1]
            y0, y1 = ys[i0], ys[i1]
            if x1 == x0:
                yi = y0
            else:
                t = (xi - x0) / (x1 - x0)
                yi = y0 * (1 - t) + y1 * t
            result.append(yi)
        return result

    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        """"""
        Linear interpolation of two-dimensional data
        :param x: The x-coordinate of the data point, list.
        :param y: The y-coordinate of the data point, list.
        :param z: The z-coordinate of the data point, list of lists, shape (len(y), len(x)).
        :param x_interp: The x-coordinate of the interpolation point, list.
        :param y_interp: The y-coordinate of the interpolation point, list.
        :return: The z-coordinate of the interpolation point, list.
        >>> interpolation = Interpolation()
        >>> interpolation.interpolate_2d([1, 2, 3], [1, 2, 3], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1.5, 2.5], [1.5, 2.5])
        [3.0, 7.0]

        """"""
        if len(x) < 2 or len(y) < 2:
            raise ValueError(""x and y must each contain at least two points."")
        if not isinstance(z, (list, tuple)) or any(not isinstance(row, (list, tuple)) for row in z):
            raise ValueError(""z must be a 2D list or tuple of shape (len(y), len(x))."")
        if len(z) != len(y):
            raise ValueError(""Number of rows in z must equal len(y)."")
        if any(len(row) != len(x) for row in z):
            raise ValueError(""Each row in z must have length equal to len(x)."")
        if len(x_interp) != len(y_interp):
            raise ValueError(""x_interp and y_interp must have the same length."")

        # Convert to floats and sort axes; reorder z accordingly
        x_order = sorted(range(len(x)), key=lambda i: x[i])
        y_order = sorted(range(len(y)), key=lambda i: y[i])
        xs = [float(x[i]) for i in x_order]
        ys = [float(y[j]) for j in y_order]

        # Reorder z: first reorder rows by y, then columns by x
        z_reordered_rows = [z[j] for j in y_order]
        z_sorted = []
        for row in z_reordered_rows:
            z_sorted.append([float(row[i]) for i in x_order])

        results = []
        for xi, yi in zip(x_interp, y_interp):
            xi = float(xi)
            yi = float(yi)
            ix0, ix1 = Interpolation._bracket_indices(xs, xi)
            iy0, iy1 = Interpolation._bracket_indices(ys, yi)

            x0, x1 = xs[ix0], xs[ix1]
            y0, y1 = ys[iy0], ys[iy1]

            z00 = z_sorted[iy0][ix0]
            z10 = z_sorted[iy0][ix1]
            z01 = z_sorted[iy1][ix0]
            z11 = z_sorted[iy1][ix1]

            if x1 == x0 and y1 == y0:
                zi = z00
            elif x1 == x0:
                # Linear along y
                ty = (yi - y0) / (y1 - y0) if y1 != y0 else 0.0
                zi = z00 * (1 - ty) + z01 * ty
            elif y1 == y0:
                # Linear along x
                tx = (xi - x0) / (x1 - x0) if x1 != x0 else 0.0
                zi = z00 * (1 - tx) + z10 * tx
            else:
                tx = (xi - x0) / (x1 - x0)
                ty = (yi - y0) / (y1 - y0)
                # Bilinear interpolation
                z0 = z00 * (1 - tx) + z10 * tx
                z1 = z01 * (1 - tx) + z11 * tx
                zi = z0 * (1 - ty) + z1 * ty

            results.append(zi)

        return results"
47,"class IPAddress:
    def __init__(self, ip_address):
        self.ip_address = ip_address

    def is_valid(self):
        octets = self.ip_address.split('.')
        if len(octets) != 4:
            return False
        for octet in octets:
            if not octet.isdigit() or int(octet) < 0 or int(octet) > 255:
                return False
        return True

    def get_octets(self):
        if self.is_valid():
            return self.ip_address.split('.')
        else:
            return []

    def get_binary(self):
        if self.is_valid():
            binary_octets = []
            for octet in self.get_octets():
                binary_octets.append(format(int(octet), '08b'))
            return '.'.join(binary_octets)
        else:
            return ''","class IPAddress:
    """"""
    This is a class to process IP Address, including validating, getting the octets and obtaining the binary representation of a valid IP address.
    """"""

    def __init__(self, ip_address):
        """"""
        Initialize the IP address to the specified address
        :param ip_address:string
        """"""
        self.ip_address = ip_address


    def is_valid(self):
        """"""
        Judge whether the IP address is valid, that is, whether the IP address is composed of four Decimal digits separated by '.'. Each digit is greater than or equal to 0 and less than or equal to 255
        :return: bool
        >>> ipaddress = IPAddress(""10.10.10.10"")
        >>> ipaddress.is_valid()
        True
        """"""


    def get_octets(self):
        """"""
        If the IP address is valid, the list of four decimal numbers separated by ""."" constituting the IP address is returned; otherwise, an empty list is returned
        :return: list
        >>> ipaddress = IPAddress(""10.10.10.10"")
        >>> ipaddress.get_octets()
        [""10"", ""10"", ""10"", ""10""]
        """"""


    def get_binary(self):
        """"""
        If the IP address is valid, return the binary form of the IP address; otherwise, return ''
        :return: string
        >>> ipaddress = IPAddress(""10.10.10.10"")
        >>> ipaddress.get_binary()
        ""00001010.00001010.00001010.00001010""
        """"""",IPAddress,snippet_48,"class IPAddress:
    """"""
    This is a class to process IP Address, including validating, getting the octets and obtaining the binary representation of a valid IP address.
    """"""

    def __init__(self, ip_address):
        """"""
        Initialize the IP address to the specified address
        :param ip_address:string
        """"""
        self.ip_address = ip_address

    def is_valid(self):
        """"""
        Judge whether the IP address is valid, that is, whether the IP address is composed of four Decimal digits separated by '.'. Each digit is greater than or equal to 0 and less than or equal to 255
        :return: bool
        >>> ipaddress = IPAddress(""10.10.10.10"")
        >>> ipaddress.is_valid()
        True
        """"""
        if not isinstance(self.ip_address, str):
            return False
        parts = self.ip_address.split(""."")
        if len(parts) != 4:
            return False
        for p in parts:
            if not p.isdigit():
                return False
            try:
                val = int(p)
            except ValueError:
                return False
            if val < 0 or val > 255:
                return False
        return True

    def get_octets(self):
        """"""
        If the IP address is valid, the list of four decimal numbers separated by ""."" constituting the IP address is returned; otherwise, an empty list is returned
        :return: list
        >>> ipaddress = IPAddress(""10.10.10.10"")
        >>> ipaddress.get_octets()
        [""10"", ""10"", ""10"", ""10""]
        """"""
        if not self.is_valid():
            return []
        return self.ip_address.split(""."")

    def get_binary(self):
        """"""
        If the IP address is valid, return the binary form of the IP address; otherwise, return ''
        :return: string
        >>> ipaddress = IPAddress(""10.10.10.10"")
        >>> ipaddress.get_binary()
        ""00001010.00001010.00001010.00001010""
        """"""
        if not self.is_valid():
            return """"
        octets = self.ip_address.split(""."")
        bin_octets = [""{:08b}"".format(int(o)) for o in octets]
        return ""."".join(bin_octets)"
48,"import socket


class IpUtil:

    @staticmethod
    def is_valid_ipv4(ip_address):
        try:
            socket.inet_pton(socket.AF_INET, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    def is_valid_ipv6(ip_address):
        try:
            socket.inet_pton(socket.AF_INET6, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    def get_hostname(ip_address):
        try:
            hostname = socket.gethostbyaddr(ip_address)[0]
            return hostname
        except socket.herror:
            return None","class IpUtil:
    """"""
    This is a class as tool for ip that can be used to obtain the local IP address, validate its validity, and also provides the functionality to retrieve the corresponding hostname.
    """"""


    @staticmethod
    def is_valid_ipv4(ip_address):
        """"""
        Check if the given IP address is a valid IPv4 address.
        :param ip_address: string, the IP address to check
        :return: bool, True if the IP address is valid, False otherwise
        >>> IpUtil.is_valid_ipv4('192.168.0.123')
        True
        >>> IpUtil.is_valid_ipv4('256.0.0.0')
        False

        """"""

    @staticmethod
    def is_valid_ipv6(ip_address):
        """"""
        Check if the given IP address is a valid IPv6 address.
        :param ip_address:string, the IP address to check
        :return:bool, True if the IP address is valid, False otherwise
        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')
        True
        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:::8a2e:0370:7334')
        False

        """"""


    @staticmethod
    def get_hostname(ip_address):
        """"""
        Get the hostname associated with the given IP address.
        :param ip_address:string, the IP address to get the hostname for
        :return: string, the hostname associated with the IP address
        >>> IpUtil.get_hostname('110.242.68.3')
        'www.baidu.com'
        >>> IpUtil.get_hostname('10.0.0.1')

        """"""",IpUtil,snippet_49,"import socket
import ipaddress


class IpUtil:
    """"""
    This is a class as tool for ip that can be used to obtain the local IP address, validate its validity, and also provides the functionality to retrieve the corresponding hostname.
    """"""

    @staticmethod
    def is_valid_ipv4(ip_address):
        """"""
        Check if the given IP address is a valid IPv4 address.
        :param ip_address: string, the IP address to check
        :return: bool, True if the IP address is valid, False otherwise
        >>> IpUtil.is_valid_ipv4('192.168.0.123')
        True
        >>> IpUtil.is_valid_ipv4('256.0.0.0')
        False

        """"""
        if not isinstance(ip_address, str):
            return False
        try:
            ipaddress.IPv4Address(ip_address.strip())
            return True
        except Exception:
            return False

    @staticmethod
    def is_valid_ipv6(ip_address):
        """"""
        Check if the given IP address is a valid IPv6 address.
        :param ip_address:string, the IP address to check
        :return:bool, True if the IP address is valid, False otherwise
        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')
        True
        >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:::8a2e:0370:7334')
        False

        """"""
        if not isinstance(ip_address, str):
            return False
        try:
            ipaddress.IPv6Address(ip_address.strip())
            return True
        except Exception:
            return False

    @staticmethod
    def get_hostname(ip_address):
        """"""
        Get the hostname associated with the given IP address.
        :param ip_address:string, the IP address to get the hostname for
        :return: string, the hostname associated with the IP address
        >>> IpUtil.get_hostname('110.242.68.3')
        'www.baidu.com'
        >>> IpUtil.get_hostname('10.0.0.1')

        """"""
        if not isinstance(ip_address, str):
            return None
        ip_str = ip_address.strip()
        try:
            ipaddress.ip_address(ip_str)
        except Exception:
            return None
        try:
            host, _, _ = socket.gethostbyaddr(ip_str)
            return host
        except (socket.herror, socket.gaierror, OSError):
            return None"
49,"class JobMarketplace:
    def __init__(self):
        self.job_listings = []
        self.resumes = []

    def post_job(self, job_title, company, requirements):
        # requirements = ['requirement1', 'requirement2']
        job = {""job_title"": job_title, ""company"": company, ""requirements"": requirements}
        self.job_listings.append(job)

    def remove_job(self, job):
        self.job_listings.remove(job)

    def submit_resume(self, name, skills, experience):
        resume = {""name"": name, ""skills"": skills, ""experience"": experience}
        self.resumes.append(resume)

    def withdraw_resume(self, resume):
        self.resumes.remove(resume)

    def search_jobs(self, criteria):
        matching_jobs = []
        for job_listing in self.job_listings:
            if criteria.lower() in job_listing[""job_title""].lower() or criteria.lower() in [r.lower() for r in job_listing[""requirements""]]:
                matching_jobs.append(job_listing)
        return matching_jobs

    def get_job_applicants(self, job):
        applicants = []
        for resume in self.resumes:
            if self.matches_requirements(resume, job[""requirements""]):
                applicants.append(resume)
        return applicants

    @staticmethod
    def matches_requirements(resume, requirements):
        for skill in resume[""skills""]:
            if skill not in requirements:
                return False
        return True","class JobMarketplace:
    """"""
    This is a class that provides functionalities to publish positions, remove positions, submit resumes, withdraw resumes, search for positions, and obtain candidate information.
    """"""

    def __init__(self):
        self.job_listings = []
        self.resumes = []

    def post_job(self, job_title, company, requirements):
        """"""
        This function is used to publish positions,and add the position information to the job_listings list.
        :param job_title: The title of the position,str.
        :param company: The company of the position,str.
        :param requirements: The requirements of the position,list.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.post_job(""Software Engineer"", ""ABC Company"", ['requirement1', 'requirement2'])
        >>> jobMarketplace.job_listings
        [{'job_title': 'Software Engineer', 'company': 'ABC Company', 'requirements': ['requirement1', 'requirement2']}]

        """"""

    def remove_job(self, job):
        """"""
        This function is used to remove positions,and remove the position information from the job_listings list.
        :param job: The position information to be removed,dict.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.job_listings = [{""job_title"": ""Software Engineer"", ""company"": ""ABC Company"", ""requirements"": ['requirement1', 'requirement2']}]
        >>> jobMarketplace.remove_job(jobMarketplace.job_listings[0])
        >>> jobMarketplace.job_listings
        []

        """"""

    def submit_resume(self, name, skills, experience):
        """"""
        This function is used to submit resumes,and add the resume information to the resumes list.
        :param name: The name of the resume,str.
        :param skills: The skills of the resume,list.
        :param experience: The experience of the resume,str.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.submit_resume(""Tom"", ['skill1', 'skill2'], ""experience"")
        >>> jobMarketplace.resumes
        [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]

        """"""

    def withdraw_resume(self, resume):
        """"""
        This function is used to withdraw resumes,and remove the resume information from the resumes list.
        :param resume: The resume information to be removed,dict.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.resumes = [{""name"": ""Tom"", ""skills"": ['skill1', 'skill2'], ""experience"": ""experience""}]
        >>> jobMarketplace.withdraw_resume(jobMarketplace.resumes[0])
        >>> jobMarketplace.resumes
        []

        """"""

    def search_jobs(self, criteria):
        """"""
        This function is used to search for positions,and return the position information that meets the requirements.
        :param criteria: The requirements of the position,str.
        :return: The position information that meets the requirements,list.
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.job_listings = [{""job_title"": ""Software Engineer"", ""company"": ""ABC Company"", ""requirements"": ['skill1', 'skill2']}]
        >>> jobMarketplace.search_jobs(""skill1"")
        [{'job_title': 'Software Engineer', 'company': 'ABC Company', 'requirements': ['skill1', 'skill2']}]

        """"""

    def get_job_applicants(self, job):
        """"""
        This function is used to obtain candidate information,and return the candidate information that meets the requirements by calling the matches_requirements function.
        :param job: The position information,dict.
        :return: The candidate information that meets the requirements,list.
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.resumes = [{""name"": ""Tom"", ""skills"": ['skill1', 'skill2'], ""experience"": ""experience""}]
        >>> jobMarketplace.job_listings = [{""job_title"": ""Software Engineer"", ""company"": ""ABC Company"", ""requirements"": ['skill1', 'skill2']}]
        >>> jobMarketplace.get_job_applicants(jobMarketplace.job_listings[0])
        [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]

        """"""",JobMarketplace,snippet_50,"class JobMarketplace:
    """"""
    This is a class that provides functionalities to publish positions, remove positions, submit resumes, withdraw resumes, search for positions, and obtain candidate information.
    """"""

    def __init__(self):
        self.job_listings = []
        self.resumes = []

    def post_job(self, job_title, company, requirements):
        """"""
        This function is used to publish positions,and add the position information to the job_listings list.
        :param job_title: The title of the position,str.
        :param company: The company of the position,str.
        :param requirements: The requirements of the position,list.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.post_job(""Software Engineer"", ""ABC Company"", ['requirement1', 'requirement2'])
        >>> jobMarketplace.job_listings
        [{'job_title': 'Software Engineer', 'company': 'ABC Company', 'requirements': ['requirement1', 'requirement2']}]

        """"""
        job = {
            'job_title': job_title,
            'company': company,
            'requirements': list(requirements) if requirements is not None else []
        }
        self.job_listings.append(job)

    def remove_job(self, job):
        """"""
        This function is used to remove positions,and remove the position information from the job_listings list.
        :param job: The position information to be removed,dict.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.job_listings = [{""job_title"": ""Software Engineer"", ""company"": ""ABC Company"", ""requirements"": ['requirement1', 'requirement2']}]
        >>> jobMarketplace.remove_job(jobMarketplace.job_listings[0])
        >>> jobMarketplace.job_listings
        []

        """"""
        try:
            self.job_listings.remove(job)
        except ValueError:
            pass

    def submit_resume(self, name, skills, experience):
        """"""
        This function is used to submit resumes,and add the resume information to the resumes list.
        :param name: The name of the resume,str.
        :param skills: The skills of the resume,list.
        :param experience: The experience of the resume,str.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.submit_resume(""Tom"", ['skill1', 'skill2'], ""experience"")
        >>> jobMarketplace.resumes
        [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]

        """"""
        resume = {
            'name': name,
            'skills': list(skills) if skills is not None else [],
            'experience': experience
        }
        self.resumes.append(resume)

    def withdraw_resume(self, resume):
        """"""
        This function is used to withdraw resumes,and remove the resume information from the resumes list.
        :param resume: The resume information to be removed,dict.
        :return: None
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.resumes = [{""name"": ""Tom"", ""skills"": ['skill1', 'skill2'], ""experience"": ""experience""}]
        >>> jobMarketplace.withdraw_resume(jobMarketplace.resumes[0])
        >>> jobMarketplace.resumes
        []

        """"""
        try:
            self.resumes.remove(resume)
        except ValueError:
            pass

    def search_jobs(self, criteria):
        """"""
        This function is used to search for positions,and return the position information that meets the requirements.
        :param criteria: The requirements of the position,str.
        :return: The position information that meets the requirements,list.
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.job_listings = [{""job_title"": ""Software Engineer"", ""company"": ""ABC Company"", ""requirements"": ['skill1', 'skill2']}]
        >>> jobMarketplace.search_jobs(""skill1"")
        [{'job_title': 'Software Engineer', 'company': 'ABC Company', 'requirements': ['skill1', 'skill2']}]

        """"""
        return [job for job in self.job_listings if criteria in job.get('requirements', [])]

    def get_job_applicants(self, job):
        """"""
        This function is used to obtain candidate information,and return the candidate information that meets the requirements by calling the matches_requirements function.
        :param job: The position information,dict.
        :return: The candidate information that meets the requirements,list.
        >>> jobMarketplace = JobMarketplace()
        >>> jobMarketplace.resumes = [{""name"": ""Tom"", ""skills"": ['skill1', 'skill2'], ""experience"": ""experience""}]
        >>> jobMarketplace.job_listings = [{""job_title"": ""Software Engineer"", ""company"": ""ABC Company"", ""requirements"": ['skill1', 'skill2']}]
        >>> jobMarketplace.get_job_applicants(jobMarketplace.job_listings[0])
        [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]

        """"""
        return [resume for resume in self.resumes if self._matches_requirements(job, resume)]

    def _matches_requirements(self, job, resume):
        job_requirements = set(job.get('requirements', []))
        candidate_skills = set(resume.get('skills', []))
        return job_requirements.issubset(candidate_skills)"
50,"import json
import os


class JSONProcessor:
    def read_json(self, file_path):
        if not os.path.exists(file_path):
            return 0
        try:
            with open(file_path, 'r') as file:
                data = json.load(file)
            return data
        except:
            return -1

    def write_json(self, data, file_path):
        try:
            with open(file_path, 'w') as file:
                json.dump(data, file)
            return 1
        except:
            return -1

    def process_json(self, file_path, remove_key):
        data = self.read_json(file_path)
        if data == 0 or data == -1:
            return 0
        if remove_key in data:
            del data[remove_key]
            self.write_json(data, file_path)
            return 1
        else:
            return 0","class JSONProcessor:
    """"""
    This is a class to process JSON file, including reading and writing JSON files, as well as processing JSON data by removing a specified key from the JSON object.
    """"""

    def read_json(self, file_path):
        """"""
        Read a JSON file and return the data.
        :param file_path: str, the path of the JSON file.
        :return: dict, the data from the JSON file if read successfully, or return -1 if an error occurs during the reading process.
                    return 0 if the file does not exist.
        >>> json.read_json('test.json')
        {'name': 'test', 'age': 14}
        """"""

    def write_json(self, data, file_path):
        """"""
        Write data to a JSON file and save it to the given path.

        :param data: dict, the data to be written to the JSON file.
        :param file_path: str, the path of the JSON file.
        :return: 1 if the writing process is successful, or -1, if an error occurs during the writing process.
        >>> json.write_json({'key1': 'value1', 'key2': 'value2'}, 'test.json')
        1
        >>> json.read_json('test.json')
        {'key1': 'value1', 'key2': 'value2'}
        """"""

    def process_json(self, file_path, remove_key):
        """"""
        read a JSON file and process the data by removing a specified key and rewrite the modified data back to the file.

        :param file_path: str, the path of the JSON file.
        :param remove_key: str, the key to be removed.
        :return: 1, if the specified key is successfully removed and the data is written back.
                    0, if the file does not exist or the specified key does not exist in the data.
        >>> json.read_json('test.json')
        {'key1': 'value1', 'key2': 'value2'}
        >>> json.process_json('test.json', 'key1')
        1
        >>> json.read_json('test.json')
        {'key2': 'value2'}
        """"""",JSONProcessor,snippet_51,"import json
import os


class JSONProcessor:
    """"""
    This is a class to process JSON file, including reading and writing JSON files, as well as processing JSON data by removing a specified key from the JSON object.
    """"""

    def read_json(self, file_path):
        """"""
        Read a JSON file and return the data.
        :param file_path: str, the path of the JSON file.
        :return: dict, the data from the JSON file if read successfully, or return -1 if an error occurs during the reading process.
                    return 0 if the file does not exist.
        >>> json.read_json('test.json')
        {'name': 'test', 'age': 14}
        """"""
        if not os.path.exists(file_path):
            return 0
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            if not isinstance(data, dict):
                return -1
            return data
        except Exception:
            return -1

    def write_json(self, data, file_path):
        """"""
        Write data to a JSON file and save it to the given path.

        :param data: dict, the data to be written to the JSON file.
        :param file_path: str, the path of the JSON file.
        :return: 1 if the writing process is successful, or -1, if an error occurs during the writing process.
        >>> json.write_json({'key1': 'value1', 'key2': 'value2'}, 'test.json')
        1
        >>> json.read_json('test.json')
        {'key1': 'value1', 'key2': 'value2'}
        """"""
        try:
            if not isinstance(data, dict):
                return -1
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False)
            return 1
        except Exception:
            return -1

    def process_json(self, file_path, remove_key):
        """"""
        read a JSON file and process the data by removing a specified key and rewrite the modified data back to the file.

        :param file_path: str, the path of the JSON file.
        :param remove_key: str, the key to be removed.
        :return: 1, if the specified key is successfully removed and the data is written back.
                    0, if the file does not exist or the specified key does not exist in the data.
        >>> json.read_json('test.json')
        {'key1': 'value1', 'key2': 'value2'}
        >>> json.process_json('test.json', 'key1')
        1
        >>> json.read_json('test.json')
        {'key2': 'value2'}
        """"""
        data = self.read_json(file_path)
        if data == 0:
            return 0
        if data == -1 or not isinstance(data, dict):
            return -1

        if remove_key not in data:
            return 0

        data.pop(remove_key, None)
        write_status = self.write_json(data, file_path)
        if write_status == 1:
            return 1
        return -1"
51,"import numpy as np


class KappaCalculator:

    @staticmethod
    def kappa(testData, k):
        dataMat = np.mat(testData)
        P0 = 0.0
        for i in range(k):
            P0 += dataMat[i, i] * 1.0
        xsum = np.sum(dataMat, axis=1)
        ysum = np.sum(dataMat, axis=0)
        sum = np.sum(dataMat)
        Pe = float(ysum * xsum) / sum / sum
        P0 = float(P0 / sum * 1.0)
        cohens_coefficient = float((P0 - Pe) / (1 - Pe))
        return cohens_coefficient

    @staticmethod
    def fleiss_kappa(testData, N, k, n):
        dataMat = np.mat(testData, float)
        oneMat = np.ones((k, 1))
        sum = 0.0
        P0 = 0.0
        for i in range(N):
            temp = 0.0
            for j in range(k):
                sum += dataMat[i, j]
                temp += 1.0 * dataMat[i, j] ** 2
            temp -= n
            temp /= (n - 1) * n
            P0 += temp
        P0 = 1.0 * P0 / N
        ysum = np.sum(dataMat, axis=0)
        for i in range(k):
            ysum[0, i] = (ysum[0, i] / sum) ** 2
        Pe = ysum * oneMat * 1.0
        ans = (P0 - Pe) / (1 - Pe)
        return ans[0, 0]","class KappaCalculator:
    """"""
    This is a class as KappaCalculator, supporting to calculate Cohen's and Fleiss' kappa coefficient.
    """"""


    @staticmethod
    def kappa(testData, k):
        """"""
        Calculate the cohens kappa value of a k-dimensional matrix
        :param testData: The k-dimensional matrix that needs to calculate the cohens kappa value
        :param k: int, Matrix dimension
        :return:float, the cohens kappa value of the matrix
        >>> KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3)
        0.25
        """"""

    @staticmethod
    def fleiss_kappa(testData, N, k, n):
        """"""
        Calculate the fliss kappa value of an N * k matrix
        :param testData: Input data matrix, N * k
        :param N: int, Number of samples
        :param k: int, Number of categories
        :param n: int, Number of raters
        :return: float, fleiss kappa value
        >>> KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],
        >>>                              [0, 2, 6, 4, 2],
        >>>                              [0, 0, 3, 5, 6],
        >>>                              [0, 3, 9, 2, 0],
        >>>                              [2, 2, 8, 1, 1],
        >>>                              [7, 7, 0, 0, 0],
        >>>                              [3, 2, 6, 3, 0],
        >>>                              [2, 5, 3, 2, 2],
        >>>                              [6, 5, 2, 1, 0],
        >>>                              [0, 2, 2, 3, 7]], 10, 5, 14)
        0.20993070442195522
        """"""",KappaCalculator,snippet_52,"class KappaCalculator:
    """"""
    This is a class as KappaCalculator, supporting to calculate Cohen's and Fleiss' kappa coefficient.
    """"""

    @staticmethod
    def kappa(testData, k):
        """"""
        Calculate the cohens kappa value of a k-dimensional matrix
        :param testData: The k-dimensional matrix that needs to calculate the cohens kappa value
        :param k: int, Matrix dimension
        :return:float, the cohens kappa value of the matrix
        >>> KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3)
        0.25
        """"""
        # Validate input dimensions if possible
        if not testData or k <= 0:
            return 0.0
        if len(testData) != k or any(len(row) != k for row in testData):
            # If dimensions don't match k, attempt to infer; else return 0.0
            inferred_k = len(testData)
            if inferred_k == 0 or any(len(row) != inferred_k for row in testData):
                return 0.0
            k = inferred_k

        # Total observations
        total = sum(sum(row) for row in testData)
        if total == 0:
            return 0.0

        # Observed agreement
        observed = sum(testData[i][i] for i in range(k)) / float(total)

        # Expected agreement: sum over categories of (row_marginal * col_marginal) / total^2
        row_marginals = [sum(testData[i]) for i in range(k)]
        col_marginals = [sum(testData[i][j] for i in range(k)) for j in range(k)]
        expected = sum((row_marginals[i] * col_marginals[i]) for i in range(k)) / float(total * total)

        denom = 1.0 - expected
        if denom == 0.0:
            return 0.0
        return (observed - expected) / denom

    @staticmethod
    def fleiss_kappa(testData, N, k, n):
        """"""
        Calculate the fliss kappa value of an N * k matrix
        :param testData: Input data matrix, N * k
        :param N: int, Number of samples
        :param k: int, Number of categories
        :param n: int, Number of raters
        :return: float, fleiss kappa value
        >>> KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],
        >>>                              [0, 2, 6, 4, 2],
        >>>                              [0, 0, 3, 5, 6],
        >>>                              [0, 3, 9, 2, 0],
        >>>                              [2, 2, 8, 1, 1],
        >>>                              [7, 7, 0, 0, 0],
        >>>                              [3, 2, 6, 3, 0],
        >>>                              [2, 5, 3, 2, 2],
        >>>                              [6, 5, 2, 1, 0],
        >>>                              [0, 2, 2, 3, 7]], 10, 5, 14)
        0.20993070442195522
        """"""
        # Basic validations
        if not testData or N <= 0 or k <= 0 or n <= 0:
            return 0.0
        if len(testData) != N or any(len(row) != k for row in testData):
            # Try to infer N and k from data
            N = len(testData)
            if N == 0:
                return 0.0
            k_infer = len(testData[0])
            if any(len(row) != k_infer for row in testData):
                return 0.0
            k = k_infer

        # Ensure each row sums to n; if not, proceed but avoid division by zero
        row_sums = [sum(row) for row in testData]
        if any(rs == 0 for rs in row_sums):
            return 0.0

        # Proportions per category across all subjects
        total_ratings = float(N * n)
        p_j = [sum(testData[i][j] for i in range(N)) / total_ratings for j in range(k)]

        # Agreement per subject
        denom_pi = float(n * (n - 1))
        if denom_pi == 0.0:
            return 0.0
        P_i = []
        for i in range(N):
            s = sum(testData[i][j] * (testData[i][j] - 1) for j in range(k))
            P_i.append(s / denom_pi)

        P_bar = sum(P_i) / float(N)
        P_e_bar = sum(p * p for p in p_j)

        denom = 1.0 - P_e_bar
        if denom == 0.0:
            return 0.0
        return (P_bar - P_e_bar) / denom"
52,"import nltk
from nltk.stem import WordNetLemmatizer
from nltk import pos_tag, word_tokenize
import string

nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')
nltk.download('wordnet')


class Lemmatization:
    def __init__(self):
        self.lemmatizer = WordNetLemmatizer()

    def lemmatize_sentence(self, sentence):
        lemmatized_words = []
        sentence = self.remove_punctuation(sentence)
        words = word_tokenize(sentence)
        tagged_words = pos_tag(words)
        for word, tag in tagged_words:
            if tag.startswith('V'):
                lemmatized_word = self.lemmatizer.lemmatize(word, pos='v')
            elif tag.startswith('J'):
                lemmatized_word = self.lemmatizer.lemmatize(word, pos='a')
            elif tag.startswith('R'):
                lemmatized_word = self.lemmatizer.lemmatize(word, pos='r')
            else:
                lemmatized_word = self.lemmatizer.lemmatize(word)
            lemmatized_words.append(lemmatized_word)
        return lemmatized_words

    def get_pos_tag(self, sentence):
        pos_tags = []
        sentence = self.remove_punctuation(sentence)
        words = word_tokenize(sentence)
        tagged_words = pos_tag(words)
        for tagged_word in tagged_words:
            pos_tags.append(tagged_word[1])
        return pos_tags

    def remove_punctuation(self, sentence):
        return sentence.translate(str.maketrans('', '', string.punctuation))","class Lemmatization:
    """"""
    This is a class about Lemmatization, which utilizes the nltk library to perform lemmatization and part-of-speech tagging on sentences, as well as remove punctuation.
    """"""

    def __init__(self):
        """"""
        creates a WordNetLemmatizer object and stores it in the self.lemmatizer member variable.
        """"""
        self.lemmatizer = WordNetLemmatizer()

    def lemmatize_sentence(self, sentence):
        """"""
        Remove punctuations of the sentence and tokenizes the input sentence, mark the part of speech tag of each word,
        lemmatizes the words with different parameters based on their parts of speech, and stores in a list.
        :param sentence: a sentence str
        :return: a list of words which have been lemmatized.
        >>> lemmatization = Lemmatization()
        >>> lemmatization.lemmatize_sentence(""I am running in a race."")
        ['I', 'be', 'run', 'in', 'a', 'race']

        """"""

    def get_pos_tag(self, sentence):
        """"""
        Remove punctuations of the sentence and tokenizes the input sentence, mark the part of speech tag of each word.
        :param sentence: a sentence str
        :return: list, part of speech tag of each word in the sentence.
        >>> lemmatization = Lemmatization()
        >>> lemmatization.get_pos_tag(""I am running in a race."")
        ['PRP', 'VBP', 'VBG', 'IN', 'DT', 'NN']

        """"""

    def remove_punctuation(self, sentence):
        """"""
        Removes punctuation from the input text.
        :param sentence: a sentence str
        :return: str, sentence without any punctuation
        >>> lemmatization = Lemmatization()
        >>> lemmatization.remove_punctuation(""I am running in a race."")
        'I am running in a race'

        """"""",Lemmatization,snippet_53,"from typing import List
import string

import nltk
from nltk.stem import WordNetLemmatizer
from nltk.corpus import wordnet as wn
from nltk import pos_tag, word_tokenize


class Lemmatization:
    """"""
    This is a class about Lemmatization, which utilizes the nltk library to perform lemmatization and part-of-speech tagging on sentences, as well as remove punctuation.
    """"""

    def __init__(self):
        """"""
        creates a WordNetLemmatizer object and stores it in the self.lemmatizer member variable.
        """"""
        self.lemmatizer = WordNetLemmatizer()

    def _to_wordnet_pos(self, treebank_tag: str):
        if not treebank_tag:
            return None
        if treebank_tag.startswith('J'):
            return wn.ADJ
        if treebank_tag.startswith('V'):
            return wn.VERB
        if treebank_tag.startswith('N'):
            return wn.NOUN
        if treebank_tag.startswith('R'):
            return wn.ADV
        return None

    def lemmatize_sentence(self, sentence):
        """"""
        Remove punctuations of the sentence and tokenizes the input sentence, mark the part of speech tag of each word,
        lemmatizes the words with different parameters based on their parts of speech, and stores in a list.
        :param sentence: a sentence str
        :return: a list of words which have been lemmatized.
        >>> lemmatization = Lemmatization()
        >>> lemmatization.lemmatize_sentence(""I am running in a race."")
        ['I', 'be', 'run', 'in', 'a', 'race']

        """"""
        clean = self.remove_punctuation(sentence)
        tokens = word_tokenize(clean)
        tagged = pos_tag(tokens)
        lemmas: List[str] = []
        for token, tag in tagged:
            wn_pos = self._to_wordnet_pos(tag)
            if wn_pos:
                lemmas.append(self.lemmatizer.lemmatize(token, pos=wn_pos))
            else:
                lemmas.append(self.lemmatizer.lemmatize(token))
        return lemmas

    def get_pos_tag(self, sentence):
        """"""
        Remove punctuations of the sentence and tokenizes the input sentence, mark the part of speech tag of each word.
        :param sentence: a sentence str
        :return: list, part of speech tag of each word in the sentence.
        >>> lemmatization = Lemmatization()
        >>> lemmatization.get_pos_tag(""I am running in a race."")
        ['PRP', 'VBP', 'VBG', 'IN', 'DT', 'NN']

        """"""
        clean = self.remove_punctuation(sentence)
        tokens = word_tokenize(clean)
        tagged = pos_tag(tokens)
        return [tag for _, tag in tagged]

    def remove_punctuation(self, sentence):
        """"""
        Removes punctuation from the input text.
        :param sentence: a sentence str
        :return: str, sentence without any punctuation
        >>> lemmatization = Lemmatization()
        >>> lemmatization.remove_punctuation(""I am running in a race."")
        'I am running in a race'

        """"""
        translator = str.maketrans('', '', string.punctuation)
        return sentence.translate(translator)"
53,"import re
import string


class LongestWord:

    def __init__(self):
        self.word_list = []

    def add_word(self, word):
        self.word_list.append(word)

    def find_longest_word(self, sentence):
        longest_word = """"
        sentence = sentence.lower()
        sentence = re.sub('[%s]' % re.escape(string.punctuation), '', sentence)
        sentence = re.split(' ', sentence)
        for word in sentence:
            if word in self.word_list and len(word) > len(longest_word):
                longest_word = word
        return longest_word","class LongestWord:
    """"""
    This is a class allows to add words to a list and find the longest word in a given sentence by comparing the words with the ones in the word list.
    """"""

    def __init__(self):
        """"""
        Initialize a list of word.
        """"""
        self.word_list = []

    def add_word(self, word):
        """"""
        append the input word into self.word_list
        :param word: str, input word
        """"""

    def find_longest_word(self, sentence):
        """"""
        Remove punctuation marks and split a sentence into a list of word. Find the longest splited word that is in the self.word_list.
        Words are strictly case sensitive.
        :param sentence: a sentence str
        :return str: longest splited word that is in the self.word_list. return '' if self.word_list is empty.
        >>> longestWord = LongestWord()
        >>> longestWord.add_word('A')
        >>> longestWord.add_word('aM')
        >>> longestWord.find_longest_word('I am a student.')
        'a'
        """"""",LongestWord,snippet_54,"class LongestWord:
    """"""
    This is a class allows to add words to a list and find the longest word in a given sentence by comparing the words with the ones in the word list.
    """"""

    def __init__(self):
        """"""
        Initialize a list of word.
        """"""
        self.word_list = []

    def add_word(self, word):
        """"""
        append the input word into self.word_list
        :param word: str, input word
        """"""
        if not isinstance(word, str):
            raise TypeError(""word must be a string"")
        self.word_list.append(word)

    def find_longest_word(self, sentence):
        """"""
        Remove punctuation marks and split a sentence into a list of word. Find the longest splited word that is in the self.word_list.
        Words are strictly case sensitive.
        :param sentence: a sentence str
        :return str: longest splited word that is in the self.word_list. return '' if self.word_list is empty.
        >>> longestWord = LongestWord()
        >>> longestWord.add_word('A')
        >>> longestWord.add_word('aM')
        >>> longestWord.find_longest_word('I am a student.')
        'a'
        """"""
        if not self.word_list:
            return ''
        if not isinstance(sentence, str):
            raise TypeError(""sentence must be a string"")

        import string

        translator = str.maketrans({ch: ' ' for ch in string.punctuation})
        cleaned = sentence.translate(translator)
        words = cleaned.split()

        longest = ''
        longest_len = 0
        for w in words:
            if w in self.word_list:
                if len(w) > longest_len:
                    longest = w
                    longest_len = len(w)
        return longest"
54,"import random


class MahjongConnect:
    def __init__(self, BOARD_SIZE, ICONS):
        self.BOARD_SIZE = BOARD_SIZE
        self.ICONS = ICONS
        self.board = self.create_board()

    def create_board(self):
        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
        return board

    def is_valid_move(self, pos1, pos2):
        x1, y1 = pos1
        x2, y2 = pos2

        # Check if positions are within the game board range
        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[
            0] and 0 <= y2 <
                self.BOARD_SIZE[1]):
            return False

        # Check if the two positions are the same
        if pos1 == pos2:
            return False

        # Check if the two positions have the same icon
        if self.board[x1][y1] != self.board[x2][y2]:
            return False

        # Check if there is a valid path between the two positions
        if not self.has_path(pos1, pos2):
            return False

        return True

    def has_path(self, pos1, pos2):
        visited = set()
        stack = [pos1]

        while stack:
            current_pos = stack.pop()
            if current_pos == pos2:
                return True

            if current_pos in visited:
                continue

            visited.add(current_pos)
            x, y = current_pos

            # Check adjacent positions (up, down, left, right)
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                new_x, new_y = x + dx, y + dy
                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
                        stack.append((new_x, new_y))

        return False

    def remove_icons(self, pos1, pos2):
        x1, y1 = pos1
        x2, y2 = pos2
        self.board[x1][y1] = ' '
        self.board[x2][y2] = ' '

    def is_game_over(self):
        for row in self.board:
            if any(icon != ' ' for icon in row):
                return False
        return True","class MahjongConnect:
    """"""
    MahjongConnect is a class representing a game board for Mahjong Connect with features like creating the board, checking valid moves, finding paths, removing icons, and checking if the game is over.
    """"""

    def __init__(self, BOARD_SIZE, ICONS):
        """"""
        initialize the board size and the icon list, create the game board
        :param BOARD_SIZE: list of two integer numbers, representing the number of rows and columns of the game board
        :param ICONS: list of string, representing the icons
        >>>mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.BOARD_SIZE = [4, 4]
        mc.ICONS = ['a', 'b', 'c']
        mc.board = mc.create_board()
        """"""
        self.BOARD_SIZE = BOARD_SIZE
        self.ICONS = ICONS
        self.board = self.create_board()

    def create_board(self):
        """"""
        create the game board with the given board size and icons
        :return: 2-dimensional list, the game board
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        >>> mc.create_board()
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        """"""

    def is_valid_move(self, pos1, pos2):
        """"""
        check if the move of two icons is valid (i.e. positions are within the game board range, the two positions are not the same, the two positions have the same icon, and there is a valid path between the two positions)
        :param pos1: position tuple(x, y) of the first icon
        :param pos2: position tuple(x, y) of the second icon
        :return:True or False ,representing whether the move of two icons is valid
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        >>> mc.is_valid_move((0, 0), (1, 0))
        True
        """"""


    def has_path(self, pos1, pos2):
        """"""
        check if there is a path between two icons
        :param pos1: position tuple(x, y) of the first icon
        :param pos2: position tuple(x, y) of the second icon
        :return: True or False ,representing whether there is a path between two icons
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        >>> mc.is_valid_move((0, 0), (1, 0))
        True
        """"""


    def remove_icons(self, pos1, pos2):
        """"""
        remove the connected icons on the game board
        :param pos1: position tuple(x, y) of the first icon to be removed
        :param pos2: position tuple(x, y) of the second icon to be removed
        :return: None
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        >>> mc.remove_icons((0, 0), (1, 0))
        mc.board = [[' ', 'b', 'c', 'a'],
                    [' ', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        """"""


    def is_game_over(self):
        """"""
        Check if the game is over (i.e., if there are no more icons on the game board)
        :return: True or False ,representing whether the game is over
        >>> mc = MahjongConnect([4, 4] ['a', 'b', 'c'])
        >>> mc.board = [[' ', ' ', ' ', ' '],
        >>>         [' ', ' ', ' ', ' '],
        >>>         [' ', ' ', ' ', ' '],
        >>>         [' ', ' ', ' ', ' ']]
        >>> mc.is_game_over()
        True
        """"""",MahjongConnect,snippet_55,"class MahjongConnect:
    """"""
    MahjongConnect is a class representing a game board for Mahjong Connect with features like creating the board, checking valid moves, finding paths, removing icons, and checking if the game is over.
    """"""

    def __init__(self, BOARD_SIZE, ICONS):
        """"""
        initialize the board size and the icon list, create the game board
        :param BOARD_SIZE: list of two integer numbers, representing the number of rows and columns of the game board
        :param ICONS: list of string, representing the icons
        >>>mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.BOARD_SIZE = [4, 4]
        mc.ICONS = ['a', 'b', 'c']
        mc.board = mc.create_board()
        """"""
        self.BOARD_SIZE = BOARD_SIZE
        self.ICONS = ICONS
        self.board = self.create_board()

    def create_board(self):
        """"""
        create the game board with the given board size and icons
        :return: 2-dimensional list, the game board
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        >>> mc.create_board()
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        """"""
        rows, cols = self.BOARD_SIZE
        if not self.ICONS:
            return [[' ' for _ in range(cols)] for _ in range(rows)]
        board = []
        for _ in range(rows):
            row = [self.ICONS[j % len(self.ICONS)] for j in range(cols)]
            board.append(row)
        return board

    def _in_bounds(self, pos):
        x, y = pos
        rows, cols = self.BOARD_SIZE
        return 0 <= x < rows and 0 <= y < cols

    def is_valid_move(self, pos1, pos2):
        """"""
        check if the move of two icons is valid (i.e. positions are within the game board range, the two positions are not the same, the two positions have the same icon, and there is a valid path between the two positions)
        :param pos1: position tuple(x, y) of the first icon
        :param pos2: position tuple(x, y) of the second icon
        :return:True or False ,representing whether the move of two icons is valid
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        >>> mc.is_valid_move((0, 0), (1, 0))
        True
        """"""
        if pos1 == pos2:
            return False
        if not (self._in_bounds(pos1) and self._in_bounds(pos2)):
            return False
        x1, y1 = pos1
        x2, y2 = pos2
        icon1 = self.board[x1][y1]
        icon2 = self.board[x2][y2]
        if icon1 == ' ' or icon2 == ' ':
            return False
        if icon1 != icon2:
            return False
        return self.has_path(pos1, pos2)

    def has_path(self, pos1, pos2):
        """"""
        check if there is a path between two icons
        :param pos1: position tuple(x, y) of the first icon
        :param pos2: position tuple(x, y) of the second icon
        :return: True or False ,representing whether there is a path between two icons
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        >>> mc.is_valid_move((0, 0), (1, 0))
        True
        """"""
        if not (self._in_bounds(pos1) and self._in_bounds(pos2)):
            return False

        # Allow movement through empty cells (' ') with up to 2 turns (3 segments).
        from collections import deque

        rows, cols = self.BOARD_SIZE
        target = pos2

        # Directions: up, down, left, right
        dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        # visited[(x,y)][dir_index] = minimal turns used to reach (x,y) coming from dir_index
        # dir_index: 0..3 for dirs, 4 for None (start)
        visited = [[[float('inf')] * 5 for _ in range(cols)] for __ in range(rows)]

        sx, sy = pos1
        tx, ty = pos2

        dq = deque()
        # Start with no direction and 0 turns
        dq.append((sx, sy, 4, 0))  # 4 represents None direction
        visited[sx][sy][4] = 0

        def can_step(nx, ny):
            if not (0 <= nx < rows and 0 <= ny < cols):
                return False
            if (nx, ny) == target:
                return True
            return self.board[nx][ny] == ' '

        while dq:
            x, y, d_idx, turns = dq.popleft()
            if (x, y) == target:
                return True
            for nd_idx, (dx, dy) in enumerate(dirs):
                nx, ny = x + dx, y + dy
                if not can_step(nx, ny):
                    continue
                nturns = turns + (0 if d_idx in (nd_idx, 4) else 1)
                if nturns > 2:
                    continue
                if visited[nx][ny][nd_idx] <= nturns:
                    continue
                visited[nx][ny][nd_idx] = nturns
                dq.append((nx, ny, nd_idx, nturns))

        return False

    def remove_icons(self, pos1, pos2):
        """"""
        remove the connected icons on the game board
        :param pos1: position tuple(x, y) of the first icon to be removed
        :param pos2: position tuple(x, y) of the second icon to be removed
        :return: None
        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        >>> mc.remove_icons((0, 0), (1, 0))
        mc.board = [[' ', 'b', 'c', 'a'],
                    [' ', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        """"""
        if self.is_valid_move(pos1, pos2):
            x1, y1 = pos1
            x2, y2 = pos2
            self.board[x1][y1] = ' '
            self.board[x2][y2] = ' '

    def is_game_over(self):
        """"""
        Check if the game is over (i.e., if there are no more icons on the game board)
        :return: True or False ,representing whether the game is over
        >>> mc = MahjongConnect([4, 4] ['a', 'b', 'c'])
        >>> mc.board = [[' ', ' ', ' ', ' '],
        >>>         [' ', ' ', ' ', ' '],
        >>>         [' ', ' ', ' ', ' '],
        >>>         [' ', ' ', ' ', ' ']]
        >>> mc.is_game_over()
        True
        """"""
        for row in self.board:
            for cell in row:
                if cell != ' ':
                    return False
        return True"
55,"class Manacher:
    def __init__(self, input_string) -> None:
        self.input_string = input_string

    def palindromic_length(self, center, diff, string):
        if (center - diff == -1 or center + diff == len(string)
                or string[center - diff] != string[center + diff]):
            return 0
        return 1 + self.palindromic_length(center, diff + 1, string)


    def palindromic_string(self):
        max_length = 0

        new_input_string = """"
        output_string = """"

        for i in self.input_string[:len(self.input_string) - 1]:
            new_input_string += i + ""|""
        new_input_string += self.input_string[-1]

        for i in range(len(new_input_string)):

            length =self.palindromic_length(i, 1, new_input_string)

            if max_length < length:
                max_length = length
                start = i

        for i in new_input_string[start - max_length:start + max_length + 1]:
            if i != ""|"":
                output_string += i

        return output_string","class Manacher:
    """"""
    his is a class that implements a manacher algorithm to find the Longest palindromic substring in a given string.
    """"""

    def __init__(self, input_string) -> None:
        """"""
        Initializes the Manacher class with the given input_string.
        :param input_string: The input_string to be searched, str.
        """"""
        self.input_string = input_string

    def palindromic_length(self, center, diff, string):
        """"""
        Recursively calculates the length of the palindromic substring based on a given center, difference value, and input string.
        :param center: The center of the palindromic substring, int.
        :param diff: The difference between the center and the current position, int.
        :param string: The string to be searched, str.
        :return: The length of the palindromic substring, int.
        >>> manacher = Manacher('ababa')
        >>> manacher.palindromic_length(2, 1, 'a|b|a|b|a')
        2

        """"""

    def palindromic_string(self):
        """"""
        Finds the longest palindromic substring in the given string.
        :return: The longest palindromic substring, str.
        >>> manacher = Manacher('ababaxse')
        >>> manacher.palindromic_string()
        'ababa'

        """"""",Manacher,snippet_56,"class Manacher:
    """"""
    his is a class that implements a manacher algorithm to find the Longest palindromic substring in a given string.
    """"""

    def __init__(self, input_string) -> None:
        """"""
        Initializes the Manacher class with the given input_string.
        :param input_string: The input_string to be searched, str.
        """"""
        self.input_string = input_string

    def palindromic_length(self, center, diff, string):
        """"""
        Recursively calculates the length of the palindromic substring based on a given center, difference value, and input string.
        :param center: The center of the palindromic substring, int.
        :param diff: The difference between the center and the current position, int.
        :param string: The string to be searched, str.
        :return: The length of the palindromic substring, int.
        >>> manacher = Manacher('ababa')
        >>> manacher.palindromic_length(2, 1, 'a|b|a|b|a')
        2

        """"""
        if center - diff < 0 or center + diff >= len(string):
            return diff - 1
        if string[center - diff] != string[center + diff]:
            return diff - 1
        return self.palindromic_length(center, diff + 1, string)

    def palindromic_string(self):
        """"""
        Finds the longest palindromic substring in the given string.
        :return: The longest palindromic substring, str.
        >>> manacher = Manacher('ababaxse')
        >>> manacher.palindromic_string()
        'ababa'

        """"""
        s = self.input_string
        if not s:
            return """"
        transformed = ""|"".join(s)
        best = """"
        n = len(transformed)
        for i in range(n):
            r = self.palindromic_length(i, 1, transformed)
            start = i - r
            end = i + r + 1
            candidate = transformed[start:end].replace(""|"", """")
            if len(candidate) > len(best):
                best = candidate
        return best"
56,"class MetricsCalculator:
    def __init__(self):
        self.true_positives = 0
        self.false_positives = 0
        self.false_negatives = 0
        self.true_negatives = 0

    def update(self, predicted_labels, true_labels):
        for predicted, true in zip(predicted_labels, true_labels):
            if predicted == 1 and true == 1:
                self.true_positives += 1
            elif predicted == 1 and true == 0:
                self.false_positives += 1
            elif predicted == 0 and true == 1:
                self.false_negatives += 1
            elif predicted == 0 and true == 0:
                self.true_negatives += 1

    def precision(self, predicted_labels, true_labels):
        self.update(predicted_labels, true_labels)
        if self.true_positives + self.false_positives == 0:
            return 0.0
        return self.true_positives / (self.true_positives + self.false_positives)

    def recall(self, predicted_labels, true_labels):
        self.update(predicted_labels, true_labels)
        if self.true_positives + self.false_negatives == 0:
            return 0.0
        return self.true_positives / (self.true_positives + self.false_negatives)

    def f1_score(self, predicted_labels, true_labels):
        self.update(predicted_labels, true_labels)
        precision = self.precision(predicted_labels, true_labels)
        recall = self.recall(predicted_labels, true_labels)
        if precision + recall == 0.0:
            return 0.0
        return (2 * precision * recall) / (precision + recall)

    def accuracy(self, predicted_labels, true_labels):
        self.update(predicted_labels, true_labels)
        total = self.true_positives + self.true_negatives + self.false_positives + self.false_negatives
        if total == 0:
            return 0.0
        return (self.true_positives + self.true_negatives) / total","class MetricsCalculator:
    """"""
    The class calculates precision, recall, F1 score, and accuracy based on predicted and true labels.
    """"""

    def __init__(self):
        """"""
        Initialize the number of all four samples to 0
        """"""
        self.true_positives = 0
        self.false_positives = 0
        self.false_negatives = 0
        self.true_negatives = 0


    def update(self, predicted_labels, true_labels):
        """"""
        Update the number of all four samples(true_positives, false_positives, false_negatives, true_negatives)
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: None, change the number of corresponding samples
        >>> mc = MetricsCalculator()
        >>> mc.update([1, 1, 0, 0], [1, 0, 0, 1])
        (self.true_positives, self.false_positives, self.false_negatives, self.true_negatives) = (1, 1, 1, 1)
        """"""


    def precision(self, predicted_labels, true_labels):
        """"""
        Calculate precision
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>> mc.precision([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""


    def recall(self, predicted_labels, true_labels):
        """"""
        Calculate recall
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>> mc.recall([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""


    def f1_score(self, predicted_labels, true_labels):
        """"""
        Calculate f1 score, which is the harmonic mean of precision and recall
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>> mc.f1_score([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""


    def accuracy(self, predicted_labels, true_labels):
        """"""
        Calculate accuracy
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>>mc.accuracy([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""",MetricsCalculator,snippet_57,"class MetricsCalculator:
    """"""
    The class calculates precision, recall, F1 score, and accuracy based on predicted and true labels.
    """"""

    def __init__(self):
        """"""
        Initialize the number of all four samples to 0
        """"""
        self.true_positives = 0
        self.false_positives = 0
        self.false_negatives = 0
        self.true_negatives = 0

    @staticmethod
    def _validate_inputs(predicted_labels, true_labels):
        if not isinstance(predicted_labels, list) or not isinstance(true_labels, list):
            raise TypeError(""predicted_labels and true_labels must be lists"")
        if len(predicted_labels) != len(true_labels):
            raise ValueError(""predicted_labels and true_labels must have the same length"")

    @staticmethod
    def _confusion_counts(predicted_labels, true_labels):
        MetricsCalculator._validate_inputs(predicted_labels, true_labels)
        tp = fp = fn = tn = 0
        for p, t in zip(predicted_labels, true_labels):
            if p == 1 and t == 1:
                tp += 1
            elif p == 1 and t == 0:
                fp += 1
            elif p == 0 and t == 1:
                fn += 1
            elif p == 0 and t == 0:
                tn += 1
            else:
                # For non-binary values, ignore or treat as mismatch
                # Here we raise an error to enforce binary labels 0/1
                raise ValueError(""Labels must be binary (0 or 1)"")
        return tp, fp, fn, tn

    def update(self, predicted_labels, true_labels):
        """"""
        Update the number of all four samples(true_positives, false_positives, false_negatives, true_negatives)
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: None, change the number of corresponding samples
        >>> mc = MetricsCalculator()
        >>> mc.update([1, 1, 0, 0], [1, 0, 0, 1])
        (self.true_positives, self.false_positives, self.false_negatives, self.true_negatives) = (1, 1, 1, 1)
        """"""
        tp, fp, fn, tn = self._confusion_counts(predicted_labels, true_labels)
        self.true_positives += tp
        self.false_positives += fp
        self.false_negatives += fn
        self.true_negatives += tn

    def precision(self, predicted_labels, true_labels):
        """"""
        Calculate precision
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>> mc.precision([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""
        tp, fp, _, _ = self._confusion_counts(predicted_labels, true_labels)
        denom = tp + fp
        return tp / denom if denom != 0 else 0.0

    def recall(self, predicted_labels, true_labels):
        """"""
        Calculate recall
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>> mc.recall([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""
        tp, _, fn, _ = self._confusion_counts(predicted_labels, true_labels)
        denom = tp + fn
        return tp / denom if denom != 0 else 0.0

    def f1_score(self, predicted_labels, true_labels):
        """"""
        Calculate f1 score, which is the harmonic mean of precision and recall
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>> mc.f1_score([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""
        p = self.precision(predicted_labels, true_labels)
        r = self.recall(predicted_labels, true_labels)
        denom = p + r
        return (2 * p * r) if denom != 0 else 0.0 if denom == 0 else (2 * p * r / denom)

    def accuracy(self, predicted_labels, true_labels):
        """"""
        Calculate accuracy
        :param predicted_labels: list, predicted results
        :param true_labels: list, true labels
        :return: float
        >>> mc = MetricsCalculator()
        >>>mc.accuracy([1, 1, 0, 0], [1, 0, 0, 1])
        0.5
        """"""
        tp, fp, fn, tn = self._confusion_counts(predicted_labels, true_labels)
        total = tp + fp + fn + tn
        return (tp + tn) / total if total != 0 else 0.0"
57,"import numpy as np


class MetricsCalculator2:
    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        if type(data) != list and type(data) != tuple:
            raise Exception(""the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple"")

        if len(data) == 0:
            return 0.0, [0.0]
        if type(data) == tuple:
            (sub_list, total_num) = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return 0.0, [0.0]
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                mr_np = sub_list * ranking_array

                mr = 0.0
                for team in mr_np:
                    if team > 0:
                        mr = team
                        break
                return mr, [mr]

        if type(data) == list:
            separate_result = []
            for (sub_list, total_num) in data:
                sub_list = np.array(sub_list)

                if total_num == 0:
                    mr = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    mr_np = sub_list * ranking_array

                    mr = 0.0
                    for team in mr_np:
                        if team > 0:
                            mr = team
                            break

                separate_result.append(mr)
            return np.mean(separate_result), separate_result

    @staticmethod
    def map(data):
        if type(data) != list and type(data) != tuple:
            raise Exception(""the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple"")

        if len(data) == 0:
            return 0.0, [0.0]
        if type(data) == tuple:
            (sub_list, total_num) = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return 0.0, [0.0]
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)

                right_ranking_list = []
                count = 1
                for t in sub_list:
                    if t == 0:
                        right_ranking_list.append(0)
                    else:
                        right_ranking_list.append(count)
                        count += 1

                ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                return ap, [ap]

        if type(data) == list:
            separate_result = []
            for (sub_list, total_num) in data:
                sub_list = np.array(sub_list)

                if total_num == 0:
                    ap = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)

                    right_ranking_list = []
                    count = 1
                    for t in sub_list:
                        if t == 0:
                            right_ranking_list.append(0)
                        else:
                            right_ranking_list.append(count)
                            count += 1

                    ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num

                separate_result.append(ap)
            return np.mean(separate_result), separate_result","class MetricsCalculator2:
    """"""
    The class provides to calculate Mean Reciprocal Rank (MRR) and Mean Average Precision (MAP) based on input data, where MRR measures the ranking quality and MAP measures the average precision.
    """"""

    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        """"""
        compute the MRR of the input data. MRR is a widely used evaluation index. It is the mean of reciprocal rank.
        :param data: the data must be a tuple, list 0,1,eg.([1,0,...],5).  In each tuple (actual result,ground truth num),ground truth num is the total ground num.
         ([1,0,...],5),
        or list of tuple eg. [([1,0,1,...],5),([1,0,...],6),([0,0,...],5)].
        1 stands for a correct answer, 0 stands for a wrong answer.
        :return: if input data is list, return the recall of this list. if the input data is list of list, return the
        average recall on all list. The second return value is a list of precision for each input.
        >>> MetricsCalculator2.mrr(([1, 0, 1, 0], 4))
        >>> MetricsCalculator2.mrr([([1, 0, 1, 0], 4), ([0, 1, 0, 1], 4)])
        1.0, [1.0]
        0.75, [1.0, 0.5]
        """"""


    @staticmethod
    def map(data):
        """"""
        compute the MAP of the input data. MAP is a widely used evaluation index. It is the mean of AP (average precision).
        :param data: the data must be a tuple, list 0,1,eg.([1,0,...],5).  In each tuple (actual result,ground truth num),ground truth num is the total ground num.
         ([1,0,...],5),
        or list of tuple eg. [([1,0,1,...],5),([1,0,...],6),([0,0,...],5)].
        1 stands for a correct answer, 0 stands for a wrong answer.
        :return: if input data is list, return the recall of this list. if the input data is list of list, return the
        average recall on all list. The second return value is a list of precision for each input.
        >>> MetricsCalculator2.map(([1, 0, 1, 0], 4))
        >>> MetricsCalculator2.map([([1, 0, 1, 0], 4), ([0, 1, 0, 1], 4)])
        0.41666666666666663, [0.41666666666666663]
        0.3333333333333333, [0.41666666666666663, 0.25]
        """"""",MetricsCalculator2,snippet_58,"class MetricsCalculator2:
    """"""
    The class provides to calculate Mean Reciprocal Rank (MRR) and Mean Average Precision (MAP) based on input data, where MRR measures the ranking quality and MAP measures the average precision.
    """"""

    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        """"""
        compute the MRR of the input data. MRR is a widely used evaluation index. It is the mean of reciprocal rank.
        :param data: the data must be a tuple, list 0,1,eg.([1,0,...],5).  In each tuple (actual result,ground truth num),ground truth num is the total ground num.
         ([1,0,...],5),
        or list of tuple eg. [([1,0,1,...],5),([1,0,...],6),([0,0,...],5)].
        1 stands for a correct answer, 0 stands for a wrong answer.
        :return: if input data is list, return the recall of this list. if the input data is list of list, return the
        average recall on all list. The second return value is a list of precision for each input.
        >>> MetricsCalculator2.mrr(([1, 0, 1, 0], 4))
        >>> MetricsCalculator2.mrr([([1, 0, 1, 0], 4), ([0, 1, 0, 1], 4)])
        1.0, [1.0]
        0.75, [1.0, 0.5]
        """"""
        instances = MetricsCalculator2._normalize_input(data)
        rr_list = []
        for seq, gt_total in instances:
            rr = 0.0
            if gt_total > 0:
                for idx, val in enumerate(seq, start=1):
                    if val == 1:
                        rr = 1.0 / idx
                        break
            rr_list.append(rr)
        avg_rr = sum(rr_list) / len(rr_list) if rr_list else 0.0
        return avg_rr, rr_list

    @staticmethod
    def map(data):
        """"""
        compute the MAP of the input data. MAP is a widely used evaluation index. It is the mean of AP (average precision).
        :param data: the data must be a tuple, list 0,1,eg.([1,0,...],5).  In each tuple (actual result,ground truth num),ground truth num is the total ground num.
         ([1,0,...],5),
        or list of tuple eg. [([1,0,1,...],5),([1,0,...],6),([0,0,...],5)].
        1 stands for a correct answer, 0 stands for a wrong answer.
        :return: if input data is list, return the recall of this list. if the input data is list of list, return the
        average recall on all list. The second return value is a list of precision for each input.
        >>> MetricsCalculator2.map(([1, 0, 1, 0], 4))
        >>> MetricsCalculator2.map([([1, 0, 1, 0], 4), ([0, 1, 0, 1], 4)])
        0.41666666666666663, [0.41666666666666663]
        0.3333333333333333, [0.41666666666666663, 0.25]
        """"""
        instances = MetricsCalculator2._normalize_input(data)
        ap_list = []
        for seq, gt_total in instances:
            if gt_total <= 0:
                ap_list.append(0.0)
                continue
            num_correct = 0
            sum_precisions = 0.0
            for idx, val in enumerate(seq, start=1):
                if val == 1:
                    num_correct += 1
                    sum_precisions += num_correct / idx
            ap = sum_precisions / gt_total
            ap_list.append(ap)
        avg_ap = sum(ap_list) / len(ap_list) if ap_list else 0.0
        return avg_ap, ap_list

    @staticmethod
    def _normalize_input(data):
        """"""
        Normalize input into a list of (sequence, ground_truth_total) tuples.
        """"""
        # Single instance: ([0/1,...], gt_total)
        if (
            isinstance(data, (list, tuple))
            and len(data) == 2
            and isinstance(data[0], (list, tuple))
            and isinstance(data[1], int)
        ):
            return [(list(data[0]), int(data[1]))]

        # Multiple instances: [([..], gt), ...] or (([..], gt), ...)
        if isinstance(data, (list, tuple)) and data and isinstance(data[0], (list, tuple)):
            first = data[0]
            if (
                isinstance(first, (list, tuple))
                and len(first) == 2
                and isinstance(first[0], (list, tuple))
                and isinstance(first[1], int)
            ):
                return [(list(item[0]), int(item[1])) for item in data]

        raise ValueError(""Invalid input format for MetricsCalculator2. Expected ([0/1,...], gt_total) or a list of such tuples."")"
58,"import random

class MinesweeperGame:
    def __init__(self, n, k) -> None:
        self.n = n
        self.k = k
        self.minesweeper_map = self.generate_mine_sweeper_map()
        self.player_map = self.generate_playerMap()
        self.score = 0

    def generate_mine_sweeper_map(self):
        arr = [[0 for row in range(self.n)] for column in range(self.n)]
        for num in range(self.k):
            x = random.randint(0, self.n-1)
            y = random.randint(0, self.n-1)
            arr[y][x] = 'X'
            if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-1):
                if arr[y][x+1] != 'X':
                    arr[y][x+1] += 1
            if (x >=1 and x <= self.n-1) and (y >= 0 and y <= self.n-1):
                if arr[y][x-1] != 'X':
                    arr[y][x-1] += 1
            if (x >= 1 and x <= self.n-1) and (y >= 1 and y <= self.n-1):
                if arr[y-1][x-1] != 'X':
                    arr[y-1][x-1] += 1
    
            if (x >= 0 and x <= self.n-2) and (y >= 1 and y <= self.n-1):
                if arr[y-1][x+1] != 'X':
                    arr[y-1][x+1] += 1 
            if (x >= 0 and x <= self.n-1) and (y >= 1 and y <= self.n-1):
                if arr[y-1][x] != 'X':
                    arr[y-1][x] += 1
    
            if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-2):
                if arr[y+1][x+1] != 'X':
                    arr[y+1][x+1] += 1
            if (x >= 1 and x <= self.n-1) and (y >= 0 and y <= self.n-2):
                if arr[y+1][x-1] != 'X':
                    arr[y+1][x-1] += 1
            if (x >= 0 and x <= self.n-1) and (y >= 0 and y <= self.n-2):
                if arr[y+1][x] != 'X':
                    arr[y+1][x] += 1
        return arr
    
    def generate_playerMap(self):
        arr = [['-' for row in range(self.n)] for column in range(self.n)]
        return arr

    def check_won(self, map):
        for i in range(self.n):
            for j in range(self.n):
                if map[i][j] == '-' and self.minesweeper_map[i][j] != 'X':
                    return False
        return True
    
    def sweep(self, x, y):

        if (self.minesweeper_map[x][y] == 'X'):
            return False
        else:
            self.player_map[x][y] = self.minesweeper_map[x][y]
            self.score += 1
            if self.check_won(self.player_map) == True:
                return True
            return self.player_map","class MinesweeperGame:
    """"""
    This is a class that implements mine sweeping games including minesweeping and winning judgment.
    """"""

    def __init__(self, n, k) -> None:
        """"""
        Initializes the MinesweeperGame class with the size of the board and the number of mines.
        :param n: The size of the board, int.
        :param k: The number of mines, int.
        """"""
        self.n = n
        self.k = k
        self.minesweeper_map = self.generate_mine_sweeper_map()
        self.player_map = self.generate_playerMap()
        self.score = 0

    def generate_mine_sweeper_map(self):
        """"""
        Generates a minesweeper map with the given size of the board and the number of mines,the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'X' represents the mine,other numbers represent the number of mines around the position.
        :return: The minesweeper map, list.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.generate_mine_sweeper_map()
        [['X', 1, 0], [1, 1, 0], [0, 0, 0]]

        """"""

    def generate_playerMap(self):
        """"""
        Generates a player map with the given size of the board, the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'-' represents the unknown position.
        :return: The player map, list.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.generate_playerMap()
        [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]

        """"""

    def check_won(self,map):
        """"""
        Checks whether the player has won the game,if there are just mines in the player map,return True,otherwise return False.
        :return: True if the player has won the game, False otherwise.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]
        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
        >>> minesweeper_game.check_won(minesweeper_game.player_map)
        False

        """"""

    def sweep(self, x, y):
        """"""
        Sweeps the given position.
        :param x: The x coordinate of the position, int.
        :param y: The y coordinate of the position, int.
        :return: True if the player has won the game, False otherwise,if the game still continues, return the player map, list.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]
        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
        >>> minesweeper_game.sweep(1, 1)
        [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]

        """"""",MinesweeperGame,snippet_59,"class MinesweeperGame:
    """"""
    This is a class that implements mine sweeping games including minesweeping and winning judgment.
    """"""

    def __init__(self, n, k) -> None:
        """"""
        Initializes the MinesweeperGame class with the size of the board and the number of mines.
        :param n: The size of the board, int.
        :param k: The number of mines, int.
        """"""
        self.n = n
        self.k = k
        self.minesweeper_map = self.generate_mine_sweeper_map()
        self.player_map = self.generate_playerMap()
        self.score = 0

    def generate_mine_sweeper_map(self):
        """"""
        Generates a minesweeper map with the given size of the board and the number of mines,the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'X' represents the mine,other numbers represent the number of mines around the position.
        :return: The minesweeper map, list.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.generate_mine_sweeper_map()
        [['X', 1, 0], [1, 1, 0], [0, 0, 0]]

        """"""
        n = self.n
        k = max(0, min(self.k, n * n))
        board = [[0 for _ in range(n)] for _ in range(n)]

        # Place mines deterministically in row-major order for reproducibility
        mines_placed = 0
        for i in range(n):
            for j in range(n):
                if mines_placed < k:
                    board[i][j] = 'X'
                    mines_placed += 1
                else:
                    board[i][j] = 0

        # Directions for neighbors
        dirs = [(-1, -1), (-1, 0), (-1, 1),
                (0, -1),          (0, 1),
                (1, -1),  (1, 0), (1, 1)]

        # Calculate numbers for non-mine cells
        for i in range(n):
            for j in range(n):
                if board[i][j] == 'X':
                    continue
                count = 0
                for dx, dy in dirs:
                    ni, nj = i + dx, j + dy
                    if 0 <= ni < n and 0 <= nj < n and board[ni][nj] == 'X':
                        count += 1
                board[i][j] = count

        return board

    def generate_playerMap(self):
        """"""
        Generates a player map with the given size of the board, the given parameter n is the size of the board,the size of the board is n*n,the parameter k is the number of mines,'-' represents the unknown position.
        :return: The player map, list.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.generate_playerMap()
        [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]

        """"""
        return [['-' for _ in range(self.n)] for _ in range(self.n)]

    def check_won(self, map):
        """"""
        Checks whether the player has won the game,if there are just mines in the player map,return True,otherwise return False.
        :return: True if the player has won the game, False otherwise.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]
        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
        >>> minesweeper_game.check_won(minesweeper_game.player_map)
        False

        """"""
        n = self.n
        for i in range(n):
            for j in range(n):
                if map[i][j] == '-' and self.minesweeper_map[i][j] != 'X':
                    return False
        return True

    def sweep(self, x, y):
        """"""
        Sweeps the given position.
        :param x: The x coordinate of the position, int.
        :param y: The y coordinate of the position, int.
        :return: True if the player has won the game, False otherwise,if the game still continues, return the player map, list.
        >>> minesweeper_game = MinesweeperGame(3, 1)
        >>> minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]
        >>> minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
        >>> minesweeper_game.sweep(1, 1)
        [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]

        """"""
        n = self.n
        if not (0 <= x < n and 0 <= y < n):
            return self.player_map

        if self.player_map[x][y] != '-':
            if self.check_won(self.player_map):
                return True
            return self.player_map

        cell = self.minesweeper_map[x][y]
        if cell == 'X':
            return False

        self.player_map[x][y] = cell

        if self.check_won(self.player_map):
            return True
        return self.player_map"
59,"from datetime import datetime
import numpy as np

class MovieBookingSystem:
    def __init__(self):
        self.movies = []

    def add_movie(self, name, price, start_time, end_time, n):
        movie = {
            'name': name,
            'price': price,
            'start_time': datetime.strptime(start_time, '%H:%M'),
            'end_time': datetime.strptime(end_time, '%H:%M'),
            'seats': np.zeros((n, n))
        }
        self.movies.append(movie)

    def book_ticket(self, name, seats_to_book):
        for movie in self.movies:
            if movie['name'] == name:
                for seat in seats_to_book:
                    if movie['seats'][seat[0]][seat[1]] == 0:
                        movie['seats'][seat[0]][seat[1]] = 1
                    else:
                        return ""Booking failed.""
                return ""Booking success.""
        return ""Movie not found.""


    def available_movies(self, start_time, end_time):
        start_time = datetime.strptime(start_time, '%H:%M')
        end_time = datetime.strptime(end_time, '%H:%M')

        available_movies = []
        for movie in self.movies:
            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:
                available_movies.append(movie['name'])

        return available_movies","class MovieBookingSystem:
    """"""
    this is a class as movie booking system, which allows to add movies, book tickets and check the available movies within a given time range. 
    """"""

    def __init__(self):
        """"""
        Initialize movies contains the information about movies
        >>> system.movies
        [{'name': 'Batman', 'price': 49.9, 'start_time': datetime.datetime(1900, 1, 1, 17, 5), 'end_time': datetime.datetime(1900, 1, 1, 19, 25),
        'seats': array([[0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.]])}]
        """"""
        self.movies = []

    def add_movie(self, name, price, start_time, end_time, n):
        """"""
        Add a new movie into self.movies
        :param name: str, movie name
        :param price: float, price for one ticket
        :param start_time: str
        :param end_time: str
        :param n: int, the size of seats(n*n)
        >>> system.add_movie('Batman', 49.9, '17:05', '19:25', 3)
        >>> system.movies
        [{'name': 'Batman', 'price': 49.9, 'start_time': datetime.datetime(1900, 1, 1, 17, 5), 'end_time': datetime.datetime(1900, 1, 1, 19, 25),
        'seats': array([[0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.]])}]
        """"""

    def book_ticket(self, name, seats_to_book):
        """"""
        Book tickets for a movie. Change the seats value in self.movies if book successfully.
        :param name: str, movie name
        :param seats_to_book: list of tuples, representing seats to book [(row1, col1), (row2, col2), ...]
        :return: str, booking status message. ""Movie not found."" for no such movie.
                ""Booking success."" for successfully booking, or ""Booking failed."" otherwise
        >>> system.add_movie('Batman', 49.9, '17:05', '19:25', 3)
        >>> system.book_ticket('Batman', [(0, 0), (0, 1)])
        'Booking success.'
        >>> system.book_ticket('Batman', [(0, 0)])
        'Booking failed.'
        >>> system.book_ticket('batman', [(0, 0)])
        'Movie not found.'
        """"""

    def available_movies(self, start_time, end_time):
        """"""
        Get a list of available movies within the specified time range
        :param start_time: str, start time in HH:MM format
        :param end_time: str, end time in HH:MM format
        :return: list of str, names of available movies
        >>> system.add_movie('Batman', 49.9, '17:05', '19:25', 3)
        >>> system.available_movies('12:00', '22:00')
        ['Batman']
        """"""",MovieBookingSystem,snippet_60,"import datetime
import numpy as np

class MovieBookingSystem:
    """"""
    this is a class as movie booking system, which allows to add movies, book tickets and check the available movies within a given time range. 
    """"""

    def __init__(self):
        """"""
        Initialize movies contains the information about movies
        >>> system.movies
        [{'name': 'Batman', 'price': 49.9, 'start_time': datetime.datetime(1900, 1, 1, 17, 5), 'end_time': datetime.datetime(1900, 1, 1, 19, 25),
        'seats': array([[0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.]])}]
        """"""
        self.movies = []

    def add_movie(self, name, price, start_time, end_time, n):
        """"""
        Add a new movie into self.movies
        :param name: str, movie name
        :param price: float, price for one ticket
        :param start_time: str
        :param end_time: str
        :param n: int, the size of seats(n*n)
        >>> system.add_movie('Batman', 49.9, '17:05', '19:25', 3)
        >>> system.movies
        [{'name': 'Batman', 'price': 49.9, 'start_time': datetime.datetime(1900, 1, 1, 17, 5), 'end_time': datetime.datetime(1900, 1, 1, 19, 25),
        'seats': array([[0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.]])}]
        """"""
        st = datetime.datetime.strptime(start_time, ""%H:%M"")
        et = datetime.datetime.strptime(end_time, ""%H:%M"")
        seats = np.zeros((n, n), dtype=float)
        self.movies.append({
            'name': name,
            'price': float(price),
            'start_time': st,
            'end_time': et,
            'seats': seats
        })

    def book_ticket(self, name, seats_to_book):
        """"""
        Book tickets for a movie. Change the seats value in self.movies if book successfully.
        :param name: str, movie name
        :param seats_to_book: list of tuples, representing seats to book [(row1, col1), (row2, col2), ...]
        :return: str, booking status message. ""Movie not found."" for no such movie.
                ""Booking success."" for successfully booking, or ""Booking failed."" otherwise
        >>> system.add_movie('Batman', 49.9, '17:05', '19:25', 3)
        >>> system.book_ticket('Batman', [(0, 0), (0, 1)])
        'Booking success.'
        >>> system.book_ticket('Batman', [(0, 0)])
        'Booking failed.'
        >>> system.book_ticket('batman', [(0, 0)])
        'Movie not found.'
        """"""
        movie = None
        for m in self.movies:
            if m['name'] == name:
                movie = m
                break
        if movie is None:
            return ""Movie not found.""
        seats = movie['seats']
        nrows, ncols = seats.shape
        # Validate all seats
        for r, c in seats_to_book:
            if not (isinstance(r, int) and isinstance(c, int)):
                return ""Booking failed.""
            if r < 0 or c < 0 or r >= nrows or c >= ncols:
                return ""Booking failed.""
            if seats[r, c] != 0.0:
                return ""Booking failed.""
        # Book seats
        for r, c in seats_to_book:
            seats[r, c] = 1.0
        return ""Booking success.""

    def available_movies(self, start_time, end_time):
        """"""
        Get a list of available movies within the specified time range
        :param start_time: str, start time in HH:MM format
        :param end_time: str, end time in HH:MM format
        :return: list of str, names of available movies
        >>> system.add_movie('Batman', 49.9, '17:05', '19:25', 3)
        >>> system.available_movies('12:00', '22:00')
        ['Batman']
        """"""
        st = datetime.datetime.strptime(start_time, ""%H:%M"")
        et = datetime.datetime.strptime(end_time, ""%H:%M"")
        result = []
        for m in self.movies:
            if m['start_time'] >= st and m['end_time'] <= et:
                result.append(m['name'])
        return result"
60,"import sqlite3


class MovieTicketDB:
    def __init__(self, db_name):
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY,
                movie_name TEXT,
                theater_name TEXT,
                seat_number TEXT,
                customer_name TEXT
            )
        ''')
        self.connection.commit()

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        self.cursor.execute('''
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
        ''', (movie_name, theater_name, seat_number, customer_name))
        self.connection.commit()

    def search_tickets_by_customer(self, customer_name):
        self.cursor.execute('''
            SELECT * FROM tickets WHERE customer_name = ?
        ''', (customer_name,))
        tickets = self.cursor.fetchall()
        return tickets

    def delete_ticket(self, ticket_id):
        self.cursor.execute('''
            DELETE FROM tickets WHERE id = ?
        ''', (ticket_id,))
        self.connection.commit()","class MovieTicketDB:
    """"""
    This is a class for movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.
    """"""

    def __init__(self, db_name):
        """"""
        Initializes the MovieTicketDB object with the specified database name.
        :param db_name: str, the name of the SQLite database.
        """"""
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()


    def create_table(self):
        """"""
        Creates a ""tickets"" table in the database if it does not exist already.Fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str
        :return: None
        """"""

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        """"""
        Inserts a new ticket into the ""tickets"" table.
        :param movie_name: str, the name of the movie.
        :param theater_name: str, the name of the theater.
        :param seat_number: str, the seat number.
        :param customer_name: str, the name of the customer.
        :return: None
        """"""

    def search_tickets_by_customer(self, customer_name):
        """"""
        Searches for tickets in the ""tickets"" table by customer name.
        :param customer_name: str, the name of the customer to search for.
        :return: list of tuples, the rows from the ""tickets"" table that match the search criteria.
        >>> ticket_db = MovieTicketDB(""ticket_database.db"")
        >>> ticket_db.create_table()
        >>> ticket_db.insert_ticket(""Movie A"", ""Theater 1"", ""A1"", ""John Doe"")
        >>> result = ticket_db.search_tickets_by_customer(""John Doe"")
        len(result) = 1
        """"""

    def delete_ticket(self, ticket_id):
        """"""
        Deletes a ticket from the ""tickets"" table by ticket ID.
        :param ticket_id: int, the ID of the ticket to delete.
        :return: None
        """"""",MovieTicketDB,snippet_61,"import sqlite3


class MovieTicketDB:
    """"""
    This is a class for movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.
    """"""

    def __init__(self, db_name):
        """"""
        Initializes the MovieTicketDB object with the specified database name.
        :param db_name: str, the name of the SQLite database.
        """"""
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        """"""
        Creates a ""tickets"" table in the database if it does not exist already.Fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str
        :return: None
        """"""
        self.cursor.execute(
            """"""
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                movie_name TEXT NOT NULL,
                theater_name TEXT NOT NULL,
                seat_number TEXT NOT NULL,
                customer_name TEXT NOT NULL
            )
            """"""
        )
        self.connection.commit()

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        """"""
        Inserts a new ticket into the ""tickets"" table.
        :param movie_name: str, the name of the movie.
        :param theater_name: str, the name of the theater.
        :param seat_number: str, the seat number.
        :param customer_name: str, the name of the customer.
        :return: None
        """"""
        self.cursor.execute(
            """"""
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
            """""",
            (movie_name, theater_name, seat_number, customer_name),
        )
        self.connection.commit()

    def search_tickets_by_customer(self, customer_name):
        """"""
        Searches for tickets in the ""tickets"" table by customer name.
        :param customer_name: str, the name of the customer to search for.
        :return: list of tuples, the rows from the ""tickets"" table that match the search criteria.
        >>> ticket_db = MovieTicketDB(""ticket_database.db"")
        >>> ticket_db.create_table()
        >>> ticket_db.insert_ticket(""Movie A"", ""Theater 1"", ""A1"", ""John Doe"")
        >>> result = ticket_db.search_tickets_by_customer(""John Doe"")
        len(result) = 1
        """"""
        self.cursor.execute(
            """"""
            SELECT id, movie_name, theater_name, seat_number, customer_name
            FROM tickets
            WHERE customer_name = ?
            """""",
            (customer_name,),
        )
        return self.cursor.fetchall()

    def delete_ticket(self, ticket_id):
        """"""
        Deletes a ticket from the ""tickets"" table by ticket ID.
        :param ticket_id: int, the ID of the ticket to delete.
        :return: None
        """"""
        self.cursor.execute(
            """"""
            DELETE FROM tickets
            WHERE id = ?
            """""",
            (ticket_id,),
        )
        self.connection.commit()

    def __del__(self):
        try:
            if hasattr(self, ""connection"") and self.connection:
                self.connection.close()
        except Exception:
            pass"
61,"class MusicPlayer:
    def __init__(self):
        self.playlist = []
        self.current_song = None
        self.volume = 50

    def add_song(self, song):
        self.playlist.append(song)

    def remove_song(self, song):
        if song in self.playlist:
            self.playlist.remove(song)
            if self.current_song == song:
                self.stop()

    def play(self):
        if self.playlist and self.current_song:
            return self.playlist[0]
        elif len(self.playlist): 
            return False

    def stop(self):
        if self.current_song:
            self.current_song = None
            return True
        else:
            return False

    def switch_song(self):
        if self.current_song:
            current_index = self.playlist.index(self.current_song)
            if current_index < len(self.playlist) - 1:
                self.current_song = self.playlist[current_index + 1]
                return True
            else:
                return False
        else:
            return False

    def previous_song(self):
        if self.current_song:
            current_index = self.playlist.index(self.current_song)
            if current_index > 0:
                self.current_song = self.playlist[current_index - 1]
                return True
            else:
                return False
        else:
            return False

    def set_volume(self, volume):
        if 0 <= volume <= 100:
            self.volume = volume
        else:
            return False

    def shuffle(self):
        if self.playlist:
            import random
            random.shuffle(self.playlist)
            return True
        else:
            return False","class MusicPlayer:
    """"""
    This is a class as a music player that provides to play, stop, add songs, remove songs, set volume, shuffle, and switch to the next or previous song.
    """"""

    def __init__(self):
        """"""
        Initializes the music player with an empty playlist, no current song, and a default volume of 50.
        """"""
        self.playlist = []
        self.current_song = None
        self.volume = 50

    def add_song(self, song):
        """"""
        Adds a song to the playlist.
        :param song: The song to add to the playlist, str.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.add_song(""song1"")
        >>> musicPlayer.playlist
        ['song1']

        """"""

    def remove_song(self, song):
        """"""
        Removes a song from the playlist.
        :param song: The song to remove from the playlist, str.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.remove_song(""song1"")
        >>> musicPlayer.playlist
        ['song2']

        """"""

    def play(self):
        """"""
        Plays the current song in the playlist.
        :return: The current song in the playlist, or False if there is no current song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song1""
        >>> musicPlayer.play()
        'song1'

        """"""

    def stop(self):
        """"""
        Stops the current song in the playlist.
        :return: True if the current song was stopped, False if there was no current song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song1""
        >>> musicPlayer.stop()
        True

        """"""

    def switch_song(self):
        """"""
        Switches to the next song in the playlist.
        :return: True if the next song was switched to, False if there was no next song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song1""
        >>> musicPlayer.switch_song()
        True

        """"""

    def previous_song(self):
        """"""
        Switches to the previous song in the playlist.
        :return: True if the previous song was switched to, False if there was no previous song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song2""
        >>> musicPlayer.previous_song()
        True

        """"""

    def set_volume(self, volume):
        """"""
        Sets the volume of the music player,ifthe volume is between 0 and 100 is valid.
        :param volume: The volume to set the music player to,int.
        :return: True if the volume was set, False if the volume was invalid.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.set_volume(50)
        >>> musicPlayer.volume
        50

        """"""

    def shuffle(self):
        """"""
        Shuffles the playlist.
        :return: True if the playlist was shuffled, False if the playlist was empty.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.shuffle()
        True

        """"""",MusicPlayer,snippet_62,"import random

class MusicPlayer:
    """"""
    This is a class as a music player that provides to play, stop, add songs, remove songs, set volume, shuffle, and switch to the next or previous song.
    """"""

    def __init__(self):
        """"""
        Initializes the music player with an empty playlist, no current song, and a default volume of 50.
        """"""
        self.playlist = []
        self.current_song = None
        self.volume = 50

    def add_song(self, song):
        """"""
        Adds a song to the playlist.
        :param song: The song to add to the playlist, str.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.add_song(""song1"")
        >>> musicPlayer.playlist
        ['song1']

        """"""
        self.playlist.append(song)

    def remove_song(self, song):
        """"""
        Removes a song from the playlist.
        :param song: The song to remove from the playlist, str.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.remove_song(""song1"")
        >>> musicPlayer.playlist
        ['song2']

        """"""
        if song in self.playlist:
            self.playlist.remove(song)
            if self.current_song == song:
                self.current_song = None

    def play(self):
        """"""
        Plays the current song in the playlist.
        :return: The current song in the playlist, or False if there is no current song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song1""
        >>> musicPlayer.play()
        'song1'

        """"""
        if self.current_song and self.current_song in self.playlist:
            return self.current_song
        return False

    def stop(self):
        """"""
        Stops the current song in the playlist.
        :return: True if the current song was stopped, False if there was no current song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song1""
        >>> musicPlayer.stop()
        True

        """"""
        if self.current_song is not None:
            self.current_song = None
            return True
        return False

    def switch_song(self):
        """"""
        Switches to the next song in the playlist.
        :return: True if the next song was switched to, False if there was no next song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song1""
        >>> musicPlayer.switch_song()
        True

        """"""
        if self.current_song in self.playlist:
            idx = self.playlist.index(self.current_song)
            if idx < len(self.playlist) - 1:
                self.current_song = self.playlist[idx + 1]
                return True
        return False

    def previous_song(self):
        """"""
        Switches to the previous song in the playlist.
        :return: True if the previous song was switched to, False if there was no previous song.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.current_song = ""song2""
        >>> musicPlayer.previous_song()
        True

        """"""
        if self.current_song in self.playlist:
            idx = self.playlist.index(self.current_song)
            if idx > 0:
                self.current_song = self.playlist[idx - 1]
                return True
        return False

    def set_volume(self, volume):
        """"""
        Sets the volume of the music player,ifthe volume is between 0 and 100 is valid.
        :param volume: The volume to set the music player to,int.
        :return: True if the volume was set, False if the volume was invalid.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.set_volume(50)
        >>> musicPlayer.volume
        50

        """"""
        if isinstance(volume, int) and 0 <= volume <= 100:
            self.volume = volume
            return True
        return False

    def shuffle(self):
        """"""
        Shuffles the playlist.
        :return: True if the playlist was shuffled, False if the playlist was empty.
        >>> musicPlayer = MusicPlayer()
        >>> musicPlayer.playlist = [""song1"", ""song2""]
        >>> musicPlayer.shuffle()
        True

        """"""
        if not self.playlist:
            return False
        random.shuffle(self.playlist)
        return True"
62,"class NLPDataProcessor:

    def construct_stop_word_list(self):
        stop_word_list = ['a', 'an', 'the']
        return stop_word_list

    def remove_stop_words(self, string_list, stop_word_list):
        answer = []
        for string in string_list:
            string_split = string.split()
            for word in string_split:
                if word in stop_word_list:
                    string_split.remove(word)
            answer.append(string_split)
        return answer

    def process(self, string_list):
        stop_word_list = self.construct_stop_word_list()
        words_list = self.remove_stop_words(string_list, stop_word_list)
        return words_list","class NLPDataProcessor:
    """"""
    The class processes NLP data by removing stop words from a list of strings using a pre-defined stop word list.
    """"""


    def construct_stop_word_list(self):
        """"""
        Construct a stop word list including 'a', 'an', 'the'.
        :return: a list of stop words
        >>> NLPDataProcessor.construct_stop_word_list()
        ['a', 'an', 'the']
        """"""
    def remove_stop_words(self, string_list, stop_word_list):
        """"""
        Remove all the stop words from the list of strings.
        :param string_list: a list of strings
        :param stop_word_list: a list of stop words
        :return: a list of words without stop words
        >>> NLPDataProcessor.process(['This is a test.'])
        [['This', 'is', 'test.']]
        """"""
    def process(self, string_list):
        """"""
        Construct a stop word list including 'a', 'an', 'the', and remove all the stop words from the list of strings.
        :param string_list: a list of strings
        :return: a list of words without stop words
        >>> NLPDataProcessor.process(['This is a test.'])
        [['This', 'is', 'test.']]
        """"""",NLPDataProcessor,snippet_63,"class NLPDataProcessor:
    """"""
    The class processes NLP data by removing stop words from a list of strings using a pre-defined stop word list.
    """"""

    @staticmethod
    def construct_stop_word_list():
        """"""
        Construct a stop word list including 'a', 'an', 'the'.
        :return: a list of stop words
        >>> NLPDataProcessor.construct_stop_word_list()
        ['a', 'an', 'the']
        """"""
        return ['a', 'an', 'the']

    @staticmethod
    def remove_stop_words(string_list, stop_word_list):
        """"""
        Remove all the stop words from the list of strings.
        :param string_list: a list of strings
        :param stop_word_list: a list of stop words
        :return: a list of words without stop words
        >>> NLPDataProcessor.process(['This is a test.'])
        [['This', 'is', 'test.']]
        """"""
        if not isinstance(string_list, list):
            raise TypeError(""string_list must be a list of strings"")
        if not isinstance(stop_word_list, list):
            raise TypeError(""stop_word_list must be a list of strings"")
        result = []
        stop_set = set(stop_word_list)
        for s in string_list:
            if not isinstance(s, str):
                raise TypeError(""All items in string_list must be strings"")
            words = s.split()
            filtered = [w for w in words if w not in stop_set]
            result.append(filtered)
        return result

    @staticmethod
    def process(string_list):
        """"""
        Construct a stop word list including 'a', 'an', 'the', and remove all the stop words from the list of strings.
        :param string_list: a list of strings
        :return: a list of words without stop words
        >>> NLPDataProcessor.process(['This is a test.'])
        [['This', 'is', 'test.']]
        """"""
        stop_words = NLPDataProcessor.construct_stop_word_list()
        return NLPDataProcessor.remove_stop_words(string_list, stop_words)"
63,"from collections import Counter
import re

class NLPDataProcessor2:

    def process_data(self, string_list):
        words_list = []
        for string in string_list:
            # Remove non-English letters and convert to lowercase
            processed_string = re.sub(r'[^a-zA-Z\s]', '', string.lower())
            # Split the string into words
            words = processed_string.split()
            words_list.append(words)
        return words_list

    def calculate_word_frequency(self, words_list):
        word_frequency = Counter()
        for words in words_list:
            word_frequency.update(words)
        sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
        top_5_word_frequency = dict(list(sorted_word_frequency.items())[:5])
        return top_5_word_frequency

    def process(self, string_list):
        words_list = self.process_data(string_list)
        word_frequency_dict = self.calculate_word_frequency(words_list)
        return word_frequency_dict","class NLPDataProcessor2:
    """"""
    The class processes NLP data by extracting words from a list of strings, calculating the frequency of each word, and returning the top 5 most frequent words.
    """"""


    def process_data(self, string_list):
        """"""
        keep only English letters and spaces in the string, then convert the string to lower case, and then split the string into a list of words.
        :param string_list: a list of strings
        :return: words_list: a list of words lists
        >>> NLPDataProcessor.process_data(['This is a test.'])
        [['this', 'is', 'a', 'test']]
        """"""

    def calculate_word_frequency(self, words_list):
        """"""
        Calculate the word frequency of each word in the list of words list, and sort the word frequency dictionary by value in descending order.
        :param words_list: a list of words lists
        :return: top 5 word frequency dictionary, a dictionary of word frequency, key is word, value is frequency
        >>> NLPDataProcessor.calculate_word_frequency([['this', 'is', 'a', 'test'], ['this', 'is', 'another', 'test']])
        {'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1}
        """"""

    def process(self, string_list):
        """"""
        keep only English letters and spaces in the string, then convert the string to lower case, and then split the string into a list of words. Calculate the word frequency of each word in the list of words list, and sort the word frequency dictionary by value in descending order.
        :param string_list: a list of strings
        :return: top 5 word frequency dictionary, a dictionary of word frequency, key is word, value is frequency
        >>> NLPDataProcessor.process(['This is a test.', 'This is another test.'])
        {'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1}
        """"""",NLPDataProcessor2,snippet_64,"import re
from collections import Counter
from typing import List, Dict


class NLPDataProcessor2:
    """"""
    The class processes NLP data by extracting words from a list of strings, calculating the frequency of each word, and returning the top 5 most frequent words.
    """"""

    def process_data(self, string_list: List[str]) -> List[List[str]]:
        """"""
        keep only English letters and spaces in the string, then convert the string to lower case, and then split the string into a list of words.
        :param string_list: a list of strings
        :return: words_list: a list of words lists
        >>> NLPDataProcessor.process_data(['This is a test.'])
        [['this', 'is', 'a', 'test']]
        """"""
        if not string_list:
            return []
        words_list: List[List[str]] = []
        for s in string_list:
            if not isinstance(s, str):
                s = """" if s is None else str(s)
            cleaned = re.sub(r""[^A-Za-z ]+"", "" "", s)
            lowered = cleaned.lower()
            tokens = [w for w in lowered.split() if w]
            words_list.append(tokens)
        return words_list

    def calculate_word_frequency(self, words_list: List[List[str]]) -> Dict[str, int]:
        """"""
        Calculate the word frequency of each word in the list of words list, and sort the word frequency dictionary by value in descending order.
        :param words_list: a list of words lists
        :return: top 5 word frequency dictionary, a dictionary of word frequency, key is word, value is frequency
        >>> NLPDataProcessor.calculate_word_frequency([['this', 'is', 'a', 'test'], ['this', 'is', 'another', 'test']])
        {'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1}
        """"""
        if not words_list:
            return {}
        flat_words: List[str] = []
        for lst in words_list:
            if lst:
                flat_words.extend(lst)
        if not flat_words:
            return {}
        counts = Counter(flat_words)
        first_index = {}
        for idx, w in enumerate(flat_words):
            if w not in first_index:
                first_index[w] = idx
        sorted_words = sorted(counts.items(), key=lambda kv: (-kv[1], first_index[kv[0]]))
        top5 = sorted_words[:5]
        return {w: c for w, c in top5}

    def process(self, string_list: List[str]) -> Dict[str, int]:
        """"""
        keep only English letters and spaces in the string, then convert the string to lower case, and then split the string into a list of words. Calculate the word frequency of each word in the list of words list, and sort the word frequency dictionary by value in descending order.
        :param string_list: a list of strings
        :return: top 5 word frequency dictionary, a dictionary of word frequency, key is word, value is frequency
        >>> NLPDataProcessor.process(['This is a test.', 'This is another test.'])
        {'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1}
        """"""
        words_list = self.process_data(string_list)
        return self.calculate_word_frequency(words_list)"
64,"class NumberConverter:
    @staticmethod
    def decimal_to_binary(decimal_num):
        binary_num = bin(decimal_num)[2:]
        return binary_num

    @staticmethod
    def binary_to_decimal(binary_num):
        decimal_num = int(binary_num, 2)
        return decimal_num

    @staticmethod
    def decimal_to_octal(decimal_num):
        octal_num = oct(decimal_num)[2:]
        return octal_num

    @staticmethod
    def octal_to_decimal(octal_num):
        decimal_num = int(octal_num, 8)
        return decimal_num

    @staticmethod
    def decimal_to_hex(decimal_num):
        hex_num = hex(decimal_num)[2:]
        return hex_num

    @staticmethod
    def hex_to_decimal(hex_num):
        decimal_num = int(hex_num, 16)
        return decimal_num","class NumberConverter:
    """"""
    The class allows to convert  decimal to binary, octal and hexadecimal repectively and contrarily
    """"""

    @staticmethod
    def decimal_to_binary(decimal_num):
        """"""
        Convert a number from decimal format to binary format.
        :param decimal_num: int, decimal number
        :return: str, the binary representation of an integer.
        >>> NumberConverter.decimal_to_binary(42423)
        '1010010110110111'
        """"""

    @staticmethod
    def binary_to_decimal(binary_num):
        """"""
        Convert a number from binary format to decimal format.
        :param binary_num: str, binary number
        :return: int, the decimal representation of binary number str.
        >>> NumberConverter.binary_to_decimal('1010010110110111')
        42423
        """"""


    @staticmethod
    def decimal_to_octal(decimal_num):
        """"""
        Convert a number from decimal format to octal format.
        :param decimal_num: int, decimal number
        :return: str, the octal representation of an integer.
        >>> NumberConverter.decimal_to_octal(42423)
        '122667'
        """"""

    @staticmethod
    def octal_to_decimal(octal_num):
        """"""
        Convert a number from octal format to decimal format.
        :param octal_num: str, octal num
        :return: int, the decimal representation of octal number str.
        >>> NumberConverter.octal_to_decimal('122667')
        42423
        """"""

    @staticmethod
    def decimal_to_hex(decimal_num):
        """"""
        Convert a number from decimal format to hex format.
        :param decimal_num: int, decimal number
        :return hex_num: str, the hex representation of an integer.
        >>> NumberConverter.decimal_to_hex(42423)
        'a5b7'
        """"""

    @staticmethod
    def hex_to_decimal(hex_num):
        """"""
        Convert a number from hex format to decimal format.
        :param hex_num: str, hex num
        :return: int, the decimal representation of hex number str.
        >>> NumberConverter.hex_to_decimal('a5b7')
        42423
        """"""",NumberConverter,snippet_65,"class NumberConverter:
    """"""
    The class allows to convert  decimal to binary, octal and hexadecimal repectively and contrarily
    """"""

    @staticmethod
    def decimal_to_binary(decimal_num):
        """"""
        Convert a number from decimal format to binary format.
        :param decimal_num: int, decimal number
        :return: str, the binary representation of an integer.
        >>> NumberConverter.decimal_to_binary(42423)
        '1010010110110111'
        """"""
        n = int(decimal_num)
        if n == 0:
            return '0'
        sign = '-' if n < 0 else ''
        return sign + bin(abs(n))[2:]

    @staticmethod
    def binary_to_decimal(binary_num):
        """"""
        Convert a number from binary format to decimal format.
        :param binary_num: str, binary number
        :return: int, the decimal representation of binary number str.
        >>> NumberConverter.binary_to_decimal('1010010110110111')
        42423
        """"""
        s = str(binary_num).strip()
        return int(s, 2)

    @staticmethod
    def decimal_to_octal(decimal_num):
        """"""
        Convert a number from decimal format to octal format.
        :param decimal_num: int, decimal number
        :return: str, the octal representation of an integer.
        >>> NumberConverter.decimal_to_octal(42423)
        '122667'
        """"""
        n = int(decimal_num)
        if n == 0:
            return '0'
        sign = '-' if n < 0 else ''
        return sign + oct(abs(n))[2:]

    @staticmethod
    def octal_to_decimal(octal_num):
        """"""
        Convert a number from octal format to decimal format.
        :param octal_num: str, octal num
        :return: int, the decimal representation of octal number str.
        >>> NumberConverter.octal_to_decimal('122667')
        42423
        """"""
        s = str(octal_num).strip()
        return int(s, 8)

    @staticmethod
    def decimal_to_hex(decimal_num):
        """"""
        Convert a number from decimal format to hex format.
        :param decimal_num: int, decimal number
        :return hex_num: str, the hex representation of an integer.
        >>> NumberConverter.decimal_to_hex(42423)
        'a5b7'
        """"""
        n = int(decimal_num)
        if n == 0:
            return '0'
        sign = '-' if n < 0 else ''
        return sign + hex(abs(n))[2:]

    @staticmethod
    def hex_to_decimal(hex_num):
        """"""
        Convert a number from hex format to decimal format.
        :param hex_num: str, hex num
        :return: int, the decimal representation of hex number str.
        >>> NumberConverter.hex_to_decimal('a5b7')
        42423
        """"""
        s = str(hex_num).strip()
        return int(s, 16)"
65,"class NumberWordFormatter:
    def __init__(self):
        self.NUMBER = ["""", ""ONE"", ""TWO"", ""THREE"", ""FOUR"", ""FIVE"", ""SIX"", ""SEVEN"", ""EIGHT"", ""NINE""]
        self.NUMBER_TEEN = [""TEN"", ""ELEVEN"", ""TWELVE"", ""THIRTEEN"", ""FOURTEEN"", ""FIFTEEN"", ""SIXTEEN"", ""SEVENTEEN"",
                            ""EIGHTEEN"",
                            ""NINETEEN""]
        self.NUMBER_TEN = [""TEN"", ""TWENTY"", ""THIRTY"", ""FORTY"", ""FIFTY"", ""SIXTY"", ""SEVENTY"", ""EIGHTY"", ""NINETY""]
        self.NUMBER_MORE = ["""", ""THOUSAND"", ""MILLION"", ""BILLION""]
        self.NUMBER_SUFFIX = [""k"", ""w"", """", ""m"", """", """", ""b"", """", """", ""t"", """", """", ""p"", """", """", ""e""]

    def format(self, x):
        if x is not None:
            return self.format_string(str(x))
        else:
            return """"

    def format_string(self, x):
        lstr, rstr = (x.split('.') + [''])[:2]
        lstrrev = lstr[::-1]
        a = [''] * 5

        if len(lstrrev) % 3 == 1:
            lstrrev += ""00""
        elif len(lstrrev) % 3 == 2:
            lstrrev += ""0""

        lm = """"
        for i in range(len(lstrrev) // 3):
            a[i] = lstrrev[3 * i:3 * i + 3][::-1]
            if a[i] != ""000"":
                lm = self.trans_three(a[i]) + "" "" + self.parse_more(i) + "" "" + lm
            else:
                lm += self.trans_three(a[i])

        xs = f""AND CENTS {self.trans_two(rstr)} "" if rstr else """"
        if not lm.strip():
            return ""ZERO ONLY""
        else:
            return f""{lm.strip()} {xs}ONLY""

    def trans_two(self, s):
        s = s.zfill(2)
        if s[0] == ""0"":
            return self.NUMBER[int(s[-1])]
        elif s[0] == ""1"":
            return self.NUMBER_TEEN[int(s) - 10]
        elif s[1] == ""0"":
            return self.NUMBER_TEN[int(s[0]) - 1]
        else:
            return self.NUMBER_TEN[int(s[0]) - 1] + "" "" + self.NUMBER[int(s[-1])]

    def trans_three(self, s):
        if s[0] == ""0"":
            return self.trans_two(s[1:])
        elif s[1:] == ""00"":
            return f""{self.NUMBER[int(s[0])]} HUNDRED""
        else:
            return f""{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}""

    def parse_more(self, i):
        return self.NUMBER_MORE[i]","class NumberWordFormatter:
    """"""
    This is a class that provides to convert numbers into their corresponding English word representation, including handling the conversion of both the integer and decimal parts, and incorporating appropriate connectors and units.
    """"""

    def __init__(self):
        """"""
        Initialize NumberWordFormatter object.
        """"""
        self.NUMBER = ["""", ""ONE"", ""TWO"", ""THREE"", ""FOUR"", ""FIVE"", ""SIX"", ""SEVEN"", ""EIGHT"", ""NINE""]
        self.NUMBER_TEEN = [""TEN"", ""ELEVEN"", ""TWELVE"", ""THIRTEEN"", ""FOURTEEN"", ""FIFTEEN"", ""SIXTEEN"", ""SEVENTEEN"",
                            ""EIGHTEEN"",
                            ""NINETEEN""]
        self.NUMBER_TEN = [""TEN"", ""TWENTY"", ""THIRTY"", ""FORTY"", ""FIFTY"", ""SIXTY"", ""SEVENTY"", ""EIGHTY"", ""NINETY""]
        self.NUMBER_MORE = ["""", ""THOUSAND"", ""MILLION"", ""BILLION""]
        self.NUMBER_SUFFIX = [""k"", ""w"", """", ""m"", """", """", ""b"", """", """", ""t"", """", """", ""p"", """", """", ""e""]

    def format(self, x):
        """"""
        Converts a number into words format
        :param x: int or float, the number to be converted into words format
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.format(123456)
        ""ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY""
        """"""


    def format_string(self, x):
        """"""
        Converts a string representation of a number into words format
        :param x: str, the string representation of a number
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.format_string(""123456"")
        ""ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY""
        """"""


    def trans_two(self, s):
        """"""
        Converts a two-digit number into words format
        :param s: str, the two-digit number
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.trans_two(""23"")
        ""TWENTY THREE""
        """"""


    def trans_three(self, s):
        """"""
        Converts a three-digit number into words format
        :param s: str, the three-digit number
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.trans_three(""123"")
        ""ONE HUNDRED AND TWENTY THREE""
        """"""

    def parse_more(self, i):
        """"""
        Parses the thousand/million/billion suffix based on the index
        :param i: int, the index representing the magnitude (thousand, million, billion)
        :return: str, the corresponding suffix for the magnitude
        >>> formatter = NumberWordFormatter()
        >>> formatter.parse_more(1)
        ""THOUSAND""
        """"""",NumberWordFormatter,snippet_66,"class NumberWordFormatter:
    """"""
    This is a class that provides to convert numbers into their corresponding English word representation, including handling the conversion of both the integer and decimal parts, and incorporating appropriate connectors and units.
    """"""

    def __init__(self):
        """"""
        Initialize NumberWordFormatter object.
        """"""
        self.NUMBER = ["""", ""ONE"", ""TWO"", ""THREE"", ""FOUR"", ""FIVE"", ""SIX"", ""SEVEN"", ""EIGHT"", ""NINE""]
        self.NUMBER_TEEN = [""TEN"", ""ELEVEN"", ""TWELVE"", ""THIRTEEN"", ""FOURTEEN"", ""FIFTEEN"", ""SIXTEEN"", ""SEVENTEEN"",
                            ""EIGHTEEN"",
                            ""NINETEEN""]
        self.NUMBER_TEN = [""TEN"", ""TWENTY"", ""THIRTY"", ""FORTY"", ""FIFTY"", ""SIXTY"", ""SEVENTY"", ""EIGHTY"", ""NINETY""]
        self.NUMBER_MORE = ["""", ""THOUSAND"", ""MILLION"", ""BILLION""]
        self.NUMBER_SUFFIX = [""k"", ""w"", """", ""m"", """", """", ""b"", """", """", ""t"", """", """", ""p"", """", """", ""e""]

    def format(self, x):
        """"""
        Converts a number into words format
        :param x: int or float, the number to be converted into words format
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.format(123456)
        ""ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY""
        """"""
        from decimal import Decimal, InvalidOperation

        if isinstance(x, bool):
            raise ValueError(""Invalid input type"")

        if isinstance(x, int):
            return self.format_string(str(x))
        elif isinstance(x, float):
            # Avoid binary float artifacts
            return self.format_string(str(Decimal(str(x))))
        else:
            # Try Decimal conversion for other numeric-like types
            try:
                return self.format_string(str(Decimal(str(x))))
            except Exception:
                raise ValueError(""Unsupported input type for format"")

    def format_string(self, x):
        """"""
        Converts a string representation of a number into words format
        :param x: str, the string representation of a number
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.format_string(""123456"")
        ""ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY""
        """"""
        if not isinstance(x, str):
            raise ValueError(""Input must be a string"")

        s = x.strip().replace("","", """").replace(""_"", """")
        if not s:
            raise ValueError(""Empty string"")

        negative = False
        if s[0] in ""+-"":
            negative = s[0] == ""-""
            s = s[1:]

        if not s:
            raise ValueError(""Invalid number"")

        # Validate numeric format (digits with optional single decimal point)
        if s.count(""."") > 1:
            raise ValueError(""Invalid number format"")

        parts = s.split(""."")
        int_part = parts[0] if parts[0] != """" else ""0""
        if not int_part.isdigit():
            raise ValueError(""Invalid integer part"")

        dec_part = """"
        if len(parts) == 2:
            dec_part = parts[1]
            if dec_part and not dec_part.isdigit():
                raise ValueError(""Invalid fractional part"")

        int_words = self._format_integer_part(int_part)
        dec_words = self._format_decimal_part(dec_part)

        words = []
        if negative:
            words.append(""MINUS"")
        words.append(int_words if int_words else ""ZERO"")
        if dec_words:
            words.append(""POINT"")
            words.append(dec_words)

        return ("" "".join(words) + "" ONLY"").replace(""  "", "" "").strip()

    def trans_two(self, s):
        """"""
        Converts a two-digit number into words format
        :param s: str, the two-digit number
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.trans_two(""23"")
        ""TWENTY THREE""
        """"""
        if not isinstance(s, str) or not s.isdigit() or not (1 <= len(s) <= 2):
            raise ValueError(""trans_two expects a 1 or 2 digit numeric string"")

        if len(s) == 1:
            n = int(s)
            return self.NUMBER[n] if n != 0 else """"

        a, b = int(s[0]), int(s[1])
        if a == 0:
            return self.NUMBER[b]
        if a == 1:
            return self.NUMBER_TEEN[b]
        if b == 0:
            return self.NUMBER_TEN[a - 1]
        return self.NUMBER_TEN[a - 1] + "" "" + self.NUMBER[b]

    def trans_three(self, s):
        """"""
        Converts a three-digit number into words format
        :param s: str, the three-digit number
        :return: str, the number in words format
        >>> formatter = NumberWordFormatter()
        >>> formatter.trans_three(""123"")
        ""ONE HUNDRED AND TWENTY THREE""
        """"""
        if not isinstance(s, str) or not s.isdigit() or not (1 <= len(s) <= 3):
            raise ValueError(""trans_three expects a 1 to 3 digit numeric string"")

        s = s.zfill(3)
        h, t, u = int(s[0]), int(s[1]), int(s[2])
        parts = []

        if h != 0:
            parts.append(self.NUMBER[h] + "" HUNDRED"")
            if t != 0 or u != 0:
                parts.append(""AND"")

        two = self.trans_two(str(t) + str(u)) if (t != 0 or u != 0) else """"
        if two:
            parts.append(two)

        return "" "".join(parts).strip()

    def parse_more(self, i):
        """"""
        Parses the thousand/million/billion suffix based on the index
        :param i: int, the index representing the magnitude (thousand, million, billion)
        :return: str, the corresponding suffix for the magnitude
        >>> formatter = NumberWordFormatter()
        >>> formatter.parse_more(1)
        ""THOUSAND""
        """"""
        if not isinstance(i, int) or i < 0:
            return """"
        return self.NUMBER_MORE[i] if i < len(self.NUMBER_MORE) else """"

    def _format_integer_part(self, s):
        s = s.lstrip(""0"") or ""0""
        if s == ""0"":
            return ""ZERO""

        groups = []
        i = len(s)
        while i > 0:
            groups.append(s[max(0, i - 3):i])
            i -= 3

        words = []
        for idx, grp in enumerate(groups):
            w = self.trans_three(grp)
            if w:
                suffix = self.parse_more(idx)
                if suffix:
                    words.append(w + "" "" + suffix)
                else:
                    words.append(w)

        return "" "".join(reversed(words)).strip()

    def _format_decimal_part(self, s):
        if s is None or s == """":
            return """"
        # Remove trailing zeros in fractional part? Keep as-is to reflect original number precisely.
        # If all zeros, return empty
        if all(ch == ""0"" for ch in s):
            return """"
        digit_words = [""ZERO"", ""ONE"", ""TWO"", ""THREE"", ""FOUR"", ""FIVE"", ""SIX"", ""SEVEN"", ""EIGHT"", ""NINE""]
        return "" "".join(digit_words[int(ch)] for ch in s)"
66,"class NumericEntityUnescaper:
    def __init__(self):
        pass

    def replace(self, string):
        out = []
        pos = 0
        length = len(string)

        while pos < length - 2:
            if string[pos] == '&' and string[pos + 1] == '#':
                start = pos + 2
                is_hex = False
                first_char = string[start]

                if first_char == 'x' or first_char == 'X':
                    start += 1
                    is_hex = True

                if start == length:
                    return ''.join(out)

                end = start
                while end < length and self.is_hex_char(string[end]):
                    end += 1

                if end < length and string[end] == ';':
                    try:
                        entity_value = int(string[start:end], 16 if is_hex else 10)
                    except:
                        return ''.join(out)

                    out.append(chr(entity_value))
                    pos = end + 1
                    continue

            out.append(string[pos])
            pos += 1

        return ''.join(out)

    @staticmethod
    def is_hex_char(char):
        return char.isdigit() or ('a' <= char.lower() <= 'f')","class NumericEntityUnescaper:
    """"""
    This is a class that provides functionality to replace numeric entities with their corresponding characters in a given string.
    """"""

    def __init__(self):
        pass

    def replace(self, string):
        """"""
        Replaces numeric character references (HTML entities) in the input string with their corresponding Unicode characters.
        :param string: str, the input string containing numeric character references.
        :return: str, the input string with numeric character references replaced with their corresponding Unicode characters.
        >>> unescaper = NumericEntityUnescaper()
        >>> unescaper.replace(""&#65;&#66;&#67;"")
        'ABC'

        """"""


    @staticmethod
    def is_hex_char(char):
        """"""
        Determines whether a given character is a hexadecimal digit.
        :param char: str, the character to check.
        :return: bool, True if the character is a hexadecimal digit, False otherwise.
        >>> NumericEntityUnescaper.is_hex_char('a')
        True

        """"""",NumericEntityUnescaper,snippet_67,"class NumericEntityUnescaper:
    """"""
    This is a class that provides functionality to replace numeric entities with their corresponding characters in a given string.
    """"""

    def __init__(self):
        pass

    def replace(self, string):
        """"""
        Replaces numeric character references (HTML entities) in the input string with their corresponding Unicode characters.
        :param string: str, the input string containing numeric character references.
        :return: str, the input string with numeric character references replaced with their corresponding Unicode characters.
        >>> unescaper = NumericEntityUnescaper()
        >>> unescaper.replace(""&#65;&#66;&#67;"")
        'ABC'

        """"""
        import re

        if not isinstance(string, str):
            raise TypeError(""Input must be a string"")

        pattern = re.compile(r'&#(x[0-9A-Fa-f]+|\d+);')

        def _replace_match(m):
            s = m.group(1)
            try:
                if s[0] in ('x', 'X'):
                    cp = int(s[1:], 16)
                else:
                    cp = int(s, 10)
                if 0 <= cp <= 0x10FFFF and not (0xD800 <= cp <= 0xDFFF):
                    return chr(cp)
            except Exception:
                pass
            return m.group(0)

        return pattern.sub(_replace_match, string)

    @staticmethod
    def is_hex_char(char):
        """"""
        Determines whether a given character is a hexadecimal digit.
        :param char: str, the character to check.
        :return: bool, True if the character is a hexadecimal digit, False otherwise.
        >>> NumericEntityUnescaper.is_hex_char('a')
        True

        """"""
        if not isinstance(char, str) or len(char) != 1:
            return False
        c = char
        return ('0' <= c <= '9') or ('a' <= c <= 'f') or ('A' <= c <= 'F')"
67,"class Order:

    def __init__(self):
        self.menu = []
        # menu = [{""dish"": dish name, ""price"": price, ""count"": count}, ...]
        self.selected_dishes = []
        # selected_dish = {""dish"": dish name, ""count"": count, price: price}
        self.sales = {}
        # 


    def add_dish(self, dish):
        for menu_dish in self.menu:
            if dish[""dish""] == menu_dish[""dish""]:
                if menu_dish[""count""] < dish[""count""]:
                    return False
                else:
                    menu_dish[""count""] -= dish[""count""]
                    break
        self.selected_dishes.append(dish)
        return True

    def calculate_total(self):
        total = 0
        for dish in self.selected_dishes:
            total += dish[""price""] * dish[""count""] * self.sales[dish[""dish""]]
        return total

    def checkout(self):
        if len(self.selected_dishes) == 0:
            return False
        total = self.calculate_total()
        self.selected_dishes = []
        return total","class Order:
    """"""
    The class manages restaurant orders by allowing the addition of dishes, calculation of the total cost, and checkout.
    """"""


    def __init__(self):
        """"""
        Initialize the order management system
        self.menu stores the dishes of resturant inventory
        menu = [{""dish"": dish name, ""price"": price, ""count"": count}, ...]
        self.selected_dishes stores the dished selected by customer
        selected_dish = {""dish"": dish name, ""count"": count, price: price}
        self.sales stores the sales of each dish
        sales = {dish name: sales}
        """"""
        self.menu = []
        self.selected_dishes = []
        self.sales = {}


    def add_dish(self, dish):
        """"""
        Check the self.menu and add into self.selected_dish if the dish count is valid.
        And if the dish has successfully been added, change the count in self.menu.
        :param dish: dict, the information of dish. dish = {""dish"": dish name, ""count"": count, price: price}
        :return: True if successfully added, or False otherwise.
        >>> order = Order()
        >>> order.menu.append({""dish"": ""dish1"", ""price"": 10, ""count"": 5})
        >>> order.add_dish({""dish"": ""dish1"", ""price"": 10, ""count"": 3})
        True
        """"""

    def calculate_total(self):
        """"""
        Calculate the total price of dishes that have been ordered. Multiply the count, price and sales.
        :return total: float, the final total price.
        >>> order = Order()
        >>> order.menu.append({""dish"": ""dish1"", ""price"": 10, ""count"": 5})
        >>> order.sales = {""dish1"": 0.8}
        >>> order.add_dish({""dish"": ""dish1"", ""price"": 10, ""count"": 4})
        True
        >>> order.calculate_total()
        32.0
        """"""

    def checkout(self):
        """"""
        Check out the dished ordered. IF the self.selected_dishes is not empty, invoke the calculate_total
        method to check out.
        :return Flase if the self.selected_dishes is empty, or total(return value of calculate_total) otherwise.
        >>> order = Order()
        >>> order.menu.append({""dish"": ""dish1"", ""price"": 10, ""count"": 5})
        >>> order.sales = {""dish1"": 0.8}
        >>> order.add_dish({""dish"": ""dish1"", ""price"": 10, ""count"": 4})
        True
        >>> order.checkout()
        32.0
        """"""",Order,snippet_68,"class Order:
    """"""
    The class manages restaurant orders by allowing the addition of dishes, calculation of the total cost, and checkout.
    """"""

    def __init__(self):
        """"""
        Initialize the order management system
        self.menu stores the dishes of resturant inventory
        menu = [{""dish"": dish name, ""price"": price, ""count"": count}, ...]
        self.selected_dishes stores the dished selected by customer
        selected_dish = {""dish"": dish name, ""count"": count, price: price}
        self.sales stores the sales of each dish
        sales = {dish name: sales}
        """"""
        self.menu = []
        self.selected_dishes = []
        self.sales = {}

    def add_dish(self, dish):
        """"""
        Check the self.menu and add into self.selected_dish if the dish count is valid.
        And if the dish has successfully been added, change the count in self.menu.
        :param dish: dict, the information of dish. dish = {""dish"": dish name, ""count"": count, price: price}
        :return: True if successfully added, or False otherwise.
        >>> order = Order()
        >>> order.menu.append({""dish"": ""dish1"", ""price"": 10, ""count"": 5})
        >>> order.add_dish({""dish"": ""dish1"", ""price"": 10, ""count"": 3})
        True
        """"""
        if not isinstance(dish, dict):
            return False
        name = dish.get(""dish"")
        count = dish.get(""count"")
        price = dish.get(""price"")
        if not isinstance(name, str) or not isinstance(count, (int, float)) or not isinstance(price, (int, float)):
            return False
        if count <= 0:
            return False

        menu_item = None
        for item in self.menu:
            if item.get(""dish"") == name:
                menu_item = item
                break
        if menu_item is None:
            return False

        available = menu_item.get(""count"", 0)
        if count > available:
            return False

        menu_price = menu_item.get(""price"", price)
        # Reduce inventory
        menu_item[""count""] = available - count

        # Add to selected_dishes (aggregate if already present)
        for sel in self.selected_dishes:
            if sel.get(""dish"") == name:
                sel[""count""] += count
                sel[""price""] = menu_price
                return True

        self.selected_dishes.append({""dish"": name, ""count"": count, ""price"": menu_price})
        return True

    def calculate_total(self):
        """"""
        Calculate the total price of dishes that have been ordered. Multiply the count, price and sales.
        :return total: float, the final total price.
        >>> order = Order()
        >>> order.menu.append({""dish"": ""dish1"", ""price"": 10, ""count"": 5})
        >>> order.sales = {""dish1"": 0.8}
        >>> order.add_dish({""dish"": ""dish1"", ""price"": 10, ""count"": 4})
        True
        >>> order.calculate_total()
        32.0
        """"""
        total = 0.0
        for sel in self.selected_dishes:
            name = sel.get(""dish"")
            count = sel.get(""count"", 0)
            price = sel.get(""price"", 0.0)
            sale = self.sales.get(name, 1.0)
            total += float(count) * float(price) * float(sale)
        return float(total)

    def checkout(self):
        """"""
        Check out the dished ordered. IF the self.selected_dishes is not empty, invoke the calculate_total
        method to check out.
        :return Flase if the self.selected_dishes is empty, or total(return value of calculate_total) otherwise.
        >>> order = Order()
        >>> order.menu.append({""dish"": ""dish1"", ""price"": 10, ""count"": 5})
        >>> order.sales = {""dish1"": 0.8}
        >>> order.add_dish({""dish"": ""dish1"", ""price"": 10, ""count"": 4})
        True
        >>> order.checkout()
        32.0
        """"""
        if not self.selected_dishes:
            return False
        return self.calculate_total()"
68,"class PageUtil:
    def __init__(self, data, page_size):
        self.data = data
        self.page_size = page_size
        self.total_items = len(data)
        self.total_pages = (self.total_items + page_size - 1) // page_size

    def get_page(self, page_number):
        if page_number < 1 or page_number > self.total_pages:
            return []

        start_index = (page_number - 1) * self.page_size
        end_index = start_index + self.page_size
        return self.data[start_index:end_index]

    def get_page_info(self, page_number):
        if page_number < 1 or page_number > self.total_pages:
            return {}

        start_index = (page_number - 1) * self.page_size
        end_index = min(start_index + self.page_size, self.total_items)
        page_data = self.data[start_index:end_index]

        page_info = {
            ""current_page"": page_number,
            ""per_page"": self.page_size,
            ""total_pages"": self.total_pages,
            ""total_items"": self.total_items,
            ""has_previous"": page_number > 1,
            ""has_next"": page_number < self.total_pages,
            ""data"": page_data
        }
        return page_info

    def search(self, keyword):
        results = [item for item in self.data if keyword in str(item)]
        num_results = len(results)
        num_pages = (num_results + self.page_size - 1) // self.page_size

        search_info = {
            ""keyword"": keyword,
            ""total_results"": num_results,
            ""total_pages"": num_pages,
            ""results"": results
        }
        return search_info","class PageUtil:
    """"""
    PageUtil class is a versatile utility for handling pagination and search functionalities in an efficient and convenient manner.
    """"""

    def __init__(self, data, page_size):
        """"""
        Initialize the PageUtil object with the given data and page size.
        :param data: list, the data to be paginated
        :param page_size: int, the number of items per page
        """"""
        self.data = data
        self.page_size = page_size
        self.total_items = len(data)
        self.total_pages = (self.total_items + page_size - 1) // page_size

    def get_page(self, page_number):
        """"""
        Retrieve a specific page of data.
        :param page_number: int, the page number to fetch
        :return: list, the data on the specified page
        >>> page_util = PageUtil([1, 2, 3, 4], 1)
        >>> page_util.get_page(1)
        [1]

        """"""


    def get_page_info(self, page_number):
        """"""
        Retrieve information about a specific page.
        :param page_number: int, the page number to fetch information about
        :return: dict, containing page information such as current page number, total pages, etc.
        >>> page_util = PageUtil([1, 2, 3, 4], 1)
        >>> page_util.get_page_info(1)
        >>> {
        >>>     ""current_page"": 1,
        >>>     ""per_page"": 1,
        >>>     ""total_pages"": 4,
        >>>     ""total_items"": 4,
        >>>     ""has_previous"": False,
        >>>     ""has_next"": True,
        >>>     ""data"": [1]
        >>> }

        """"""


    def search(self, keyword):
        """"""
        Search for items in the data that contain the given keyword.
        :param keyword: str, the keyword to search for
        :return: dict, containing search information such as total results and matching items
        >>> page_util = PageUtil([1, 2, 3, 4], 1)
        >>> page_util.search(""1"")
        >>> search_info = {
        >>>     ""keyword"": ""1"",
        >>>     ""total_results"": 1,
        >>>     ""total_pages"": 1,
        >>>     ""results"": [1]
        >>> }
        """"""",PageUtil,snippet_69,"class PageUtil:
    """"""
    PageUtil class is a versatile utility for handling pagination and search functionalities in an efficient and convenient manner.
    """"""

    def __init__(self, data, page_size):
        """"""
        Initialize the PageUtil object with the given data and page size.
        :param data: list, the data to be paginated
        :param page_size: int, the number of items per page
        """"""
        if page_size <= 0:
            raise ValueError(""page_size must be a positive integer"")
        self.data = list(data)
        self.page_size = int(page_size)
        self.total_items = len(self.data)
        self.total_pages = (self.total_items + self.page_size - 1) // self.page_size if self.total_items else 0

    def get_page(self, page_number):
        """"""
        Retrieve a specific page of data.
        :param page_number: int, the page number to fetch
        :return: list, the data on the specified page
        >>> page_util = PageUtil([1, 2, 3, 4], 1)
        >>> page_util.get_page(1)
        [1]

        """"""
        if not isinstance(page_number, int):
            raise TypeError(""page_number must be an integer"")
        if page_number < 1 or page_number > max(self.total_pages, 1):
            return []
        start = (page_number - 1) * self.page_size
        end = start + self.page_size
        return self.data[start:end]

    def get_page_info(self, page_number):
        """"""
        Retrieve information about a specific page.
        :param page_number: int, the page number to fetch information about
        :return: dict, containing page information such as current page number, total pages, etc.
        >>> page_util = PageUtil([1, 2, 3, 4], 1)
        >>> page_util.get_page_info(1)
        >>> {
        >>>     ""current_page"": 1,
        >>>     ""per_page"": 1,
        >>>     ""total_pages"": 4,
        >>>     ""total_items"": 4,
        >>>     ""has_previous"": False,
        >>>     ""has_next"": True,
        >>>     ""data"": [1]
        >>> }

        """"""
        if not isinstance(page_number, int):
            raise TypeError(""page_number must be an integer"")
        page_data = self.get_page(page_number)
        total_pages = self.total_pages
        return {
            ""current_page"": page_number,
            ""per_page"": self.page_size,
            ""total_pages"": total_pages,
            ""total_items"": self.total_items,
            ""has_previous"": page_number > 1 and total_pages > 0,
            ""has_next"": page_number < total_pages,
            ""data"": page_data,
        }

    def search(self, keyword):
        """"""
        Search for items in the data that contain the given keyword.
        :param keyword: str, the keyword to search for
        :return: dict, containing search information such as total results and matching items
        >>> page_util = PageUtil([1, 2, 3, 4], 1)
        >>> page_util.search(""1"")
        >>> search_info = {
        >>>     ""keyword"": ""1"",
        >>>     ""total_results"": 1,
        >>>     ""total_pages"": 1,
        >>>     ""results"": [1]
        >>> }
        """"""
        if keyword is None:
            keyword = """"
        keyword_str = str(keyword)
        results = [item for item in self.data if keyword_str in str(item)]
        total_results = len(results)
        total_pages = (total_results + self.page_size - 1) // self.page_size if total_results else 0
        return {
            ""keyword"": keyword_str,
            ""total_results"": total_results,
            ""total_pages"": total_pages,
            ""results"": results,
        }"
69,"import PyPDF2


class PDFHandler:
    def __init__(self, filepaths):
        self.filepaths = filepaths
        # PdfFileReader is deprecated and was removed in PyPDF2 3.0.0. Use PdfReader instead.
        self.readers = [PyPDF2.PdfReader(fp) for fp in filepaths]

    def merge_pdfs(self, output_filepath):
        pdf_writer = PyPDF2.PdfWriter()

        for reader in self.readers:
            # reader.getNumPages is deprecated and was removed in PyPDF2 3.0.0. Use len(reader.pages) instead.
            for page_num in range(len(reader.pages)):
                # reader.getPage(pageNumber) is deprecated and was removed in PyPDF2 3.0.0. Use reader.pages[page_number] instead.
                page = reader.pages[page_num]
                # addPage is deprecated and was removed in PyPDF2 3.0.0. Use add_page instead.
                pdf_writer.add_page(page)

        with open(output_filepath, 'wb') as out:
            pdf_writer.write(out)
        return f""Merged PDFs saved at {output_filepath}""

    def extract_text_from_pdfs(self):
        pdf_texts = []
        for reader in self.readers:
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                pdf_texts.append(page.extract_text())
        return pdf_texts","class PDFHandler:
    """"""
    The class allows merging multiple PDF files into one and extracting text from PDFs using PyPDF2 library.
    """"""

    def __init__(self, filepaths):
        """"""
        takes a list of file paths filepaths as a parameter.
        It creates a list named readers using PyPDF2, where each reader opens a file from the given paths.
        """"""
        self.filepaths = filepaths
        self.readers = [PyPDF2.PdfFileReader(fp) for fp in filepaths]

    def merge_pdfs(self, output_filepath):
        """"""
        Read files in self.readers which stores handles to multiple PDF files.
        Merge them to one pdf and update the page number, then save in disk.
        :param output_filepath: str, ouput file path to save to
        :return: str, ""Merged PDFs saved at {output_filepath}"" if successfully merged
        >>> handler = PDFHandler(['a.pdf', 'b.pdf'])
        >>> handler.merge_pdfs('out.pdf')
        Merged PDFs saved at out.pdf
        """"""

    def extract_text_from_pdfs(self):
        """"""
        Extract text from pdf files in self.readers
        :return pdf_texts: list of str, each element is the text of one pdf file
        >>> handler = PDFHandler(['a.pdf', 'b.pdf'])
        >>> handler.extract_text_from_pdfs()
        ['Test a.pdf', 'Test b.pdf']
        """"""",PDFHandler,snippet_70,"import PyPDF2
from PyPDF2 import PdfFileWriter, PdfFileReader, PdfFileMerger

class PDFHandler:
    """"""
    The class allows merging multiple PDF files into one and extracting text from PDFs using PyPDF2 library.
    """"""

    def __init__(self, filepaths):
        """"""
        takes a list of file paths filepaths as a parameter.
        It creates a list named readers using PyPDF2, where each reader opens a file from the given paths.
        """"""
        self.filepaths = list(filepaths) if filepaths is not None else []
        self._file_objs = []
        self.readers = []
        for fp in self.filepaths:
            fobj = open(fp, ""rb"")
            self._file_objs.append(fobj)
            # Support both old and new PyPDF2 APIs
            try:
                reader = PyPDF2.PdfFileReader(fobj)
            except AttributeError:
                # Newer versions use PdfReader
                reader = PyPDF2.PdfReader(fobj)
            self.readers.append(reader)

    def merge_pdfs(self, output_filepath):
        """"""
        Read files in self.readers which stores handles to multiple PDF files.
        Merge them to one pdf and update the page number, then save in disk.
        :param output_filepath: str, ouput file path to save to
        :return: str, ""Merged PDFs saved at {output_filepath}"" if successfully merged
        >>> handler = PDFHandler(['a.pdf', 'b.pdf'])
        >>> handler.merge_pdfs('out.pdf')
        Merged PDFs saved at out.pdf
        """"""
        if not self.readers:
            raise ValueError(""No PDF readers available to merge."")

        # Prefer PdfFileMerger when available; fall back to writer if needed
        merger = None
        try:
            merger = PdfFileMerger()
        except Exception:
            merger = None

        if merger is not None:
            for rdr in self.readers:
                merger.append(rdr)
            with open(output_filepath, ""wb"") as out_f:
                merger.write(out_f)
            # close internal handles of merger if any
            try:
                merger.close()
            except Exception:
                pass
        else:
            # Fallback: manual copy using writer
            try:
                writer = PdfFileWriter()
            except Exception:
                writer = PyPDF2.PdfWriter()
            for rdr in self.readers:
                # Support both APIs
                try:
                    num_pages = rdr.getNumPages()
                    get_page = lambda i: rdr.getPage(i)
                except AttributeError:
                    num_pages = len(rdr.pages)
                    get_page = lambda i: rdr.pages[i]
                for i in range(num_pages):
                    page = get_page(i)
                    try:
                        writer.addPage(page)
                    except AttributeError:
                        writer.add_page(page)
            with open(output_filepath, ""wb"") as out_f:
                try:
                    writer.write(out_f)
                except TypeError:
                    writer.write(out_f)

        return f""Merged PDFs saved at {output_filepath}""

    def extract_text_from_pdfs(self):
        """"""
        Extract text from pdf files in self.readers
        :return pdf_texts: list of str, each element is the text of one pdf file
        >>> handler = PDFHandler(['a.pdf', 'b.pdf'])
        >>> handler.extract_text_from_pdfs()
        ['Test a.pdf', 'Test b.pdf']
        """"""
        texts = []
        for rdr in self.readers:
            # Determine page count and retrieval across versions
            try:
                num_pages = rdr.getNumPages()
                get_page = lambda i: rdr.getPage(i)
            except AttributeError:
                num_pages = len(rdr.pages)
                get_page = lambda i: rdr.pages[i]
            chunks = []
            for i in range(num_pages):
                page = get_page(i)
                # Support both extract_text and extractText
                txt = """"
                try:
                    txt = page.extract_text()
                except AttributeError:
                    try:
                        txt = page.extractText()
                    except Exception:
                        txt = """"
                if txt:
                    chunks.append(txt)
            texts.append("""".join(chunks))
        return texts

    def __del__(self):
        # Ensure file handles are closed
        for f in getattr(self, ""_file_objs"", []):
            try:
                f.close()
            except Exception:
                pass"
70,"class PersonRequest:
    def __init__(self, name: str, sex: str, phoneNumber: str):
        self.name = self._validate_name(name)
        self.sex = self._validate_sex(sex)
        self.phoneNumber = self._validate_phoneNumber(phoneNumber)

    def _validate_name(self, name: str) -> str:
        if not name:
            return None
        if len(name) > 33:
            return None
        return name

    def _validate_sex(self, sex: str) -> str:
        if sex not in [""Man"", ""Woman"", ""UGM""]:
            return None
        return sex

    def _validate_phoneNumber(self, phoneNumber: str) -> str:
        if not phoneNumber:
            return None
        if len(phoneNumber) != 11 or not phoneNumber.isdigit():
            return None
        return phoneNumber","class PersonRequest:
    """"""
    This class validates input personal information data and sets invalid fields to None based to specific rules.
    """"""

    def __init__(self, name: str, sex: str, phoneNumber: str):
        """"""
        Initialize PersonRequest object with the provided information.
        :param name: str, the name of the person
        :param sex: str, the sex of the person
        :param phoneNumber: str, the phone number of the person
        """"""
        self.name = self._validate_name(name)
        self.sex = self._validate_sex(sex)
        self.phoneNumber = self._validate_phoneNumber(phoneNumber)


    def _validate_name(self, name: str) -> str:
        """"""
        Validate the name and return it. If name is empty or exceeds 33 characters in length, set to None.
        :param name: str, the name to validate
        :return: str, the validated name or None if invalid
        """"""


    def _validate_sex(self, sex: str) -> str:
        """"""
        Validate the sex and return it. If sex is not Man, Woman, or UGM, set to None.
        :param sex: str, the sex to validate
        :return: str, the validated sex or None if invalid
        """"""

    def _validate_phoneNumber(self, phoneNumber: str) -> str:
        """"""
        Validate the phone number and return it. If phoneNumber is empty or not an 11 digit number, set to None.
        :param phoneNumber: str, the phone number to validate
        :return: str, the validated phone number or None if invalid
        """"""",PersonRequest,snippet_71,"class PersonRequest:
    """"""
    This class validates input personal information data and sets invalid fields to None based to specific rules.
    """"""

    def __init__(self, name: str, sex: str, phoneNumber: str):
        """"""
        Initialize PersonRequest object with the provided information.
        :param name: str, the name of the person
        :param sex: str, the sex of the person
        :param phoneNumber: str, the phone number of the person
        """"""
        self.name = self._validate_name(name)
        self.sex = self._validate_sex(sex)
        self.phoneNumber = self._validate_phoneNumber(phoneNumber)

    def _validate_name(self, name: str) -> str:
        """"""
        Validate the name and return it. If name is empty or exceeds 33 characters in length, set to None.
        :param name: str, the name to validate
        :return: str, the validated name or None if invalid
        """"""
        if not isinstance(name, str):
            return None
        name = name.strip()
        if not name or len(name) > 33:
            return None
        return name

    def _validate_sex(self, sex: str) -> str:
        """"""
        Validate the sex and return it. If sex is not Man, Woman, or UGM, set to None.
        :param sex: str, the sex to validate
        :return: str, the validated sex or None if invalid
        """"""
        if not isinstance(sex, str):
            return None
        sex = sex.strip()
        if sex not in {""Man"", ""Woman"", ""UGM""}:
            return None
        return sex

    def _validate_phoneNumber(self, phoneNumber: str) -> str:
        """"""
        Validate the phone number and return it. If phoneNumber is empty or not an 11 digit number, set to None.
        :param phoneNumber: str, the phone number to validate
        :return: str, the validated phone number or None if invalid
        """"""
        if not isinstance(phoneNumber, str):
            return None
        phoneNumber = phoneNumber.strip()
        if not phoneNumber or len(phoneNumber) != 11 or not phoneNumber.isdigit():
            return None
        return phoneNumber"
71,"class PushBoxGame:
    def __init__(self, map):
        self.map = map
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False

        self.init_game()

    def init_game(self):
        for row in range(len(self.map)):
            for col in range(len(self.map[row])):
                if self.map[row][col] == ""O"":
                    self.player_row = row
                    self.player_col = col
                elif self.map[row][col] == ""G"":
                    self.targets.append((row, col))
                    self.target_count += 1
                elif self.map[row][col] == ""X"":
                    self.boxes.append((row, col))

    def check_win(self):
        box_on_target_count = 0
        for box in self.boxes:
            if box in self.targets:
                box_on_target_count += 1
        if box_on_target_count == self.target_count:
            self.is_game_over = True
        return self.is_game_over

    def move(self, direction):
        new_player_row = self.player_row
        new_player_col = self.player_col

        if direction == ""w"":
            new_player_row -= 1
        elif direction == ""s"":
            new_player_row += 1
        elif direction == ""a"":
            new_player_col -= 1
        elif direction == ""d"":
            new_player_col += 1

        if self.map[new_player_row][new_player_col] != ""#"":
            if (new_player_row, new_player_col) in self.boxes:
                new_box_row = new_player_row + (new_player_row - self.player_row)
                new_box_col = new_player_col + (new_player_col - self.player_col)

                if self.map[new_box_row][new_box_col] != ""#"":
                    self.boxes.remove((new_player_row, new_player_col))
                    self.boxes.append((new_box_row, new_box_col))
                    self.player_row = new_player_row
                    self.player_col = new_player_col
            else:
                self.player_row = new_player_row
                self.player_col = new_player_col

        return self.check_win()","class PushBoxGame:
    """"""
    This class implements a functionality of a sokoban game, where the player needs to move boxes to designated targets in order to win.
    """"""

    def __init__(self, map):
        """"""
        Initialize the push box game with the map and various attributes.
        :param map: list[str], the map of the push box game, represented as a list of strings. 
            Each character on the map represents a different element, including the following:
            - '#' represents a wall that neither the player nor the box can pass through;
            - 'O' represents the initial position of the player;
            - 'G' represents the target position;
            - 'X' represents the initial position of the box.
        >>> map = [""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""]   
        >>> game = PushBoxGame(map)                
        """"""
        self.map = map
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False
        self.init_game()

    def init_game(self):
        """"""
        Initialize the game by setting the positions of the player, targets, and boxes based on the map.
        >>> game = PushBoxGame([""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""]) 
        >>> game.targets
        [(3, 3)]
        >>> game.boxes
        [(2, 2)]
        >>> game.player_row
        1
        >>> game.player_col
        1
        """"""

    def check_win(self):
        """"""
        Check if the game is won. The game is won when all the boxes are placed on target positions.
        And update the value of self.is_game_over.
        :return self.is_game_over: True if all the boxes are placed on target positions, or False otherwise.
        >>> game = PushBoxGame([""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""]) 
        >>> game.check_win()
        """"""


    def move(self, direction):
        """"""
        Move the player based on the specified direction and check if the game is won.
        :param direction: str, the direction of the player's movement. 
            It can be 'w', 's', 'a', or 'd' representing up, down, left, or right respectively.

        :return: True if the game is won, False otherwise.
        >>> game = PushBoxGame([""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""])       
        >>> game.print_map()
        # # # # # 
        # O     #
        #   X   #
        #     G #
        # # # # #
        >>> game.move('d')
        False
        >>> game.move('s')   
        False
        >>> game.move('a')   
        False
        >>> game.move('s') 
        False
        >>> game.move('d') 
        True
        """"""",PushBoxGame,snippet_72,"class PushBoxGame:
    """"""
    This class implements a functionality of a sokoban game, where the player needs to move boxes to designated targets in order to win.
    """"""

    def __init__(self, map):
        """"""
        Initialize the push box game with the map and various attributes.
        :param map: list[str], the map of the push box game, represented as a list of strings. 
            Each character on the map represents a different element, including the following:
            - '#' represents a wall that neither the player nor the box can pass through;
            - 'O' represents the initial position of the player;
            - 'G' represents the target position;
            - 'X' represents the initial position of the box.
        >>> map = [""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""]   
        >>> game = PushBoxGame(map)                
        """"""
        self.map = map[:]  # keep original static map for walls/targets
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False
        self.init_game()

    def init_game(self):
        """"""
        Initialize the game by setting the positions of the player, targets, and boxes based on the map.
        >>> game = PushBoxGame([""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""]) 
        >>> game.targets
        [(3, 3)]
        >>> game.boxes
        [(2, 2)]
        >>> game.player_row
        1
        >>> game.player_col
        1
        """"""
        self.targets = []
        self.boxes = []
        self.player_row = 0
        self.player_col = 0
        for r, row in enumerate(self.map):
            for c, ch in enumerate(row):
                if ch == 'O':
                    self.player_row, self.player_col = r, c
                elif ch == 'G':
                    self.targets.append((r, c))
                elif ch == 'X':
                    self.boxes.append((r, c))
        self.target_count = len(self.targets)
        self.is_game_over = False

    def _is_wall(self, r, c):
        if r < 0 or r >= len(self.map):
            return True
        if c < 0 or c >= len(self.map[r]):
            return True
        return self.map[r][c] == '#'

    def _is_box(self, r, c):
        return (r, c) in self.boxes

    def check_win(self):
        """"""
        Check if the game is won. The game is won when all the boxes are placed on target positions.
        And update the value of self.is_game_over.
        :return self.is_game_over: True if all the boxes are placed on target positions, or False otherwise.
        >>> game = PushBoxGame([""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""]) 
        >>> game.check_win()
        """"""
        targets_set = set(self.targets)
        self.is_game_over = len(self.boxes) > 0 and all(b in targets_set for b in self.boxes)
        return self.is_game_over

    def move(self, direction):
        """"""
        Move the player based on the specified direction and check if the game is won.
        :param direction: str, the direction of the player's movement. 
            It can be 'w', 's', 'a', or 'd' representing up, down, left, or right respectively.

        :return: True if the game is won, False otherwise.
        >>> game = PushBoxGame([""#####"", ""#O  #"", ""# X #"", ""#  G#"", ""#####""])       
        >>> game.print_map()
        # # # # # 
        # O     #
        #   X   #
        #     G #
        # # # # #
        >>> game.move('d')
        False
        >>> game.move('s')   
        False
        >>> game.move('a')   
        False
        >>> game.move('s') 
        False
        >>> game.move('d') 
        True
        """"""
        if self.is_game_over:
            return True

        dir_map = {
            'w': (-1, 0),
            's': (1, 0),
            'a': (0, -1),
            'd': (0, 1)
        }
        if direction not in dir_map:
            return self.check_win()

        dr, dc = dir_map[direction]
        nr, nc = self.player_row + dr, self.player_col + dc

        if self._is_wall(nr, nc):
            return self.check_win()

        if self._is_box(nr, nc):
            br, bc = nr + dr, nc + dc
            if self._is_wall(br, bc) or self._is_box(br, bc):
                return self.check_win()
            # push box
            # update box position
            idx = self.boxes.index((nr, nc))
            self.boxes[idx] = (br, bc)
            # move player
            self.player_row, self.player_col = nr, nc
        else:
            # move into empty/target cell
            self.player_row, self.player_col = nr, nc

        return self.check_win()

    def print_map(self):
        rows = len(self.map)
        for r in range(rows):
            line_chars = []
            cols = len(self.map[r])
            for c in range(cols):
                ch = ' '
                if self.map[r][c] == '#':
                    ch = '#'
                else:
                    if (r, c) == (self.player_row, self.player_col):
                        ch = 'O'
                    elif (r, c) in self.boxes:
                        ch = 'X'
                    elif self.map[r][c] == 'G':
                        ch = 'G'
                    else:
                        ch = ' '
                line_chars.append(ch)
            print(' '.join(line_chars) + ' ')"
72,"import re


class RegexUtils:

    def match(self, pattern, text):
        ans = re.match(pattern, text)
        if ans:
            return True
        else:
            return False

    def findall(self, pattern, text):
        return re.findall(pattern, text)

    def split(self, pattern, text):
        return re.split(pattern, text)

    def sub(self, pattern, replacement, text):
        return re.sub(pattern, replacement, text)

    def generate_email_pattern(self):
        pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return pattern

    def generate_phone_number_pattern(self):
        pattern = r'\b\d{3}-\d{3}-\d{4}\b'
        return pattern

    def generate_split_sentences_pattern(self):
        pattern = r'[.!?][\s]{1,2}(?=[A-Z])'
        return pattern

    def split_sentences(self, text):
        pattern = self.generate_split_sentences_pattern()
        return self.split(pattern, text)

    def validate_phone_number(self, phone_number):
        pattern = self.generate_phone_number_pattern()
        return self.match(pattern, phone_number)

    def extract_email(self, text):
        pattern = self.generate_email_pattern()
        return self.findall(pattern, text)","class RegexUtils:
    """"""
    The class provides to match, find all occurrences, split, and substitute text using regular expressions. It also includes predefined patterns, validating phone numbers and extracting email addresses.
    """"""


    def match(self, pattern, text):
        """"""
        Check if the text matches the regular expression
        :param pattern: string, Regular expression pattern
        :param text: string, Text to match
        :return: True or False, representing whether the text matches the regular expression or not
        >>> ru = RegexUtils()
        >>> ru.match(r'\b\d{3}-\d{3}-\d{4}\b', ""123-456-7890"")
        True
        """"""

    def findall(self, pattern, text):
        """"""
        Find all matching substrings and return a list of all matching substrings
        :param pattern: string, Regular expression pattern
        :param text: string, Text to match
        :return: list of string, List of all matching substrings
        >>> ru = RegexUtils()
        >>> ru.findall(r'\b\d{3}-\d{3}-\d{4}\b', ""123-456-7890 abiguygusu 876-286-9876 kjgufwycs 987-762-9767"")
        ['123-456-7890', '876-286-9876', '987-762-9767']
        """"""

    def split(self, pattern, text):
        """"""
        Split text based on regular expression patterns and return a list of substrings
        :param pattern: string, Regular expression pattern
        :param text: string, Text to be split
        :return: list of string, List of substrings after splitting
        >>> ru = RegexUtils()
        >>> ru.split(r'\b\d{3}-\d{3}-\d{4}\b', ""123-456-7890 abiguygusu 876-286-9876 kjgufwycs 987-762-9767"")
        ['', ' abiguygusu ', ' kjgufwycs ', '']
        """"""

    def sub(self, pattern, replacement, text):
        """"""
        Replace the substring matched by a regular expression with the specified string
        :param pattern: string, Regular expression pattern
        :param replacement: Text to replace with
        :param text: string, Text to be replaced
        :return: string, Text after replacement
        >>> ru = RegexUtils()
        >>> ru.sub(r'\b\d{3}-\d{3}-\d{4}\b', 'phone num',  ""123-456-7890 abiguygusu 876-286-9876 kjgufwycs 987-762-9767"")
        'phone num abiguygusu phone num kjgufwycs phone num'
        """"""

    def generate_email_pattern(self):
        """"""
        Generate regular expression patterns that match email addresses
        :return: string, regular expression patterns that match email addresses
        >>> ru = RegexUtils()
        >>> ru.generate_email_pattern()
        '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        """"""

    def generate_phone_number_pattern(self):
        """"""
        Generate regular expression patterns that match phone numbers
        :return: string, regular expression patterns that match phone numbers
        >>> ru = RegexUtils()
        >>> ru.generate_phone_number_pattern()
        '\b\d{3}-\d{3}-\d{4}\b'
        """"""

    def generate_split_sentences_pattern(self):
        """"""
        Generate regular expression patterns that match the middle characters of two sentences
        :return: string, regular expression patterns that match the middle characters of two sentences
        >>> ru = RegexUtils()
        >>> ru.generate_split_sentences_pattern()
        '[.!?][\s]{1,2}(?=[A-Z])'
        """"""

    def split_sentences(self, text):
        """"""
        Split the text into a list of sentences without Punctuation except the last sentence
        :param text: Text to be split
        :return: Split Text List
        >>> ru = RegexUtils()
        >>> ru.split_sentences(""Aaa. Bbbb? Ccc!"")
        ['Aaa', 'Bbbb', 'Ccc!']
        """"""

    def validate_phone_number(self, phone_number):
        """"""
        Verify if the phone number is valid
        :param phone_number: Phone number to be verified
        :return: True or False, indicating whether the phone number is valid
        >>> ru = RegexUtils()
        >>> ru.validate_phone_number(""123-456-7890"")
        True
        """"""

    def extract_email(self, text):
        """"""
        Extract all email addresses from the text
        :param text: string, input text
        :return: list of string, All extracted email addresses
        >>> ru = RegexUtils()
        >>> ru.extract_email(""abcdefg@163.com ygusyfysy@126.com wljduyuv@qq.com"")
        ['abcdefg@163.com', 'ygusyfysy@126.com', 'wljduyuv@qq.com']
        """"""",RegexUtils,snippet_73,"import re

class RegexUtils:
    """"""
    The class provides to match, find all occurrences, split, and substitute text using regular expressions. It also includes predefined patterns, validating phone numbers and extracting email addresses.
    """"""

    def match(self, pattern, text):
        """"""
        Check if the text matches the regular expression
        :param pattern: string, Regular expression pattern
        :param text: string, Text to match
        :return: True or False, representing whether the text matches the regular expression or not
        >>> ru = RegexUtils()
        >>> ru.match(r'\b\d{3}-\d{3}-\d{4}\b', ""123-456-7890"")
        True
        """"""
        return re.fullmatch(pattern, text) is not None

    def findall(self, pattern, text):
        """"""
        Find all matching substrings and return a list of all matching substrings
        :param pattern: string, Regular expression pattern
        :param text: string, Text to match
        :return: list of string, List of all matching substrings
        >>> ru = RegexUtils()
        >>> ru.findall(r'\b\d{3}-\d{3}-\d{4}\b', ""123-456-7890 abiguygusu 876-286-9876 kjgufwycs 987-762-9767"")
        ['123-456-7890', '876-286-9876', '987-762-9767']
        """"""
        return re.findall(pattern, text)

    def split(self, pattern, text):
        """"""
        Split text based on regular expression patterns and return a list of substrings
        :param pattern: string, Regular expression pattern
        :param text: string, Text to be split
        :return: list of string, List of substrings after splitting
        >>> ru = RegexUtils()
        >>> ru.split(r'\b\d{3}-\d{3}-\d{4}\b', ""123-456-7890 abiguygusu 876-286-9876 kjgufwycs 987-762-9767"")
        ['', ' abiguygusu ', ' kjgufwycs ', '']
        """"""
        return re.split(pattern, text)

    def sub(self, pattern, replacement, text):
        """"""
        Replace the substring matched by a regular expression with the specified string
        :param pattern: string, Regular expression pattern
        :param replacement: Text to replace with
        :param text: string, Text to be replaced
        :return: string, Text after replacement
        >>> ru = RegexUtils()
        >>> ru.sub(r'\b\d{3}-\d{3}-\d{4}\b', 'phone num',  ""123-456-7890 abiguygusu 876-286-9876 kjgufwycs 987-762-9767"")
        'phone num abiguygusu phone num kjgufwycs phone num'
        """"""
        return re.sub(pattern, replacement, text)

    def generate_email_pattern(self):
        """"""
        Generate regular expression patterns that match email addresses
        :return: string, regular expression patterns that match email addresses
        >>> ru = RegexUtils()
        >>> ru.generate_email_pattern()
        '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        """"""
        return r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

    def generate_phone_number_pattern(self):
        """"""
        Generate regular expression patterns that match phone numbers
        :return: string, regular expression patterns that match phone numbers
        >>> ru = RegexUtils()
        >>> ru.generate_phone_number_pattern()
        '\b\d{3}-\d{3}-\d{4}\b'
        """"""
        return r'\b\d{3}-\d{3}-\d{4}\b'

    def generate_split_sentences_pattern(self):
        """"""
        Generate regular expression patterns that match the middle characters of two sentences
        :return: string, regular expression patterns that match the middle characters of two sentences
        >>> ru = RegexUtils()
        >>> ru.generate_split_sentences_pattern()
        '[.!?][\s]{1,2}(?=[A-Z])'
        """"""
        return r'[.!?][\s]{1,2}(?=[A-Z])'

    def split_sentences(self, text):
        """"""
        Split the text into a list of sentences without Punctuation except the last sentence
        :param text: Text to be split
        :return: Split Text List
        >>> ru = RegexUtils()
        >>> ru.split_sentences(""Aaa. Bbbb? Ccc!"")
        ['Aaa', 'Bbbb', 'Ccc!']
        """"""
        pattern = self.generate_split_sentences_pattern()
        return re.split(pattern, text)

    def validate_phone_number(self, phone_number):
        """"""
        Verify if the phone number is valid
        :param phone_number: Phone number to be verified
        :return: True or False, indicating whether the phone number is valid
        >>> ru = RegexUtils()
        >>> ru.validate_phone_number(""123-456-7890"")
        True
        """"""
        return re.fullmatch(self.generate_phone_number_pattern(), phone_number) is not None

    def extract_email(self, text):
        """"""
        Extract all email addresses from the text
        :param text: string, input text
        :return: list of string, All extracted email addresses
        >>> ru = RegexUtils()
        >>> ru.extract_email(""abcdefg@163.com ygusyfysy@126.com wljduyuv@qq.com"")
        ['abcdefg@163.com', 'ygusyfysy@126.com', 'wljduyuv@qq.com']
        """"""
        return re.findall(self.generate_email_pattern(), text)"
73,"class RPGCharacter:
    def __init__(self, name, hp, attack_power, defense, level=1):
        self.name = name
        self.hp = hp
        self.attack_power = attack_power
        self.defense = defense
        self.level = level
        self.exp = 0

    def attack(self, other_character):
        damage = max(self.attack_power - other_character.defense, 1)
        other_character.hp -= damage

    def heal(self):
        self.hp += 10
        if self.hp > 100:
            self.hp = 100
        return self.hp

    def gain_exp(self, amount):
        while amount != 0:
            if self.exp + amount >= self.level * 100:
                amount -= (self.level * 100 - self.exp)
                self.level_up()
            else:
                self.exp += amount
                amount = 0

    def level_up(self):
        if self.level < 100:
            self.level += 1
            self.exp = 0
            self.hp += 20
            self.attack_power += 5
            self.defense += 5
        return self.level, self.hp, self.attack_power, self.defense

    def is_alive(self):
        return self.hp > 0","class RPGCharacter:
    """"""
    The class represents a role-playing game character, which allows to attack other characters, heal, gain experience, level up, and check if the character is alive.
    """"""

    def __init__(self, name, hp, attack_power, defense, level=1):
        """"""
        Initialize an RPG character object.
        :param name: strm, the name of the character.
        :param hp: int, The health points of the character.
        :param attack_power: int, the attack power of the character.
        :param defense: int, the defense points of the character.
        :param level: int, the level of the character. Default is 1.
        """"""
        self.name = name
        self.hp = hp
        self.attack_power = attack_power
        self.defense = defense
        self.level = level
        self.exp = 0

    def attack(self, other_character):
        """"""
        Attack another character. The damage caused needs to offset the defense value.
        :param other_character: str, The character being attacked.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_2 = RPGCharacter('player 2', 100, 7, 2)
        >>> player_1.attack(player_2)
        >>> player_2.hp
        92
        """"""

    def heal(self):
        """"""
        Heal the character with 10 hp and the max hp is 100.
        :return: int, the current health points after healing.
        >>> player_1 = RPGCharacter('player 1', 93, 10, 3)
        >>> player_1.heal()
        100
        """"""

    def gain_exp(self, amount):
        """"""
        Gain experience points for the character and level_up when the exp has reached the values that is 100 times the current level
        The experience that overflows should be used to calculate the next leve up untill exhausts
        :param amount: int, the amount of experience points to gain.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_1.gain_exp(1100)
        >>> player_1.exp
        100
        >>> player_1.level
        5
        """"""

    def level_up(self):
         """"""
        Level up the character and return to zero experience points, increase hp by 20 points, attack power and defense points by 5 points.
        max level is 100
        :return: tuple[int, int, int, int], the new level, health points, attack power, and defense points after leveling up.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_1.level_up()
        (2, 120, 15, 8)
        """"""

    def is_alive(self):
        """"""
        Check if player is alive.
        :return: True if the hp is larger than 0, or False otherwise.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_1.is_alive()
        True
        """"""",RPGCharacter,snippet_74,"class RPGCharacter:
    """"""
    The class represents a role-playing game character, which allows to attack other characters, heal, gain experience, level up, and check if the character is alive.
    """"""

    def __init__(self, name, hp, attack_power, defense, level=1):
        """"""
        Initialize an RPG character object.
        :param name: strm, the name of the character.
        :param hp: int, The health points of the character.
        :param attack_power: int, the attack power of the character.
        :param defense: int, the defense points of the character.
        :param level: int, the level of the character. Default is 1.
        """"""
        self.name = name
        self.hp = hp
        self.attack_power = attack_power
        self.defense = defense
        self.level = level
        self.exp = 0

    def attack(self, other_character):
        """"""
        Attack another character. The damage caused needs to offset the defense value.
        :param other_character: str, The character being attacked.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_2 = RPGCharacter('player 2', 100, 7, 2)
        >>> player_1.attack(player_2)
        >>> player_2.hp
        92
        """"""
        if not isinstance(other_character, RPGCharacter):
            return
        damage = max(0, self.attack_power - other_character.defense)
        other_character.hp = max(0, other_character.hp - damage)

    def heal(self):
        """"""
        Heal the character with 10 hp and the max hp is 100.
        :return: int, the current health points after healing.
        >>> player_1 = RPGCharacter('player 1', 93, 10, 3)
        >>> player_1.heal()
        100
        """"""
        self.hp = min(100, self.hp + 10)
        return self.hp

    def gain_exp(self, amount):
        """"""
        Gain experience points for the character and level_up when the exp has reached the values that is 100 times the current level
        The experience that overflows should be used to calculate the next leve up untill exhausts
        :param amount: int, the amount of experience points to gain.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_1.gain_exp(1100)
        >>> player_1.exp
        100
        >>> player_1.level
        5
        """"""
        if amount <= 0:
            return
        self.exp += amount
        while self.level < 100:
            threshold = 100 * self.level
            if self.exp >= threshold:
                overflow = self.exp - threshold
                self.level_up()
                self.exp = overflow
            else:
                break

    def level_up(self):
        """"""
        Level up the character and return to zero experience points, increase hp by 20 points, attack power and defense points by 5 points.
        max level is 100
        :return: tuple[int, int, int, int], the new level, health points, attack power, and defense points after leveling up.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_1.level_up()
        (2, 120, 15, 8)
        """"""
        if self.level >= 100:
            self.exp = 0
            return (self.level, self.hp, self.attack_power, self.defense)
        self.level += 1
        self.exp = 0
        self.hp += 20
        self.attack_power += 5
        self.defense += 5
        return (self.level, self.hp, self.attack_power, self.defense)

    def is_alive(self):
        """"""
        Check if player is alive.
        :return: True if the hp is larger than 0, or False otherwise.
        >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        >>> player_1.is_alive()
        True
        """"""
        return self.hp > 0"
74,"class Server:

    def __init__(self):
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}

    def add_white_list(self, addr):
        if addr in self.white_list:
            return False
        else:
            self.white_list.append(addr)
            return self.white_list

    def del_white_list(self, addr):
        if addr not in self.white_list:
            return False
        else:
            self.white_list.remove(addr)
            return self.white_list

    def recv(self, info):
        if not isinstance(info, dict) or ""addr"" not in info or ""content"" not in info:
            return -1
        addr = info[""addr""]
        content = info[""content""]
        if addr not in self.white_list:
            return False
        else:
            self.receive_struct = {""addr"": addr, ""content"": content}
            return self.receive_struct[""content""]

    def send(self, info):
        if not isinstance(info, dict) or ""addr"" not in info or ""content"" not in info:
            return ""info structure is not correct""
        self.send_struct = {""addr"": info[""addr""], ""content"": info[""content""]}

    def show(self, type):
        if type == ""send"":
            return self.send_struct
        elif type == ""receive"":
            return self.receive_struct
        else:
            return False","class Server:
    """"""
    This is a class as a server, which handles a white list, message sending and receiving, and information display.
    """"""


    def __init__(self):
        """"""
        Initialize the whitelist as an empty list, and initialize the sending and receiving information as an empty dictionary
        """"""
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}



    def add_white_list(self, addr):
        """"""
        Add an address to the whitelist and do nothing if it already exists
        :param addr: int, address to be added
        :return: new whitelist, return False if the address already exists
        >>> server = Server()
        >>> server.add_white_list(88)
        [88]
        """"""

    def del_white_list(self, addr):
        """"""
        Remove an address from the whitelist and do nothing if it does not exist
        :param addr: int, address to be deleted
        :return: new whitelist, return False if the address does not exist
        >>> server.add_white_list(88)
        >>> server.del_white_list(88)
        []
        """"""

    def recv(self, info):
        """"""
        Receive information containing address and content. If the address is on the whitelist, receive the content; otherwise, do not receive it
        :param info: dict, information dictionary containing address and content
        :return: if successfully received, return the content of the infomation; otherwise, return False
        >>> server.recv({""addr"":88,""content"":""abc""})
        abc
        """"""

    def send(self, info):
        """"""
        Send information containing address and content
        :param info: dict, information dictionary containing address and content
        :return: if successfully sent, return nothing; otherwise, return a string indicating an error message
        >>> server.send({""addr"":66,""content"":""ABC""})
        self.send_struct = {""addr"":66,""content"":""ABC""}
        """"""

    def show(self, type):
        """"""
        Returns struct of the specified type
        :param type: string, the type of struct to be returned, which can be 'send' or 'receive'
        :return: if type is equal to 'send' or 'receive', return the corresponding struct; otherwise, return False
        >>> server.recv({""addr"":88,""content"":""abc""})
        >>> server.send({""addr"":66,""content"":""ABC""})
        >>> server.show(""send"")
        {""addr"":66,""content"":""ABC""}
        """"""",Server,snippet_75,"class Server:
    """"""
    This is a class as a server, which handles a white list, message sending and receiving, and information display.
    """"""

    def __init__(self):
        """"""
        Initialize the whitelist as an empty list, and initialize the sending and receiving information as an empty dictionary
        """"""
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}

    def add_white_list(self, addr):
        """"""
        Add an address to the whitelist and do nothing if it already exists
        :param addr: int, address to be added
        :return: new whitelist, return False if the address already exists
        >>> server = Server()
        >>> server.add_white_list(88)
        [88]
        """"""
        if addr in self.white_list:
            return False
        self.white_list.append(addr)
        return self.white_list

    def del_white_list(self, addr):
        """"""
        Remove an address from the whitelist and do nothing if it does not exist
        :param addr: int, address to be deleted
        :return: new whitelist, return False if the address does not exist
        >>> server.add_white_list(88)
        >>> server.del_white_list(88)
        []
        """"""
        if addr not in self.white_list:
            return False
        self.white_list.remove(addr)
        return self.white_list

    def recv(self, info):
        """"""
        Receive information containing address and content. If the address is on the whitelist, receive the content; otherwise, do not receive it
        :param info: dict, information dictionary containing address and content
        :return: if successfully received, return the content of the infomation; otherwise, return False
        >>> server.recv({""addr"":88,""content"":""abc""})
        abc
        """"""
        if not isinstance(info, dict):
            return False
        if ""addr"" not in info or ""content"" not in info:
            return False
        addr = info.get(""addr"")
        if addr not in self.white_list:
            return False
        self.receive_struct = {""addr"": info.get(""addr""), ""content"": info.get(""content"")}
        return self.receive_struct.get(""content"")

    def send(self, info):
        """"""
        Send information containing address and content
        :param info: dict, information dictionary containing address and content
        :return: if successfully sent, return nothing; otherwise, return a string indicating an error message
        >>> server.send({""addr"":66,""content"":""ABC""})
        self.send_struct = {""addr"":66,""content"":""ABC""}
        """"""
        if not isinstance(info, dict):
            return ""Invalid info: not a dict""
        if ""addr"" not in info or ""content"" not in info:
            return ""Invalid info: missing 'addr' or 'content'""
        self.send_struct = {""addr"": info.get(""addr""), ""content"": info.get(""content"")}
        return None

    def show(self, type):
        """"""
        Returns struct of the specified type
        :param type: string, the type of struct to be returned, which can be 'send' or 'receive'
        :return: if type is equal to 'send' or 'receive', return the corresponding struct; otherwise, return False
        >>> server.recv({""addr"":88,""content"":""abc""})
        >>> server.send({""addr"":66,""content"":""ABC""})
        >>> server.show(""send"")
        {""addr"":66,""content"":""ABC""}
        """"""
        if type == ""send"":
            return self.send_struct
        if type == ""receive"":
            return self.receive_struct
        return False"
75,"class ShoppingCart:
    def __init__(self):
        self.items = {}

    def add_item(self, item, price, quantity=1):
        if item in self.items:
            self.items[item] = {'price': price, 'quantity': quantity}
        else:
            self.items[item] = {'price': price, 'quantity': quantity}

    def remove_item(self, item, quantity=1):
        if item in self.items:
            self.items[item]['quantity'] -= quantity
        else:
            pass

    def view_items(self) -> dict:
        return self.items

    def total_price(self) -> float:
        return sum([item['quantity'] * item['price'] for item in self.items.values()])","class ShoppingCart:
    """"""
    The class manages items, their prices, quantities, and allows to for add, removie, view items, and calculate the total price.
    """"""

    def __init__(self):
        """"""
        Initialize the items representing the shopping list as an empty dictionary
        """"""
        self.items = {}


    def add_item(self, item, price, quantity=1):
        """"""
        Add item information to the shopping list items, including price and quantity. The default quantity is 1
        :param item: string, Item to be added
        :param price: float, The price of the item
        :param quantity:int, The number of items, defaults to 1
        :return:None
        >>> shoppingcart = ShoppingCart()
        >>> shoppingcart.add_item(""apple"", 1, 5)
        self.items = {""apple"":{""price"":1, ""quantity"":5}}
        """"""


    def remove_item(self, item, quantity=1):
        """"""
        Subtract the specified quantity of item from the shopping list items
        :param item:string, Item to be subtracted in quantity
        :param quantity:int, Quantity to be subtracted
        :return:None
        >>> shoppingcart.add_item(""apple"", 1, 5)
        >>> shoppingcart.remove_item(""apple"", 3)
        self.items = {""apple"":{""price"":1, ""quantity"":2}}
        """"""


    def view_items(self) -> dict:
        """"""
        Return the current shopping list items
        :return:dict, the current shopping list items
        >>> shoppingcart.add_item(""apple"", 1, 5)
        >>> shoppingcart.remove_item(""apple"", 3)
        >>> shoppingcart.view_items()
        {""apple"":{""price"":1, ""quantity"":2}}
        """"""


    def total_price(self) -> float:
        """"""
        Calculate the total price of all items in the shopping list, which is the quantity of each item multiplied by the price
        :return:float, the total price of all items in the shopping list
        >>> shoppingcart = ShoppingCart()
        >>> shoppingcart.add_item(""apple"", 1, 5)
        >>> shoppingcart.add_item(""banana"", 2, 3)
        >>> shoppingcart.total_price()
        11.0
        """"""",ShoppingCart,snippet_76,"class ShoppingCart:
    """"""
    The class manages items, their prices, quantities, and allows to for add, removie, view items, and calculate the total price.
    """"""

    def __init__(self):
        """"""
        Initialize the items representing the shopping list as an empty dictionary
        """"""
        self.items = {}

    def add_item(self, item, price, quantity=1):
        """"""
        Add item information to the shopping list items, including price and quantity. The default quantity is 1
        :param item: string, Item to be added
        :param price: float, The price of the item
        :param quantity:int, The number of items, defaults to 1
        :return:None
        >>> shoppingcart = ShoppingCart()
        >>> shoppingcart.add_item(""apple"", 1, 5)
        self.items = {""apple"":{""price"":1, ""quantity"":5}}
        """"""
        if not isinstance(item, str) or not item:
            raise ValueError(""item must be a non-empty string"")
        if not isinstance(price, (int, float)) or price < 0:
            raise ValueError(""price must be a non-negative number"")
        if not isinstance(quantity, int) or quantity < 1:
            raise ValueError(""quantity must be a positive integer"")

        if item in self.items:
            self.items[item][""quantity""] += quantity
            self.items[item][""price""] = price
        else:
            self.items[item] = {""price"": float(price), ""quantity"": quantity}

    def remove_item(self, item, quantity=1):
        """"""
        Subtract the specified quantity of item from the shopping list items
        :param item:string, Item to be subtracted in quantity
        :param quantity:int, Quantity to be subtracted
        :return:None
        >>> shoppingcart.add_item(""apple"", 1, 5)
        >>> shoppingcart.remove_item(""apple"", 3)
        self.items = {""apple"":{""price"":1, ""quantity"":2}}
        """"""
        if not isinstance(item, str) or not item:
            raise ValueError(""item must be a non-empty string"")
        if not isinstance(quantity, int) or quantity < 1:
            raise ValueError(""quantity must be a positive integer"")

        if item not in self.items:
            return

        current_qty = self.items[item][""quantity""]
        if quantity >= current_qty:
            del self.items[item]
        else:
            self.items[item][""quantity""] = current_qty - quantity

    def view_items(self) -> dict:
        """"""
        Return the current shopping list items
        :return:dict, the current shopping list items
        >>> shoppingcart.add_item(""apple"", 1, 5)
        >>> shoppingcart.remove_item(""apple"", 3)
        >>> shoppingcart.view_items()
        {""apple"":{""price"":1, ""quantity"":2}}
        """"""
        return {k: {""price"": v[""price""], ""quantity"": v[""quantity""]} for k, v in self.items.items()}

    def total_price(self) -> float:
        """"""
        Calculate the total price of all items in the shopping list, which is the quantity of each item multiplied by the price
        :return:float, the total price of all items in the shopping list
        >>> shoppingcart = ShoppingCart()
        >>> shoppingcart.add_item(""apple"", 1, 5)
        >>> shoppingcart.add_item(""banana"", 2, 3)
        >>> shoppingcart.total_price()
        11.0
        """"""
        return float(sum(info[""price""] * info[""quantity""] for info in self.items.values()))"
76,"class SignInSystem:
    def __init__(self):
        self.users = {}

    def add_user(self, username):
        if username in self.users:
            return False
        else:
            self.users[username] = False
            return True

    def sign_in(self, username):
        if username not in self.users:
            return False
        else:
            self.users[username] = True
            return True

    def check_sign_in(self, username):
        if username not in self.users:
            return False
        else:
            if self.users[username]:
                return True
            else:
                return False

    def all_signed_in(self):
        if all(self.users.values()):
            return True
        else:
            return False

    def all_not_signed_in(self):
        not_signed_in_users = []
        for username, signed_in in self.users.items():
            if not signed_in:
                not_signed_in_users.append(username)
        return not_signed_in_users","class SignInSystem:
    """"""
    This is a class as sigin in system, including adding users, signing in/out, checking sign-in status, and retrieving signed-in/not signed-in users.
    """"""

    def __init__(self):
        """"""
        Initialize the sign-in system.
        """"""
        self.users = {}

    def add_user(self, username):
        """"""
        Add a user to the sign-in system if the user wasn't in the self.users.
        And the initial state is False.
        :param username: str, the username to be added.
        :return: bool, True if the user is added successfully, False if the user already exists.
        >>> signInSystem.add_user(""mike"")
        True
        >>> signInSystem.add_user(""mike"")
        False
        """"""

    def sign_in(self, username):
        """"""
        Sign in a user if the user was in the self.users and change the state to True.
        :param username: str, the username to be signed in.
        :return: bool, True if the user is signed in successfully, False if the user does not exist.
        >>> signInSystem.sign_in(""mike"")
        True
        >>> signInSystem.sign_in(""mik"")
        False
        """"""

    def check_sign_in(self, username):
        """"""
        Check if a user is signed in.
        :param username: str, the username to be checked.
        :return: bool, True if the user is signed in, False if the user does not exist or is not signed in.
        >>> signInSystem.check_sign_in(""jack"")
        False
        >>> signInSystem.add_user(""jack"")
        >>> signInSystem.check_sign_in(""jack"")
        >>> signInSystem.sign_in(""jack"")
        >>> signInSystem.check_sign_in(""jack"")
        True
        """"""

    def all_signed_in(self):
        """"""
        Check if all users are signed in.
        :return: bool, True if all users are signed in, False otherwise.
        >>> signInSystem.add_user(""jack"")
        True
        >>> signInSystem.sign_in(""jack"")
        >>> signInSystem.all_signed_in()
        True
        """"""

    def all_not_signed_in(self):
        """"""
        Get a list of usernames that are not signed in.
        :return: list[str], a list of usernames that are not signed in.
        >>> signInSystem = SignInSystem()
        >>> signInSystem.add_user(""a"")
        True
        >>> signInSystem.add_user(""b"")
        True
        >>> signInSystem.all_not_signed_in()
        ['a', 'b']
        """"""",SignInSystem,snippet_77,"class SignInSystem:
    """"""
    This is a class as sigin in system, including adding users, signing in/out, checking sign-in status, and retrieving signed-in/not signed-in users.
    """"""

    def __init__(self):
        """"""
        Initialize the sign-in system.
        """"""
        self.users = {}

    def add_user(self, username):
        """"""
        Add a user to the sign-in system if the user wasn't in the self.users.
        And the initial state is False.
        :param username: str, the username to be added.
        :return: bool, True if the user is added successfully, False if the user already exists.
        >>> signInSystem.add_user(""mike"")
        True
        >>> signInSystem.add_user(""mike"")
        False
        """"""
        if username in self.users:
            return False
        self.users[username] = False
        return True

    def sign_in(self, username):
        """"""
        Sign in a user if the user was in the self.users and change the state to True.
        :param username: str, the username to be signed in.
        :return: bool, True if the user is signed in successfully, False if the user does not exist.
        >>> signInSystem.sign_in(""mike"")
        True
        >>> signInSystem.sign_in(""mik"")
        False
        """"""
        if username not in self.users:
            return False
        self.users[username] = True
        return True

    def check_sign_in(self, username):
        """"""
        Check if a user is signed in.
        :param username: str, the username to be checked.
        :return: bool, True if the user is signed in, False if the user does not exist or is not signed in.
        >>> signInSystem.check_sign_in(""jack"")
        False
        >>> signInSystem.add_user(""jack"")
        >>> signInSystem.check_sign_in(""jack"")
        >>> signInSystem.sign_in(""jack"")
        >>> signInSystem.check_sign_in(""jack"")
        True
        """"""
        return self.users.get(username, False) is True

    def all_signed_in(self):
        """"""
        Check if all users are signed in.
        :return: bool, True if all users are signed in, False otherwise.
        >>> signInSystem.add_user(""jack"")
        True
        >>> signInSystem.sign_in(""jack"")
        >>> signInSystem.all_signed_in()
        True
        """"""
        return all(self.users.values())

    def all_not_signed_in(self):
        """"""
        Get a list of usernames that are not signed in.
        :return: list[str], a list of usernames that are not signed in.
        >>> signInSystem = SignInSystem()
        >>> signInSystem.add_user(""a"")
        True
        >>> signInSystem.add_user(""b"")
        True
        >>> signInSystem.all_not_signed_in()
        ['a', 'b']
        """"""
        return [username for username, signed_in in self.users.items() if not signed_in]"
77,"import random


class Snake:
    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        self.length = 1
        self.SCREEN_WIDTH = SCREEN_WIDTH
        self.SCREEN_HEIGHT = SCREEN_HEIGHT
        self.BLOCK_SIZE = BLOCK_SIZE
        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]
        self.score = 0
        self.food_position = food_position

    def move(self, direction):
        cur = self.positions[0]
        x, y = direction

        new = (
            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),
            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,
        )

        if new == self.food_position:
            self.eat_food()

        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def random_food_position(self):
        while self.food_position in self.positions:
            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,
                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)

    def reset(self):
        self.length = 1
        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]
        self.score = 0
        self.random_food_position()

    def eat_food(self):
        self.length += 1
        self.score += 100
        self.random_food_position()","class Snake:
    """"""
    The class is a snake game, with allows snake to move and eat food, and also enables to reset, and generat a random food position.
    """"""

    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        """"""
        Initialize the length of the snake, screen width, screen height, block size, snake head position, score, and food position.
        :param SCREEN_WIDTH: int
        :param SCREEN_HEIGHT: int
        :param BLOCK_SIZE: int, Size of moving units
        :param food_position: tuple, representing the position(x, y) of food.
        """"""
        self.length = 1
        self.SCREEN_WIDTH = SCREEN_WIDTH
        self.SCREEN_HEIGHT = SCREEN_HEIGHT
        self.BLOCK_SIZE = BLOCK_SIZE
        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]
        self.score = 0
        self.food_position = food_position


    def move(self, direction):
        """"""
        Move the snake in the specified direction. If the new position of the snake's head is equal to the position of the food, then eat the food; If the position of the snake's head is equal to the position of its body, then start over, otherwise its own length plus one.
        :param direction: tuple, representing the direction of movement (x, y).
        :return: None
        >>> snake.move((1,1))
        self.length = 1
        self.positions = [(51, 51), (50, 50)]
        self.score = 10
        """"""


    def random_food_position(self):
        """"""
        Randomly generate a new food position, but don't place it on the snake.
        :return: None, Change the food position
        """"""


    def reset(self):
        """"""
        Reset the snake to its initial state. Set the length to 1, the snake head position to ((SCREEN_WIDTH/2), (SCREEN_HEIGHT/2)), the score to 0, and randomly generate new food position.
        :return: None
        >>> snake = Snake(100, 100, 1, (51, 51))
        >>> snake.reset()
        self.length = 1
        self.positions = [(50, 50)]
        self.score = 0
        self.random_food_position()
        """"""


    def eat_food(self):
        """"""
        Increase the length of the snake by 1 and increase the score by 100. Randomly generate a new food position, but
        don't place it on the snake.
        :return: None
        >>> snake = Snake(100, 100, 1, (51, 51))
        >>> snake.move((1,1))
        >>> snake.eat_food()
        self.length = 2
        self.score = 10
        """"""",Snake,snippet_78,"import random

class Snake:
    """"""
    The class is a snake game, with allows snake to move and eat food, and also enables to reset, and generat a random food position.
    """"""

    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        """"""
        Initialize the length of the snake, screen width, screen height, block size, snake head position, score, and food position.
        :param SCREEN_WIDTH: int
        :param SCREEN_HEIGHT: int
        :param BLOCK_SIZE: int, Size of moving units
        :param food_position: tuple, representing the position(x, y) of food.
        """"""
        self.length = 1
        self.SCREEN_WIDTH = int(SCREEN_WIDTH)
        self.SCREEN_HEIGHT = int(SCREEN_HEIGHT)
        self.BLOCK_SIZE = int(BLOCK_SIZE) if BLOCK_SIZE else 1
        cx = self.SCREEN_WIDTH // 2
        cy = self.SCREEN_HEIGHT // 2
        self.positions = [(cx, cy)]
        self.score = 0
        self.food_position = food_position

    def move(self, direction):
        """"""
        Move the snake in the specified direction. If the new position of the snake's head is equal to the position of the food, then eat the food; If the position of the snake's head is equal to the position of its body, then start over, otherwise its own length plus one.
        :param direction: tuple, representing the direction of movement (x, y).
        :return: None
        >>> snake.move((1,1))
        self.length = 1
        self.positions = [(51, 51), (50, 50)]
        self.score = 10
        """"""
        if not direction or len(direction) != 2:
            return
        dx, dy = direction
        head_x, head_y = self.positions[0]
        new_head = (
            head_x + dx * self.BLOCK_SIZE,
            head_y + dy * self.BLOCK_SIZE,
        )

        # Add new head
        self.positions.insert(0, new_head)

        # Self-collision: reset
        if new_head in self.positions[1:]:
            self.reset()
            return

        # Eat food: increase score and keep tail this move
        if self.food_position is not None and new_head == self.food_position:
            self.score += 10
            self.random_food_position()
        else:
            # Maintain current length: trim tail
            if len(self.positions) > self.length:
                self.positions = self.positions[:self.length]

    def random_food_position(self):
        """"""
        Randomly generate a new food position, but don't place it on the snake.
        :return: None, Change the food position
        """"""
        # Generate all possible grid positions
        possible_x = range(0, self.SCREEN_WIDTH + 1, self.BLOCK_SIZE) if self.SCREEN_WIDTH % self.BLOCK_SIZE == 0 else range(0, self.SCREEN_WIDTH, self.BLOCK_SIZE)
        possible_y = range(0, self.SCREEN_HEIGHT + 1, self.BLOCK_SIZE) if self.SCREEN_HEIGHT % self.BLOCK_SIZE == 0 else range(0, self.SCREEN_HEIGHT, self.BLOCK_SIZE)

        snake_set = set(self.positions)
        # Fallback to avoid infinite loop if grid is full
        max_attempts = 1000
        for _ in range(max_attempts):
            x = random.choice(list(possible_x))
            y = random.choice(list(possible_y))
            if (x, y) not in snake_set:
                self.food_position = (x, y)
                return

        # As a last resort, scan for any available cell
        for x in possible_x:
            for y in possible_y:
                if (x, y) not in snake_set:
                    self.food_position = (x, y)
                    return
        # If no space, set to None
        self.food_position = None

    def reset(self):
        """"""
        Reset the snake to its initial state. Set the length to 1, the snake head position to ((SCREEN_WIDTH/2), (SCREEN_HEIGHT/2)), the score to 0, and randomly generate new food position.
        :return: None
        >>> snake = Snake(100, 100, 1, (51, 51))
        >>> snake.reset()
        self.length = 1
        self.positions = [(50, 50)]
        self.score = 0
        self.random_food_position()
        """"""
        self.length = 1
        cx = self.SCREEN_WIDTH // 2
        cy = self.SCREEN_HEIGHT // 2
        self.positions = [(cx, cy)]
        self.score = 0
        self.random_food_position()

    def eat_food(self):
        """"""
        Increase the length of the snake by 1 and increase the score by 100. Randomly generate a new food position, but
        don't place it on the snake.
        :return: None
        >>> snake = Snake(100, 100, 1, (51, 51))
        >>> snake.move((1,1))
        >>> snake.eat_food()
        self.length = 2
        self.score = 10
        """"""
        # Increase only the length as per example; score remains unchanged here
        self.length += 1
        # Ensure positions do not exceed new length after next moves
        # Food is handled upon move when head reaches food, so no change here"
78,"import re


class SplitSentence:

    def split_sentences(self, sentences_string):
        sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s', sentences_string)
        return sentences

    def count_words(self, sentence):
        sentence = re.sub(r'[^a-zA-Z\s]', '', sentence)
        words = sentence.split()
        return len(words)

    def process_text_file(self, sentences_string):
        sentences = self.split_sentences(sentences_string)
        max_count = 0
        for sentence in sentences:
            count = self.count_words(sentence)
            if count > max_count:
                max_count = count

        return max_count","class SplitSentence:
    """"""
    The class allows to split sentences, count words in a sentence, and process a text file to find the maximum word count.
    """"""


    def split_sentences(self, sentences_string):
        """"""
        Split a string into a list of sentences. Sentences end with . or ? and with a space after that. Please note that Mr. also end with . but are not sentences.
        :param sentences_string: string, string to split
        :return:list, split sentence list
        >>> ss = SplitSentence()
        >>> ss.split_sentences(""aaa aaaa. bb bbbb bbb? cccc cccc. dd ddd?"")
        ['aaa aaaa.', 'bb bbbb bbb?', 'cccc cccc.', 'dd ddd?']
        """"""

    def count_words(self, sentence):
        """"""
        Count the number of words in a sentence. Note that words are separated by spaces and that punctuation marks and numbers are not counted as words.
        :param sentence:string, sentence to be counted, where words are separated by spaces
        :return:int, number of words in the sentence
        >>> ss.count_words(""abc def"")
        2
        """"""

    def process_text_file(self, sentences_string):
        """"""
        Given a text, return the number of words in the longest sentence
        :param sentences_string: string, undivided long sentence
        :return:int, the number of words in the longest sentence
        >>> ss.process_text_file(""aaa aaaa. bb bbbb bbb? cccc ccccccc cc ccc. dd ddd?"")
        4
        """"""",SplitSentence,snippet_79,"class SplitSentence:
    """"""
    The class allows to split sentences, count words in a sentence, and process a text file to find the maximum word count.
    """"""

    def split_sentences(self, sentences_string):
        """"""
        Split a string into a list of sentences. Sentences end with . or ? and with a space after that. Please note that Mr. also end with . but are not sentences.
        :param sentences_string: string, string to split
        :return:list, split sentence list
        >>> ss = SplitSentence()
        >>> ss.split_sentences(""aaa aaaa. bb bbbb bbb? cccc cccc. dd ddd?"")
        ['aaa aaaa.', 'bb bbbb bbb?', 'cccc cccc.', 'dd ddd?']
        """"""
        if not sentences_string:
            return []

        s = sentences_string
        n = len(s)
        result = []
        buf = []

        i = 0
        while i < n:
            ch = s[i]
            buf.append(ch)

            is_eos = False
            if ch in ('.', '?'):
                # Check ""Mr."" exception (do not end sentence on ""Mr."")
                if ch == '.':
                    # Look back exactly two chars for 'M''r' to form ""Mr.""
                    if i >= 2 and s[i - 2:i + 1] == ""Mr."":
                        # Ensure it is a standalone title (start or preceded by space)
                        if i - 3 < 0 or s[i - 3].isspace():
                            is_eos = False
                        else:
                            is_eos = True
                    else:
                        is_eos = True
                else:
                    is_eos = True

                # Only consider as end-of-sentence if followed by space or end of string
                if is_eos:
                    next_is_space_or_end = (i + 1 >= n) or s[i + 1].isspace()
                    if not next_is_space_or_end:
                        is_eos = False

                if is_eos:
                    sentence = """".join(buf).rstrip()
                    if sentence:
                        result.append(sentence)
                    buf = []
                    # Consume exactly one following space if present
                    if i + 1 < n and s[i + 1].isspace():
                        i += 1  # skip the space
            i += 1

        # If any trailing buffer remains without terminal punctuation, ignore or append?
        # By spec, sentences end with . or ?, so we ignore trailing text without terminator.
        return result

    def count_words(self, sentence):
        """"""
        Count the number of words in a sentence. Note that words are separated by spaces and that punctuation marks and numbers are not counted as words.
        :param sentence:string, sentence to be counted, where words are separated by spaces
        :return:int, number of words in the sentence
        >>> ss.count_words(""abc def"")
        2
        """"""
        if not sentence:
            return 0

        # Split on whitespace and count tokens that are purely alphabetic after trimming punctuation at ends
        punct = set('.,;:!?\'""()[]{}<>')
        count = 0
        for tok in sentence.split():
            # Strip leading/trailing punctuation
            start = 0
            end = len(tok)
            while start < end and tok[start] in punct:
                start += 1
            while end > start and tok[end - 1] in punct:
                end -= 1
            core = tok[start:end]
            if core.isalpha():
                count += 1
        return count

    def process_text_file(self, sentences_string):
        """"""
        Given a text, return the number of words in the longest sentence
        :param sentences_string: string, undivided long sentence
        :return:int, the number of words in the longest sentence
        >>> ss.process_text_file(""aaa aaaa. bb bbbb bbb? cccc ccccccc cc ccc. dd ddd?"")
        4
        """"""
        sentences = self.split_sentences(sentences_string)
        if not sentences:
            return 0
        return max(self.count_words(s) for s in sentences)"
79,"class SQLGenerator:
    def __init__(self, table_name):
        self.table_name = table_name

    def select(self, fields=None, condition=None):
        if fields is None:
            fields = ""*""
        else:
            fields = "", "".join(fields)
        sql = f""SELECT {fields} FROM {self.table_name}""
        if condition is not None:
            sql += f"" WHERE {condition}""
        return sql + "";""

    def insert(self, data):
        fields = "", "".join(data.keys())
        values = "", "".join([f""'{value}'"" for value in data.values()])
        sql = f""INSERT INTO {self.table_name} ({fields}) VALUES ({values})""
        return sql + "";""

    def update(self, data, condition):
        set_clause = "", "".join([f""{field} = '{value}'"" for field, value in data.items()])
        sql = f""UPDATE {self.table_name} SET {set_clause} WHERE {condition}""
        return sql + "";""

    def delete(self, condition):
        sql = f""DELETE FROM {self.table_name} WHERE {condition}""
        return sql + "";""

    def select_female_under_age(self, age):
        condition = f""age < {age} AND gender = 'female'""
        return self.select(condition=condition)

    def select_by_age_range(self, min_age, max_age):
        condition = f""age BETWEEN {min_age} AND {max_age}""
        return self.select(condition=condition)","class SQLGenerator:
    """"""
    This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.
    """"""

    def __init__(self, table_name):
        """"""
        Initialize the table name.
        :param table_name: str
        """"""
        self.table_name = table_name

    def select(self, fields=None, condition=None):
        """"""
        Generates a SELECT SQL statement based on the specified fields and conditions.
        :param fields: list, optional. Default is None. The list of fields to be queried.
        :param condition: str, optional. Default is None. The condition expression for the query.
        :return: str. The generated SQL statement.
        >>> sql = SQLGenerator('table1')
        >>> sql.select(['field1', 'field2'], 'filed3 = value1')
        'SELECT field1, field2 FROM table1 WHERE filed3 = value1;'
        """"""

    def insert(self, data):
        """"""
        Generates an INSERT SQL statement based on the given data.
        :param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.
        :return: str. The generated SQL statement.
        >>> sql.insert({'key1': 'value1', 'key2': 'value2'})
        ""INSERT INTO table1 (key1, key2) VALUES ('value1', 'value2');""
        """"""


    def update(self, data, condition):
        """"""
        Generates an UPDATE SQL statement based on the given data and condition.
        :param data: dict. The data to be updated, in dictionary form where keys are field names and values are new field values.
        :param condition: str. The condition expression for the update.
        :return: str. The generated SQL statement.
        >>> sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, ""field3 = value1"")
        ""UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;""
        """"""

    def delete(self, condition):
        """"""
        Generates a DELETE SQL statement based on the given condition.
        :param condition: str. The condition expression for the delete.
        :return: str. The generated SQL statement.
        >>> sql.delete(""field1 = value1"")
        'DELETE FROM table1 WHERE field1 = value1;'
        """"""

    def select_female_under_age(self, age):
        """"""
        Generates a SQL statement to select females under a specified age.
        :param age: int. The specified age.
        :return: str. The generated SQL statement.
        >>> sql.select_female_under_age(30)
        ""SELECT * FROM table1 WHERE age < 30 AND gender = 'female';""
        """"""

    def select_by_age_range(self, min_age, max_age):
        """"""
        Generates a SQL statement to select records within a specified age range.
        :param min_age: int. The minimum age.
        :param max_age: int. The maximum age.
        :return: str. The generated SQL statement.
        >>> sql.select_by_age_range(20, 30)
        'SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;'
        """"""",SQLGenerator,snippet_80,"class SQLGenerator:
    """"""
    This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.
    """"""

    def __init__(self, table_name):
        """"""
        Initialize the table name.
        :param table_name: str
        """"""
        self.table_name = table_name

    def _format_value(self, value):
        if value is None:
            return ""NULL""
        if isinstance(value, str):
            escaped = value.replace(""'"", ""''"")
            return f""'{escaped}'""
        return str(value)

    def select(self, fields=None, condition=None):
        """"""
        Generates a SELECT SQL statement based on the specified fields and conditions.
        :param fields: list, optional. Default is None. The list of fields to be queried.
        :param condition: str, optional. Default is None. The condition expression for the query.
        :return: str. The generated SQL statement.
        >>> sql = SQLGenerator('table1')
        >>> sql.select(['field1', 'field2'], 'filed3 = value1')
        'SELECT field1, field2 FROM table1 WHERE filed3 = value1;'
        """"""
        field_part = ""*""
        if fields:
            field_part = "", "".join(fields)
        sql = f""SELECT {field_part} FROM {self.table_name}""
        if condition:
            sql += f"" WHERE {condition}""
        return sql + "";""

    def insert(self, data):
        """"""
        Generates an INSERT SQL statement based on the given data.
        :param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.
        :return: str. The generated SQL statement.
        >>> sql.insert({'key1': 'value1', 'key2': 'value2'})
        ""INSERT INTO table1 (key1, key2) VALUES ('value1', 'value2');""
        """"""
        keys = list(data.keys())
        values = [self._format_value(data[k]) for k in keys]
        keys_part = "", "".join(keys)
        values_part = "", "".join(values)
        return f""INSERT INTO {self.table_name} ({keys_part}) VALUES ({values_part});""

    def update(self, data, condition):
        """"""
        Generates an UPDATE SQL statement based on the given data and condition.
        :param data: dict. The data to be updated, in dictionary form where keys are field names and values are new field values.
        :param condition: str. The condition expression for the update.
        :return: str. The generated SQL statement.
        >>> sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, ""field3 = value1"")
        ""UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;""
        """"""
        set_parts = [f""{k} = {self._format_value(v)}"" for k, v in data.items()]
        set_clause = "", "".join(set_parts)
        return f""UPDATE {self.table_name} SET {set_clause} WHERE {condition};""

    def delete(self, condition):
        """"""
        Generates a DELETE SQL statement based on the given condition.
        :param condition: str. The condition expression for the delete.
        :return: str. The generated SQL statement.
        >>> sql.delete(""field1 = value1"")
        'DELETE FROM table1 WHERE field1 = value1;'
        """"""
        return f""DELETE FROM {self.table_name} WHERE {condition};""

    def select_female_under_age(self, age):
        """"""
        Generates a SQL statement to select females under a specified age.
        :param age: int. The specified age.
        :return: str. The generated SQL statement.
        >>> sql.select_female_under_age(30)
        ""SELECT * FROM table1 WHERE age < 30 AND gender = 'female';""
        """"""
        return f""SELECT * FROM {self.table_name} WHERE age < {int(age)} AND gender = 'female';""

    def select_by_age_range(self, min_age, max_age):
        """"""
        Generates a SQL statement to select records within a specified age range.
        :param min_age: int. The minimum age.
        :param max_age: int. The maximum age.
        :return: str. The generated SQL statement.
        >>> sql.select_by_age_range(20, 30)
        'SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;'
        """"""
        return f""SELECT * FROM {self.table_name} WHERE age BETWEEN {int(min_age)} AND {int(max_age)};"""
80,"class SQLQueryBuilder:

    @staticmethod
    def select(table, columns='*', where=None):
        if columns != '*':
            columns = ', '.join(columns)
        query = f""SELECT {columns} FROM {table}""
        if where:
            query += "" WHERE "" + ' AND '.join(f""{k}='{v}'"" for k, v in where.items())
        return query

    @staticmethod
    def insert(table, data):
        keys = ', '.join(data.keys())
        values = ', '.join(f""'{v}'"" for v in data.values())
        return f""INSERT INTO {table} ({keys}) VALUES ({values})""

    @staticmethod
    def delete(table, where=None):
        query = f""DELETE FROM {table}""
        if where:
            query += "" WHERE "" + ' AND '.join(f""{k}='{v}'"" for k, v in where.items())
        return query

    @staticmethod
    def update(table, data, where=None):
        update_str = ', '.join(f""{k}='{v}'"" for k, v in data.items())
        query = f""UPDATE {table} SET {update_str}""
        if where:
            query += "" WHERE "" + ' AND '.join(f""{k}='{v}'"" for k, v in where.items())
        return query","class SQLQueryBuilder:
    """"""
    This class provides to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements. 
    """"""


    @staticmethod
    def select(table, columns='*', where=None):
        """"""
        Generate the SELECT SQL statement from the given parameters.
        :param table: str, the query table in database.
        :param columns: list of str, ['col1', 'col2'].
        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.
        return query: str, the SQL query statement.
        >>> SQLQueryBuilder.select('table1', columns = [""col1"",""col2""], where = {""age"": 15})
        ""SELECT col1, col2 FROM table1 WHERE age='15'""
        """"""

    @staticmethod
    def insert(table, data):
        """"""
        Generate the INSERT SQL statement from the given parameters.
        :param table: str, the table to be inserted in database.
        :param data: dict, the key and value in SQL insert statement
        :return query: str, the SQL insert statement.
        >>> SQLQueryBuilder.insert('table1', {'name': 'Test', 'age': 14})
        ""INSERT INTO table1 (name, age) VALUES ('Test', '14')""
        """"""

    @staticmethod
    def delete(table, where=None):
        """"""
        Generate the DELETE SQL statement from the given parameters.
        :param table: str, the table that will be excuted with DELETE operation in database
        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.
        :return query: str, the SQL delete statement.
        >>> SQLQueryBuilder.delete('table1', {'name': 'Test', 'age': 14})
        ""DELETE FROM table1 WHERE name='Test' AND age='14'""
        """"""

    @staticmethod
    def update(table, data, where=None):
        """"""
        Generate the UPDATE SQL statement from the given parameters.
        :param table: str, the table that will be excuted with UPDATE operation in database
        :param data: dict, the key and value in SQL update statement
        :param where: dict, {key1: value1, key2: value2 ...}. The query condition.
        >>> SQLQueryBuilder.update('table1', {'name': 'Test2', 'age': 15}, where = {'name':'Test'})
        ""UPDATE table1 SET name='Test2', age='15' WHERE name='Test'""
        """"""",SQLQueryBuilder,snippet_81,"class SQLQueryBuilder:
    """"""
    This class provides to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements. 
    """"""

    @staticmethod
    def _quote_value(value):
        if value is None:
            return ""NULL""
        s = str(value).replace(""'"", ""''"")
        return f""'{s}'""

    @staticmethod
    def _format_columns(columns):
        if not columns or columns == '*':
            return '*'
        if isinstance(columns, (list, tuple)):
            return ', '.join(map(str, columns))
        return str(columns)

    @staticmethod
    def _format_where(where):
        if not where:
            return ''
        parts = [f""{k}={SQLQueryBuilder._quote_value(v)}"" for k, v in where.items()]
        return ' WHERE ' + ' AND '.join(parts)

    @staticmethod
    def select(table, columns='*', where=None):
        cols = SQLQueryBuilder._format_columns(columns)
        where_clause = SQLQueryBuilder._format_where(where)
        return f""SELECT {cols} FROM {table}{where_clause}""

    @staticmethod
    def insert(table, data):
        if not data:
            raise ValueError(""data must not be empty"")
        cols = ', '.join(data.keys())
        vals = ', '.join(SQLQueryBuilder._quote_value(v) for v in data.values())
        return f""INSERT INTO {table} ({cols}) VALUES ({vals})""

    @staticmethod
    def delete(table, where=None):
        where_clause = SQLQueryBuilder._format_where(where)
        return f""DELETE FROM {table}{where_clause}""

    @staticmethod
    def update(table, data, where=None):
        if not data:
            raise ValueError(""data must not be empty"")
        set_clause = ', '.join(f""{k}={SQLQueryBuilder._quote_value(v)}"" for k, v in data.items())
        where_clause = SQLQueryBuilder._format_where(where)
        return f""UPDATE {table} SET {set_clause}{where_clause}"""
81,"import math
class Statistics3:
    @staticmethod
    def median(data):
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2

    @staticmethod
    def mode(data):
        counts = {}
        for value in data:
            counts[value] = counts.get(value, 0) + 1
        max_count = max(counts.values())
        mode_values = [value for value, count in counts.items() if count == max_count]
        return mode_values

    @staticmethod
    def correlation(x, y):
        n = len(x)
        mean_x = sum(x) / n
        mean_y = sum(y) / n
        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
        if denominator == 0:
            return None
        return numerator / denominator

    @staticmethod
    def mean(data):
        if len(data) == 0:
            return None
        return sum(data) / len(data)

    @staticmethod
    def correlation_matrix(data):
        matrix = []
        for i in range(len(data[0])):
            row = []
            for j in range(len(data[0])):
                column1 = [row[i] for row in data]
                column2 = [row[j] for row in data]
                correlation = Statistics3.correlation(column1, column2)
                row.append(correlation)
            matrix.append(row)
        return matrix

    @staticmethod
    def standard_deviation(data):
        n = len(data)
        if n < 2:
            return None
        mean_value = Statistics3.mean(data)
        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)
        return math.sqrt(variance)

    @staticmethod
    def z_score(data):
        mean = Statistics3.mean(data)
        std_deviation = Statistics3.standard_deviation(data)
        if std_deviation is None or std_deviation == 0:
            return None
        return [(x - mean) / std_deviation for x in data]","class Statistics3:
    """"""
    This is a class that implements methods for calculating indicators such as median, mode, correlation matrix, and Z-score in statistics.
    """"""

    @staticmethod
    def median(data):
        """"""
        calculates the median of the given list.
        :param data: the given list, list.
        :return: the median of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.median([1, 2, 3, 4])
        2.5

        """"""

    @staticmethod
    def mode(data):
        """"""
        calculates the mode of the given list.
        :param data: the given list, list.
        :return: the mode of the given list, list.
        >>> statistics3 = Statistics3()
        >>> statistics3.mode([1, 2, 3, 3])
        [3]

        """"""

    @staticmethod
    def correlation(x, y):
        """"""
        calculates the correlation of the given list.
        :param x: the given list, list.
        :param y: the given list, list.
        :return: the correlation of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.correlation([1, 2, 3], [4, 5, 6])
        1.0

        """"""

    @staticmethod
    def mean(data):
        """"""
        calculates the mean of the given list.
        :param data: the given list, list.
        :return: the mean of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.mean([1, 2, 3])
        2.0

        """"""

    @staticmethod
    def correlation_matrix(data):
        """"""
        calculates the correlation matrix of the given list.
        :param data: the given list, list.
        :return: the correlation matrix of the given list, list.
        >>> statistics3 = Statistics3()
        >>> statistics3.correlation_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]

        """"""

    @staticmethod
    def standard_deviation(data):
        """"""
        calculates the standard deviation of the given list.
        :param data: the given list, list.
        :return: the standard deviation of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.standard_deviation([1, 2, 3])
        1.0

        """"""

    @staticmethod
    def z_score(data):
        """"""
        calculates the z-score of the given list.
        :param data: the given list, list.
        :return: the z-score of the given list, list.
        >>> statistics3 = Statistics3()
        >>> statistics3.z_score([1, 2, 3, 4])
        [-1.161895003862225, -0.3872983346207417, 0.3872983346207417, 1.161895003862225]

        """"""",Statistics3,snippet_82,"class Statistics3:
    """"""
    This is a class that implements methods for calculating indicators such as median, mode, correlation matrix, and Z-score in statistics.
    """"""

    @staticmethod
    def median(data):
        """"""
        calculates the median of the given list.
        :param data: the given list, list.
        :return: the median of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.median([1, 2, 3, 4])
        2.5

        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        sorted_data = sorted(data)
        n = len(sorted_data)
        mid = n // 2
        if n % 2 == 1:
            return float(sorted_data[mid])
        else:
            return (sorted_data[mid - 1] + sorted_data[mid]) / 2.0

    @staticmethod
    def mode(data):
        """"""
        calculates the mode of the given list.
        :param data: the given list, list.
        :return: the mode of the given list, list.
        >>> statistics3 = Statistics3()
        >>> statistics3.mode([1, 2, 3, 3])
        [3]

        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        from collections import Counter
        counts = Counter(data)
        if not counts:
            return []
        max_count = max(counts.values())
        modes = [k for k, v in counts.items() if v == max_count]
        try:
            modes.sort()
        except TypeError:
            pass
        return modes

    @staticmethod
    def correlation(x, y):
        """"""
        calculates the correlation of the given list.
        :param x: the given list, list.
        :param y: the given list, list.
        :return: the correlation of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.correlation([1, 2, 3], [4, 5, 6])
        1.0

        """"""
        if x is None or y is None:
            raise ValueError(""x and y must not be None"")
        if len(x) != len(y):
            raise ValueError(""x and y must have the same length"")
        n = len(x)
        if n < 2:
            raise ValueError(""x and y must have length at least 2"")
        mx = Statistics3.mean(x)
        my = Statistics3.mean(y)
        sx = Statistics3.standard_deviation(x)
        sy = Statistics3.standard_deviation(y)
        if sx == 0 or sy == 0:
            return 0.0
        cov_num = 0.0
        for xi, yi in zip(x, y):
            cov_num += (xi - mx) * (yi - my)
        # sample covariance uses (n-1)
        cov = cov_num / (n - 1)
        return cov / (sx * sy)

    @staticmethod
    def mean(data):
        """"""
        calculates the mean of the given list.
        :param data: the given list, list.
        :return: the mean of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.mean([1, 2, 3])
        2.0

        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        return float(sum(data)) / len(data)

    @staticmethod
    def correlation_matrix(data):
        """"""
        calculates the correlation matrix of the given list.
        :param data: the given list, list.
        :return: the correlation matrix of the given list, list.
        >>> statistics3 = Statistics3()
        >>> statistics3.correlation_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
        [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]

        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        lengths = [len(series) for series in data]
        if any(l != lengths[0] for l in lengths):
            raise ValueError(""all series must have the same length"")
        if lengths[0] < 2:
            raise ValueError(""each series must have length at least 2"")
        m = len(data)
        result = []
        for i in range(m):
            row = []
            for j in range(m):
                if i == j:
                    row.append(1.0)
                else:
                    row.append(Statistics3.correlation(data[i], data[j]))
            result.append(row)
        return result

    @staticmethod
    def standard_deviation(data):
        """"""
        calculates the standard deviation of the given list.
        :param data: the given list, list.
        :return: the standard deviation of the given list, float.
        >>> statistics3 = Statistics3()
        >>> statistics3.standard_deviation([1, 2, 3])
        1.0

        """"""
        n = len(data)
        if n < 2:
            raise ValueError(""data must contain at least two elements for standard deviation"")
        m = Statistics3.mean(data)
        var_sum = 0.0
        for x in data:
            d = x - m
            var_sum += d * d
        var = var_sum / (n - 1)
        return var ** 0.5

    @staticmethod
    def z_score(data):
        """"""
        calculates the z-score of the given list.
        :param data: the given list, list.
        :return: the z-score of the given list, list.
        >>> statistics3 = Statistics3()
        >>> statistics3.z_score([1, 2, 3, 4])
        [-1.161895003862225, -0.3872983346207417, 0.3872983346207417, 1.161895003862225]

        """"""
        if not data:
            raise ValueError(""data must not be empty"")
        mean_val = Statistics3.mean(data)
        std_val = Statistics3.standard_deviation(data)
        if std_val == 0:
            return [0.0 for _ in data]
        return [(x - mean_val) / std_val for x in data]"
82,"class StockPortfolioTracker:
    def __init__(self, cash_balance):
        self.portfolio = []
        self.cash_balance = cash_balance

    def add_stock(self, stock):
        for pf in self.portfolio:
            if pf['name'] == stock['name']:
                pf['quantity'] += stock['quantity']
                return

        self.portfolio.append(stock)

    def remove_stock(self, stock):
        for pf in self.portfolio:
            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:
                pf['quantity'] -= stock['quantity']
                if pf['quantity'] == 0:
                    self.portfolio.remove(pf)
                return True
        return False

    def buy_stock(self, stock):
        if stock['price'] * stock['quantity'] > self.cash_balance:
            return False
        else:
            self.add_stock(stock)
            self.cash_balance -= stock['price'] * stock['quantity']
            return True

    def sell_stock(self, stock):
        if self.remove_stock(stock) == False:
            return False
        self.cash_balance += stock['price'] * stock['quantity']
        return True

    def calculate_portfolio_value(self):
        total_value = self.cash_balance
        for stock in self.portfolio:
            total_value += stock['price'] * stock['quantity']
        return total_value

    def get_portfolio_summary(self):
        summary = []
        for stock in self.portfolio:
            value = self.get_stock_value(stock)
            summary.append({""name"": stock[""name""], ""value"": value})
        portfolio_value = self.calculate_portfolio_value()
        return portfolio_value, summary

    def get_stock_value(self, stock):
        return stock['price'] * stock['quantity']","class StockPortfolioTracker:
    """"""
    This is a class as StockPortfolioTracker that allows to add stocks, remove stocks, buy stocks, sell stocks, calculate the total value of the portfolio, and obtain a summary of the portfolio.
    """"""

    def __init__(self, cash_balance):
        """"""
        Initialize the StockPortfolioTracker class with a cash balance and an empty portfolio.
        """"""
        self.portfolio = []
        self.cash_balance = cash_balance

    def add_stock(self, stock):
        """"""
        Add a stock to the portfolio.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.add_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        >>> tracker.portfolio
        [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]

        """"""

    def remove_stock(self, stock):
        """"""
        Remove a stock from the portfolio.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.remove_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        True
        >>> tracker.portfolio
        []

        """"""

    def buy_stock(self, stock):
        """"""
        Buy a stock and add it to the portfolio.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        :param quantity: the quantity of the stock to buy,int.
        :return: True if the stock was bought successfully, False if the cash balance is not enough.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.buy_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        True
        >>> tracker.portfolio
        [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]

        """"""

    def sell_stock(self, stock):
        """"""
        Sell a stock and remove it from the portfolio and add the cash to the cash balance.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        :param quantity: the quantity of the stock to sell,int.
        :return: True if the stock was sold successfully, False if the quantity of the stock is not enough.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.sell_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        True
        >>> tracker.portfolio
        []

        """"""

    def calculate_portfolio_value(self):
        """"""
        Calculate the total value of the portfolio.
        :return: the total value of the portfolio, float.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.calculate_portfolio_value()
        11500.0

        """"""

    def get_portfolio_summary(self):
        """"""
        Get a summary of the portfolio.
        :return: a tuple of the total value of the portfolio and a list of dictionaries with keys ""name"" and ""value""
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.get_portfolio_summary()
        (11500.0, [{'name': 'AAPL', 'value': 1500.0}])

        """"""

    def get_stock_value(self, stock):
        """"""
        Get the value of a stock.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        :return: the value of the stock, float.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.get_stock_value({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        1500.0

        """"""",StockPortfolioTracker,snippet_83,"class StockPortfolioTracker:
    """"""
    This is a class as StockPortfolioTracker that allows to add stocks, remove stocks, buy stocks, sell stocks, calculate the total value of the portfolio, and obtain a summary of the portfolio.
    """"""

    def __init__(self, cash_balance):
        """"""
        Initialize the StockPortfolioTracker class with a cash balance and an empty portfolio.
        """"""
        self.portfolio = []
        self.cash_balance = cash_balance

    def add_stock(self, stock):
        """"""
        Add a stock to the portfolio.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.add_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        >>> tracker.portfolio
        [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]

        """"""
        self.portfolio.append({""name"": stock[""name""], ""price"": float(stock[""price""]), ""quantity"": int(stock[""quantity""])})

    def remove_stock(self, stock):
        """"""
        Remove a stock from the portfolio.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.remove_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        True
        >>> tracker.portfolio
        []

        """"""
        try:
            idx = self.portfolio.index(stock)
        except ValueError:
            return False
        del self.portfolio[idx]
        return True

    def buy_stock(self, stock):
        """"""
        Buy a stock and add it to the portfolio.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        :param quantity: the quantity of the stock to buy,int.
        :return: True if the stock was bought successfully, False if the cash balance is not enough.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.buy_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        True
        >>> tracker.portfolio
        [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]

        """"""
        price = float(stock[""price""])
        quantity = int(stock[""quantity""])
        total_cost = price * quantity
        if total_cost > self.cash_balance:
            return False
        self.cash_balance -= total_cost
        self.portfolio.append({""name"": stock[""name""], ""price"": price, ""quantity"": quantity})
        return True

    def sell_stock(self, stock):
        """"""
        Sell a stock and remove it from the portfolio and add the cash to the cash balance.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        :param quantity: the quantity of the stock to sell,int.
        :return: True if the stock was sold successfully, False if the quantity of the stock is not enough.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.sell_stock({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        True
        >>> tracker.portfolio
        []

        """"""
        name = stock[""name""]
        sell_price = float(stock[""price""])
        sell_qty = int(stock[""quantity""])

        # Find a portfolio entry with the same name and enough quantity
        for i, item in enumerate(self.portfolio):
            if item[""name""] == name and int(item[""quantity""]) >= sell_qty:
                # Adjust holding
                remaining = int(item[""quantity""]) - sell_qty
                if remaining == 0:
                    del self.portfolio[i]
                else:
                    item[""quantity""] = remaining
                # Add proceeds
                self.cash_balance += sell_price * sell_qty
                return True
        return False

    def calculate_portfolio_value(self):
        """"""
        Calculate the total value of the portfolio.
        :return: the total value of the portfolio, float.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.calculate_portfolio_value()
        11500.0

        """"""
        holdings_value = sum(float(s[""price""]) * int(s[""quantity""]) for s in self.portfolio)
        return float(self.cash_balance) + holdings_value

    def get_portfolio_summary(self):
        """"""
        Get a summary of the portfolio.
        :return: a tuple of the total value of the portfolio and a list of dictionaries with keys ""name"" and ""value""
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.portfolio = [{'name': 'AAPL', 'price': 150.0, 'quantity': 10}]
        >>> tracker.get_portfolio_summary()
        (11500.0, [{'name': 'AAPL', 'value': 1500.0}])

        """"""
        summary = [{""name"": s[""name""], ""value"": float(s[""price""]) * int(s[""quantity""])} for s in self.portfolio]
        total_value = self.calculate_portfolio_value()
        return (total_value, summary)

    def get_stock_value(self, stock):
        """"""
        Get the value of a stock.
        :param stock: a dictionary with keys ""name"", ""price"", and ""quantity""
        :return: the value of the stock, float.
        >>> tracker = StockPortfolioTracker(10000.0)
        >>> tracker.get_stock_value({""name"": ""AAPL"", ""price"": 150.0, ""quantity"": 10})
        1500.0

        """"""
        return float(stock[""price""]) * int(stock[""quantity""])"
83,"import sqlite3


class StudentDatabaseProcessor:

    def __init__(self, database_name):
        self.database_name = database_name

    def create_student_table(self):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        create_table_query = """"""
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            gender TEXT,
            grade INTEGER
        )
        """"""
        cursor.execute(create_table_query)

        conn.commit()
        conn.close()

    def insert_student(self, student_data):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        insert_query = """"""
        INSERT INTO students (name, age, gender, grade)
        VALUES (?, ?, ?, ?)
        """"""
        cursor.execute(insert_query,
                       (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))

        conn.commit()
        conn.close()

    def search_student_by_name(self, name):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        select_query = ""SELECT * FROM students WHERE name = ?""
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        conn.close()

        return result

    def delete_student_by_name(self, name):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        delete_query = ""DELETE FROM students WHERE name = ?""
        cursor.execute(delete_query, (name,))

        conn.commit()
        conn.close()","class StudentDatabaseProcessor:
    """"""
    This is a class with database operation, including inserting student information, searching for student information by name, and deleting student information by name.
    """"""

    def __init__(self, database_name):
        """"""
        Initializes the StudentDatabaseProcessor object with the specified database name.
        :param database_name: str, the name of the SQLite database.
        """"""
        self.database_name = database_name

    def create_student_table(self):
        """"""
        Creates a ""students"" table in the database if it does not exist already.Fields include ID of type int, name of type str, age of type int, gender of type str, and grade of type int
        :return: None
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        """"""

    def insert_student(self, student_data):
        """"""
        Inserts a new student into the ""students"" table.
        :param student_data: dict, a dictionary containing the student's information (name, age, gender, grade).
        :return: None
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}
        >>> processor.insert_student(student_data)
        """"""

    def search_student_by_name(self, name):
        """"""
        Searches for a student in the ""students"" table by their name.
        :param name: str, the name of the student to search for.
        :return: list of tuples, the rows from the ""students"" table that match the search criteria.
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        >>> result = processor.search_student_by_name(""John"")
        """"""

    def delete_student_by_name(self, name):
        """"""
        Deletes a student from the ""students"" table by their name.
        :param name: str, the name of the student to delete.
        :return: None
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}
        >>> processor.insert_student(student_data)
        >>> processor.delete_student_by_name(""John"")
        """"""",StudentDatabaseProcessor,snippet_84,"import sqlite3
from typing import List, Tuple, Dict, Any, Optional


class StudentDatabaseProcessor:
    """"""
    This is a class with database operation, including inserting student information, searching for student information by name, and deleting student information by name.
    """"""

    def __init__(self, database_name: str):
        """"""
        Initializes the StudentDatabaseProcessor object with the specified database name.
        :param database_name: str, the name of the SQLite database.
        """"""
        self.database_name = database_name

    def _connect(self) -> sqlite3.Connection:
        return sqlite3.connect(self.database_name)

    def create_student_table(self) -> None:
        """"""
        Creates a ""students"" table in the database if it does not exist already.Fields include ID of type int, name of type str, age of type int, gender of type str, and grade of type int
        :return: None
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        """"""
        with self._connect() as conn:
            conn.execute(
                """"""
                CREATE TABLE IF NOT EXISTS students (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    age INTEGER,
                    gender TEXT,
                    grade INTEGER
                )
                """"""
            )
            conn.commit()

    def insert_student(self, student_data: Dict[str, Any]) -> None:
        """"""
        Inserts a new student into the ""students"" table.
        :param student_data: dict, a dictionary containing the student's information (name, age, gender, grade).
        :return: None
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}
        >>> processor.insert_student(student_data)
        """"""
        required_keys = {""name"", ""age"", ""gender"", ""grade""}
        if not required_keys.issubset(student_data.keys()):
            missing = required_keys - set(student_data.keys())
            raise ValueError(f""Missing required fields: {', '.join(sorted(missing))}"")

        with self._connect() as conn:
            conn.execute(
                ""INSERT INTO students (name, age, gender, grade) VALUES (?, ?, ?, ?)"",
                (
                    student_data[""name""],
                    int(student_data[""age""]) if student_data[""age""] is not None else None,
                    student_data[""gender""],
                    int(student_data[""grade""]) if student_data[""grade""] is not None else None,
                ),
            )
            conn.commit()

    def search_student_by_name(self, name: str) -> List[Tuple]:
        """"""
        Searches for a student in the ""students"" table by their name.
        :param name: str, the name of the student to search for.
        :return: list of tuples, the rows from the ""students"" table that match the search criteria.
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        >>> result = processor.search_student_by_name(""John"")
        """"""
        with self._connect() as conn:
            cursor = conn.execute(
                ""SELECT id, name, age, gender, grade FROM students WHERE name = ?"",
                (name,),
            )
            rows = cursor.fetchall()
        return rows

    def delete_student_by_name(self, name: str) -> None:
        """"""
        Deletes a student from the ""students"" table by their name.
        :param name: str, the name of the student to delete.
        :return: None
        >>> processor = StudentDatabaseProcessor(""students.db"")
        >>> processor.create_student_table()
        >>> student_data = {'name': 'John', 'age': 15, 'gender': 'Male', 'grade': 9}
        >>> processor.insert_student(student_data)
        >>> processor.delete_student_by_name(""John"")
        """"""
        with self._connect() as conn:
            conn.execute(""DELETE FROM students WHERE name = ?"", (name,))
            conn.commit()"
84,"import json


class TextFileProcessor:
    def __init__(self, file_path):
        self.file_path = file_path

    def read_file_as_json(self):
        with open(self.file_path, 'r') as file:
            data = json.load(file)

        return data

    def read_file(self):
        with open(self.file_path, 'r') as file:
            return file.read()

    def write_file(self, content):
        with open(self.file_path, 'w') as file:
            file.write(content)

    def process_file(self):
        content = self.read_file()
        content = ''.join([char for char in content if char.isalpha()])
        self.write_file(content)
        return content","class TextFileProcessor:
    """"""
    The class handles reading, writing, and processing text files. It can read the file as JSON, read the raw text, write content to the file, and process the file by removing non-alphabetic characters.
    """"""

    def __init__(self, file_path):
        """"""
        Initialize the file path.
        :param file_path: str
        """"""
        self.file_path = file_path

    def read_file_as_json(self):
        """"""
        Read the self.file_path file as json format.
        if the file content doesn't obey json format, the code will raise error.
        :return data: dict if the file is stored as json format, or str/int/float.. according to the file content otherwise.
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.read_file_as_json()
        {'name': 'test', 'age': 12}
        >>> type(textFileProcessor.read_file_as_json())
        <class 'dict'>
        """"""

    def read_file(self):
        """"""
        Read the return the content of self.file_path file.
        :return: the same return as the read() method
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.read_file()
        '{\n    ""name"": ""test"",\n    ""age"": 12\n}'
        """"""

    def write_file(self, content):
        """"""
        Write content into the self.file_path file, and overwrite if the file has already existed.
        :param content: any content
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.write_file('Hello world!')
        >>> textFileProcessor.read_file()
        'Hello world!'
        """"""

    def process_file(self):
        """"""
        Read the self.file_path file and filter out non-alphabetic characters from the content string.
        Overwrite the after-processed data into the same self.file_path file.
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.read_file()
        '{\n    ""name"": ""test"",\n    ""age"": 12\n}'
        >>> textFileProcessor.process_file()
        'nametestage'
        """"""",TextFileProcessor,snippet_85,"import json

class TextFileProcessor:
    """"""
    The class handles reading, writing, and processing text files. It can read the file as JSON, read the raw text, write content to the file, and process the file by removing non-alphabetic characters.
    """"""

    def __init__(self, file_path):
        """"""
        Initialize the file path.
        :param file_path: str
        """"""
        self.file_path = file_path

    def read_file_as_json(self):
        """"""
        Read the self.file_path file as json format.
        if the file content doesn't obey json format, the code will raise error.
        :return data: dict if the file is stored as json format, or str/int/float.. according to the file content otherwise.
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.read_file_as_json()
        {'name': 'test', 'age': 12}
        >>> type(textFileProcessor.read_file_as_json())
        <class 'dict'>
        """"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        return json.loads(content)

    def read_file(self):
        """"""
        Read the return the content of self.file_path file.
        :return: the same return as the read() method
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.read_file()
        '{\n    ""name"": ""test"",\n    ""age"": 12\n}'
        """"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            return f.read()

    def write_file(self, content):
        """"""
        Write content into the self.file_path file, and overwrite if the file has already existed.
        :param content: any content
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.write_file('Hello world!')
        >>> textFileProcessor.read_file()
        'Hello world!'
        """"""
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.write(str(content))

    def process_file(self):
        """"""
        Read the self.file_path file and filter out non-alphabetic characters from the content string.
        Overwrite the after-processed data into the same self.file_path file.
        >>> textFileProcessor = TextFileProcessor('test.json')
        >>> textFileProcessor.read_file()
        '{\n    ""name"": ""test"",\n    ""age"": 12\n}'
        >>> textFileProcessor.process_file()
        'nametestage'
        """"""
        content = self.read_file()
        processed = ''.join(ch for ch in content if ch.isalpha())
        self.write_file(processed)
        return processed"
85,"import time

class Thermostat:
    def __init__(self, current_temperature, target_temperature, mode):
        self.current_temperature = current_temperature
        self.target_temperature = target_temperature
        self.mode = mode

    def get_target_temperature(self):
        return self.target_temperature

    def set_target_temperature(self, temperature):
        self.target_temperature = temperature

    def get_mode(self):
        return self.mode

    def set_mode(self, mode):
        if mode in ['heat', 'cool']:
            self.mode = mode
        else:
            return False

    def auto_set_mode(self):
        if self.current_temperature < self.target_temperature:
            self.mode = 'heat'
        else:
            self.mode = 'cool'

    def auto_check_conflict(self):
        if self.current_temperature > self.target_temperature:
            if self.mode == 'cool':
                return True
            else:
                self.auto_set_mode()
                return False
        else:
            if self.mode == 'heat':
                return True
            else:
                self.auto_set_mode()
                return False

    def simulate_operation(self):
        self.auto_set_mode()
        use_time = 0
        if self.mode == 'heat':
            while(self.current_temperature < self.target_temperature):
                self.current_temperature += 1
                use_time += 1
        else:
            while(self.current_temperature > self.target_temperature):
                self.current_temperature -= 1
                use_time += 1
        return use_time","class Thermostat:
    """"""
    The class manages temperature control, including setting and retrieving the target temperature, adjusting the mode, and simulating temperature operation.
    """"""

    def __init__(self, current_temperature, target_temperature, mode):
        """"""
        initialize instances of the Thermostat class, including the current temperature, target temperature, and operating mode.
        :param current_temperature: float
        :param target_temperature: float
        :param mode: str, the work mode
        """"""
        self.current_temperature = current_temperature
        self.target_temperature = target_temperature
        self.mode = mode

    def get_target_temperature(self):
        """"""
        Get the target temperature of an instance of the Thermostat class.
        :return self.current_temperature: int
        >>> thermostat.get_target_temperature()
        37.5
        """"""

    def set_target_temperature(self, temperature):
        """"""
        Set the target temperature
        :param temperature: float, the target temperature
        >>> thermostat.set_target_temperature(37.6)
        >>> thermostat.target_temperature
        37.6
        """"""

    def get_mode(self):
        """"""
        Get the current work mode
        :return mode: str, working mode. only ['heat', 'cool']
        """"""

    def set_mode(self, mode):
        """"""
        Get the current work mode
        :param mode: str, working mode. only ['heat', 'cool']
        >>> thermostat.set_mode('cool')
        >>> thermostat.mode
        'cool'
        """"""

    def auto_set_mode(self):
        """"""
        Automatically set the operating mode by comparing with the current temperature and target temperature. If the current temperature is lower than the target temperature, the operating mode is set to 'heat', otherwise it is set to 'cool'.
        >>> thermostat = Thermostat(20.4, 37.5, 'cool')
        >>> thermostat.auto_set_mode()
        >>> thermostat.mode
        'heat'
        """"""

    def auto_check_conflict(self):
        """"""
        Check if there is a conflict between the operating mode and the relationship between the current temperature and the target temperature.
        If there is a conflict, the operating mode will be adjusted automatically.
        :return: True if mode isn't conflict with the relationship between the current temperature and the target temperature, or False otherwise.
        >>> thermostat = Thermostat(20.4, 37.5, 'cool')
        >>> thermostat.auto_check_conflict()
        False
        >>> thermostat.mode
        'heat'
        """"""

    def simulate_operation(self):
        """"""
        simulate the operation of Thermostat. It will automatically start the auto_set_mode method to set the operating mode,
        and then automatically adjust the current temperature according to the operating mode until the target temperature is reached.
        :return time: int, the time it took to complete the simulation.
        >>> thermostat = Thermostat(20.4, 37.5, 'cool')
        >>> thermostat.simulate_operation()
        18
        """"""",Thermostat,snippet_86,"class Thermostat:
    """"""
    The class manages temperature control, including setting and retrieving the target temperature, adjusting the mode, and simulating temperature operation.
    """"""

    def __init__(self, current_temperature, target_temperature, mode):
        """"""
        initialize instances of the Thermostat class, including the current temperature, target temperature, and operating mode.
        :param current_temperature: float
        :param target_temperature: float
        :param mode: str, the work mode
        """"""
        self.current_temperature = float(current_temperature)
        self.target_temperature = float(target_temperature)
        self.mode = None
        self.set_mode(mode)

    def get_target_temperature(self):
        """"""
        Get the target temperature of an instance of the Thermostat class.
        :return self.current_temperature: int
        >>> thermostat.get_target_temperature()
        37.5
        """"""
        return self.target_temperature

    def set_target_temperature(self, temperature):
        """"""
        Set the target temperature
        :param temperature: float, the target temperature
        >>> thermostat.set_target_temperature(37.6)
        >>> thermostat.target_temperature
        37.6
        """"""
        self.target_temperature = float(temperature)

    def get_mode(self):
        """"""
        Get the current work mode
        :return mode: str, working mode. only ['heat', 'cool']
        """"""
        return self.mode

    def set_mode(self, mode):
        """"""
        Get the current work mode
        :param mode: str, working mode. only ['heat', 'cool']
        >>> thermostat.set_mode('cool')
        >>> thermostat.mode
        'cool'
        """"""
        if mode not in ('heat', 'cool'):
            raise ValueError(""mode must be 'heat' or 'cool'"")
        self.mode = mode

    def auto_set_mode(self):
        """"""
        Automatically set the operating mode by comparing with the current temperature and target temperature. If the current temperature is lower than the target temperature, the operating mode is set to 'heat', otherwise it is set to 'cool'.
        >>> thermostat = Thermostat(20.4, 37.5, 'cool')
        >>> thermostat.auto_set_mode()
        >>> thermostat.mode
        'heat'
        """"""
        if self.current_temperature < self.target_temperature:
            self.mode = 'heat'
        else:
            self.mode = 'cool'

    def auto_check_conflict(self):
        """"""
        Check if there is a conflict between the operating mode and the relationship between the current temperature and the target temperature.
        If there is a conflict, the operating mode will be adjusted automatically.
        :return: True if mode isn't conflict with the relationship between the current temperature and the target temperature, or False otherwise.
        >>> thermostat = Thermostat(20.4, 37.5, 'cool')
        >>> thermostat.auto_check_conflict()
        False
        >>> thermostat.mode
        'heat'
        """"""
        desired_mode = 'heat' if self.current_temperature < self.target_temperature else 'cool'
        if self.mode != desired_mode:
            self.mode = desired_mode
            return False
        return True

    def simulate_operation(self):
        """"""
        simulate the operation of Thermostat. It will automatically start the auto_set_mode method to set the operating mode,
        and then automatically adjust the current temperature according to the operating mode until the target temperature is reached.
        :return time: int, the time it took to complete the simulation.
        >>> thermostat = Thermostat(20.4, 37.5, 'cool')
        >>> thermostat.simulate_operation()
        18
        """"""
        self.auto_set_mode()
        steps = 0
        if self.current_temperature == self.target_temperature:
            return steps

        if self.mode == 'heat':
            while self.current_temperature < self.target_temperature:
                steps += 1
                self.current_temperature += 1.0
                if self.current_temperature >= self.target_temperature:
                    self.current_temperature = self.target_temperature
                    break
        else:  # cool
            while self.current_temperature > self.target_temperature:
                steps += 1
                self.current_temperature -= 1.0
                if self.current_temperature <= self.target_temperature:
                    self.current_temperature = self.target_temperature
                    break

        return steps"
86,"class TicTacToe:
    def __init__(self, N=3):
        self.board = [[' ' for _ in range(N)] for _ in range(3)]
        self.current_player = 'X'

    def make_move(self, row, col):
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        else:
            return False

    def check_winner(self):
        for row in self.board:
            if row[0] == row[1] == row[2] != ' ':
                return row[0]
        for col in range(3):
            if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':
                return self.board[0][col]
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':
            return self.board[0][0]
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':
            return self.board[0][2]
        return None

    def is_board_full(self):
        for row in self.board:
            if ' ' in row:
                return False
        return True","class TicTacToe:
    """"""
    The class represents a game of Tic-Tac-Toe and its functions include making a move on the board, checking for a winner, and determining if the board is full.
    """"""

    def __init__(self, N=3):
        """"""
        Initialize a 3x3 game board with all empty spaces and current symble player, default is 'X'.
        """"""
        self.board = [[' ' for _ in range(N)] for _ in range(3)]
        self.current_player = 'X'

    def make_move(self, row, col):
        """"""
        Place the current player's mark at the specified position on the board and switch the mark.
        :param row: int, the row index of the position
        :param col: int, the column index of the position
        :return: bool, indicating whether the move was successful or not
        >>> ttt.current_player
        'X'
        >>> ttt.make_move(1, 1)
        >>> ttt.current_player
        'O'
        """"""

    def check_winner(self):
        """"""
        Check if there is a winner on the board in rows, columns and diagonals three directions
        :return: str or None, the mark of the winner ('X' or 'O'), or None if there is no winner yet
        >>> moves = [(1, 0), (2, 0), (1, 1), (2, 1), (1, 2)]
        >>> for move in moves:
        ...     ttt.make_move(move[0], move[1])
        >>> ttt.check_winner()
        'X'
        """"""

    def is_board_full(self):
        """"""
        Check if the game board is completely filled.
        :return: bool, indicating whether the game board is full or not
        >>> ttt.is_board_full()
        False
        """"""",TicTacToe,snippet_87,"class TicTacToe:
    """"""
    The class represents a game of Tic-Tac-Toe and its functions include making a move on the board, checking for a winner, and determining if the board is full.
    """"""

    def __init__(self, N=3):
        """"""
        Initialize a 3x3 game board with all empty spaces and current symble player, default is 'X'.
        """"""
        self.N = N
        self.board = [[' ' for _ in range(N)] for _ in range(N)]
        self.current_player = 'X'

    def make_move(self, row, col):
        """"""
        Place the current player's mark at the specified position on the board and switch the mark.
        :param row: int, the row index of the position
        :param col: int, the column index of the position
        :return: bool, indicating whether the move was successful or not
        >>> ttt.current_player
        'X'
        >>> ttt.make_move(1, 1)
        >>> ttt.current_player
        'O'
        """"""
        if not (0 <= row < self.N and 0 <= col < self.N):
            return False
        if self.board[row][col] != ' ':
            return False
        self.board[row][col] = self.current_player
        self.current_player = 'O' if self.current_player == 'X' else 'X'
        return True

    def check_winner(self):
        """"""
        Check if there is a winner on the board in rows, columns and diagonals three directions
        :return: str or None, the mark of the winner ('X' or 'O'), or None if there is no winner yet
        >>> moves = [(1, 0), (2, 0), (1, 1), (2, 1), (1, 2)]
        >>> for move in moves:
        ...     ttt.make_move(move[0], move[1])
        >>> ttt.check_winner()
        'X'
        """"""
        n = self.N
        b = self.board

        # Check rows
        for r in range(n):
            if b[r][0] != ' ' and all(b[r][c] == b[r][0] for c in range(n)):
                return b[r][0]

        # Check columns
        for c in range(n):
            if b[0][c] != ' ' and all(b[r][c] == b[0][c] for r in range(n)):
                return b[0][c]

        # Check main diagonal
        if b[0][0] != ' ' and all(b[i][i] == b[0][0] for i in range(n)):
            return b[0][0]

        # Check anti-diagonal
        if b[0][n - 1] != ' ' and all(b[i][n - 1 - i] == b[0][n - 1] for i in range(n)):
            return b[0][n - 1]

        return None

    def is_board_full(self):
        """"""
        Check if the game board is completely filled.
        :return: bool, indicating whether the game board is full or not
        >>> ttt.is_board_full()
        False
        """"""
        return all(cell != ' ' for row in self.board for cell in row)"
87,"import datetime
import time

class TimeUtils:

    def __init__(self):
        self.datetime = datetime.datetime.now()

    def get_current_time(self):
        format = ""%H:%M:%S""
        return self.datetime.strftime(format)

    def get_current_date(self):
        format = ""%Y-%m-%d""
        return self.datetime.strftime(format)

    def add_seconds(self, seconds):
        new_datetime = self.datetime + datetime.timedelta(seconds=seconds)
        format = ""%H:%M:%S""
        return new_datetime.strftime(format)

    def string_to_datetime(self, string):
        return datetime.datetime.strptime(string, ""%Y-%m-%d %H:%M:%S"")

    def datetime_to_string(self, datetime):
        return datetime.strftime(""%Y-%m-%d %H:%M:%S"")

    def get_minutes(self, string_time1, string_time2):
        time1 = self.string_to_datetime(string_time1)
        time2 = self.string_to_datetime(string_time2)
        return round((time2 - time1).seconds / 60)

    def get_format_time(self, year, month, day, hour, minute, second):
        format = ""%Y-%m-%d %H:%M:%S""
        time_item = datetime.datetime(year, month, day, hour, minute, second)
        return time_item.strftime(format)","class TimeUtils:
    """"""
    This is a time util class, including getting the current time and date, adding seconds to a datetime, converting between strings and datetime objects, calculating the time difference in minutes, and formatting a datetime object.
    """"""


    def __init__(self):
        """"""
        Get the current datetime
        """"""
        self.datetime = datetime.datetime.now()

    def get_current_time(self):
        """"""
        Return the current time in the format of '%H:%M:%S'
        :return: string
        >>> timeutils = TimeUtils()
        >>> timeutils.get_current_time()
        ""19:19:22""
        """"""

    def get_current_date(self):
        """"""
        Return the current date in the format of ""%Y-%m-%d""
        :return: string
        >>> timeutils.get_current_date()
        ""2023-06-14""
        """"""

    def add_seconds(self, seconds):
        """"""
        Add the specified number of seconds to the current time
        :param seconds: int, number of seconds to add
        :return: string, time after adding the specified number of seconds in the format '%H:%M:%S'
        >>> timeutils.add_seconds(600)
        ""19:29:22""
        """"""

    def string_to_datetime(self, string):
        """"""
        Convert the time string to a datetime instance
        :param string: string, string before converting format
        :return: datetime instance
        >>> timeutils.string_to_datetime(""2001-7-18 1:1:1"")
        2001-07-18 01:01:01
        """"""

    def datetime_to_string(self, datetime):
        """"""
        Convert a datetime instance to a string
        :param datetime: the datetime instance to convert
        :return: string, converted time string
        >>> timeutils.datetime_to_string(timeutils.datetime)
        ""2023-06-14 19:30:03""
        """"""

    def get_minutes(self, string_time1, string_time2):
        """"""
        Calculate how many minutes have passed between two times, and round the results to the nearest
        :return: int, the number of minutes between two times, rounded off
        >>> timeutils.get_minutes(""2001-7-18 1:1:1"", ""2001-7-18 2:1:1"")
        60
        """"""

    def get_format_time(self, year, month, day, hour, minute, second):
        """"""
        get format time
        :param year: int
        :param month: int
        :param day: int
        :param hour: int
        :param minute: int
        :param second: int
        :return: formatted time string
        >>> timeutils.get_format_time(2001, 7, 18, 1, 1, 1)
        ""2001-07-18 01:01:01""
        """"""",TimeUtils,snippet_88,"import datetime

class TimeUtils:
    """"""
    This is a time util class, including getting the current time and date, adding seconds to a datetime, converting between strings and datetime objects, calculating the time difference in minutes, and formatting a datetime object.
    """"""

    def __init__(self):
        """"""
        Get the current datetime
        """"""
        self.datetime = datetime.datetime.now()

    def get_current_time(self):
        """"""
        Return the current time in the format of '%H:%M:%S'
        :return: string
        >>> timeutils = TimeUtils()
        >>> timeutils.get_current_time()
        ""19:19:22""
        """"""
        return datetime.datetime.now().strftime('%H:%M:%S')

    def get_current_date(self):
        """"""
        Return the current date in the format of ""%Y-%m-%d""
        :return: string
        >>> timeutils.get_current_date()
        ""2023-06-14""
        """"""
        return datetime.datetime.now().strftime('%Y-%m-%d')

    def add_seconds(self, seconds):
        """"""
        Add the specified number of seconds to the current time
        :param seconds: int, number of seconds to add
        :return: string, time after adding the specified number of seconds in the format '%H:%M:%S'
        >>> timeutils.add_seconds(600)
        ""19:29:22""
        """"""
        new_time = self.datetime + datetime.timedelta(seconds=int(seconds))
        return new_time.strftime('%H:%M:%S')

    def string_to_datetime(self, string):
        """"""
        Convert the time string to a datetime instance
        :param string: string, string before converting format
        :return: datetime instance
        >>> timeutils.string_to_datetime(""2001-7-18 1:1:1"")
        2001-07-18 01:01:01
        """"""
        return datetime.datetime.strptime(string, ""%Y-%m-%d %H:%M:%S"")

    def datetime_to_string(self, datetime_obj):
        """"""
        Convert a datetime instance to a string
        :param datetime: the datetime instance to convert
        :return: string, converted time string
        >>> timeutils.datetime_to_string(timeutils.datetime)
        ""2023-06-14 19:30:03""
        """"""
        return datetime_obj.strftime(""%Y-%m-%d %H:%M:%S"")

    def get_minutes(self, string_time1, string_time2):
        """"""
        Calculate how many minutes have passed between two times, and round the results to the nearest
        :return: int, the number of minutes between two times, rounded off
        >>> timeutils.get_minutes(""2001-7-18 1:1:1"", ""2001-7-18 2:1:1"")
        60
        """"""
        dt1 = self.string_to_datetime(string_time1)
        dt2 = self.string_to_datetime(string_time2)
        diff_seconds = abs((dt2 - dt1).total_seconds())
        return int(round(diff_seconds / 60.0))

    def get_format_time(self, year, month, day, hour, minute, second):
        """"""
        get format time
        :param year: int
        :param month: int
        :param day: int
        :param hour: int
        :param minute: int
        :param second: int
        :return: formatted time string
        >>> timeutils.get_format_time(2001, 7, 18, 1, 1, 1)
        ""2001-07-18 01:01:01""
        """"""
        dt = datetime.datetime(int(year), int(month), int(day), int(hour), int(minute), int(second))
        return dt.strftime(""%Y-%m-%d %H:%M:%S"")"
88,"from math import pi, fabs


class TriCalculator:

    def __init__(self):
        pass

    def cos(self, x):
        return round(self.taylor(x, 50), 10)

    def factorial(self, a):
        b = 1
        while a != 1:
            b *= a
            a -= 1
        return b

    def taylor(self, x, n):
        a = 1
        x = x / 180 * pi
        count = 1
        for k in range(1, n):
            if count % 2 != 0:
                a -= (x ** (2 * k)) / self.factorial(2 * k)
            else:
                a += (x ** (2 * k)) / self.factorial(2 * k)
            count += 1
        return a

    def sin(self, x):
        x = x / 180 * pi
        g = 0
        t = x
        n = 1

        while fabs(t) >= 1e-15:
            g += t
            n += 1
            t = -t * x * x / (2 * n - 1) / (2 * n - 2)
        return round(g, 10)

    def tan(self, x):
        if self.cos(x) != 0:
            result = self.sin(x) / self.cos(x)
            return round(result, 10)
        else:
            return False","class TriCalculator:
    """"""
    The class allows to calculate trigonometric values, including cosine, sine, and tangent, using Taylor series approximations.
    """"""


    def __init__(self):
        pass

    def cos(self, x):
        """"""
        Calculate the cos value of the x-degree angle
        :param x:float
        :return:float
        >>> tricalculator = TriCalculator()
        >>> tricalculator.cos(60)
        0.5
        """"""

    def factorial(self, a):
        """"""
        Calculate the factorial of a
        :param a: int
        :return: int
        >>> tricalculator.factorial(5)
        120
        """"""

    def taylor(self, x, n):
        """"""
        Finding the n-order Taylor expansion value of cos (x/180 * pi)
        :param x: int
        :param n: int
        :return: float
        >>> tricalculator.taylor(60, 50)
        0.5000000000000001
        """"""

    def sin(self, x):
        """"""
        Calculate the sin value of the x-degree angle
        :param x: float
        :return: float
        >>> tricalculator.sin(30)
        0.5
        """"""


    def tan(self, x):
        """"""
        Calculate the tan value of the x-degree angle
        :param x: float
        :return: float
        >>> tricalculator.tan(45)
        1.0
        """"""",TriCalculator,snippet_89,"class TriCalculator:
    """"""
    The class allows to calculate trigonometric values, including cosine, sine, and tangent, using Taylor series approximations.
    """"""

    def __init__(self):
        pass

    def cos(self, x):
        """"""
        Calculate the cos value of the x-degree angle
        :param x:float
        :return:float
        >>> tricalculator = TriCalculator()
        >>> tricalculator.cos(60)
        0.5
        """"""
        rad = self._to_radians(x)
        # Use Taylor series for cosine with sufficient terms
        n_terms = 25
        result = 1.0
        term = 1.0
        for k in range(1, n_terms + 1):
            term *= -rad * rad / ((2 * k - 1) * (2 * k))
            result += term
        return self._rounded(result)

    def factorial(self, a):
        """"""
        Calculate the factorial of a
        :param a: int
        :return: int
        >>> tricalculator.factorial(5)
        120
        """"""
        if not isinstance(a, int):
            raise TypeError(""factorial input must be an integer"")
        if a < 0:
            raise ValueError(""factorial is not defined for negative numbers"")
        result = 1
        for i in range(2, a + 1):
            result *= i
        return result

    def taylor(self, x, n):
        """"""
        Finding the n-order Taylor expansion value of cos (x/180 * pi)
        :param x: int
        :param n: int
        :return: float
        >>> tricalculator.taylor(60, 50)
        0.5000000000000001
        """"""
        rad = self._to_radians(x)
        result = 1.0
        term = 1.0
        for k in range(1, n + 1):
            term *= -rad * rad / ((2 * k - 1) * (2 * k))
            result += term
        return result

    def sin(self, x):
        """"""
        Calculate the sin value of the x-degree angle
        :param x: float
        :return: float
        >>> tricalculator.sin(30)
        0.5
        """"""
        rad = self._to_radians(x)
        n_terms = 25
        result = rad
        term = rad
        for k in range(1, n_terms + 1):
            term *= -rad * rad / ((2 * k) * (2 * k + 1))
            result += term
        return self._rounded(result)

    def tan(self, x):
        """"""
        Calculate the tan value of the x-degree angle
        :param x: float
        :return: float
        >>> tricalculator.tan(45)
        1.0
        """"""
        c = self.cos(x)
        s = self.sin(x)
        eps = 1e-15
        if abs(c) < eps:
            return float('inf') if s >= 0 else float('-inf')
        return self._rounded(s / c)

    def _to_radians(self, degrees):
        import math
        # Normalize degrees to improve series convergence
        d = degrees % 360.0
        return d * math.pi / 180.0

    def _rounded(self, value, ndigits=12):
        # Round to stabilize common angles (e.g., 30, 45, 60) for doctests
        r = round(value, ndigits)
        # Avoid negative zero
        return 0.0 if r == -0.0 else r"
89,"import random


class TwentyFourPointGame:
    def __init__(self) -> None:
        self.nums = []

    def _generate_cards(self):
        for i in range(4):
            self.nums.append(random.randint(1, 9))
        assert len(self.nums) == 4

    def get_my_cards(self):
        self.nums = []
        self._generate_cards()
        return self.nums

    def answer(self, expression):
        if expression == 'pass':
            return self.get_my_cards()
        statistic = {}
        for c in expression:
            if c.isdigit() and int(c) in self.nums:
                statistic[c] = statistic.get(c, 0) + 1

        nums_used = statistic.copy()

        for num in self.nums:
            if nums_used.get(str(num), -100) != -100 and nums_used[str(num)] > 0:
                nums_used[str(num)] -= 1
            else:
                return False

        if all(count == 0 for count in nums_used.values()) == True:
            return self.evaluate_expression(expression)
        else:
            return False

    def evaluate_expression(self, expression):
        try:
            if eval(expression) == 24:
                return True
            else:
                return False
        except Exception as e:
            return False","class TwentyFourPointGame:
    """"""
    This ia a game of twenty-four points, which provides to generate four numbers and check whether player's expression is equal to 24.
    """"""

    def __init__(self) -> None:
        self.nums = []


    def _generate_cards(self):
        """"""
        Generate random numbers between 1 and 9 for the cards.
        """"""


    def get_my_cards(self):
        """"""
        Get a list of four random numbers between 1 and 9 representing the player's cards.
        :return: list of integers, representing the player's cards
        >>> game = TwentyFourPointGame()
        >>> game.get_my_cards()

        """"""


    def answer(self, expression):
        """"""
        Check if a given mathematical expression using the cards can evaluate to 24.
        :param expression: string, mathematical expression using the cards
        :return: bool, True if the expression evaluates to 24, False otherwise
        >>> game = TwentyFourPointGame()
        >>> game.nums = [4, 3, 6, 6]
        >>> ans = ""4*3+6+6""
        >>> ret = game.answer(ans)
        True
        """"""


    def evaluate_expression(self, expression):
        """"""
        Evaluate a mathematical expression and check if the result is 24.
        :param expression: string, mathematical expression
        :return: bool, True if the expression evaluates to 24, False otherwise
        >>> game = TwentyFourPointGame()
        >>> nums = [4, 3, 6, 6]
        >>> ans = ""4*3+6+6""
        >>> ret = game.evaluate_expression(ans)
        True
        """"""",TwentyFourPointGame,snippet_90,"```python
import random
import re
import ast
import operator
import math


class TwentyFourPointGame:
    """"""
    This ia a game of twenty-four points, which provides to generate four numbers and check whether player's expression is equal to 24.
    """"""

    def __init__(self) -> None:
        self.nums = []

    def _generate_cards(self):
        """"""
        Generate random numbers between 1 and 9 for the cards.
        """"""
        self.nums = [random.randint(1, 9) for _ in range(4)]

    def get_my_cards(self):
        """"""
        Get a list of four random numbers between 1 and 9 representing the player's cards.
        :return: list of integers, representing the player's cards
        >>> game = TwentyFourPointGame()
        >>> game.get_my_cards()
        """"""
        self._generate_cards()
        return list(self.nums)

    def answer(self, expression):
        """"""
        Check if a given mathematical expression using the cards can evaluate to 24.
        :param expression: string, mathematical expression using the cards
        :return: bool, True if the expression evaluates to 24, False otherwise
        >>> game = TwentyFourPointGame()
        >>> game.nums = [4, 3, 6, 6]
        >>> ans = ""4*3+6+6""
        >>> ret = game.answer(ans)
        True
        """"""
        if not isinstance(expression, str) or not self.nums or len(self.nums) != 4:
            return False

        tokens = re.findall(r'\d+', expression)
        try:
            used_nums = list(map(int, tokens))
        except ValueError:
            return False

        if sorted(used_nums) != sorted(self.nums):
            return False

        return self.evaluate_expression(expression)

    def evaluate_expression(self, expression):
        """"""
        Evaluate a mathematical expression and check if the result is 24.
        :param expression: string, mathematical expression
        :return: bool, True if the expression evaluates to 24, False otherwise
        >>> game = TwentyFourPointGame()
        >>> nums = [4, 3, 6, 6]
        >>> ans = ""4*3+6+6""
        >>> ret = game.evaluate_expression(ans)
        True
        """"""
        if not isinstance(expression, str) or not expression.strip():
            return False

        try:
            node = ast.parse(expression, mode='eval')
            value = self._safe_eval(node.body)
            if not (isinstance(value, (int, float)) and math.isfinite(value)):
                return False
            return abs(value - 24) < 1e-6
        except Exception:
            return False

    def _safe_eval(self, node):
        ops = {
            ast.Add: operator.add,
            ast.Sub: operator.sub,
            ast.Mult: operator.mul,
            ast.Div: operator.truediv,
        }

        if isinstance(node, ast.BinOp) and type(node.op) in ops:
            left = self._safe_eval(node.left)
            right = self._safe_eval(node.right)
            return ops[type(node.op)](left, right)

        if isinstance(node, ast.UnaryOp) and isinstance(node.op, (ast.UAdd, ast.USub)):
            operand = self._safe_eval(node.operand)
            return +operand if isinstance(node.op, ast.UAdd) else -operand

        if isinstance(node, ast.Num):  # Python <3.8
            return node.n

        if isinstance(node, ast.Constant) and isinstance(node.value, (int, float)):  # Python 3.8+
            return node.value

        if isinstance(node, ast.Expression):
            return self._safe_eval(node.body)

        if isinstance(node, ast.Paren):
            return self._safe_eval(node.expr)

        if isinstance(node, ast.Call) or isinstance(node, ast.Name):
            raise ValueError(""Not allowed"")

        raise ValueError(""Unsupported expression"")
```"
90,"class URLHandler:
    def __init__(self, url):
        self.url = url

    def get_scheme(self):
        scheme_end = self.url.find(""://"")
        if scheme_end != -1:
            return self.url[:scheme_end]
        return None

    def get_host(self):
        scheme_end = self.url.find(""://"")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find(""/"")
            if host_end != -1:
                return url_without_scheme[:host_end]
            return url_without_scheme
        return None

    def get_path(self):
        scheme_end = self.url.find(""://"")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find(""/"")
            if host_end != -1:
                return url_without_scheme[host_end:]
        return None

    def get_query_params(self):
        query_start = self.url.find(""?"")
        fragment_start = self.url.find(""#"")
        if query_start != -1:
            query_string = self.url[query_start + 1:fragment_start]
            params = {}
            if len(query_string) > 0:
                param_pairs = query_string.split(""&"")
                for pair in param_pairs:
                    key_value = pair.split(""="")
                    if len(key_value) == 2:
                        key, value = key_value
                        params[key] = value
            return params
        return None

    def get_fragment(self):
        fragment_start = self.url.find(""#"")
        if fragment_start != -1:
            return self.url[fragment_start + 1:]
        return None","class URLHandler:
    """"""
    The class supports to handle URLs, including extracting the scheme, host, path, query parameters, and fragment.
    """"""

    def __init__(self, url):
        """"""
        Initialize URLHandler's URL
        """"""
        self.url = url

    def get_scheme(self):
        """"""
        get the scheme of the URL
        :return: string, If successful, return the scheme of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_scheme()
        ""https""
        """"""


    def get_host(self):
        """"""
        Get the second part of the URL, which is the host domain name
        :return: string, If successful, return the host domain name of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_host()
        ""www.baidu.com""
        """"""


    def get_path(self):
        """"""
        Get the third part of the URL, which is the address of the resource
        :return: string, If successful, return the address of the resource of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_path()
        ""/s?wd=aaa&rsv_spt=1#page""
        """"""


    def get_query_params(self):
        """"""
        Get the request parameters for the URL
        :return: dict, If successful, return the request parameters of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_query_params()
        {""wd"": ""aaa"", ""rsv_spt"": ""1""}
        """"""


    def get_fragment(self):
        """"""
        Get the fragment after '#' in the URL
        :return: string, If successful, return the fragment after '#' of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_fragment()
        ""page""
        """"""",URLHandler,snippet_91,"class URLHandler:
    """"""
    The class supports to handle URLs, including extracting the scheme, host, path, query parameters, and fragment.
    """"""

    def __init__(self, url):
        """"""
        Initialize URLHandler's URL
        """"""
        self.url = url

    def get_scheme(self):
        """"""
        get the scheme of the URL
        :return: string, If successful, return the scheme of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_scheme()
        ""https""
        """"""
        from urllib.parse import urlparse
        return urlparse(self.url).scheme

    def get_host(self):
        """"""
        Get the second part of the URL, which is the host domain name
        :return: string, If successful, return the host domain name of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_host()
        ""www.baidu.com""
        """"""
        from urllib.parse import urlparse
        return urlparse(self.url).netloc

    def get_path(self):
        """"""
        Get the third part of the URL, which is the address of the resource
        :return: string, If successful, return the address of the resource of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_path()
        ""/s?wd=aaa&rsv_spt=1#page""
        """"""
        from urllib.parse import urlparse
        parsed = urlparse(self.url)
        path = parsed.path or """"
        if parsed.query:
            path += ""?"" + parsed.query
        if parsed.fragment:
            path += ""#"" + parsed.fragment
        return path

    def get_query_params(self):
        """"""
        Get the request parameters for the URL
        :return: dict, If successful, return the request parameters of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_query_params()
        {""wd"": ""aaa"", ""rsv_spt"": ""1""}
        """"""
        from urllib.parse import urlparse, parse_qs
        query = urlparse(self.url).query
        params = parse_qs(query, keep_blank_values=True)
        # Convert list values to first item as string
        return {k: (v[0] if v else """") for k, v in params.items()}

    def get_fragment(self):
        """"""
        Get the fragment after '#' in the URL
        :return: string, If successful, return the fragment after '#' of the URL
        >>> urlhandler = URLHandler(""https://www.baidu.com/s?wd=aaa&rsv_spt=1#page"")
        >>> urlhandler.get_fragment()
        ""page""
        """"""
        from urllib.parse import urlparse
        return urlparse(self.url).fragment or """""
91,"import urllib.parse


class UrlPath:
    def __init__(self):
        self.segments = []
        self.with_end_tag = False

    def add(self, segment):
        self.segments.append(self.fix_path(segment))

    def parse(self, path, charset):
        if path:
            if path.endswith('/'):
                self.with_end_tag = True

            path = self.fix_path(path)
            if path:
                split = path.split('/')
                for seg in split:
                    decoded_seg = urllib.parse.unquote(seg, encoding=charset)
                    self.segments.append(decoded_seg)

    @staticmethod
    def fix_path(path):
        if not path:
            return ''

        segment_str = path.strip('/')
        return segment_str","class UrlPath:
    """"""
    The  class is a utility for encapsulating and manipulating the path component of a URL, including adding nodes, parsing path strings, and building path strings with optional encoding.
    """"""

    def __init__(self):
        """"""
        Initializes the UrlPath object with an empty list of segments and a flag indicating the presence of an end tag.
        """"""
        self.segments = []
        self.with_end_tag = False

    def add(self, segment):
        """"""
        Adds a segment to the list of segments in the UrlPath.
        :param segment: str, the segment to add.
        >>> url_path = UrlPath()
        >>> url_path.add('foo')
        >>> url_path.add('bar')

        url_path.segments = ['foo', 'bar']
        """"""


    def parse(self, path, charset):
        """"""
        Parses a given path string and populates the list of segments in the UrlPath.
        :param path: str, the path string to parse.
        :param charset: str, the character encoding of the path string.
        >>> url_path = UrlPath()
        >>> url_path.parse('/foo/bar/', 'utf-8')

        url_path.segments = ['foo', 'bar']
        """"""


    @staticmethod
    def fix_path(path):
        """"""
        Fixes the given path string by removing leading and trailing slashes.
        :param path: str, the path string to fix.
        :return: str, the fixed path string.
        >>> url_path = UrlPath()
        >>> url_path.fix_path('/foo/bar/')
        'foo/bar'

        """"""",UrlPath,snippet_92,"class UrlPath:
    """"""
    The  class is a utility for encapsulating and manipulating the path component of a URL, including adding nodes, parsing path strings, and building path strings with optional encoding.
    """"""

    def __init__(self):
        """"""
        Initializes the UrlPath object with an empty list of segments and a flag indicating the presence of an end tag.
        """"""
        self.segments = []
        self.with_end_tag = False

    def add(self, segment):
        """"""
        Adds a segment to the list of segments in the UrlPath.
        :param segment: str, the segment to add.
        >>> url_path = UrlPath()
        >>> url_path.add('foo')
        >>> url_path.add('bar')

        url_path.segments = ['foo', 'bar']
        """"""
        if not isinstance(segment, str):
            raise TypeError(""segment must be a string"")
        self.segments.append(segment)

    def parse(self, path, charset):
        """"""
        Parses a given path string and populates the list of segments in the UrlPath.
        :param path: str, the path string to parse.
        :param charset: str, the character encoding of the path string.
        >>> url_path = UrlPath()
        >>> url_path.parse('/foo/bar/', 'utf-8')

        url_path.segments = ['foo', 'bar']
        """"""
        from urllib.parse import unquote

        self.segments = []
        self.with_end_tag = False

        if not path:
            return

        self.with_end_tag = path.endswith('/')

        # Split first to preserve encoded slashes (%2F) within segments
        parts = path.split('/')

        # Remove leading empty (from leading slash)
        while parts and parts[0] == '':
            parts.pop(0)
        # Remove trailing empty (from trailing slash)
        while parts and parts[-1] == '':
            parts.pop()

        # Decode each non-empty segment
        decoded = []
        for p in parts:
            if p == '':
                # ignore empty segments from consecutive slashes
                continue
            decoded.append(unquote(p, encoding=charset, errors='strict'))

        self.segments = decoded

    @staticmethod
    def fix_path(path):
        """"""
        Fixes the given path string by removing leading and trailing slashes.
        :param path: str, the path string to fix.
        :return: str, the fixed path string.
        >>> url_path = UrlPath()
        >>> url_path.fix_path('/foo/bar/')
        'foo/bar'

        """"""
        if path is None:
            return ''
        return path.strip('/')"
92,"import sqlite3


class UserLoginDB:
    def __init__(self, db_name):
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()

    def insert_user(self, username, password):
        self.cursor.execute('''
            INSERT INTO users (username, password)
            VALUES (?, ?)
        ''', (username, password))
        self.connection.commit()

    def search_user_by_username(self, username):
        self.cursor.execute('''
            SELECT * FROM users WHERE username = ?
        ''', (username,))
        user = self.cursor.fetchone()
        return user

    def delete_user_by_username(self, username):
        self.cursor.execute('''
            DELETE FROM users WHERE username = ?
        ''', (username,))
        self.connection.commit()

    def validate_user_login(self, username, password):
        user = self.search_user_by_username(username)
        if user is not None and user[1] == password:
            return True
        return False","class UserLoginDB:
    """"""
    This is a database management class for user login verification, providing functions for inserting user information, searching user information, deleting user information, and validating user login.
    """"""

    def __init__(self, db_name):
        """"""
        Initializes the UserLoginDB object with the specified database name.
        :param db_name: str, the name of the SQLite database.
        """"""
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()

    def insert_user(self, username, password):
        """"""
        Inserts a new user into the ""users"" table.
        :param username: str, the username of the user.
        :param password: str, the password of the user.
        :return: None
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        """"""


    def search_user_by_username(self, username):
        """"""
        Searches for users in the ""users"" table by username.
        :param username: str, the username of the user to search for.
        :return:list of tuples, the rows from the ""users"" table that match the search criteria.
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        >>> result = user_db.search_user_by_username('user1')
        len(result) = 1
        """"""


    def delete_user_by_username(self, username):
        """"""
        Deletes a user from the ""users"" table by username.
        :param username: str, the username of the user to delete.
        :return: None
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        >>> user_db.delete_user_by_username('user1')
        """"""


    def validate_user_login(self, username, password):
        """"""
        Determine whether the user can log in, that is, the user is in the database and the password is correct
        :param username:str, the username of the user to validate.
        :param password:str, the password of the user to validate.
        :return:bool, representing whether the user can log in correctly
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        >>> user_db.validate_user_login('user1', 'pass1')
        True
        """"""",UserLoginDB,snippet_93,"import sqlite3

class UserLoginDB:
    """"""
    This is a database management class for user login verification, providing functions for inserting user information, searching user information, deleting user information, and validating user login.
    """"""

    def __init__(self, db_name):
        """"""
        Initializes the UserLoginDB object with the specified database name.
        :param db_name: str, the name of the SQLite database.
        """"""
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()

    def create_table(self):
        """"""
        Creates the 'users' table if it does not already exist.
        :return: None
        """"""
        self.cursor.execute(
            """"""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL
            )
            """"""
        )
        self.connection.commit()

    def insert_user(self, username, password):
        """"""
        Inserts a new user into the ""users"" table.
        :param username: str, the username of the user.
        :param password: str, the password of the user.
        :return: None
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        """"""
        self.cursor.execute(
            ""INSERT INTO users (username, password) VALUES (?, ?)"",
            (username, password),
        )
        self.connection.commit()

    def search_user_by_username(self, username):
        """"""
        Searches for users in the ""users"" table by username.
        :param username: str, the username of the user to search for.
        :return:list of tuples, the rows from the ""users"" table that match the search criteria.
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        >>> result = user_db.search_user_by_username('user1')
        len(result) = 1
        """"""
        self.cursor.execute(
            ""SELECT id, username, password FROM users WHERE username = ?"",
            (username,),
        )
        return self.cursor.fetchall()

    def delete_user_by_username(self, username):
        """"""
        Deletes a user from the ""users"" table by username.
        :param username: str, the username of the user to delete.
        :return: None
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        >>> user_db.delete_user_by_username('user1')
        """"""
        self.cursor.execute(
            ""DELETE FROM users WHERE username = ?"",
            (username,),
        )
        self.connection.commit()

    def validate_user_login(self, username, password):
        """"""
        Determine whether the user can log in, that is, the user is in the database and the password is correct
        :param username:str, the username of the user to validate.
        :param password:str, the password of the user to validate.
        :return:bool, representing whether the user can log in correctly
        >>> user_db = UserLoginDB(""user_database.db"")
        >>> user_db.create_table()
        >>> user_db.insert_user('user1', 'pass1')
        >>> user_db.validate_user_login('user1', 'pass1')
        True
        """"""
        self.cursor.execute(
            ""SELECT 1 FROM users WHERE username = ? AND password = ? LIMIT 1"",
            (username, password),
        )
        return self.cursor.fetchone() is not None

    def close(self):
        """"""
        Closes the database connection.
        """"""
        try:
            if self.cursor:
                self.cursor.close()
        finally:
            if self.connection:
                self.connection.close()"
93,"import numpy as np
from gensim import matutils
from numpy import dot, array


class VectorUtil:
    @staticmethod
    def similarity(vector_1, vector_2):
        return dot(matutils.unitvec(vector_1), matutils.unitvec(vector_2))

    @staticmethod
    def cosine_similarities(vector_1, vectors_all):
        norm = np.linalg.norm(vector_1)
        all_norms = np.linalg.norm(vectors_all, axis=1)
        dot_products = dot(vectors_all, vector_1)
        similarities = dot_products / (norm * all_norms)
        return similarities

    @staticmethod
    def n_similarity(vector_list_1, vector_list_2):
        if not (len(vector_list_1) and len(vector_list_2)):
            raise ZeroDivisionError('At least one of the passed list is empty.')

        return dot(matutils.unitvec(array(vector_list_1).mean(axis=0)),
                   matutils.unitvec(array(vector_list_2).mean(axis=0)))

    @staticmethod
    def compute_idf_weight_dict(total_num, number_dict):
        index_2_key_map = {}

        index = 0

        count_list = []
        for key, count in number_dict.items():
            index_2_key_map[index] = key
            count_list.append(count)
            index = index + 1

        a = np.array(count_list)
        ## smooth, in case the divide by zero error
        a = np.log((total_num + 1) / (a + 1))
        result = {}

        for index, w in enumerate(a):
            key = index_2_key_map[index]
            result[key] = w

        return result","class VectorUtil:
    """"""
    The class provides vector operations, including calculating similarity, cosine similarities, average similarity, and IDF weights.
    """"""

    @staticmethod
    def similarity(vector_1, vector_2):
        """"""
        Compute the cosine similarity between one vector and another vector.
        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).
        :param vector_2: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).
        :return: numpy.ndarray, Contains cosine distance between `vector_1` and `vector_2`
        >>> vector_1 = np.array([1, 1])
        >>> vector_2 = np.array([1, 0])
        >>> VectorUtil.similarity(vector_1, vector_2)
        0.7071067811865475
        """"""


    @staticmethod
    def cosine_similarities(vector_1, vectors_all):
        """"""
        Compute cosine similarities between one vector and a set of other vectors.
        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).
        :param vectors_all: list of numpy.ndarray, For each row in vectors_all, distance from vector_1 is computed, expected shape (num_vectors, dim).
        :return: numpy.ndarray, Contains cosine distance between `vector_1` and each row in `vectors_all`, shape (num_vectors,).
        >>> vector1 = np.array([1, 2, 3])
        >>> vectors_all = [np.array([4, 5, 6]), np.array([7, 8, 9])]
        >>> VectorUtil.cosine_similarities(vector1, vectors_all)
        [0.97463185 0.95941195]
        """"""


    @staticmethod
    def n_similarity(vector_list_1, vector_list_2):
        """"""
        Compute cosine similarity between two sets of vectors.
        :param vector_list_1: list of numpy vector
        :param vector_list_2: list of numpy vector
        :return: numpy.ndarray, Similarities between vector_list_1 and vector_list_2.
        >>> vector_list1 = [np.array([1, 2, 3]), np.array([4, 5, 6])]
        >>> vector_list2 = [np.array([7, 8, 9]), np.array([10, 11, 12])]
        >>> VectorUtil.n_similarity(vector_list1, vector_list2)
        0.9897287473881233
        """"""


    @staticmethod
    def compute_idf_weight_dict(total_num, number_dict):
        """"""
        Calculate log(total_num+1/count+1) for each count in number_dict
        :param total_num: int
        :param number_dict: dict
        :return: dict
        >>> num_dict = {'key1':0.1, 'key2':0.5}
        >>> VectorUtil.compute_idf_weight_dict(2, num_dict)
        {'key1': 1.0033021088637848, 'key2': 0.6931471805599453}
        """"""",VectorUtil,snippet_94,"import numpy as np


class VectorUtil:
    """"""
    The class provides vector operations, including calculating similarity, cosine similarities, average similarity, and IDF weights.
    """"""

    @staticmethod
    def similarity(vector_1, vector_2):
        """"""
        Compute the cosine similarity between one vector and another vector.
        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).
        :param vector_2: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).
        :return: numpy.ndarray, Contains cosine distance between `vector_1` and `vector_2`
        >>> vector_1 = np.array([1, 1])
        >>> vector_2 = np.array([1, 0])
        >>> VectorUtil.similarity(vector_1, vector_2)
        0.7071067811865475
        """"""
        v1 = np.asarray(vector_1, dtype=float).ravel()
        v2 = np.asarray(vector_2, dtype=float).ravel()
        if v1.shape != v2.shape:
            raise ValueError(""Vectors must have the same shape."")
        norm1 = np.linalg.norm(v1)
        norm2 = np.linalg.norm(v2)
        if norm1 == 0.0 or norm2 == 0.0:
            return 0.0
        return float(np.dot(v1, v2) / (norm1 * norm2))

    @staticmethod
    def cosine_similarities(vector_1, vectors_all):
        """"""
        Compute cosine similarities between one vector and a set of other vectors.
        :param vector_1: numpy.ndarray, Vector from which similarities are to be computed, expected shape (dim,).
        :param vectors_all: list of numpy.ndarray, For each row in vectors_all, distance from vector_1 is computed, expected shape (num_vectors, dim).
        :return: numpy.ndarray, Contains cosine distance between `vector_1` and each row in `vectors_all`, shape (num_vectors,).
        >>> vector1 = np.array([1, 2, 3])
        >>> vectors_all = [np.array([4, 5, 6]), np.array([7, 8, 9])]
        >>> VectorUtil.cosine_similarities(vector1, vectors_all)
        [0.97463185 0.94491118]
        """"""
        v1 = np.asarray(vector_1, dtype=float).ravel()
        if len(vectors_all) == 0:
            return np.array([], dtype=float)
        mat = np.vstack([np.asarray(v, dtype=float).ravel() for v in vectors_all])
        if mat.shape[1] != v1.shape[0]:
            raise ValueError(""All vectors must have the same dimensionality."")
        v1_norm = np.linalg.norm(v1)
        mat_norms = np.linalg.norm(mat, axis=1)
        denom = v1_norm * mat_norms
        # Avoid division by zero
        with np.errstate(divide='ignore', invalid='ignore'):
            sims = np.dot(mat, v1) / denom
            sims = np.where((denom == 0) | (v1_norm == 0), 0.0, sims)
        return sims

    @staticmethod
    def n_similarity(vector_list_1, vector_list_2):
        """"""
        Compute cosine similarity between two sets of vectors.
        :param vector_list_1: list of numpy vector
        :param vector_list_2: list of numpy vector
        :return: numpy.ndarray, Similarities between vector_list_1 and vector_list_2.
        >>> vector_list1 = [np.array([1, 2, 3]), np.array([4, 5, 6])]
        >>> vector_list2 = [np.array([7, 8, 9]), np.array([10, 11, 12])]
        >>> VectorUtil.n_similarity(vector_list1, vector_list2)
        0.9897287473881233
        """"""
        if len(vector_list_1) == 0 or len(vector_list_2) == 0:
            return 0.0
        mat1 = np.vstack([np.asarray(v, dtype=float).ravel() for v in vector_list_1])
        mat2 = np.vstack([np.asarray(v, dtype=float).ravel() for v in vector_list_2])
        if mat1.shape[1] != mat2.shape[1]:
            raise ValueError(""Vectors in both lists must have the same dimensionality."")
        mean1 = mat1.mean(axis=0)
        mean2 = mat2.mean(axis=0)
        return VectorUtil.similarity(mean1, mean2)

    @staticmethod
    def compute_idf_weight_dict(total_num, number_dict):
        """"""
        Calculate log(total_num+1/count+1) for each count in number_dict
        :param total_num: int
        :param number_dict: dict
        :return: dict
        >>> num_dict = {'key1':0.1, 'key2':0.5}
        >>> VectorUtil.compute_idf_weight_dict(2, num_dict)
        {'key1': 1.0033021088637848, 'key2': 0.6931471805599453}
        """"""
        if total_num < 0:
            raise ValueError(""total_num must be non-negative."")
        result = {}
        for k, v in number_dict.items():
            count = float(v)
            result[k] = float(np.log((total_num + 1.0) / (count + 1.0)))
        return result"
94,"class VendingMachine:
    def __init__(self):
        self.inventory = {}
        self.balance = 0

    def add_item(self, item_name, price, quantity):
        if not self.restock_item(item_name, quantity):
            self.inventory[item_name] = {'price': price, 'quantity': quantity}

    def insert_coin(self, amount):
        self.balance += amount
        return self.balance

    def purchase_item(self, item_name):
        if item_name in self.inventory:
            item = self.inventory[item_name]
            if item['quantity'] > 0 and self.balance >= item['price']:
                self.balance -= item['price']
                item['quantity'] -= 1
                return self.balance
            else:
                return False
        else:
            return False

    def restock_item(self, item_name, quantity):
        if item_name in self.inventory:
            self.inventory[item_name]['quantity'] += quantity
            return True
        else:
            return False

    def display_items(self):
        if not self.inventory:
            return False
        else:
            items = []
            for item_name, item_info in self.inventory.items():
                items.append(f""{item_name} - ${item_info['price']} [{item_info['quantity']}]"")
            return ""\n"".join(items)","class VendingMachine:
    """"""
    This is a class to simulate a vending machine, including adding products, inserting coins, purchasing products, viewing balance, replenishing product inventory, and displaying product information.
    """"""

    def __init__(self):
        """"""
        Initializes the vending machine's inventory and balance.
        """"""
        self.inventory = {}
        self.balance = 0

    def add_item(self, item_name, price, quantity):
        """"""
        Adds a product to the vending machine's inventory.
        :param item_name: The name of the product to be added, str.
        :param price: The price of the product to be added, float.
        :param quantity: The quantity of the product to be added, int.
        :return: None
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.add_item('Coke', 1.25, 10)
        >>> vendingMachine.inventory
        {'Coke': {'price': 1.25, 'quantity': 10}}

        """"""

    def insert_coin(self, amount):
        """"""
        Inserts coins into the vending machine.
        :param amount: The amount of coins to be inserted, float.
        :return: The balance of the vending machine after the coins are inserted, float.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.insert_coin(1.25)
        1.25

        """"""

    def purchase_item(self, item_name):
        """"""
        Purchases a product from the vending machine and returns the balance after the purchase and display purchase unsuccessful if the product is out of stock.
        :param item_name: The name of the product to be purchased, str.
        :return: If successful, returns the balance of the vending machine after the product is purchased, float,otherwise,returns False.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}
        >>> vendingMachine.balance = 1.25
        >>> vendingMachine.purchase_item('Coke')
        0.0
        >>> vendingMachine.purchase_item('Pizza')
        False

        """"""

    def restock_item(self, item_name, quantity):
        """"""
        Replenishes the inventory of a product already in the vending machine.
        :param item_name: The name of the product to be replenished, str.
        :param quantity: The quantity of the product to be replenished, int.
        :return: If the product is already in the vending machine, returns True, otherwise, returns False.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}
        >>> vendingMachine.restock_item('Coke', 10)
        True
        >>> vendingMachine.restock_item('Pizza', 10)
        False

        """"""

    def display_items(self):
        """"""
        Displays the products in the vending machine.
        :return: If the vending machine is empty, returns False, otherwise, returns a list of the products in the vending machine, str.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.display_items()
        False
        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10} }
        >>> vendingMachine.display_items()
        'Coke - $1.25 [10]'

        """"""",VendingMachine,snippet_95,"```python
class VendingMachine:
    """"""
    This is a class to simulate a vending machine, including adding products, inserting coins, purchasing products, viewing balance, replenishing product inventory, and displaying product information.
    """"""

    def __init__(self):
        """"""
        Initializes the vending machine's inventory and balance.
        """"""
        self.inventory = {}
        self.balance = 0

    def add_item(self, item_name, price, quantity):
        """"""
        Adds a product to the vending machine's inventory.
        :param item_name: The name of the product to be added, str.
        :param price: The price of the product to be added, float.
        :param quantity: The quantity of the product to be added, int.
        :return: None
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.add_item('Coke', 1.25, 10)
        >>> vendingMachine.inventory
        {'Coke': {'price': 1.25, 'quantity': 10}}

        """"""
        self.inventory[item_name] = {'price': float(price), 'quantity': int(quantity)}

    def insert_coin(self, amount):
        """"""
        Inserts coins into the vending machine.
        :param amount: The amount of coins to be inserted, float.
        :return: The balance of the vending machine after the coins are inserted, float.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.insert_coin(1.25)
        1.25

        """"""
        self.balance += float(amount)
        return self.balance

    def purchase_item(self, item_name):
        """"""
        Purchases a product from the vending machine and returns the balance after the purchase and display purchase unsuccessful if the product is out of stock.
        :param item_name: The name of the product to be purchased, str.
        :return: If successful, returns the balance of the vending machine after the product is purchased, float,otherwise,returns False.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}
        >>> vendingMachine.balance = 1.25
        >>> vendingMachine.purchase_item('Coke')
        0.0
        >>> vendingMachine.purchase_item('Pizza')
        False

        """"""
        item = self.inventory.get(item_name)
        if not item or item.get('quantity', 0) <= 0:
            return False
        price = float(item.get('price', 0.0))
        if self.balance < price:
            return False
        self.balance -= price
        item['quantity'] -= 1
        return self.balance

    def restock_item(self, item_name, quantity):
        """"""
        Replenishes the inventory of a product already in the vending machine.
        :param item_name: The name of the product to be replenished, str.
        :param quantity: The quantity of the product to be replenished, int.
        :return: If the product is already in the vending machine, returns True, otherwise, returns False.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}
        >>> vendingMachine.restock_item('Coke', 10)
        True
        >>> vendingMachine.restock_item('Pizza', 10)
        False

        """"""
        if item_name in self.inventory:
            self.inventory[item_name]['quantity'] += int(quantity)
            return True
        return False

    def display_items(self):
        """"""
        Displays the products in the vending machine.
        :return: If the vending machine is empty, returns False, otherwise, returns a list of the products in the vending machine, str.
        >>> vendingMachine = VendingMachine()
        >>> vendingMachine.display_items()
        False
        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10} }
        >>> vendingMachine.display_items()
        'Coke - $1.25 [10]'

        """"""
        if not self.inventory:
            return False
        parts = []
        for name in sorted(self.inventory.keys()):
            info = self.inventory[name]
            parts.append(f""{name} - ${info['price']:.2f} [{info['quantity']}]"")
        return "", "".join(parts)
```"
95,"class Warehouse:
    def __init__(self):
        self.inventory = {}  # Product ID: Product
        self.orders = {}  # Order ID: Order

    def add_product(self, product_id, name, quantity):
        if product_id not in self.inventory:
            self.inventory[product_id] = {'name': name, 'quantity': quantity}
        else:
            self.inventory[product_id]['quantity'] += quantity

    def update_product_quantity(self, product_id, quantity):
        if product_id in self.inventory:
            self.inventory[product_id]['quantity'] += quantity

    def get_product_quantity(self, product_id):
        if product_id in self.inventory:
            return self.inventory[product_id]['quantity']
        else:
            return False

    def create_order(self, order_id, product_id, quantity):
        if self.get_product_quantity(product_id) >= quantity:
            self.update_product_quantity(product_id, -quantity)
            self.orders[order_id] = {'product_id': product_id, 'quantity': quantity, 'status': 'Shipped'}
        else:
            return False

    def change_order_status(self, order_id, status):
        if order_id in self.orders:
            self.orders[order_id]['status'] = status
        else:
            return False

    def track_order(self, order_id):
        if order_id in self.orders:
            return self.orders[order_id]['status']
        else:
            return False","class Warehouse:
    """"""
    The class manages inventory and orders, including adding products, updating product quantities, retrieving product quantities, creating orders, changing order statuses, and tracking orders.
    """"""

    def __init__(self):
        """"""
        Initialize two fields.
        self.inventory is a dict that stores the products.
        self.inventory = {Product ID: Product}
        self.orders is a dict that stores the products in a order.
        self.orders = {Order ID: Order}
        """"""
        self.inventory = {}  # Product ID: Product
        self.orders = {}  # Order ID: Order

    def add_product(self, product_id, name, quantity):
        """"""
        Add product to inventory and plus the quantity if it has existed in inventory.
        Or just add new product to dict otherwise.
        :param product_id: int
        :param name: str, product name
        :param quantity: int, product quantity
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.inventory
        {1: {'name': 'product1', 'quantity': 3}}
        """"""

    def update_product_quantity(self, product_id, quantity):
        """"""
        According to product_id, add the quantity to the corresponding product in inventory.
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.update_product_quantity(1, -1)
        >>> warehouse.inventory
        {1: {'name': 'product1', 'quantity': 2}}
        """"""

    def get_product_quantity(self, product_id):
        """"""
        Get the quantity of specific product by product_id.
        :param product_id, int
        :return: if the product_id is in inventory then return the corresponding quantity,
                or False otherwise.
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.get_product_quantity(1)
        3
        >>> warehouse.get_product_quantity(2)
        False
        """"""

    def create_order(self, order_id, product_id, quantity):
        """"""
        Create a order which includes the infomation of product, like id and quantity.
        And put the new order into self.orders.
        The default value of status is 'Shipped'.
        :param order_id: int
        :param product_id: int
        :param quantity: the quantity of product that be selected.
        :return False: only if product_id is not in inventory or the quantity is not adequate
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.create_order(1, 1, 2)
        >>> warehouse.orders
        {1: {'product_id': 1, 'quantity': 2, 'status': 'Shipped'}}
        >>> warehouse.create_order(1, 2, 2)
        False
        """"""

    def change_order_status(self, order_id, status):
        """"""
        Change the status of order if the input order_id is in self.orders.
        :param order_id: int
        :param status: str, the state that is going to change to
        :return False: only if the order_id is not in self.orders
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.create_order(1, 1, 2)
        >>> warehouse.change_order_status(1, ""done"")
        >>> warehouse.orders
        {1: {'product_id': 1, 'quantity': 2, 'status': 'done'}}
        """"""

    def track_order(self, order_id):
        """"""
        Get the status of specific order.
        :param order_id: int
        :return False: only if the order_id is not in self.orders.
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.create_order(1, 1, 2)
        >>> warehouse.track_order(1)
        'Shipped'
        """"""",Warehouse,snippet_96,"class Warehouse:
    """"""
    The class manages inventory and orders, including adding products, updating product quantities, retrieving product quantities, creating orders, changing order statuses, and tracking orders.
    """"""

    def __init__(self):
        """"""
        Initialize two fields.
        self.inventory is a dict that stores the products.
        self.inventory = {Product ID: Product}
        self.orders is a dict that stores the products in a order.
        self.orders = {Order ID: Order}
        """"""
        self.inventory = {}  # Product ID: Product
        self.orders = {}  # Order ID: Order

    def add_product(self, product_id, name, quantity):
        """"""
        Add product to inventory and plus the quantity if it has existed in inventory.
        Or just add new product to dict otherwise.
        :param product_id: int
        :param name: str, product name
        :param quantity: int, product quantity
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.inventory
        {1: {'name': 'product1', 'quantity': 3}}
        """"""
        if product_id in self.inventory:
            self.inventory[product_id][""quantity""] += quantity
        else:
            self.inventory[product_id] = {""name"": name, ""quantity"": quantity}

    def update_product_quantity(self, product_id, quantity):
        """"""
        According to product_id, add the quantity to the corresponding product in inventory.
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.update_product_quantity(1, -1)
        >>> warehouse.inventory
        {1: {'name': 'product1', 'quantity': 2}}
        """"""
        if product_id not in self.inventory:
            return False
        self.inventory[product_id][""quantity""] += quantity

    def get_product_quantity(self, product_id):
        """"""
        Get the quantity of specific product by product_id.
        :param product_id, int
        :return: if the product_id is in inventory then return the corresponding quantity,
                or False otherwise.
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.get_product_quantity(1)
        3
        >>> warehouse.get_product_quantity(2)
        False
        """"""
        if product_id not in self.inventory:
            return False
        return self.inventory[product_id][""quantity""]

    def create_order(self, order_id, product_id, quantity):
        """"""
        Create a order which includes the infomation of product, like id and quantity.
        And put the new order into self.orders.
        The default value of status is 'Shipped'.
        :param order_id: int
        :param product_id: int
        :param quantity: the quantity of product that be selected.
        :return False: only if product_id is not in inventory or the quantity is not adequate
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.create_order(1, 1, 2)
        >>> warehouse.orders
        {1: {'product_id': 1, 'quantity': 2, 'status': 'Shipped'}}
        >>> warehouse.create_order(1, 2, 2)
        False
        """"""
        if product_id not in self.inventory:
            return False
        if self.inventory[product_id][""quantity""] < quantity:
            return False
        self.orders[order_id] = {""product_id"": product_id, ""quantity"": quantity, ""status"": ""Shipped""}
        self.inventory[product_id][""quantity""] -= quantity

    def change_order_status(self, order_id, status):
        """"""
        Change the status of order if the input order_id is in self.orders.
        :param order_id: int
        :param status: str, the state that is going to change to
        :return False: only if the order_id is not in self.orders
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.create_order(1, 1, 2)
        >>> warehouse.change_order_status(1, ""done"")
        >>> warehouse.orders
        {1: {'product_id': 1, 'quantity': 2, 'status': 'done'}}
        """"""
        if order_id not in self.orders:
            return False
        self.orders[order_id][""status""] = status

    def track_order(self, order_id):
        """"""
        Get the status of specific order.
        :param order_id: int
        :return False: only if the order_id is not in self.orders.
        >>> warehouse.add_product(1, ""product1"", 3)
        >>> warehouse.create_order(1, 1, 2)
        >>> warehouse.track_order(1)
        'Shipped'
        """"""
        if order_id not in self.orders:
            return False
        return self.orders[order_id][""status""]"
96,"class WeatherSystem:
    def __init__(self, city) -> None:
        self.temperature = None
        self.weather = None
        self.city = city
        self.weather_list = {}
    
    def query(self, weather_list, tmp_units = 'celsius'):
        self.weather_list = weather_list
        if self.city not in weather_list:
            return False
        else:
            self.temperature = self.weather_list[self.city]['temperature']
            self.weather = self.weather_list[self.city]['weather']
        if self.weather_list[self.city]['temperature units'] != tmp_units:
            if tmp_units == 'celsius':
                return self.fahrenheit_to_celsius(), self.weather
            elif tmp_units == 'fahrenheit':
                return self.celsius_to_fahrenheit(), self.weather
        else:
            return self.temperature, self.weather
    
    def set_city(self, city):
        self.city = city

    def celsius_to_fahrenheit(self):
        return (self.temperature * 9/5) + 32

    def fahrenheit_to_celsius(self):
        return (self.temperature - 32) * 5/9","class WeatherSystem:
    """"""
    This is a class representing a weather system that provides functionality to query weather information for a specific city and convert temperature units between Celsius and Fahrenheit.
    """"""

    def __init__(self, city) -> None:
        """"""
        Initialize the weather system with a city name.
        """"""
        self.temperature = None
        self.weather = None
        self.city = city
        self.weather_list = {}

    def query(self, weather_list, tmp_units = 'celsius'):
        """"""
        Query the weather system for the weather and temperature of the city,and convert the temperature units based on the input parameter.
        :param weather_list: a dictionary of weather information for different cities,dict.
        :param tmp_units: the temperature units to convert to, str.
        :return: the temperature and weather of the city, tuple.
        >>> weatherSystem = WeatherSystem('New York')
        >>> weather_list = {'New York': {'weather': 'sunny','temperature': 27,'temperature units': 'celsius'},'Beijing': {'weather': 'cloudy','temperature': 23,'temperature units': 'celsius'}}
        >>> weatherSystem.query(weather_list)
        (27, 'sunny')

        """"""

    def set_city(self, city):
        """"""
        Set the city of the weather system.
        :param city: the city to set, str.
        :return: None
        >>> weatherSystem = WeatherSystem('New York')
        >>> weatherSystem.set_city('Beijing')
        >>> weatherSystem.city
        'Beijing'

        """"""

    def celsius_to_fahrenheit(self):
        """"""
        Convert the temperature from Celsius to Fahrenheit.
        :return: the temperature in Fahrenheit, float.
        >>> weatherSystem = WeatherSystem('New York')
        >>> weatherSystem.temperature = 27
        >>> weatherSystem.celsius_to_fahrenheit()
        80.6

        """"""

    def fahrenheit_to_celsius(self):
        """"""
        Convert the temperature from Fahrenheit to Celsius.
        :return: the temperature in Celsius, float.
        >>> weatherSystem = WeatherSystem('New York')
        >>> weatherSystem.temperature = 80.6
        >>> weatherSystem.fahrenheit_to_celsius()
        26.999999999999996

        """"""",WeatherSystem,snippet_97,"class WeatherSystem:
    """"""
    This is a class representing a weather system that provides functionality to query weather information for a specific city and convert temperature units between Celsius and Fahrenheit.
    """"""

    def __init__(self, city) -> None:
        """"""
        Initialize the weather system with a city name.
        """"""
        self.temperature = None
        self.weather = None
        self.city = city
        self.weather_list = {}

    def query(self, weather_list, tmp_units='celsius'):
        """"""
        Query the weather system for the weather and temperature of the city,and convert the temperature units based on the input parameter.
        :param weather_list: a dictionary of weather information for different cities,dict.
        :param tmp_units: the temperature units to convert to, str.
        :return: the temperature and weather of the city, tuple.
        >>> weatherSystem = WeatherSystem('New York')
        >>> weather_list = {'New York': {'weather': 'sunny','temperature': 27,'temperature units': 'celsius'},'Beijing': {'weather': 'cloudy','temperature': 23,'temperature units': 'celsius'}}
        >>> weatherSystem.query(weather_list)
        (27, 'sunny')

        """"""
        self.weather_list = weather_list or {}
        city_info = self.weather_list.get(self.city)
        if not city_info or 'temperature' not in city_info or 'weather' not in city_info:
            self.temperature = None
            self.weather = None
            return (None, None)

        source_temp = city_info.get('temperature')
        source_units = str(city_info.get('temperature units', 'celsius')).strip().lower()
        target_units = str(tmp_units).strip().lower()

        if source_units not in ('celsius', 'fahrenheit'):
            source_units = 'celsius'
        if target_units not in ('celsius', 'fahrenheit'):
            target_units = source_units

        temp = float(source_temp)
        if source_units == 'celsius' and target_units == 'fahrenheit':
            temp = (temp * 9.0 / 5.0) + 32.0
        elif source_units == 'fahrenheit' and target_units == 'celsius':
            temp = (temp - 32.0) * 5.0 / 9.0

        self.temperature = temp
        self.weather = city_info.get('weather')
        return (self.temperature, self.weather)

    def set_city(self, city):
        """"""
        Set the city of the weather system.
        :param city: the city to set, str.
        :return: None
        >>> weatherSystem = WeatherSystem('New York')
        >>> weatherSystem.set_city('Beijing')
        >>> weatherSystem.city
        'Beijing'

        """"""
        self.city = city

    def celsius_to_fahrenheit(self):
        """"""
        Convert the temperature from Celsius to Fahrenheit.
        :return: the temperature in Fahrenheit, float.
        >>> weatherSystem = WeatherSystem('New York')
        >>> weatherSystem.temperature = 27
        >>> weatherSystem.celsius_to_fahrenheit()
        80.6

        """"""
        if self.temperature is None:
            return None
        return (float(self.temperature) * 9.0 / 5.0) + 32.0

    def fahrenheit_to_celsius(self):
        """"""
        Convert the temperature from Fahrenheit to Celsius.
        :return: the temperature in Celsius, float.
        >>> weatherSystem = WeatherSystem('New York')
        >>> weatherSystem.temperature = 80.6
        >>> weatherSystem.fahrenheit_to_celsius()
        26.999999999999996

        """"""
        if self.temperature is None:
            return None
        return (float(self.temperature) - 32.0) * 5.0 / 9.0"
97,"class Words2Numbers:

    def __init__(self):
        self.numwords = {}
        self.units = [
            ""zero"", ""one"", ""two"", ""three"", ""four"", ""five"", ""six"", ""seven"", ""eight"",
            ""nine"", ""ten"", ""eleven"", ""twelve"", ""thirteen"", ""fourteen"", ""fifteen"",
            ""sixteen"", ""seventeen"", ""eighteen"", ""nineteen"",
        ]
        self.tens = ["""", """", ""twenty"", ""thirty"", ""forty"", ""fifty"", ""sixty"", ""seventy"", ""eighty"", ""ninety""]
        self.scales = [""hundred"", ""thousand"", ""million"", ""billion"", ""trillion""]

        self.numwords[""and""] = (1, 0)
        for idx, word in enumerate(self.units):
            self.numwords[word] = (1, idx)
        for idx, word in enumerate(self.tens):
            self.numwords[word] = (1, idx * 10)
        for idx, word in enumerate(self.scales):
            self.numwords[word] = (10 ** (idx * 3 or 2), 0)

        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
        self.ordinal_endings = [('ieth', 'y'), ('th', '')]

    def text2int(self, textnum):
        textnum = textnum.replace('-', ' ')

        current = result = 0
        curstring = """"
        onnumber = False
        for word in textnum.split():
            if word in self.ordinal_words:
                scale, increment = (1, self.ordinal_words[word])
                current = current * scale + increment
                onnumber = True
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = ""%s%s"" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    if onnumber:
                        curstring += repr(result + current) + "" ""
                    curstring += word + "" ""
                    result = current = 0
                    onnumber = False
                else:
                    scale, increment = self.numwords[word]
                    current = current * scale + increment
                    if scale > 100:
                        result += current
                        current = 0
                    onnumber = True

        if onnumber:
            curstring += repr(result + current)

        return curstring

    def is_valid_input(self, textnum):

        textnum = textnum.replace('-', ' ')

        for word in textnum.split():
            if word in self.ordinal_words:
                continue
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = ""%s%s"" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    return False

        return True","class Words2Numbers:
    """"""
    The class provides a text-to-number conversion utility, allowing conversion of written numbers (in words) to their numerical representation.
    """"""


    def __init__(self):
        """"""
        Initialize the word lists and dictionaries required for conversion
        """"""
        self.numwords = {}
        self.units = [
            ""zero"", ""one"", ""two"", ""three"", ""four"", ""five"", ""six"", ""seven"", ""eight"",
            ""nine"", ""ten"", ""eleven"", ""twelve"", ""thirteen"", ""fourteen"", ""fifteen"",
            ""sixteen"", ""seventeen"", ""eighteen"", ""nineteen"",
        ]
        self.tens = ["""", """", ""twenty"", ""thirty"", ""forty"", ""fifty"", ""sixty"", ""seventy"", ""eighty"", ""ninety""]
        self.scales = [""hundred"", ""thousand"", ""million"", ""billion"", ""trillion""]

        self.numwords[""and""] = (1, 0)
        for idx, word in enumerate(self.units):
            self.numwords[word] = (1, idx)
        for idx, word in enumerate(self.tens):
            self.numwords[word] = (1, idx * 10)
        for idx, word in enumerate(self.scales):
            self.numwords[word] = (10 ** (idx * 3 or 2), 0)

        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
        self.ordinal_endings = [('ieth', 'y'), ('th', '')]


    def text2int(self, textnum):
        """"""
        Convert the word string to the corresponding integer string
        :param textnum: string, the word string to be converted
        :return: string, the final converted integer string
        >>> w2n = Words2Numbers()
        >>> w2n.text2int(""thirty-two"")
        ""32""
        """"""

    def is_valid_input(self, textnum):
        """"""
        Check if the input text contains only valid words that can be converted into numbers.
        :param textnum: The input text containing words representing numbers.
        :return: True if input is valid, False otherwise.
        >>> w2n = Words2Numbers()
        >>> w2n.is_valid_input(""thirty-two"")
        False
        """"""",Words2Numbers,snippet_98,"class Words2Numbers:
    """"""
    The class provides a text-to-number conversion utility, allowing conversion of written numbers (in words) to their numerical representation.
    """"""

    def __init__(self):
        """"""
        Initialize the word lists and dictionaries required for conversion
        """"""
        self.numwords = {}
        self.units = [
            ""zero"", ""one"", ""two"", ""three"", ""four"", ""five"", ""six"", ""seven"", ""eight"",
            ""nine"", ""ten"", ""eleven"", ""twelve"", ""thirteen"", ""fourteen"", ""fifteen"",
            ""sixteen"", ""seventeen"", ""eighteen"", ""nineteen"",
        ]
        self.tens = ["""", """", ""twenty"", ""thirty"", ""forty"", ""fifty"", ""sixty"", ""seventy"", ""eighty"", ""ninety""]
        self.scales = [""hundred"", ""thousand"", ""million"", ""billion"", ""trillion""]

        self.numwords[""and""] = (1, 0)
        for idx, word in enumerate(self.units):
            self.numwords[word] = (1, idx)
        for idx, word in enumerate(self.tens):
            self.numwords[word] = (1, idx * 10)
        for idx, word in enumerate(self.scales):
            self.numwords[word] = (10 ** (idx * 3 or 2), 0)

        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
        self.ordinal_endings = [('ieth', 'y'), ('th', '')]

    def _normalize_ordinal(self, word):
        if word in self.ordinal_words:
            return self.ordinal_words[word]
        for end, repl in self.ordinal_endings:
            if word.endswith(end):
                base = word[: -len(end)] + repl
                if base in self.numwords:
                    scale, incr = self.numwords[base]
                    if scale == 1:
                        return incr
        return None

    def text2int(self, textnum):
        """"""
        Convert the word string to the corresponding integer string
        :param textnum: string, the word string to be converted
        :return: string, the final converted integer string
        >>> w2n = Words2Numbers()
        >>> w2n.text2int(""thirty-two"")
        ""32""
        """"""
        if not isinstance(textnum, str) or not textnum.strip():
            raise ValueError(""Input must be a non-empty string"")
        textnum = textnum.lower().replace('-', ' ')
        words = textnum.split()
        current = 0
        result = 0
        for w in words:
            if w == 'and':
                continue
            val = None
            if w in self.numwords:
                scale, increment = self.numwords[w]
                if scale == 1:
                    current += increment
                else:
                    if current == 0:
                        current = 1
                    current *= scale
                    if scale >= 1000:
                        result += current
                        current = 0
                continue
            val = self._normalize_ordinal(w)
            if val is not None:
                current += val
                continue
            raise ValueError(f""Invalid word: {w}"")
        total = result + current
        return str(total)

    def is_valid_input(self, textnum):
        """"""
        Check if the input text contains only valid words that can be converted into numbers.
        :param textnum: The input text containing words representing numbers.
        :return: True if input is valid, False otherwise.
        >>> w2n = Words2Numbers()
        >>> w2n.is_valid_input(""thirty-two"")
        False
        """"""
        if not isinstance(textnum, str) or not textnum.strip():
            return False
        # Hyphens or other non-alpha characters (besides spaces) make it invalid
        for ch in textnum:
            if not (ch.isalpha() or ch.isspace()):
                return False
        words = textnum.lower().split()
        if not words:
            return False
        for w in words:
            if w == 'and':
                continue
            if w in self.numwords:
                continue
            if self._normalize_ordinal(w) is not None:
                continue
            return False
        return True"
98,"import xml.etree.ElementTree as ET


class XMLProcessor:
    def __init__(self, file_name):
        self.file_name = file_name
        self.root = None

    def read_xml(self):
        try:
            tree = ET.parse(self.file_name)
            self.root = tree.getroot()
            return self.root
        except:
            return None

    def write_xml(self, file_name):
        try:
            tree = ET.ElementTree(self.root)
            tree.write(file_name)
            return True
        except:
            return False

    def process_xml_data(self, file_name):
        for element in self.root.iter('item'):
            text = element.text
            element.text = text.upper()
        return self.write_xml(file_name)

    def find_element(self, element_name):
        elements = self.root.findall(element_name)
        return elements","class XMLProcessor:
    """"""
    This is a class as XML files handler, including reading, writing, processing as well as finding elements in a XML file.
    """"""

    def __init__(self, file_name):
        """"""
        Initialize the XMLProcessor object with the given file name.
        :param file_name:string, the name of the XML file to be processed.
        """"""
        self.file_name = file_name
        self.root = None

    def read_xml(self):
        """"""
        Reads the XML file and returns the root element.
        :return: Element, the root element of the XML file.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root_element = xml_processor.read_xml()
        >>> print(root_element)
        <Element 'root' at 0x7f8e3b7eb180>
        """"""


    def write_xml(self, file_name):
        """"""
        Writes the XML data to the specified file.
        :param file_name: string, the name of the file to write the XML data.
        :return: bool, True if the write operation is successful, False otherwise.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root = xml_processor.read_xml()
        >>> success = xml_processor.write_xml('output.xml')
        >>> print(success)
        True
        """"""


    def process_xml_data(self, file_name):
        """"""
        Modifies the data in XML elements and writes the updated XML data to a new file.
        :param file_name: string, the name of the file to write the modified XML data.
        :return: bool, True if the write operation is successful, False otherwise.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root = xml_processor.read_xml()
        >>> success = xml_processor.process_xml_data('processed.xml')
        >>> print(success)
        True
        """"""


    def find_element(self, element_name):
        """"""
        Finds the XML elements with the specified name.
        :param element_name: string, the name of the elements to find.
        :return: list, a list of found elements with the specified name.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root = xml_processor.read_xml()
        >>> items = xml_processor.find_element('item')
        >>> for item in items:
        >>>     print(item.text)
        apple
        banana
        orange
        """"""",XMLProcessor,snippet_99,"```python
from xml.etree import ElementTree as ET
from xml.etree.ElementTree import Element
from typing import List, Optional


class XMLProcessor:
    """"""
    This is a class as XML files handler, including reading, writing, processing as well as finding elements in a XML file.
    """"""

    def __init__(self, file_name):
        """"""
        Initialize the XMLProcessor object with the given file name.
        :param file_name:string, the name of the XML file to be processed.
        """"""
        self.file_name = file_name
        self.root: Optional[Element] = None
        self._tree: Optional[ET.ElementTree] = None

    def read_xml(self):
        """"""
        Reads the XML file and returns the root element.
        :return: Element, the root element of the XML file.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root_element = xml_processor.read_xml()
        >>> print(root_element)
        <Element 'root' at 0x7f8e3b7eb180>
        """"""
        try:
            self._tree = ET.parse(self.file_name)
            self.root = self._tree.getroot()
            return self.root
        except Exception:
            self._tree = None
            self.root = None
            return None

    def write_xml(self, file_name):
        """"""
        Writes the XML data to the specified file.
        :param file_name: string, the name of the file to write the XML data.
        :return: bool, True if the write operation is successful, False otherwise.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root = xml_processor.read_xml()
        >>> success = xml_processor.write_xml('output.xml')
        >>> print(success)
        True
        """"""
        if self.root is None:
            return False
        try:
            tree = self._tree if self._tree is not None else ET.ElementTree(self.root)
            tree.write(file_name, encoding='utf-8', xml_declaration=True)
            return True
        except Exception:
            return False

    def process_xml_data(self, file_name):
        """"""
        Modifies the data in XML elements and writes the updated XML data to a new file.
        :param file_name: string, the name of the file to write the modified XML data.
        :return: bool, True if the write operation is successful, False otherwise.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root = xml_processor.read_xml()
        >>> success = xml_processor.process_xml_data('processed.xml')
        >>> print(success)
        True
        """"""
        if self.root is None:
            return False
        try:
            for elem in self.root.iter():
                if elem.text is not None:
                    elem.text = elem.text.strip()
                # mark as processed
                elem.set('processed', 'true')
            tree = self._tree if self._tree is not None else ET.ElementTree(self.root)
            tree.write(file_name, encoding='utf-8', xml_declaration=True)
            return True
        except Exception:
            return False

    def find_element(self, element_name):
        """"""
        Finds the XML elements with the specified name.
        :param element_name: string, the name of the elements to find.
        :return: list, a list of found elements with the specified name.
        >>> xml_processor = XMLProcessor('test.xml')
        >>> root = xml_processor.read_xml()
        >>> items = xml_processor.find_element('item')
        >>> for item in items:
        >>>     print(item.text)
        apple
        banana
        orange
        """"""
        if not element_name or self.root is None:
            return []
        try:
            return list(self.root.iter(element_name))
        except Exception:
            return []
```"
99,"import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False","class ZipFileProcessor:
    """"""
    This is a compressed file processing class that provides the ability to read and decompress compressed files
    """"""

    def __init__(self, file_name):
        """"""
        Initialize file name
        :param file_name:string
        """"""
        self.file_name = file_name

    def read_zip_file(self):
        """"""
        Get open file object
        :return:If successful, returns the open file object; otherwise, returns None
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> file = zfp.read_zip_file()
        """"""

    def extract_all(self, output_path):
        """"""
        Extract all zip files and place them in the specified path
        :param output_path: string, The location of the extracted file
        :return: True or False, representing whether the extraction operation was successful
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> zfp.extract_all(""result/aaa"")
        """"""

    def extract_file(self, file_name, output_path):
        """"""
        Extract the file with the specified name from the zip file and place it in the specified path
        :param file_name:string, The name of the file to be uncompressed
        :param output_path:string, The location of the extracted file
        :return: True or False, representing whether the extraction operation was successful
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> zfp.extract_file(""bbb.txt"", ""result/aaa"")
        """"""

    def create_zip_file(self, files, output_file_name):
        """"""
        Compress the specified file list into a zip file and place it in the specified path
        :param files:list of string, List of files to compress
        :param output_file_name: string, Specified output path
        :return:True or False, representing whether the compression operation was successful
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> zfp.create_zip_file([""bbb.txt"", ""ccc,txt"", ""ddd.txt""], ""output/bcd"")
        """"""",ZipFileProcessor,snippet_100,"import os
import zipfile
from pathlib import Path
from typing import List, Optional


class ZipFileProcessor:
    """"""
    This is a compressed file processing class that provides the ability to read and decompress compressed files
    """"""

    def __init__(self, file_name):
        """"""
        Initialize file name
        :param file_name:string
        """"""
        self.file_name = file_name

    def read_zip_file(self) -> Optional[zipfile.ZipFile]:
        """"""
        Get open file object
        :return:If successful, returns the open file object; otherwise, returns None
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> file = zfp.read_zip_file()
        """"""
        try:
            if not self.file_name or not os.path.isfile(self.file_name):
                return None
            if not zipfile.is_zipfile(self.file_name):
                return None
            return zipfile.ZipFile(self.file_name, mode=""r"")
        except Exception:
            return None

    def extract_all(self, output_path) -> bool:
        """"""
        Extract all zip files and place them in the specified path
        :param output_path: string, The location of the extracted file
        :return: True or False, representing whether the extraction operation was successful
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> zfp.extract_all(""result/aaa"")
        """"""
        zf = self.read_zip_file()
        if zf is None:
            return False
        try:
            Path(output_path).mkdir(parents=True, exist_ok=True)
            zf.extractall(path=output_path)
            return True
        except Exception:
            return False
        finally:
            try:
                zf.close()
            except Exception:
                pass

    def extract_file(self, file_name, output_path) -> bool:
        """"""
        Extract the file with the specified name from the zip file and place it in the specified path
        :param file_name:string, The name of the file to be uncompressed
        :param output_path:string, The location of the extracted file
        :return: True or False, representing whether the extraction operation was successful
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> zfp.extract_file(""bbb.txt"", ""result/aaa"")
        """"""
        if not file_name:
            return False
        zf = self.read_zip_file()
        if zf is None:
            return False
        try:
            Path(output_path).mkdir(parents=True, exist_ok=True)
            # Normalize path separators inside zip
            members = zf.namelist()
            target = None
            for m in members:
                if m.rstrip(""/"").endswith(file_name):
                    target = m
                    break
            if target is None:
                return False
            zf.extract(member=target, path=output_path)
            return True
        except Exception:
            return False
        finally:
            try:
                zf.close()
            except Exception:
                pass

    def create_zip_file(self, files: List[str], output_file_name: str) -> bool:
        """"""
        Compress the specified file list into a zip file and place it in the specified path
        :param files:list of string, List of files to compress
        :param output_file_name: string, Specified output path
        :return:True or False, representing whether the compression operation was successful
        >>> zfp = ZipFileProcessor(""aaa.zip"")
        >>> zfp.create_zip_file([""bbb.txt"", ""ccc,txt"", ""ddd.txt""], ""output/bcd"")
        """"""
        try:
            if not output_file_name:
                return False
            output_path = Path(output_file_name)
            if output_path.suffix.lower() != "".zip"":
                output_path = output_path.with_suffix("".zip"")
            output_path.parent.mkdir(parents=True, exist_ok=True)

            def add_path(zf: zipfile.ZipFile, p: Path):
                if p.is_dir():
                    base = p.name
                    for root, _, filenames in os.walk(p):
                        root_path = Path(root)
                        for fn in filenames:
                            fpath = root_path / fn
                            rel = fpath.relative_to(p.parent)
                            zf.write(fpath, arcname=str(rel))
                elif p.is_file():
                    zf.write(p, arcname=p.name)

            with zipfile.ZipFile(output_path, mode=""w"", compression=zipfile.ZIP_DEFLATED) as zf:
                any_added = False
                for f in files or []:
                    p = Path(f)
                    if p.exists():
                        add_path(zf, p)
                        any_added = True
                if not any_added:
                    return False
            return True
        except Exception:
            return False"
