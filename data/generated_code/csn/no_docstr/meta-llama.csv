id,repository_name,file_path,class_name,human_written_code,class_skeleton,snippet_id,total_program_units,meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8_generated_code
17249,jbarlow83/OCRmyPDF,src/ocrmypdf/quality.py,ocrmypdf.quality.OcrQualityDictionary,"import re
from collections.abc import Iterable

class OcrQualityDictionary:
    """"""Manages a dictionary for simple OCR quality checks.""""""

    def __init__(self, *, wordlist: Iterable[str]):
        """"""Construct a dictionary from a list of words.

        Words for which capitalization is important should be capitalized in the
        dictionary. Words that contain spaces or other punctuation will never match.
        """"""
        self.dictionary = set(wordlist)

    def measure_words_matched(self, ocr_text: str) -> float:
        """"""Check how many unique words in the OCR text match a dictionary.

        Words with mixed capitalized are only considered a match if the test word
        matches that capitalization.

        Returns:
            number of words that match / number
        """"""
        text = re.sub('[0-9_]+', ' ', ocr_text)
        text = re.sub('\\W+', ' ', text)
        text_words_list = re.split('\\s+', text)
        text_words = {w for w in text_words_list if len(w) >= 3}
        matches = 0
        for w in text_words:
            if w in self.dictionary or (w != w.lower() and w.lower() in self.dictionary):
                matches += 1
        if matches > 0:
            hit_ratio = matches / len(text_words)
        else:
            hit_ratio = 0.0
        return hit_ratio","
class OcrQualityDictionary:
    
    def __init__(self, *, wordlist: Iterable[str]):
        
        pass
    def measure_words_matched(self, ocr_text: str) -> float:
        
        pass",snippet_2,3,"```python
from typing import Iterable

class OcrQualityDictionary:
    
    def __init__(self, *, wordlist: Iterable[str]):
        self.word_set = set(wordlist)

    def measure_words_matched(self, ocr_text: str) -> float:
        ocr_words = ocr_text.split()
        matched_words = sum(1 for word in ocr_words if word.lower() in self.word_set)
        return matched_words / len(ocr_words) if ocr_words else 0.0
```"
19627,slundberg/shap,slundberg_shap/shap/_serializable.py,shap._serializable.Serializable,"import inspect
import pickle

class Serializable:
    """"""This is the superclass of all serializable objects.""""""

    def save(self, out_file):
        """"""Save the model to the given file stream.""""""
        pickle.dump(type(self), out_file)

    @classmethod
    def load(cls, in_file, instantiate=True):
        """"""This is meant to be overridden by subclasses and called with super.

        We return constructor argument values when not being instantiated. Since there are no
        constructor arguments for the Serializable class we just return an empty dictionary.
        """"""
        if instantiate:
            return cls._instantiated_load(in_file)
        return {}

    @classmethod
    def _instantiated_load(cls, in_file, **kwargs):
        """"""This is meant to be overridden by subclasses and called with super.

        We return constructor argument values (we have no values to load in this abstract class).
        """"""
        obj_type = pickle.load(in_file)
        if obj_type is None:
            return None
        if not inspect.isclass(obj_type) or (not issubclass(obj_type, cls) and obj_type is not cls):
            raise Exception(f'Invalid object type loaded from file. {obj_type} is not a subclass of {cls}.')
        constructor_args = obj_type.load(in_file, instantiate=False, **kwargs)
        used_args = inspect.getfullargspec(obj_type.__init__)[0]
        return obj_type(**{k: constructor_args[k] for k in constructor_args if k in used_args})","
class Serializable:
    
    def save(self, out_file):
        
        pass
    @classmethod
    def load(cls, in_file, instantiate=True):
        
        pass
    @classmethod
    def _instantiated_load(cls, in_file, **kwargs):
        
        pass",snippet_3,4,"```python
import pickle

class Serializable:
    
    def save(self, out_file):
        """"""Saves the object to a file using pickle.""""""
        with open(out_file, 'wb') as f:
            pickle.dump(self, f)

    @classmethod
    def load(cls, in_file, instantiate=True):
        """"""Loads an object from a file using pickle.""""""
        with open(in_file, 'rb') as f:
            if instantiate:
                return pickle.load(f)
            else:
                return f

    @classmethod
    def _instantiated_load(cls, in_file, **kwargs):
        """"""Loads an object from a file and checks if it's an instance of the class.""""""
        obj = cls.load(in_file)
        if not isinstance(obj, cls):
            raise TypeError(f""Loaded object is not an instance of {cls.__name__}"")
        return obj
```"
19720,audreyr/cookiecutter,audreyr_cookiecutter/cookiecutter/environment.py,cookiecutter.environment.ExtensionLoaderMixin,"from cookiecutter.exceptions import UnknownExtension
from typing import Any

class ExtensionLoaderMixin:
    """"""Mixin providing sane loading of extensions specified in a given context.

    The context is being extracted from the keyword arguments before calling
    the next parent class in line of the child.
    """"""

    def __init__(self, *, context: dict[str, Any] | None=None, **kwargs: Any) -> None:
        """"""Initialize the Jinja2 Environment object while loading extensions.

        Does the following:

        1. Establishes default_extensions (currently just a Time feature)
        2. Reads extensions set in the cookiecutter.json _extensions key.
        3. Attempts to load the extensions. Provides useful error if fails.
        """"""
        context = context or {}
        default_extensions = ['cookiecutter.extensions.JsonifyExtension', 'cookiecutter.extensions.RandomStringExtension', 'cookiecutter.extensions.SlugifyExtension', 'cookiecutter.extensions.TimeExtension', 'cookiecutter.extensions.UUIDExtension']
        extensions = default_extensions + self._read_extensions(context)
        try:
            super().__init__(extensions=extensions, **kwargs)
        except ImportError as err:
            msg = f'Unable to load extension: {err}'
            raise UnknownExtension(msg) from err

    def _read_extensions(self, context: dict[str, Any]) -> list[str]:
        """"""Return list of extensions as str to be passed on to the Jinja2 env.

        If context does not contain the relevant info, return an empty
        list instead.
        """"""
        try:
            extensions = context['cookiecutter']['_extensions']
        except KeyError:
            return []
        else:
            return [str(ext) for ext in extensions]","
class ExtensionLoaderMixin:
    
    def __init__(self, *, context: dict[str, Any] | None=None, **kwargs: Any) -> None:
        
        pass
    def _read_extensions(self, context: dict[str, Any]) -> list[str]:
        
        pass",snippet_5,3,"```python
from typing import Any

class ExtensionLoaderMixin:
    
    def __init__(self, *, context: dict[str, Any] | None=None, **kwargs: Any) -> None:
        self.context = context if context is not None else {}
        self.extensions = self._read_extensions(self.context)

    def _read_extensions(self, context: dict[str, Any]) -> list[str]:
        extensions = context.get('extensions', [])
        if not isinstance(extensions, list):
            raise ValueError(""Extensions must be a list"")
        return [str(ext) for ext in extensions]
```"
21340,Delgan/loguru,loguru/_recattrs.py,loguru._recattrs.RecordFile,"class RecordFile:
    """"""A class representing a file record with name and path.

    Attributes
    ----------
    name : str
        The name of the file
    path : str
        The path to the file
    """"""
    __slots__ = ('name', 'path')

    def __init__(self, name, path):
        """"""Initialize a RecordFile instance.

        Parameters
        ----------
        name : str
            The name of the file
        path : str
            The path to the file
        """"""
        self.name = name
        self.path = path

    def __repr__(self):
        """"""Return string representation of RecordFile.

        Returns
        -------
        str
            Formatted string with name and path
        """"""
        return '(name=%r, path=%r)' % (self.name, self.path)

    def __format__(self, spec):
        """"""Format the RecordFile instance.

        Parameters
        ----------
        spec : str
            Format specification

        Returns
        -------
        str
            Formatted name according to specification
        """"""
        return self.name.__format__(spec)","class RecordFile:
    
    def __init__(self, name, path):
        
        pass
    def __repr__(self):
        
        pass
    def __format__(self, spec):
        
        pass",snippet_6,4,"```python
class RecordFile:
    
    def __init__(self, name, path):
        self.name = name
        self.path = path

    def __repr__(self):
        return f""RecordFile(name='{self.name}', path='{self.path}')""

    def __format__(self, spec):
        if spec == 'full':
            return f""{self.path}/{self.name}""
        elif spec == 'short':
            return self.name
        else:
            raise ValueError(""Invalid format specifier. Use 'full' or 'short'."")
```"
21341,Delgan/loguru,loguru/_recattrs.py,loguru._recattrs.RecordLevel,"class RecordLevel:
    """"""A class representing the logging level record with name, number and icon.

    Attributes
    ----------
    icon : str
        The icon representing the log level
    name : str
        The name of the log level
    no : int
        The numeric value of the log level
    """"""
    __slots__ = ('icon', 'name', 'no')

    def __init__(self, name, no, icon):
        """"""Initialize a RecordLevel instance.

        Parameters
        ----------
        name : str
            The name of the log level
        no : int
            The numeric value of the log level
        icon : str
            The icon representing the log level
        """"""
        self.name = name
        self.no = no
        self.icon = icon

    def __repr__(self):
        """"""Return string representation of RecordLevel.

        Returns
        -------
        str
            Formatted string with name, number and icon
        """"""
        return '(name=%r, no=%r, icon=%r)' % (self.name, self.no, self.icon)

    def __format__(self, spec):
        """"""Format the RecordLevel instance.

        Parameters
        ----------
        spec : str
            Format specification

        Returns
        -------
        str
            Formatted name according to specification
        """"""
        return self.name.__format__(spec)","class RecordLevel:
    
    def __init__(self, name, no, icon):
        
        pass
    def __repr__(self):
        
        pass
    def __format__(self, spec):
        
        pass",snippet_7,4,"```python
class RecordLevel:
    
    def __init__(self, name, no, icon):
        self.name = name
        self.no = no
        self.icon = icon

    def __repr__(self):
        return f""RecordLevel('{self.name}', {self.no}, '{self.icon}')""

    def __format__(self, spec):
        if spec == 'full':
            return f""{self.icon} {self.name} (Level {self.no})""
        elif spec == 'short':
            return f""{self.name} (L{self.no})""
        else:
            return str(self)
```"
21342,Delgan/loguru,loguru/_recattrs.py,loguru._recattrs.RecordProcess,"class RecordProcess:
    """"""A class representing a process record with ID and name.

    Attributes
    ----------
    id : int
        The process ID
    name : str
        The process name
    """"""
    __slots__ = ('id', 'name')

    def __init__(self, id_, name):
        """"""Initialize a RecordProcess instance.

        Parameters
        ----------
        id_ : int
            The process ID
        name : str
            The process name
        """"""
        self.id = id_
        self.name = name

    def __repr__(self):
        """"""Return string representation of RecordProcess.

        Returns
        -------
        str
            Formatted string with id and name
        """"""
        return '(id=%r, name=%r)' % (self.id, self.name)

    def __format__(self, spec):
        """"""Format the RecordProcess instance.

        Parameters
        ----------
        spec : str
            Format specification

        Returns
        -------
        str
            Formatted ID according to specification
        """"""
        return self.id.__format__(spec)","class RecordProcess:
    
    def __init__(self, id_, name):
        
        pass
    def __repr__(self):
        
        pass
    def __format__(self, spec):
        
        pass",snippet_8,4,"```python
class RecordProcess:
    
    def __init__(self, id_, name):
        self.id = id_
        self.name = name

    def __repr__(self):
        return f""RecordProcess(id={self.id}, name='{self.name}')""

    def __format__(self, spec):
        if spec == 'short':
            return f""{self.id}:{self.name}""
        elif spec == 'long':
            return f""Process ID: {self.id}, Process Name: {self.name}""
        else:
            return str(self)
```"
21343,Delgan/loguru,loguru/_recattrs.py,loguru._recattrs.RecordThread,"class RecordThread:
    """"""A class representing a thread record with ID and name.

    Attributes
    ----------
    id : int
        The thread ID
    name : str
        The thread name
    """"""
    __slots__ = ('id', 'name')

    def __init__(self, id_, name):
        """"""Initialize a RecordThread instance.

        Parameters
        ----------
        id_ : int
            The thread ID
        name : str
            The thread name
        """"""
        self.id = id_
        self.name = name

    def __repr__(self):
        """"""Return string representation of RecordThread.

        Returns
        -------
        str
            Formatted string with id and name
        """"""
        return '(id=%r, name=%r)' % (self.id, self.name)

    def __format__(self, spec):
        """"""Format the RecordThread instance.

        Parameters
        ----------
        spec : str
            Format specification

        Returns
        -------
        str
            Formatted ID according to specification
        """"""
        return self.id.__format__(spec)","class RecordThread:
    
    def __init__(self, id_, name):
        
        pass
    def __repr__(self):
        
        pass
    def __format__(self, spec):
        
        pass",snippet_9,4,"```python
class RecordThread:
    
    def __init__(self, id_, name):
        self.id = id_
        self.name = name

    def __repr__(self):
        return f""RecordThread(id={self.id}, name='{self.name}')""

    def __format__(self, spec):
        if spec == 'id-name':
            return f""{self.id}-{self.name}""
        elif spec == 'name-id':
            return f""{self.name}({self.id})""
        else:
            return str(self)
```"
33971,Miserlou/Zappa,Miserlou_Zappa/zappa/asynchronous.py,zappa.asynchronous.LambdaAsyncResponse,"import json
import uuid

class LambdaAsyncResponse:
    """"""
    Base Response Dispatcher class
    Can be used directly or subclassed if the method to send the message is changed.
    """"""

    def __init__(self, lambda_function_name=None, aws_region=None, capture_response=False, **kwargs):
        """""" """"""
        if kwargs.get('boto_session'):
            self.client = kwargs.get('boto_session').client('lambda')
        else:
            self.client = LAMBDA_CLIENT
        self.lambda_function_name = lambda_function_name
        self.aws_region = aws_region
        if capture_response:
            if ASYNC_RESPONSE_TABLE is None:
                print(""Warning! Attempted to capture a response without async_response_table configured in settings (you won't capture async responses)."")
                capture_response = False
                self.response_id = 'MISCONFIGURED'
            else:
                self.response_id = str(uuid.uuid4())
        else:
            self.response_id = None
        self.capture_response = capture_response

    def send(self, task_path, args, kwargs):
        """"""
        Create the message object and pass it to the actual sender.
        """"""
        message = {'task_path': task_path, 'capture_response': self.capture_response, 'response_id': self.response_id, 'args': args, 'kwargs': kwargs}
        self._send(message)
        return self

    def _send(self, message):
        """"""
        Given a message, directly invoke the lamdba function for this task.
        """"""
        message['command'] = 'zappa.asynchronous.route_lambda_task'
        payload = json.dumps(message).encode('utf-8')
        if len(payload) > LAMBDA_ASYNC_PAYLOAD_LIMIT:
            raise AsyncException('Payload too large for async Lambda call')
        self.response = self.client.invoke(FunctionName=self.lambda_function_name, InvocationType='Event', Payload=payload)
        self.sent = self.response.get('StatusCode', 0) == 202","
class LambdaAsyncResponse:
    
    def __init__(self, lambda_function_name=None, aws_region=None, capture_response=False, **kwargs):
        
        pass
    def send(self, task_path, args, kwargs):
        
        pass

    def _send(self, message):
        
        pass",snippet_10,4,"```python
import boto3
import json

class LambdaAsyncResponse:
    
    def __init__(self, lambda_function_name=None, aws_region=None, capture_response=False, **kwargs):
        self.lambda_function_name = lambda_function_name
        self.aws_region = aws_region
        self.capture_response = capture_response
        self.lambda_client = boto3.client('lambda', region_name=self.aws_region)

    def send(self, task_path, args, kwargs):
        message = {
            'task_path': task_path,
            'args': args,
            'kwargs': kwargs
        }
        self._send(message)

    def _send(self, message):
        try:
            response = self.lambda_client.invoke(
                FunctionName=self.lambda_function_name,
                InvocationType='Event',
                Payload=json.dumps(message)
            )
            if self.capture_response:
                print(f""Lambda invocation response: {response}"")
        except Exception as e:
            print(f""Error invoking Lambda function: {e}"")
```"
44118,LonamiWebs/Telethon,LonamiWebs_Telethon/telethon/crypto/aesctr.py,telethon.crypto.aesctr.AESModeCTR,"import pyaes

class AESModeCTR:
    """"""Wrapper around pyaes.AESModeOfOperationCTR mode with custom IV""""""

    def __init__(self, key, iv):
        """"""
        Initializes the AES CTR mode with the given key/iv pair.

        :param key: the key to be used as bytes.
        :param iv: the bytes initialization vector. Must have a length of 16.
        """"""
        assert isinstance(key, bytes)
        self._aes = pyaes.AESModeOfOperationCTR(key)
        assert isinstance(iv, bytes)
        assert len(iv) == 16
        self._aes._counter._counter = list(iv)

    def encrypt(self, data):
        """"""
        Encrypts the given plain text through AES CTR.

        :param data: the plain text to be encrypted.
        :return: the encrypted cipher text.
        """"""
        return self._aes.encrypt(data)

    def decrypt(self, data):
        """"""
        Decrypts the given cipher text through AES CTR

        :param data: the cipher text to be decrypted.
        :return: the decrypted plain text.
        """"""
        return self._aes.decrypt(data)","
class AESModeCTR:
    
    def __init__(self, key, iv):
        
        pass
    def encrypt(self, data):
        
        pass

    def decrypt(self, data):
        
        pass",snippet_11,4,"```python
from Crypto.Cipher import AES

class AESModeCTR:
    
    def __init__(self, key, iv):
        """"""
        Initialize AES in CTR mode.

        :param key: The encryption key (16, 24, or 32 bytes).
        :param iv: The initialization vector (16 bytes).
        """"""
        self.key = key
        self.iv = iv
        self.cipher = AES.new(key, AES.MODE_CTR, nonce=iv[:8], initial_value=int.from_bytes(iv[8:], 'big'))

    def encrypt(self, data):
        """"""
        Encrypt data using AES in CTR mode.

        :param data: The data to be encrypted.
        :return: The encrypted data.
        """"""
        return self.cipher.encrypt(data)

    def decrypt(self, data):
        """"""
        Decrypt data using AES in CTR mode.

        :param data: The data to be decrypted.
        :return: The decrypted data.
        """"""
        # In CTR mode, encryption and decryption are the same operation
        return self.cipher.decrypt(data)


# Example usage
if __name__ == ""__main__"":
    key = b'\x00' * 32  # 256-bit key
    iv = b'\x01' * 16   # 128-bit IV

    aes_ctr = AESModeCTR(key, iv)

    data = b'Hello, World!'
    encrypted_data = aes_ctr.encrypt(data)
    decrypted_data = aes_ctr.decrypt(encrypted_data)

    print(f""Original Data: {data}"")
    print(f""Encrypted Data: {encrypted_data.hex()}"")
    print(f""Decrypted Data: {decrypted_data}"")
```"
44121,LonamiWebs/Telethon,LonamiWebs_Telethon/telethon/crypto/factorization.py,telethon.crypto.factorization.Factorization,"from random import randint

class Factorization:
    """"""
    Simple module to factorize large numbers really quickly.
    """"""

    @classmethod
    def factorize(cls, pq):
        """"""
        Factorizes the given large integer.

        Implementation from https://comeoncodeon.wordpress.com/2010/09/18/pollard-rho-brent-integer-factorization/.

        :param pq: the prime pair pq.
        :return: a tuple containing the two factors p and q.
        """"""
        if pq % 2 == 0:
            return (2, pq // 2)
        y, c, m = (randint(1, pq - 1), randint(1, pq - 1), randint(1, pq - 1))
        g = r = q = 1
        x = ys = 0
        while g == 1:
            x = y
            for i in range(r):
                y = (pow(y, 2, pq) + c) % pq
            k = 0
            while k < r and g == 1:
                ys = y
                for i in range(min(m, r - k)):
                    y = (pow(y, 2, pq) + c) % pq
                    q = q * abs(x - y) % pq
                g = cls.gcd(q, pq)
                k += m
            r *= 2
        if g == pq:
            while True:
                ys = (pow(ys, 2, pq) + c) % pq
                g = cls.gcd(abs(x - ys), pq)
                if g > 1:
                    break
        p, q = (g, pq // g)
        return (p, q) if p < q else (q, p)

    @staticmethod
    def gcd(a, b):
        """"""
        Calculates the Greatest Common Divisor.

        :param a: the first number.
        :param b: the second number.
        :return: GCD(a, b)
        """"""
        while b:
            a, b = (b, a % b)
        return a","
class Factorization:
    
    @classmethod
    def factorize(cls, pq):
        
        pass
    @staticmethod
    def gcd(a, b):
        
        pass",snippet_12,3,"```python
class Factorization:
    
    @classmethod
    def factorize(cls, pq):
        """"""Factorize a number that is a product of two prime numbers.""""""
        for i in range(2, int(pq ** 0.5) + 1):
            if pq % i == 0:
                return i, pq // i
        return 1, pq

    @staticmethod
    def gcd(a, b):
        """"""Compute the greatest common divisor of a and b.""""""
        while b:
            a, b = b, a % b
        return a
```"
49235,blue-yonder/tsfresh,blue-yonder_tsfresh/tsfresh/examples/driftbif_simulation.py,tsfresh.examples.driftbif_simulation.velocity,"import numpy as np

class velocity:
    """"""
    Simulates the velocity of a dissipative soliton (kind of self organized particle) [6]_.
    The equilibrium velocity without noise R=0 for
    $	au>1.0/\\kappa_3$ is $\\kappa_3 \\sqrt{(tau - 1.0/\\kappa_3)/Q}.
    Before the drift-bifurcation $	au \\le 1.0/\\kappa_3$ the velocity is zero.

    References
    ----------

    .. [6] Andreas Kempa-Liehr (2013, p. 159-170)
        Dynamics of Dissipative Soliton
        Dissipative Solitons in Reaction Diffusion Systems.
        Springer: Berlin


    >>> ds = velocity(tau=3.5) # Dissipative soliton with equilibrium velocity 1.5e-3
    >>> print(ds.label) # Discriminating before or beyond Drift-Bifurcation
    1

    # Equilibrium velocity
    >>> print(ds.deterministic)
    0.0015191090506254991

    # Simulated velocity as a time series with 20000 time steps being disturbed by Gaussian white noise
    >>> v = ds.simulate(20000)
    """"""

    def __init__(self, tau=3.8, kappa_3=0.3, Q=1950.0, R=0.0003, delta_t=0.05, seed=None):
        """"""
        :param tau: Bifurcation parameter determining the intrinsic velocity of the dissipative soliton,
                    which is zero for tau<=1.0/kappa_3 and np.sqrt(kappa_3**3/Q * (tau - 1.0/kappa_3)) otherwise
        :type tau: float
        :param kappa_3: Inverse bifurcation point.
        :type kappa_3:
        :param Q: Shape parameter of dissipative soliton
        :type Q: float
        :param R: Noise amplitude
        :type R: float
        :param delta_t: temporal discretization
        :type delta_t: float
        """"""
        self.delta_t = delta_t
        self.kappa_3 = kappa_3
        self.Q = Q
        self.tau = tau
        self.a = self.delta_t * kappa_3 ** 2 * (tau - 1.0 / kappa_3)
        self.b = self.delta_t * Q / kappa_3
        self.label = int(tau > 1.0 / kappa_3)
        self.c = np.sqrt(self.delta_t) * R
        self.delta_t = self.delta_t
        if seed is not None:
            np.random.seed(seed)
        if tau <= 1.0 / kappa_3:
            self.deterministic = 0.0
        else:
            self.deterministic = kappa_3 ** 1.5 * np.sqrt((tau - 1.0 / kappa_3) / Q)

    def __call__(self, v):
        """"""
        returns deterministic dynamic = acceleration (without noise)

        :param v: initial velocity vector
        :rtype v: ndarray
        :return: velocity vector of next time step
        :return type: ndarray
        """"""
        return v * (1.0 + self.a - self.b * np.dot(v, v))

    def simulate(self, N, v0=np.zeros(2)):
        """"""

        :param N: number of time steps
        :type N: int
        :param v0: initial velocity vector
        :type v0: ndarray
        :return: time series of velocity vectors with shape (N, v0.shape[0])
        :rtype: ndarray
        """"""
        v = [v0]
        n = N - 1
        gamma = np.random.randn(n, v0.size)
        for i in range(n):
            next_v = self.__call__(v[i]) + self.c * gamma[i]
            v.append(next_v)
        v_vec = np.array(v)
        return v_vec","
class velocity:
    '''
    Simulates the velocity of a dissipative soliton (kind of self organized particle) [6]_.
    The equilibrium velocity without noise R=0 for
    $    au>1.0/\kappa_3$ is $\kappa_3 \sqrt{(tau - 1.0/\kappa_3)/Q}.
    Before the drift-bifurcation $    au \le 1.0/\kappa_3$ the velocity is zero.
    References
    ----------
    .. [6] Andreas Kempa-Liehr (2013, p. 159-170)
        Dynamics of Dissipative Soliton
        Dissipative Solitons in Reaction Diffusion Systems.
        Springer: Berlin
    >>> ds = velocity(tau=3.5) # Dissipative soliton with equilibrium velocity 1.5e-3
    >>> print(ds.label) # Discriminating before or beyond Drift-Bifurcation
    1
    # Equilibrium velocity
    >>> print(ds.deterministic)
    0.0015191090506254991
    # Simulated velocity as a time series with 20000 time steps being disturbed by Gaussian white noise
    >>> v = ds.simulate(20000)
    '''
    def __init__(self, tau=3.8, kappa_3=0.3, Q=1950.0, R=0.0003, delta_t=0.05, seed=None):
        
        pass

    def __call__(self, v):
        '''
        returns deterministic dynamic = acceleration (without noise)
        :param v: initial velocity vector
        :rtype v: ndarray
        :return: velocity vector of next time step
        :return type: ndarray
        '''
        pass

    def simulate(self, N, v0=np.zeros(2)):
        
        pass",snippet_13,4,"```python
import numpy as np

class velocity:
    '''
    Simulates the velocity of a dissipative soliton (kind of self organized particle) [6]_.
    The equilibrium velocity without noise R=0 for
    $    au>1.0/\kappa_3$ is $\kappa_3 \sqrt{(tau - 1.0/\kappa_3)/Q}.
    Before the drift-bifurcation $    au \le 1.0/\kappa_3$ the velocity is zero.
    References
    ----------
    .. [6] Andreas Kempa-Liehr (2013, p. 159-170)
        Dynamics of Dissipative Soliton
        Dissipative Solitons in Reaction Diffusion Systems.
        Springer: Berlin
    >>> ds = velocity(tau=3.5) # Dissipative soliton with equilibrium velocity 1.5e-3
    >>> print(ds.label) # Discriminating before or beyond Drift-Bifurcation
    1
    # Equilibrium velocity
    >>> print(ds.deterministic)
    0.0015191090506254991
    # Simulated velocity as a time series with 20000 time steps being disturbed by Gaussian white noise
    >>> v = ds.simulate(20000)
    '''
    def __init__(self, tau=3.8, kappa_3=0.3, Q=1950.0, R=0.0003, delta_t=0.05, seed=None):
        self.tau = tau
        self.kappa_3 = kappa_3
        self.Q = Q
        self.R = R
        self.delta_t = delta_t
        self.rng = np.random.default_rng(seed)
        self.label = int(self.tau * self.kappa_3 > 1)
        self.deterministic = self.kappa_3 * np.sqrt(max(0, self.tau - 1.0 / self.kappa_3) / self.Q)

    def __call__(self, v):
        '''
        returns deterministic dynamic = acceleration (without noise)
        :param v: initial velocity vector
        :rtype v: ndarray
        :return: velocity vector of next time step
        :return type: ndarray
        '''
        v_norm = np.linalg.norm(v)
        deterministic_acceleration = (self.tau - self.kappa_3 - self.Q * v_norm**2) * v
        return v + deterministic_acceleration * self.delta_t

    def simulate(self, N, v0=np.zeros(2)):
        v = np.zeros((N, len(v0)))
        v[0] = v0
        for i in range(1, N):
            v[i] = self(v[i-1]) + self.R * self.rng.normal(size=len(v0)) * np.sqrt(self.delta_t)
        return v
```"
98891,peterbrittain/asciimatics,peterbrittain_asciimatics/asciimatics/effects.py,asciimatics.effects._Flake,"from random import randint, random, choice
from asciimatics.screen import Screen

class _Flake:
    """"""
    Track a single snow flake.
    """"""
    _snow_chars = '.+*'
    _drift_chars = ' ,;#@'

    def __init__(self, screen: Screen):
        """"""
        :param screen: The Screen being used for the Scene.
        """"""
        self._screen = screen
        self._x = 0
        self._y = 0
        self._rate = 0
        self._char = ''
        self._reseed()

    def _reseed(self):
        """"""
        Randomly create a new snowflake once this one is finished.
        """"""
        self._char = choice(self._snow_chars)
        self._rate = randint(1, 3)
        self._x = randint(0, self._screen.width - 1)
        self._y = self._screen.start_line + randint(0, self._rate)

    def update(self, reseed: bool):
        """"""
        Update that snowflake!

        :param reseed: Whether we are in the normal reseed cycle or not.
        """"""
        self._screen.print_at(' ', self._x, self._y)
        cell = None
        for _ in range(self._rate):
            self._y += 1
            cell = self._screen.get_from(self._x, self._y)
            if cell is None or cell[0] != 32:
                break
        if (cell is not None and cell[0] in [ord(x) for x in self._snow_chars + ' ']) and self._y < self._screen.start_line + self._screen.height:
            self._screen.print_at(self._char, self._x, self._y)
        else:
            self._y = min(self._y, self._screen.start_line + self._screen.height)
            drift_index = -1
            if cell:
                drift_index = self._drift_chars.find(chr(cell[0]))
            if 0 <= drift_index < len(self._drift_chars) - 1:
                drift_char = self._drift_chars[drift_index + 1]
                self._screen.print_at(drift_char, self._x, self._y)
            else:
                self._screen.print_at(',', self._x, self._y - 1)
            if reseed:
                self._reseed()","
class _Flake:
    
    def __init__(self, screen: Screen):
        
        pass
    def _reseed(self):
        
        pass

    def update(self, reseed: bool):
        
        pass",snippet_14,4,"```python
import random

class Screen:
    # Assuming Screen class has a method to get its dimensions
    def get_dimensions(self):
        # For demonstration purposes, let's assume the screen dimensions are 800x600
        return 800, 600

class _Flake:
    
    def __init__(self, screen: Screen):
        self.screen = screen
        self.width, self.height = self.screen.get_dimensions()
        self.x = random.uniform(0, self.width)
        self.y = random.uniform(0, self.height)
        self.velocity_x = random.uniform(-0.5, 0.5)
        self.velocity_y = random.uniform(0.5, 2)
        self.size = random.uniform(1, 5)

    def _reseed(self):
        self.x = random.uniform(0, self.width)
        self.y = 0
        self.velocity_x = random.uniform(-0.5, 0.5)
        self.velocity_y = random.uniform(0.5, 2)
        self.size = random.uniform(1, 5)

    def update(self, reseed: bool):
        self.x += self.velocity_x
        self.y += self.velocity_y
        
        if self.y > self.height:
            if reseed:
                self._reseed()
            else:
                self.y = self.height

# Example usage
if __name__ == ""__main__"":
    screen = Screen()
    flake = _Flake(screen)
    for _ in range(100):
        flake.update(True)
        print(f""X: {flake.x}, Y: {flake.y}"")
```"
98892,peterbrittain/asciimatics,peterbrittain_asciimatics/asciimatics/effects.py,asciimatics.effects._Star,"from random import randint, random, choice
from asciimatics.screen import Screen

class _Star:
    """"""
    Simple class to represent a single star for the Stars special effect.
    """"""

    def __init__(self, screen: Screen, pattern: str):
        """"""
        :param screen: The Screen being used for the Scene.
        :param pattern: The pattern to loop through
        """"""
        self._screen = screen
        self._star_chars = pattern
        self._cycle = 0
        self._old_char = ''
        self._respawn()

    def _respawn(self):
        """"""
        Pick a random location for the star making sure it does
        not overwrite an existing piece of text.
        """"""
        self._cycle = randint(0, len(self._star_chars))
        height, width = self._screen.dimensions
        while True:
            self._x = randint(0, width - 1)
            self._y = self._screen.start_line + randint(0, height - 1)
            c = self._screen.get_from(self._x, self._y)
            if c is not None and c[0] == 32:
                break
        self._old_char = ' '

    def update(self):
        """"""
        Draw the star.
        """"""
        if not self._screen.is_visible(self._x, self._y):
            self._respawn()
        c = self._screen.get_from(self._x, self._y)
        if c is not None and c[0] not in (ord(self._old_char), 32):
            self._respawn()
        self._cycle += 1
        if self._cycle >= len(self._star_chars):
            self._cycle = 0
        new_char = self._star_chars[self._cycle]
        if new_char == self._old_char:
            return
        self._screen.print_at(new_char, self._x, self._y)
        self._old_char = new_char","
class _Star:
    
    def __init__(self, screen: Screen, pattern: str):
        
        pass
    def _respawn(self):
        
        pass

    def update(self):
        
        pass",snippet_15,4,"```python
import random

class Screen:
    def __init__(self, width, height):
        self.width = width
        self.height = height

class _Star:
    
    def __init__(self, screen: Screen, pattern: str):
        self.screen = screen
        self.pattern = pattern
        self.x = random.randint(0, screen.width)
        self.y = random.randint(0, screen.height)
        self.speed = random.uniform(0.1, 2.0)

    def _respawn(self):
        self.x = random.randint(0, self.screen.width)
        self.y = 0

    def update(self):
        self.y += self.speed
        if self.y > self.screen.height:
            self._respawn()

# Example usage:
if __name__ == ""__main__"":
    screen = Screen(800, 600)
    star = _Star(screen, ""*"")
    for _ in range(100):
        star.update()
        print(f""Star position: ({star.x}, {star.y})"")
```"
98893,peterbrittain/asciimatics,peterbrittain_asciimatics/asciimatics/effects.py,asciimatics.effects._Trail,"from random import randint, random, choice
from asciimatics.screen import Screen

class _Trail:
    """"""
    Track a single trail  for a falling character effect (a la Matrix).
    """"""

    def __init__(self, screen: Screen, x: int):
        """"""
        :param screen: The Screen being used for the Scene.
        :param x: The column (y coordinate) for this trail to use.
        """"""
        self._screen = screen
        self._x = x
        self._y = 0
        self._life = 0
        self._rate = 0
        self._clear = True
        self._maybe_reseed(True)

    def _maybe_reseed(self, normal: bool):
        """"""
        Randomly create a new column once this one is finished.
        """"""
        self._y += self._rate
        self._life -= 1
        if self._life <= 0:
            self._clear = not self._clear if normal else True
            self._rate = randint(1, 2)
            if self._clear:
                self._y = 0
                self._life = self._screen.height // self._rate
            else:
                self._y = randint(0, self._screen.height // 2) - self._screen.height // 4
                self._life = randint(1, self._screen.height - self._y) // self._rate

    def update(self, reseed: bool):
        """"""
        Update that trail!

        :param reseed: Whether we are in the normal reseed cycle or not.
        """"""
        if self._clear:
            for i in range(0, 3):
                self._screen.print_at(' ', self._x, self._screen.start_line + self._y + i)
            self._maybe_reseed(reseed)
        else:
            for i in range(0, 3):
                self._screen.print_at(chr(randint(32, 126)), self._x, self._screen.start_line + self._y + i, Screen.COLOUR_GREEN)
            for i in range(4, 6):
                self._screen.print_at(chr(randint(32, 126)), self._x, self._screen.start_line + self._y + i, Screen.COLOUR_GREEN, Screen.A_BOLD)
            self._maybe_reseed(reseed)","
class _Trail:
    
    def __init__(self, screen: Screen, x: int):
        
        pass
    def _maybe_reseed(self, normal: bool):
        
        pass

    def update(self, reseed: bool):
        
        pass",snippet_16,4,"```python
import random
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from screen import Screen  # Assuming Screen is defined in screen.py

class _Trail:
    
    def __init__(self, screen: 'Screen', x: int):
        self.screen = screen
        self.x = x
        self.y = random.randint(0, screen.height - 1)
        self.length = random.randint(1, screen.height // 2)
        self.normal = True

    def _maybe_reseed(self, normal: bool):
        if self.normal != normal:
            self.y = random.randint(0, self.screen.height - 1)
            self.length = random.randint(1, self.screen.height // 2)
            self.normal = normal

    def update(self, reseed: bool):
        if reseed:
            self._maybe_reseed(True)
        else:
            self.y += 1
            if self.y >= self.screen.height:
                self.y = 0
                self._maybe_reseed(False)
        self.screen.draw_trail(self.x, self.y, self.length)
```"
99108,ConsenSys/mythril-classic,ConsenSys_mythril-classic/mythril/analysis/ops.py,mythril.analysis.ops.Variable,"class Variable:
    """"""The representation of a variable with value and type.""""""

    def __init__(self, val, _type):
        """"""

        :param val:
        :param _type:
        """"""
        self.val = val
        self.type = _type

    def __str__(self):
        """"""

        :return:
        """"""
        return str(self.val)","class Variable:
    
    def __init__(self, val, _type):
        
        pass
    def __str__(self):
        
        pass",snippet_17,3,"```python
class Variable:
    
    def __init__(self, val, _type):
        self.val = val
        self._type = _type

    def __str__(self):
        return f'{self._type}: {self.val}'
```"
100863,bigchaindb/bigchaindb,bigchaindb_bigchaindb/bigchaindb/validation.py,bigchaindb.validation.BaseValidationRules,"class BaseValidationRules:
    """"""Base validation rules for BigchainDB.

    A validation plugin must expose a class inheriting from this one via an entry_point.

    All methods listed below must be implemented.
    """"""

    @staticmethod
    def validate_transaction(bigchaindb, transaction):
        """"""See :meth:`bigchaindb.models.Transaction.validate`
        for documentation.
        """"""
        return transaction.validate(bigchaindb)

    @staticmethod
    def validate_block(bigchaindb, block):
        """"""See :meth:`bigchaindb.models.Block.validate` for documentation.""""""
        return block.validate(bigchaindb)","class BaseValidationRules:
    
    @staticmethod
    def validate_transaction(bigchaindb, transaction):
        
        pass
    @staticmethod
    def validate_block(bigchaindb, block):
        
        pass",snippet_22,3,"```python
class BaseValidationRules:
    
    @staticmethod
    def validate_transaction(bigchaindb, transaction):
        """"""Validate a transaction against the current state of the bigchaindb.

        Args:
            bigchaindb: an instance of BigchainDB
            transaction: transaction to validate.

        Returns:
            The transaction if the transaction is valid else it raises an exception
            with the validation error.
        """"""
        if not isinstance(transaction, dict):
            raise TypeError('Transaction must be a dict')

        if transaction['operation'] not in ['CREATE', 'TRANSFER']:
            raise ValueError('Operation must be either CREATE or TRANSFER')

        # Check if the transaction has the correct structure
        expected_keys = ['id', 'version', 'inputs', 'outputs', 'operation', 'metadata', 'asset']
        if set(transaction.keys()) != set(expected_keys):
            raise ValueError('Transaction is missing or has extra keys')

        # Check if the transaction version is supported
        if transaction['version'] not in ['1.0', '2.0']:
            raise ValueError('Transaction version is not supported')

        # Check if the transaction id is valid
        if transaction['id'] != transaction['id']:
            raise ValueError('Transaction id is not valid')

        # Check if the inputs are valid
        if not transaction['inputs']:
            raise ValueError('Transaction inputs cannot be empty')

        # Check if the outputs are valid
        if not transaction['outputs']:
            raise ValueError('Transaction outputs cannot be empty')

        return transaction

    @staticmethod
    def validate_block(bigchaindb, block):
        """"""Validate a block against the current state of the bigchaindb.

        Args:
            bigchaindb: an instance of BigchainDB
            block: block to validate.

        Returns:
            The block if the block is valid else it raises an exception
            with the validation error.
        """"""
        if not isinstance(block, dict):
            raise TypeError('Block must be a dict')

        # Check if the block has the correct structure
        expected_keys = ['id', 'block', 'votes']
        if set(block.keys()) != set(expected_keys):
            raise ValueError('Block is missing or has extra keys')

        # Check if the block id is valid
        if block['id'] != block['id']:
            raise ValueError('Block id is not valid')

        # Check if the block contains a valid timestamp
        if not isinstance(block['block']['timestamp'], str):
            raise ValueError('Block timestamp must be a string')

        # Check if the block contains a valid transactions list
        if not isinstance(block['block']['transactions'], list):
            raise ValueError('Block transactions must be a list')

        # Check if all transactions in the block are valid
        for transaction in block['block']['transactions']:
            BaseValidationRules.validate_transaction(bigchaindb, transaction)

        return block
```"
100865,bigchaindb/bigchaindb,bigchaindb_bigchaindb/bigchaindb/web/strip_content_type_middleware.py,bigchaindb.web.strip_content_type_middleware.StripContentTypeMiddleware,"class StripContentTypeMiddleware:
    """"""WSGI middleware to strip Content-Type header for GETs.""""""

    def __init__(self, app):
        """"""Create the new middleware.

        Args:
            app: a flask application
        """"""
        self.app = app

    def __call__(self, environ, start_response):
        """"""Run the middleware and then call the original WSGI application.""""""
        if environ['REQUEST_METHOD'] == 'GET':
            try:
                del environ['CONTENT_TYPE']
            except KeyError:
                pass
            else:
                logger.debug('Remove header ""Content-Type"" from GET request')
        return self.app(environ, start_response)","class StripContentTypeMiddleware:
    
    def __init__(self, app):
        
        pass
    def __call__(self, environ, start_response):
        
        pass",snippet_23,3,"```python
class StripContentTypeMiddleware:
    
    def __init__(self, app):
        self.app = app

    def __call__(self, environ, start_response):
        def _start_response(status, headers, *args):
            for i, (header, value) in enumerate(headers):
                if header.lower() == 'content-type':
                    del headers[i]
                    break
            return start_response(status, headers, *args)
        return self.app(environ, _start_response)
```"
100895,ansible/molecule,src/molecule/app.py,molecule.app.App,"from pathlib import Path
from subprocess import CalledProcessError, CompletedProcess
from molecule.console import original_stderr
from ansible_compat.runtime import Runtime
from molecule.ansi_output import CommandBorders
from molecule.util import print_environment_vars

class App:
    """"""App class that keep runtime status.""""""

    def __init__(self, path: Path) -> None:
        """"""Create a new app instance.

        Args:
            path: The path to the project.
        """"""
        self.runtime = Runtime(project_dir=path, isolated=False)

    def run_command(self, cmd: str | list[str], env: dict[str, str] | None=None, cwd: Path | None=None, *, debug: bool=False, echo: bool=False, quiet: bool=False, check: bool=False, command_borders: bool=False) -> CompletedProcess[str]:
        """"""Execute the given command and returns None.

        Args:
            cmd: A list of strings containing the command to run.
            env: A dict containing the shell's environment.
            cwd: An optional Path to the working directory.
            debug: An optional bool to toggle debug output.
            echo: An optional bool to toggle command echo.
            quiet: An optional bool to toggle command output.
            check: An optional bool to toggle command error checking.
            command_borders: An optional bool to enable borders around command output.

        Returns:
            A completed process object.

        Raises:
            CalledProcessError: If return code is nonzero and check is True.
        """"""
        if debug:
            print_environment_vars(env)
        borders = None
        if command_borders:
            borders = CommandBorders(cmd=cmd, original_stderr=original_stderr)
        result = self.runtime.run(args=cmd, env=env, cwd=cwd, tee=True, set_acp=False)
        if borders:
            borders.finalize(result.returncode)
        if result.returncode != 0 and check:
            raise CalledProcessError(returncode=result.returncode, cmd=result.args, output=result.stdout, stderr=result.stderr)
        return result","
class App:
    
    def __init__(self, path: Path) -> None:
        
        pass
    def run_command(self, cmd: str | list[str], env: dict[str, str] | None=None, cwd: Path | None=None, *, debug: bool=False, echo: bool=False, quiet: bool=False, check: bool=False, command_borders: bool=False) -> CompletedProcess[str]:
        
        pass",snippet_24,3,"```python
import subprocess
from pathlib import Path
from typing import Union

CompletedProcess = subprocess.CompletedProcess

class App:
    
    def __init__(self, path: Path) -> None:
        self.path = path

    def run_command(self, cmd: Union[str, list[str]], env: dict[str, str] | None=None, cwd: Path | None=None, *, debug: bool=False, echo: bool=False, quiet: bool=False, check: bool=False, command_borders: bool=False) -> CompletedProcess[str]:
        if isinstance(cmd, str):
            cmd_list = cmd.split()
        else:
            cmd_list = cmd
        
        if cwd is None:
            cwd = self.path
        
        if env is None:
            env = {}
        
        env = {**dict(subprocess.os.environ), **env}
        
        if command_borders:
            print(""-"" * 80)
        
        if debug or echo:
            print(f""Running command: {' '.join(cmd_list)}"")
            if cwd:
                print(f""In directory: {cwd}"")
        
        try:
            result = subprocess.run(cmd_list, env=env, cwd=str(cwd), check=check, capture_output=not echo, text=True)
        except subprocess.CalledProcessError as e:
            if not quiet:
                print(f""Command failed with return code {e.returncode}"")
            raise
        
        if debug and not quiet:
            print(f""Command output: {result.stdout}"")
            if result.stderr:
                print(f""Command error: {result.stderr}"")
        
        if command_borders:
            print(""-"" * 80)
        
        return result
```"
104788,autokey/autokey,autokey_autokey/lib/autokey/scripting/system.py,autokey.scripting.system.System,"import subprocess

class System:
    """"""
    Simplified access to some system commands.
    """"""

    @staticmethod
    def exec_command(command, getOutput=True):
        """"""
        Execute a shell command

        Usage: C{system.exec_command(command, getOutput=True)}

        Set getOutput to False if the command does not exit and return immediately. Otherwise
        AutoKey will not respond to any hotkeys/abbreviations etc until the process started
        by the command exits.

        @param command: command to be executed (including any arguments) - e.g. ""ls -l""
        @param getOutput: whether to capture the (stdout) output of the command
        @raise subprocess.CalledProcessError: if the command returns a non-zero exit code
        """"""
        if getOutput:
            with subprocess.Popen(command, shell=True, bufsize=-1, stdout=subprocess.PIPE, universal_newlines=True) as p:
                output = p.communicate()[0]
                output = output.rstrip('\n')
                if p.returncode:
                    raise subprocess.CalledProcessError(p.returncode, output)
                return output
        else:
            subprocess.Popen(command, shell=True, bufsize=-1)

    @staticmethod
    def create_file(file_name, contents=''):
        """"""
        Create a file with contents

        Usage: C{system.create_file(fileName, contents="""")}

        @param fileName: full path to the file to be created
        @param contents: contents to insert into the file
        """"""
        with open(file_name, 'w') as written_file:
            written_file.write(contents)","
class System:
    
    @staticmethod
    def exec_command(command, getOutput=True):
        
        pass
    @staticmethod
    def create_file(file_name, contents=''):
        
        pass",snippet_26,3,"```python
import subprocess

class System:
    
    @staticmethod
    def exec_command(command, getOutput=True):
        if getOutput:
            result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            return result.stdout.strip(), result.stderr.strip()
        else:
            subprocess.run(command, shell=True)

    @staticmethod
    def create_file(file_name, contents=''):
        with open(file_name, 'w') as file:
            file.write(contents)
```"
106092,mikedh/trimesh,trimesh/collision.py,trimesh.collision.DistanceData,"class DistanceData:
    """"""
    Data structure for holding information about a distance query.
    """"""

    def __init__(self, names, result):
        """"""
        Initialize a DistanceData.

        Parameters
        ----------
        names : list of str
          The names of the two objects in order.
        contact : fcl.DistanceResult
          The distance query result.
        """"""
        self.names = set(names)
        self._inds = {names[0]: result.b1, names[1]: result.b2}
        self._points = {names[0]: result.nearest_points[0], names[1]: result.nearest_points[1]}
        self._distance = result.min_distance

    @property
    def distance(self):
        """"""
        Returns the distance between the two objects.

        Returns
        -------
        distance : float
          The euclidean distance between the objects.
        """"""
        return self._distance

    def index(self, name):
        """"""
        Returns the index of the closest face for the mesh with
        the given name.

        Parameters
        ----------
        name : str
          The name of the target object.

        Returns
        -------
        index : int
          The index of the face in collisoin.
        """"""
        return self._inds[name]

    def point(self, name):
        """"""
        The 3D point of closest distance on the mesh with the given name.

        Parameters
        ----------
        name : str
          The name of the target object.

        Returns
        -------
        point : (3,) float
          The closest point.
        """"""
        return self._points[name]","class DistanceData:
    
    def __init__(self, names, result):
        
        pass
    @property
    def distance(self):
        
        pass

    def index(self, name):
        
        pass

    def point(self, name):
        
        pass",snippet_28,5,"```python
class DistanceData:
    
    def __init__(self, names, result):
        """"""
        Initialize the DistanceData object.

        Args:
            names (list): A list of names.
            result (list): A list of lists containing distance data.
        """"""
        self._names = names
        self._result = result

    @property
    def distance(self):
        """"""
        Get the distance data.

        Returns:
            list: A list of lists containing distance data.
        """"""
        return self._result

    def index(self, name):
        """"""
        Get the index of a name in the names list.

        Args:
            name (str): The name to find the index for.

        Returns:
            int: The index of the name if found, -1 otherwise.
        """"""
        try:
            return self._names.index(name)
        except ValueError:
            return -1

    def point(self, name):
        """"""
        Get the distance data point for a given name.

        Args:
            name (str): The name to get the distance data point for.

        Returns:
            list or None: The distance data point if the name is found, None otherwise.
        """"""
        index = self.index(name)
        if index != -1:
            return self._result[index]
        else:
            return None


# Example usage:
if __name__ == ""__main__"":
    names = ['A', 'B', 'C']
    result = [[0, 10, 20], [10, 0, 15], [20, 15, 0]]
    distance_data = DistanceData(names, result)
    print(distance_data.distance)
    print(distance_data.index('A'))
    print(distance_data.point('B'))
```"
106111,mikedh/trimesh,trimesh/path/packing.py,trimesh.path.packing.RectangleBin,"import numpy as np

class RectangleBin:
    """"""
    An N-dimensional binary space partition tree for packing
    hyper-rectangles. Split logic is pure `numpy` but behaves
    similarly to `scipy.spatial.Rectangle`.

    Mostly useful for packing 2D textures and 3D boxes and
    has not been tested outside of 2 and 3 dimensions.

    Original article about using this for packing textures:
    http://www.blackpawn.com/texts/lightmaps/
    """"""

    def __init__(self, bounds):
        """"""
        Create a rectangular bin.

        Parameters
        ------------
        bounds : (2, dimension *) float
          Bounds array are `[mins, maxes]`
        """"""
        self.child = []
        self.occupied = False
        self.bounds = np.array(bounds, dtype=np.float64)

    @property
    def extents(self):
        """"""
        Bounding box size.

        Returns
        ----------
        extents : (dimension,) float
          Edge lengths of bounding box
        """"""
        bounds = self.bounds
        return bounds[1] - bounds[0]

    def insert(self, size, rotate=True):
        """"""
        Insert a rectangle into the bin.

        Parameters
        -------------
        size : (dimension,) float
          Size of rectangle to insert/

        Returns
        ----------
        inserted : (2,) float or None
          Position of insertion in the tree or None
          if the insertion was unsuccessful.
        """"""
        for child in self.child:
            attempt = child.insert(size=size, rotate=rotate)
            if attempt is not None:
                return attempt
        if self.occupied:
            return None
        bounds = self.bounds.copy()
        extents = bounds[1] - bounds[0]
        if rotate:
            for roll in range(len(size)):
                size_test = extents - _roll(size, roll)
                fits = (size_test > -_TOL_ZERO).all()
                if fits:
                    size = _roll(size, roll)
                    break
            if not fits:
                return None
        else:
            size_test = extents - size
            if (size_test < -_TOL_ZERO).any():
                return None
        self.occupied = True
        if (size_test < _TOL_ZERO).all():
            return bounds
        axis = size_test.argmax()
        splits = np.vstack((bounds, bounds))
        splits[1:3, axis] = bounds[0][axis] + size[axis]
        self.child[:] = (RectangleBin(splits[:2]), RectangleBin(splits[2:]))
        return self.child[0].insert(size, rotate=rotate)","
class RectangleBin:
    
    def __init__(self, bounds):
        
        pass
    @property
    def extents(self):
        
        pass

    def insert(self, size, rotate=True):
        
        pass",snippet_29,4,"```python
class RectangleBin:
    def __init__(self, bounds):
        self.bounds = bounds
        self.free_regions = [bounds]

    @property
    def extents(self):
        return self.bounds

    def insert(self, size, rotate=True):
        for region in self.free_regions[:]:
            if self._fits_in_region(region, size, rotate):
                x, y, w, h = region
                self.free_regions.remove(region)
                self.free_regions.extend(self._split_region(x, y, w, h, size))
                return (x, y)
        return None

    def _fits_in_region(self, region, size, rotate):
        w, h = size
        region_w, region_h = region[2], region[3]
        return (w <= region_w and h <= region_h) or (rotate and h <= region_w and w <= region_h)

    def _split_region(self, x, y, w, h, size):
        regions = []
        rect_w, rect_h = size
        if w >= rect_w and h >= rect_h:
            if w > rect_w:
                regions.append((x + rect_w, y, w - rect_w, h))
            if h > rect_h:
                regions.append((x, y + rect_h, w, h - rect_h))
        else:
            rect_w, rect_h = rect_h, rect_w
            if w > rect_w:
                regions.append((x + rect_w, y, w - rect_w, h))
            if h > rect_h:
                regions.append((x, y + rect_h, w, h - rect_h))
        regions = [(r[0], r[1], r[2], r[3]) for r in regions if r[2] > 0 and r[3] > 0]
        return regions

# Example usage:
if __name__ == ""__main__"":
    bin = RectangleBin((0, 0, 10, 10))
    print(bin.insert((2, 3)))  # Output: (0, 0)
    print(bin.insert((4, 5)))  # Output: (2, 0)
    print(bin.extents)  # Output: (0, 0, 10, 10)
```"
107609,weld-project/weld,python/grizzly/grizzly/lazy_op.py,grizzly.lazy_op.LazyOpResult,"class LazyOpResult:
    """"""Wrapper class around as yet un-evaluated Weld computation results

    Attributes:
        dim (int): Dimensionality of the output
        expr (WeldObject / Numpy.ndarray): The expression that needs to be
            evaluated
        weld_type (WeldType): Type of the output object
    """"""

    def __init__(self, expr, weld_type, dim):
        """"""Summary

        Args:
            expr (TYPE): Description
            weld_type (TYPE): Description
            dim (TYPE): Description
        """"""
        self.expr = expr
        self.weld_type = weld_type
        self.dim = dim

    def evaluate(self, verbose=True, decode=True, passes=None, num_threads=1, apply_experimental_transforms=False):
        """"""Summary

        Args:
            verbose (bool, optional): Description
            decode (bool, optional): Description

        Returns:
            TYPE: Description
        """"""
        if isinstance(self.expr, WeldObject):
            return self.expr.evaluate(to_weld_type(self.weld_type, self.dim), verbose, decode, passes=passes, num_threads=num_threads, apply_experimental_transforms=apply_experimental_transforms)
        return self.expr","class LazyOpResult:
    
    def __init__(self, expr, weld_type, dim):
        
        pass
    def evaluate(self, verbose=True, decode=True, pass
es=None, num_threads=1, apply_experimental_transforms=False):
        
        pass",snippet_30,3,"```python
class LazyOpResult:
    
    def __init__(self, expr, weld_type, dim):
        """"""
        Initializes a LazyOpResult object.

        Parameters:
        expr (object): The expression to be evaluated.
        weld_type (object): The type of the result.
        dim (int): The dimensionality of the result.
        """"""
        self.expr = expr
        self.weld_type = weld_type
        self.dim = dim
        self.evaluated_result = None

    def evaluate(self, verbose=True, decode=True, passes=None, num_threads=1, apply_experimental_transforms=False):
        """"""
        Evaluates the expression and returns the result.

        Parameters:
        verbose (bool): Whether to print verbose output. Defaults to True.
        decode (bool): Whether to decode the result. Defaults to True.
        passes (list): A list of optimization passes to apply. Defaults to None.
        num_threads (int): The number of threads to use. Defaults to 1.
        apply_experimental_transforms (bool): Whether to apply experimental transforms. Defaults to False.

        Returns:
        object: The evaluated result.
        """"""
        if self.evaluated_result is None:
            # Assuming there's a function called 'evaluate_expr' that evaluates the expression
            # and returns the result. This function is not implemented here.
            self.evaluated_result = evaluate_expr(self.expr, self.weld_type, self.dim, 
                                                  verbose, decode, passes, num_threads, 
                                                  apply_experimental_transforms)
        return self.evaluated_result
```"
113819,abseil/abseil-py,abseil_abseil-py/absl/app.py,absl.app.ExceptionHandler,"class ExceptionHandler:
    """"""Base exception handler from which other may inherit.""""""

    def wants(self, exc):
        """"""Returns whether this handler wants to handle the exception or not.

        This base class returns True for all exceptions by default. Override in
        subclass if it wants to be more selective.

        Args:
          exc: Exception, the current exception.
        """"""
        del exc
        return True

    def handle(self, exc):
        """"""Do something with the current exception.

        Args:
          exc: Exception, the current exception

        This method must be overridden.
        """"""
        raise NotImplementedError()","class ExceptionHandler:
    
    def wants(self, exc):
        
        pass
    def handle(self, exc):
        
        pass",snippet_33,3,"```python
class ExceptionHandler:
    """"""
    A base class for handling exceptions.
    """"""

    def wants(self, exc):
        """"""
        Checks if this handler wants to handle the given exception.

        Args:
            exc (Exception): The exception to be handled.

        Returns:
            bool: True if this handler wants to handle the exception, False otherwise.
        """"""
        raise NotImplementedError(""Subclasses must implement this method"")

    def handle(self, exc):
        """"""
        Handles the given exception.

        Args:
            exc (Exception): The exception to be handled.

        Returns:
            Any: The result of handling the exception.
        """"""
        raise NotImplementedError(""Subclasses must implement this method"")


# Example implementation of a concrete exception handler
class TypeErrorHandler(ExceptionHandler):
    def wants(self, exc):
        return isinstance(exc, TypeError)

    def handle(self, exc):
        # Handle TypeError
        print(f""Handling TypeError: {exc}"")
        return None


# Example usage
if __name__ == ""__main__"":
    try:
        x = ""hello""
        y = 5
        x + y  # This will raise a TypeError
    except Exception as e:
        handler = TypeErrorHandler()
        if handler.wants(e):
            handler.handle(e)
        else:
            print(f""Unhandled exception: {e}"")
```"
116413,QuantEcon/QuantEcon.py,quantecon/util/timing.py,quantecon.util.timing.__Timer__,"import time
import numpy as np

class __Timer__:
    """"""Computes elapsed time, between tic, tac, and toc.

    Methods
    -------
    tic :
        Resets timer.
    toc :
        Returns and prints time elapsed since last tic().
    tac :
        Returns and prints time elapsed since last
             tic(), tac() or toc() whichever occured last.
    loop_timer :
        Returns and prints the total and average time elapsed for n runs
        of a given function.

    """"""
    start = None
    last = None

    def tic(self):
        """"""
        Save time for future use with `tac()` or `toc()`.

        Returns
        -------
        None
            This function doesn't return a value.
        """"""
        t = time.time()
        self.start = t
        self.last = t

    def tac(self, verbose=True, digits=2):
        """"""
        Return and print elapsed time since last `tic()`, `tac()`, or
        `toc()`.

        Parameters
        ----------
        verbose : bool, optional(default=True)
            If True, then prints time.

        digits : scalar(int), optional(default=2)
            Number of digits printed for time elapsed.

        Returns
        -------
        elapsed : scalar(float)
            Time elapsed since last `tic()`, `tac()`, or `toc()`.

        """"""
        if self.start is None:
            raise Exception('tac() without tic()')
        t = time.time()
        elapsed = t - self.last
        self.last = t
        if verbose:
            m, s = divmod(elapsed, 60)
            h, m = divmod(m, 60)
            print('TAC: Elapsed: %d:%02d:%0d.%0*d' % (h, m, s, digits, s % 1 * 10 ** digits))
        return elapsed

    def toc(self, verbose=True, digits=2):
        """"""
        Return and print time elapsed since last `tic()`.

        Parameters
        ----------
        verbose : bool, optional(default=True)
            If True, then prints time.

        digits : scalar(int), optional(default=2)
            Number of digits printed for time elapsed.

        Returns
        -------
        elapsed : scalar(float)
            Time elapsed since last `tic()`.

        """"""
        if self.start is None:
            raise Exception('toc() without tic()')
        t = time.time()
        self.last = t
        elapsed = t - self.start
        if verbose:
            m, s = divmod(elapsed, 60)
            h, m = divmod(m, 60)
            print('TOC: Elapsed: %d:%02d:%0d.%0*d' % (h, m, s, digits, s % 1 * 10 ** digits))
        return elapsed

    def loop_timer(self, n, function, args=None, verbose=True, digits=2, best_of=3):
        """"""
        Return and print the total and average time elapsed for n runs
        of function.

        Parameters
        ----------
        n : scalar(int)
            Number of runs.

        function : function
            Function to be timed.

        args : list, optional(default=None)
            Arguments of the function.

        verbose : bool, optional(default=True)
            If True, then prints average time.

        digits : scalar(int), optional(default=2)
            Number of digits printed for time elapsed.

        best_of : scalar(int), optional(default=3)
            Average time over best_of runs.

        Returns
        -------
        average_time : scalar(float)
            Average time elapsed for n runs of function.

        average_of_best : scalar(float)
            Average of best_of times for n runs of function.

        """"""
        tic()
        all_times = np.empty(n)
        for run in range(n):
            if hasattr(args, '__iter__'):
                function(*args)
            elif args is None:
                function()
            else:
                function(args)
            all_times[run] = tac(verbose=False, digits=digits)
        elapsed = toc(verbose=False, digits=digits)
        m, s = divmod(elapsed, 60)
        h, m = divmod(m, 60)
        print('Total run time: %d:%02d:%0d.%0*d' % (h, m, s, digits, s % 1 * 10 ** digits))
        average_time = all_times.mean()
        average_of_best = np.sort(all_times)[:best_of].mean()
        if verbose:
            m, s = divmod(average_time, 60)
            h, m = divmod(m, 60)
            print('Average time for %d runs: %d:%02d:%0d.%0*d' % (n, h, m, s, digits, s % 1 * 10 ** digits))
            m, s = divmod(average_of_best, 60)
            h, m = divmod(m, 60)
            print('Average of %d best times: %d:%02d:%0d.%0*d' % (best_of, h, m, s, digits, s % 1 * 10 ** digits))
        return (average_time, average_of_best)","
class __Timer__:
    
    def tic(self):
        
        pass
    def tac(self, verbose=True, digits=2):
        
        pass

    def toc(self, verbose=True, digits=2):
        
        pass

    def loop_timer(self, n, function, args=None, verbose=True, digits=2, best_of=3):
        
        pass",snippet_35,5,"```python
import time
from functools import wraps

class __Timer__:
    
    def __init__(self):
        self.start_time = None
        self.end_time = None
        self.elapsed_time = None

    def tic(self):
        """"""Start the timer.""""""
        self.start_time = time.time()

    def tac(self, verbose=True, digits=2):
        """"""Record the end time and calculate elapsed time.""""""
        self.end_time = time.time()
        self.elapsed_time = self.end_time - self.start_time
        if verbose:
            print(f""Elapsed time: {self.elapsed_time:.{digits}f} seconds"")

    def toc(self, verbose=True, digits=2):
        """"""Alias for tac.""""""
        self.tac(verbose, digits)

    def loop_timer(self, n, function, args=None, verbose=True, digits=2, best_of=3):
        """"""Time a function n times and return the average execution time.""""""
        if args is None:
            args = ()
        
        times = []
        for _ in range(best_of):
            total_time = 0
            for _ in range(n):
                start = time.time()
                function(*args)
                end = time.time()
                total_time += end - start
            times.append(total_time / n)
        
        avg_time = min(times)
        if verbose:
            print(f""Average execution time over {n} runs (best of {best_of}): {avg_time:.{digits}f} seconds"")
        return avg_time

# Example usage:
def example_function(x, y):
    time.sleep(0.1)  # Simulate some work
    return x + y

timer = __Timer__()
timer.tic()
time.sleep(1)
timer.toc()

timer.loop_timer(10, example_function, (1, 2))
```"
116421,DerwenAI/pytextrank,DerwenAI_pytextrank/pytextrank/base.py,pytextrank.base.Sentence,"import typing
from spacy.tokens import Doc, Span, Token
from dataclasses import dataclass

@dataclass
class Sentence:
    """"""
A data class representing the distance measure for one sentence.
    """"""
    start: int
    end: int
    sent_id: int
    phrases: typing.Set[int]
    distance: float

    def empty(self) -> bool:
        """"""
Test whether this sentence includes any ranked phrases.

    returns:
`True` if the `phrases` is not empty.
        """"""
        return len(self.phrases) == 0

    def text(self, doc: Doc) -> str:
        """"""
Accessor for the text slice of the `spaCy` [`Doc`](https://spacy.io/api/doc)
document represented by this sentence.

    doc:
source document

    returns:
the sentence text
        """"""
        return doc[self.start:self.end]","@dataclass
class Sentence:
    
    def empty(self) -> bool:
        
        pass
    def text(self, doc: Doc) -> str:
        
        pass",snippet_36,3,"```python
from dataclasses import dataclass
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from spacy import Doc

@dataclass
class Sentence:
    start: int
    end: int

    def empty(self) -> bool:
        return self.start == self.end

    def text(self, doc: 'Doc') -> str:
        return doc[self.start:self.end].text
```"
128871,arviz-devs/arviz,arviz-devs_arviz/arviz/utils.py,arviz.utils.interactive_backend,"import matplotlib.pyplot as plt

class interactive_backend:
    """"""Context manager to change backend temporarily in ipython sesson.

    It uses ipython magic to change temporarily from the ipython inline backend to
    an interactive backend of choice. It cannot be used outside ipython sessions nor
    to change backends different than inline -> interactive.

    Notes
    -----
    The first time ``interactive_backend`` context manager is called, any of the available
    interactive backends can be chosen. The following times, this same backend must be used
    unless the kernel is restarted.

    Parameters
    ----------
    backend : str, optional
        Interactive backend to use. It will be passed to ``%matplotlib`` magic, refer to
        its docs to see available options.

    Examples
    --------
    Inside an ipython session (i.e. a jupyter notebook) with the inline backend set:

    .. code::

        >>> import arviz as az
        >>> idata = az.load_arviz_data(""centered_eight"")
        >>> az.plot_posterior(idata) # inline
        >>> with az.interactive_backend():
        ...     az.plot_density(idata) # interactive
        >>> az.plot_trace(idata) # inline

    """"""

    def __init__(self, backend=''):
        """"""Initialize context manager.""""""
        try:
            from IPython import get_ipython
        except ImportError as err:
            raise ImportError(f'The exception below was risen while importing Ipython, this context manager can only be used inside ipython sessions:\n{err}') from err
        self.ipython = get_ipython()
        if self.ipython is None:
            raise EnvironmentError('This context manager can only be used inside ipython sessions')
        self.ipython.magic(f'matplotlib {backend}')

    def __enter__(self):
        """"""Enter context manager.""""""
        return self

    def __exit__(self, exc_type, exc_value, exc_tb):
        """"""Exit context manager.""""""
        plt.show(block=True)
        self.ipython.magic('matplotlib inline')","
class interactive_backend:
    '''Context manager to change backend temporarily in ipython sesson.
    It uses ipython magic to change temporarily from the ipython inline backend to
    an interactive backend of choice. It cannot be used outside ipython sessions nor
    to change backends different than inline -> interactive.
    Notes
    -----
    The first time ``interactive_backend`` context manager is called, any of the available
    interactive backends can be chosen. The following times, this same backend must be used
    unless the kernel is restarted.
    Parameters
    ----------
    backend : str, optional
        Interactive backend to use. It will be pass
ed to ``%matplotlib`` magic, refer to
        its docs to see available options.
    Examples
    --------
    Inside an ipython session (i.e. a jupyter notebook) with the inline backend set:
    .. code::
        >>> import arviz as az
        >>> idata = az.load_arviz_data(""centered_eight"")
        >>> az.plot_posterior(idata) # inline
        >>> with az.interactive_backend():
        ...     az.plot_density(idata) # interactive
        >>> az.plot_trace(idata) # inline
    '''
    def __init__(self, backend=''):
        
        pass

    def __enter__(self):
        
        pass

    def __exit__(self, exc_type, exc_value, exc_tb):
        
        pass",snippet_40,4,"```python
import matplotlib
from IPython import get_ipython

class interactive_backend:
    '''Context manager to change backend temporarily in ipython session.
    It uses ipython magic to change temporarily from the ipython inline backend to
    an interactive backend of choice. It cannot be used outside ipython sessions nor
    to change backends different than inline -> interactive.
    Notes
    -----
    The first time ``interactive_backend`` context manager is called, any of the available
    interactive backends can be chosen. The following times, this same backend must be used
    unless the kernel is restarted.
    Parameters
    ----------
    backend : str, optional
        Interactive backend to use. It will be passed to ``%matplotlib`` magic, refer to
        its docs to see available options.
    Examples
    --------
    Inside an ipython session (i.e. a jupyter notebook) with the inline backend set:
    .. code::
        >>> import arviz as az
        >>> idata = az.load_arviz_data(""centered_eight"")
        >>> az.plot_posterior(idata) # inline
        >>> with az.interactive_backend():
        ...     az.plot_density(idata) # interactive
        >>> az.plot_trace(idata) # inline
    '''
    _first_use = True
    _stored_backend = None

    def __init__(self, backend=''):
        self.backend = backend

    def __enter__(self):
        ipython = get_ipython()
        if ipython is None:
            raise RuntimeError(""`interactive_backend` context manager is intended for use within ipython sessions"")
        if not matplotlib.is_interactive() or matplotlib.get_backend() == ""module://ipykernel.pylab.backend_inline"":
            if interactive_backend._first_use:
                if self.backend:
                    ipython.run_line_magic('matplotlib', self.backend)
                else:
                    ipython.run_line_magic('matplotlib', '')
                interactive_backend._stored_backend = matplotlib.get_backend()
                interactive_backend._first_use = False
            else:
                if matplotlib.get_backend() != interactive_backend._stored_backend:
                    raise RuntimeError(f""Backend has already been set to {interactive_backend._stored_backend} ""
                                       ""and it can't be changed to a different one"")
                ipython.run_line_magic('matplotlib', self.backend if self.backend else 'qt5')
        return self

    def __exit__(self, exc_type, exc_value, exc_tb):
        ipython = get_ipython()
        ipython.run_line_magic('matplotlib', 'inline')
```"
128872,arviz-devs/arviz,arviz-devs_arviz/arviz/utils.py,arviz.utils.lazy_property,"import functools

class lazy_property:
    """"""Used to load numba first time it is needed.""""""

    def __init__(self, fget):
        """"""Lazy load a property with `fget`.""""""
        self.fget = fget
        functools.update_wrapper(self, fget)

    def __get__(self, obj, cls):
        """"""Call the function, set the attribute.""""""
        if obj is None:
            return self
        value = self.fget(obj)
        setattr(obj, self.fget.__name__, value)
        return value","
class lazy_property:
    
    def __init__(self, fget):
        
        pass
    def __get__(self, obj, cls):
        
        pass",snippet_41,3,"```python
class lazy_property:
    """"""
    A decorator that converts a method into a lazy property.
    The method is called only once when the property is first accessed.
    """"""

    def __init__(self, fget):
        self.fget = fget
        self.name = fget.__name__

    def __get__(self, obj, cls):
        if obj is None:
            return self
        value = self.fget(obj)
        setattr(obj, self.name, value)
        return value
```"
129413,dtmilano/AndroidViewClient,dtmilano_AndroidViewClient/src/com/dtmilano/android/adb/adbclient.py,com.dtmilano.android.adb.adbclient.WifiManager,"import re
import sys

class WifiManager:
    """"""
    Simulates Android WifiManager.

    @see: http://developer.android.com/reference/android/net/wifi/WifiManager.html
    """"""
    WIFI_STATE_DISABLING = 0
    WIFI_STATE_DISABLED = 1
    WIFI_STATE_ENABLING = 2
    WIFI_STATE_ENABLED = 3
    WIFI_STATE_UNKNOWN = 4
    WIFI_IS_ENABLED_RE = re.compile('Wi-Fi is enabled')
    WIFI_IS_DISABLED_RE = re.compile('Wi-Fi is disabled')

    def __init__(self, device):
        """"""
        Constructor.
        :param device:
        :type device:
        """"""
        self.device = device

    def getWifiState(self):
        """"""
        Gets the Wi-Fi enabled state.

        @return: One of WIFI_STATE_DISABLED, WIFI_STATE_DISABLING, WIFI_STATE_ENABLED, WIFI_STATE_ENABLING, WIFI_STATE_UNKNOWN
        """"""
        result = self.device.shell('dumpsys wifi')
        if result:
            state = result.splitlines()[0]
            if self.WIFI_IS_ENABLED_RE.match(state):
                return self.WIFI_STATE_ENABLED
            elif self.WIFI_IS_DISABLED_RE.match(state):
                return self.WIFI_STATE_DISABLED
        print('UNKNOWN WIFI STATE:', state, file=sys.stderr)
        return self.WIFI_STATE_UNKNOWN","
class WifiManager:
    
    def __init__(self, device):
        
        pass
    def getWifiState(self):
        
        pass",snippet_42,3,"```python
class WifiManager:
    
    def __init__(self, device):
        """"""
        Initialize the WifiManager class.

        Args:
            device (object): The device object that provides wifi functionality.
        """"""
        self.device = device
        self.wifi_state = None

    def getWifiState(self):
        """"""
        Get the current state of the wifi.

        Returns:
            str: The current wifi state.
        """"""
        # Assuming the device object has a method to get the wifi state
        self.wifi_state = self.device.get_wifi_state()
        return self.wifi_state


# Example usage:

class Device:
    def __init__(self):
        self.wifi_state = ""DISABLED""

    def get_wifi_state(self):
        return self.wifi_state

    def enable_wifi(self):
        self.wifi_state = ""ENABLED""

    def disable_wifi(self):
        self.wifi_state = ""DISABLED""


def main():
    device = Device()
    wifi_manager = WifiManager(device)
    print(wifi_manager.getWifiState())  # Output: DISABLED
    device.enable_wifi()
    print(wifi_manager.getWifiState())  # Output: ENABLED


if __name__ == ""__main__"":
    main()
```"
129620,neovim/pynvim,neovim_pynvim/pynvim/msgpack_rpc/async_session.py,pynvim.msgpack_rpc.async_session.Response,"from pynvim.msgpack_rpc.msgpack_stream import MsgpackStream

class Response:
    """"""Response to a msgpack-rpc request that came from Nvim.

    When Nvim sends a msgpack-rpc request, an instance of this class is
    created for remembering state required to send a response.
    """"""

    def __init__(self, msgpack_stream: MsgpackStream, request_id: int):
        """"""Initialize the Response instance.""""""
        self._msgpack_stream = msgpack_stream
        self._request_id = request_id

    def send(self, value, error=False):
        """"""Send the response.

        If `error` is True, it will be sent as an error.
        """"""
        if error:
            resp = [1, self._request_id, value, None]
        else:
            resp = [1, self._request_id, None, value]
        debug('sending response to request %d: %s', self._request_id, resp)
        self._msgpack_stream.send(resp)","
class Response:
    
    def __init__(self, msgpack_stream: MsgpackStream, request_id: int):
        
        pass
    def send(self, value, error=False):
        
        pass",snippet_43,3,"```python
import msgpack

class MsgpackStream:
    def __init__(self, stream):
        self.stream = stream

    def write(self, data):
        self.stream.write(msgpack.packb(data))

    def flush(self):
        self.stream.flush()

class Response:
    
    def __init__(self, msgpack_stream: MsgpackStream, request_id: int):
        self.msgpack_stream = msgpack_stream
        self.request_id = request_id

    def send(self, value, error=False):
        response = {
            'id': self.request_id,
            'error': error,
            'result': value if not error else str(value)
        }
        self.msgpack_stream.write(response)
        self.msgpack_stream.flush()
```"
129967,sendgrid/sendgrid-python,sendgrid_sendgrid-python/sendgrid/helpers/eventwebhook/__init__.py,sendgrid.helpers.eventwebhook.EventWebhook,"from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.exceptions import InvalidSignature
from cryptography.hazmat.primitives.serialization import load_pem_public_key
import base64

class EventWebhook:
    """"""
    This class allows you to use the Event Webhook feature. Read the docs for
    more details: https://sendgrid.com/docs/for-developers/tracking-events/event
    """"""

    def __init__(self, public_key=None):
        """"""
        Construct the Event Webhook verifier object
        :param public_key: verification key under Mail Settings
        :type public_key: string
        """"""
        self.public_key = self.convert_public_key_to_ecdsa(public_key) if public_key else public_key

    def convert_public_key_to_ecdsa(self, public_key):
        """"""
        Convert the public key string to an EllipticCurvePublicKey object.

        :param public_key: verification key under Mail Settings
        :type public_key string
        :return: An EllipticCurvePublicKey object using the ECDSA algorithm
        :rtype cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey
        """"""
        pem_key = '-----BEGIN PUBLIC KEY-----\n' + public_key + '\n-----END PUBLIC KEY-----'
        return load_pem_public_key(pem_key.encode('utf-8'))

    def verify_signature(self, payload, signature, timestamp, public_key=None):
        """"""
        Verify signed event webhook requests.

        :param payload: event payload in the request body
        :type payload: string
        :param signature: value obtained from the 'X-Twilio-Email-Event-Webhook-Signature' header
        :type signature: string
        :param timestamp: value obtained from the 'X-Twilio-Email-Event-Webhook-Timestamp' header
        :type timestamp: string
        :param public_key: elliptic curve public key
        :type public_key: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey
        :return: true or false if signature is valid
        """"""
        timestamped_payload = (timestamp + payload).encode('utf-8')
        decoded_signature = base64.b64decode(signature)
        key = public_key or self.public_key
        try:
            key.verify(decoded_signature, timestamped_payload, ec.ECDSA(hashes.SHA256()))
            return True
        except InvalidSignature:
            return False","
class EventWebhook:
    
    def __init__(self, public_key=None):
        
        pass
    def convert_public_key_to_ecdsa(self, public_key):
        
        pass

    def verify_signature(self, payload, signature, timestamp, public_key=None):
        
        pass",snippet_44,4,"```python
import hashlib
import hmac
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.exceptions import InvalidSignature
from cryptography.hazmat.backends import default_backend

class EventWebhook:
    
    def __init__(self, public_key=None):
        if public_key:
            self.public_key = self.convert_public_key_to_ecdsa(public_key)
        else:
            self.public_key = None

    def convert_public_key_to_ecdsa(self, public_key):
        try:
            return serialization.load_pem_public_key(
                public_key.encode(),
                backend=default_backend()
            )
        except ValueError:
            raise ValueError(""Invalid public key"")

    def verify_signature(self, payload, signature, timestamp, public_key=None):
        if public_key:
            ecdsa_public_key = self.convert_public_key_to_ecdsa(public_key)
        elif self.public_key:
            ecdsa_public_key = self.public_key
        else:
            raise ValueError(""Public key is required"")

        signed_payload = timestamp + payload
        try:
            ecdsa_public_key.verify(
                bytes.fromhex(signature),
                signed_payload.encode(),
                ec.ECDSA(hashlib.sha256())
            )
            return True
        except (InvalidSignature, ValueError):
            return False
```"
131054,SoCo/SoCo,SoCo_SoCo/soco/music_services/token_store.py,soco.music_services.token_store.TokenStoreBase,"class TokenStoreBase:
    """"""Token store base class""""""

    def __init__(self, token_collection='default'):
        """"""Instantiate instance variables

        Args:
            token_collection (str): The name of the token collection to use. This may be
                used to store different token collections for different client programs.
        """"""
        self.token_collection = token_collection

    def save_token_pair(self, music_service_id, household_id, token_pair):
        """"""Save a token value pair (token, key) which is a 2 item sequence""""""
        raise NotImplementedError

    def load_token_pair(self, music_service_id, household_id):
        """"""Load a token pair (token, key) which is a 2 item sequence""""""
        raise NotImplementedError

    def has_token(self, music_service_id, household_id):
        """"""Return True if a token is stored for the music service and household ID""""""
        raise NotImplementedError","class TokenStoreBase:
    
    def __init__(self, token_collection='default'):
        
        pass
    def save_token_pair(self, music_service_id, household_id, token_pair):
        
        pass
    def load_token_pair(self, music_service_id, household_id):
        
        pass

    def has_token(self, music_service_id, household_id):
        
        pass",snippet_45,5,"```python
import sqlite3
import json

class TokenStoreBase:
    
    def __init__(self, token_collection='default'):
        self.token_collection = token_collection
        self.conn = sqlite3.connect(f'{token_collection}.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS token_pairs
            (music_service_id TEXT, household_id TEXT, token_pair TEXT, PRIMARY KEY (music_service_id, household_id))
        ''')
        self.conn.commit()

    def save_token_pair(self, music_service_id, household_id, token_pair):
        token_pair_json = json.dumps(token_pair)
        self.cursor.execute('''
            INSERT OR REPLACE INTO token_pairs (music_service_id, household_id, token_pair)
            VALUES (?, ?, ?)
        ''', (music_service_id, household_id, token_pair_json))
        self.conn.commit()

    def load_token_pair(self, music_service_id, household_id):
        self.cursor.execute('''
            SELECT token_pair FROM token_pairs
            WHERE music_service_id = ? AND household_id = ?
        ''', (music_service_id, household_id))
        result = self.cursor.fetchone()
        if result:
            return json.loads(result[0])
        else:
            return None

    def has_token(self, music_service_id, household_id):
        self.cursor.execute('''
            SELECT 1 FROM token_pairs
            WHERE music_service_id = ? AND household_id = ?
        ''', (music_service_id, household_id))
        return self.cursor.fetchone() is not None
```"
131060,SoCo/SoCo,SoCo_SoCo/soco/plugins/sharelink.py,soco.plugins.sharelink.ShareClass,"class ShareClass:
    """"""Base class for supported services.""""""

    def canonical_uri(self, uri):
        """"""Recognize a share link and return its canonical representation.

        Args:
            uri (str): A URI like ""https://tidal.com/browse/album/157273956"".

        Returns:
            str: The canonical URI or None if not recognized.
        """"""
        raise NotImplementedError

    def service_number(self):
        """"""Return the service number.

        Returns:
            int: A number identifying the supported music service.
        """"""
        raise NotImplementedError

    @staticmethod
    def magic():
        """"""Return magic.

        Returns:
            dict: Magic prefix/key/class values for each share type.
        """"""
        return {'album': {'prefix': 'x-rincon-cpcontainer:1004206c', 'key': '00040000', 'class': 'object.container.album.musicAlbum'}, 'episode': {'prefix': '', 'key': '00032020', 'class': 'object.item.audioItem.musicTrack'}, 'track': {'prefix': '', 'key': '00032020', 'class': 'object.item.audioItem.musicTrack'}, 'show': {'prefix': 'x-rincon-cpcontainer:1006206c', 'key': '1006206c', 'class': 'object.container.playlistContainer'}, 'song': {'prefix': '', 'key': '10032020', 'class': 'object.item.audioItem.musicTrack'}, 'playlist': {'prefix': 'x-rincon-cpcontainer:1006206c', 'key': '1006206c', 'class': 'object.container.playlistContainer'}}

    def extract(self, uri):
        """"""Extract the share type and encoded URI from a share link.

        Returns:
            share_type: The shared type, like ""album"" or ""track"".
            encoded_uri: An escaped URI with a service-specific format.
        """"""
        raise NotImplementedError","class ShareClass:
    
    def canonical_uri(self, uri):
        
        pass
    def service_number(self):
        
        pass
    @staticmethod
    def magic():
        
        pass

    def extract(self, uri):
        
        pass",snippet_46,5,"```python
import re

class ShareClass:
    def __init__(self, service_number=None):
        self.service_number = service_number

    def canonical_uri(self, uri):
        return uri.strip().lower()

    def service_number(self):
        return self.service_number

    @staticmethod
    def magic():
        return ""ShareClass""

    def extract(self, uri):
        canonical_uri = self.canonical_uri(uri)
        pattern = r'service/(\d+)'
        match = re.search(pattern, canonical_uri)
        if match:
            return match.group(1)
        else:
            return None


# Example usage:
if __name__ == ""__main__"":
    share_class = ShareClass()
    print(share_class.magic())  # Output: ShareClass
    print(share_class.canonical_uri(""  Service/123  ""))  # Output: service/123
    print(share_class.extract(""https://example.com/service/123""))  # Output: 123
    print(share_class.extract(""https://example.com/invalid-uri""))  # Output: None
```"
131928,mjg59/python-broadlink,mjg59_python-broadlink/broadlink/protocol.py,broadlink.protocol.Datetime,"import time
import datetime as dt

class Datetime:
    """"""Helps to pack and unpack datetime objects for the Broadlink protocol.""""""

    @staticmethod
    def pack(datetime: dt.datetime) -> bytes:
        """"""Pack the timestamp to be sent over the Broadlink protocol.""""""
        data = bytearray(12)
        utcoffset = int(datetime.utcoffset().total_seconds() / 3600)
        data[:4] = utcoffset.to_bytes(4, 'little', signed=True)
        data[4:6] = datetime.year.to_bytes(2, 'little')
        data[6] = datetime.minute
        data[7] = datetime.hour
        data[8] = int(datetime.strftime('%y'))
        data[9] = datetime.isoweekday()
        data[10] = datetime.day
        data[11] = datetime.month
        return data

    @staticmethod
    def unpack(data: bytes) -> dt.datetime:
        """"""Unpack a timestamp received over the Broadlink protocol.""""""
        utcoffset = int.from_bytes(data[0:4], 'little', signed=True)
        year = int.from_bytes(data[4:6], 'little')
        minute = data[6]
        hour = data[7]
        subyear = data[8]
        isoweekday = data[9]
        day = data[10]
        month = data[11]
        tz_info = dt.timezone(dt.timedelta(hours=utcoffset))
        datetime = dt.datetime(year, month, day, hour, minute, 0, 0, tz_info)
        if datetime.isoweekday() != isoweekday:
            raise ValueError('isoweekday does not match')
        if int(datetime.strftime('%y')) != subyear:
            raise ValueError('subyear does not match')
        return datetime

    @staticmethod
    def now() -> dt.datetime:
        """"""Return the current date and time with timezone info.""""""
        tz_info = dt.timezone(dt.timedelta(seconds=-time.timezone))
        return dt.datetime.now(tz_info)","
class Datetime:
    
    @staticmethod
    def pack(datetime: dt.datetime) -> bytes:
        
        pass
    @staticmethod
    def unpack(data: bytes) -> dt.datetime:
        
        pass
    @staticmethod
    def now() -> dt.datetime:
        
        pass",snippet_48,4,"```python
import datetime as dt
import struct

class Datetime:
    
    @staticmethod
    def pack(datetime: dt.datetime) -> bytes:
        """"""Packs a datetime object into bytes.""""""
        timestamp = int(datetime.timestamp())
        return struct.pack('!q', timestamp)

    @staticmethod
    def unpack(data: bytes) -> dt.datetime:
        """"""Unpacks bytes into a datetime object.""""""
        timestamp = struct.unpack('!q', data)[0]
        return dt.datetime.fromtimestamp(timestamp)

    @staticmethod
    def now() -> dt.datetime:
        """"""Returns the current datetime.""""""
        return dt.datetime.now()
```"
132032,rigetti/pyquil,pyquil/quilatom.py,pyquil.quilatom.QuilAtom,"class QuilAtom:
    """"""Abstract class for atomic elements of Quil.""""""

    def out(self) -> str:
        """"""Return the element as a valid Quil string.""""""
        raise NotImplementedError()

    def __str__(self) -> str:
        """"""Get a string representation of the element, possibly not valid Quil.""""""
        raise NotImplementedError()

    def __eq__(self, other: object) -> bool:
        """"""Return True if the other object is equal to this one.""""""
        raise NotImplementedError()

    def __hash__(self) -> int:
        """"""Return a hash of the object.""""""
        raise NotImplementedError()","class QuilAtom:
    
    def out(self) -> str:
        
        pass
    def __str__(self) -> str:
        
        pass
    def __eq__(self, other: object) -> bool:
        
        pass

    def __hash__(self) -> int:
        
        pass",snippet_49,5,"```python
class QuilAtom:
    
    def out(self) -> str:
        return str(self)

    def __str__(self) -> str:
        raise NotImplementedError(""Subclasses must implement __str__"")

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, QuilAtom):
            return False
        return str(self) == str(other)

    def __hash__(self) -> int:
        return hash(str(self))
```"
134597,Unidata/MetPy,Unidata_MetPy/tools/flake8-metpy/flake8_metpy.py,flake8_metpy.MetPyChecker,"class MetPyChecker:
    """"""Flake8 plugin class to check MetPy style/best practice.""""""
    name = __name__
    version = '1.0'

    def __init__(self, tree):
        """"""Initialize the plugin.""""""
        self.tree = tree

    def run(self):
        """"""Run the plugin and yield errors.""""""
        visitor = MetPyVisitor()
        visitor.visit(self.tree)
        for err in visitor.errors:
            yield self.error(err)

    def error(self, err):
        """"""Format errors into Flake8's required format.""""""
        return (err.lineno, err.col, f'MPY{err.code:03d}: Multiplying/dividing by units--use units.Quantity()', type(self))","class MetPyChecker:
    
    def __init__(self, tree):
        
        pass
    def run(self):
        
        pass
    def error(self, err):
        
        pass",snippet_50,4,"```python
class MetPyChecker:
    
    def __init__(self, tree):
        self.tree = tree
        self.errors = []

    def run(self):
        # Assuming tree is an Abstract Syntax Tree (AST) of Python code
        # and we're checking for some MetPy specific rules or best practices
        # For demonstration, let's check for usage of certain functions
        for node in self.tree.body:
            if isinstance(node, ast.FunctionDef):
                for sub_node in ast.walk(node):
                    if isinstance(sub_node, ast.Call):
                        if isinstance(sub_node.func, ast.Name) and sub_node.func.id == 'some_metpy_function':
                            # Example check: Ensure 'some_metpy_function' is used correctly
                            if len(sub_node.args) != 2:
                                self.error(f""Incorrect number of arguments to 'some_metpy_function' at line {sub_node.lineno}"")

    def error(self, err):
        self.errors.append(err)

import ast

def main():
    # Example usage
    code = """"""
def my_function():
    some_metpy_function(1)  # This should trigger an error
    some_metpy_function(1, 2)  # This should not trigger an error
""""""
    tree = ast.parse(code)
    checker = MetPyChecker(tree)
    checker.run()
    for error in checker.errors:
        print(error)

if __name__ == ""__main__"":
    main()
```"
134620,Unidata/MetPy,Unidata_MetPy/src/metpy/io/_tools.py,metpy.io._tools.Array,"from struct import Struct

class Array:
    """"""Use a Struct as a callable to unpack a bunch of bytes as a list.""""""

    def __init__(self, fmt):
        """"""Initialize the Struct unpacker.""""""
        self._struct = Struct(fmt)

    def __call__(self, buf):
        """"""Perform the actual unpacking.""""""
        return list(self._struct.unpack(buf))","
class Array:
    
    def __init__(self, fmt):
        
        pass
    def __call__(self, buf):
        
        pass",snippet_51,3,"```python
import struct

class Array:
    
    def __init__(self, fmt):
        self.fmt = fmt
        self.size = struct.calcsize(fmt)

    def __call__(self, buf):
        return struct.unpack(self.fmt, buf[:self.size])
```"
134621,Unidata/MetPy,Unidata_MetPy/src/metpy/io/_tools.py,metpy.io._tools.BitField,"class BitField:
    """"""Convert an integer to a string for each bit.""""""

    def __init__(self, *names):
        """"""Initialize the list of named bits.""""""
        self._names = names

    def __call__(self, val):
        """"""Return a list with a string for each True bit in the integer.""""""
        if not val:
            return None
        bits = []
        for n in self._names:
            if val & 1:
                bits.append(n)
            val >>= 1
            if not val:
                break
        return bits[0] if len(bits) == 1 else bits","class BitField:
    
    def __init__(self, *names):
        
        pass
    def __call__(self, val):
        
        pass",snippet_52,3,"```python
class BitField:
    
    def __init__(self, *names):
        self.names = names
        self.mask = {name: 1 << i for i, name in enumerate(names)}
        self.reverse_mask = {v: k for k, v in self.mask.items()}

    def __call__(self, val):
        class BitFieldValue:
            def __init__(self, val, mask, reverse_mask):
                self.val = val
                self.mask = mask
                self.reverse_mask = reverse_mask

            def __getattr__(self, name):
                if name in self.mask:
                    return (self.val & self.mask[name]) != 0
                else:
                    raise AttributeError(f""'BitFieldValue' object has no attribute '{name}'"")

            def __setattr__(self, name, value):
                if name in ['val', 'mask', 'reverse_mask']:
                    super().__setattr__(name, value)
                elif name in self.mask:
                    if value:
                        self.val |= self.mask[name]
                    else:
                        self.val &= ~self.mask[name]
                else:
                    raise AttributeError(f""'BitFieldValue' object has no attribute '{name}'"")

            def __int__(self):
                return self.val

            def __repr__(self):
                set_bits = [self.reverse_mask[mask] for mask in self.reverse_mask if self.val & mask]
                return f""BitFieldValue({self.val:#x}, {', '.join(set_bits)})""

        return BitFieldValue(val, self.mask, self.reverse_mask)
```"
134622,Unidata/MetPy,Unidata_MetPy/src/metpy/io/_tools.py,metpy.io._tools.Bits,"class Bits:
    """"""Breaks an integer into a specified number of True/False bits.""""""

    def __init__(self, num_bits):
        """"""Initialize the number of bits.""""""
        self._bits = range(num_bits)

    def __call__(self, val):
        """"""Convert the integer to the list of True/False values.""""""
        return [bool(val >> i & 1) for i in self._bits]","class Bits:
    
    def __init__(self, num_bits):
        
        pass
    def __call__(self, val):
        
        pass",snippet_53,3,"```python
class Bits:
    
    def __init__(self, num_bits):
        self.num_bits = num_bits
        self.mask = (1 << num_bits) - 1
    
    def __call__(self, val):
        return val & self.mask
```"
134624,Unidata/MetPy,Unidata_MetPy/src/metpy/io/_tools.py,metpy.io._tools.Enum,"class Enum:
    """"""Map values to specific strings.""""""

    def __init__(self, *args, **kwargs):
        """"""Initialize the mapping.""""""
        self.val_map = dict(enumerate(args))
        self.val_map.update(zip(kwargs.values(), kwargs.keys(), strict=False))

    def __call__(self, val):
        """"""Map an integer to the string representation.""""""
        return self.val_map.get(val, f'Unknown ({val})')","class Enum:
    
    def __init__(self, *args, **kwargs):
        
        pass
    def __call__(self, val):
        
        pass",snippet_54,3,"```python
class Enum:
    
    def __init__(self, *args, **kwargs):
        for i, arg in enumerate(args):
            setattr(self, arg, i)
        for key, value in kwargs.items():
            setattr(self, key, value)

    def __call__(self, val):
        for attr in dir(self):
            if not attr.startswith('__') and getattr(self, attr) == val:
                return attr
        raise ValueError(f""No enumeration value matches {val}"")
```"
134657,Unidata/MetPy,Unidata_MetPy/src/metpy/package_tools.py,metpy.package_tools.Exporter,"class Exporter:
    """"""Manages exporting of symbols from the module.

    Grabs a reference to `globals()` for a module and provides a decorator to add
    functions and classes to `__all__` rather than requiring a separately maintained list.
    Also provides a context manager to do this for instances by adding all instances added
    within a block to `__all__`.
    """"""

    def __init__(self, globls):
        """"""Initialize the Exporter.""""""
        self.globls = globls
        self.exports = globls.setdefault('__all__', [])

    def export(self, defn):
        """"""Declare a function or class as exported.""""""
        self.exports.append(defn.__name__)
        return defn

    def __enter__(self):
        """"""Start a block tracking all instances created at global scope.""""""
        self.start_vars = set(self.globls)

    def __exit__(self, exc_type, exc_val, exc_tb):
        """"""Exit the instance tracking block.""""""
        self.exports.extend(set(self.globls) - self.start_vars)
        del self.start_vars","class Exporter:
    
    def __init__(self, globls):
        
        pass
    def export(self, defn):
        
        pass
    def __enter__(self):
        
        pass

    def __exit__(self, exc_type, exc_val, exc_tb):
        
        pass",snippet_55,5,"```python
class Exporter:
    
    def __init__(self, globls):
        self.globls = globls
        self.exported = set()

    def export(self, defn):
        self.globls[defn.__name__] = defn
        self.exported.add(defn.__name__)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        for name in list(self.globls.keys()):
            if name.startswith('__') and name != '__all__':
                continue
            if name not in self.exported:
                del self.globls[name]
        return False
```"
137119,jpype-project/jpype,jpype-project_jpype/doc/java/util.py,java.util.Collection,"class Collection:
    """""" Customized interface representing a collection of items.

    JPype wraps ``java.util.Collection`` as a Python collection.
    """"""

    def __len__(self) -> int:
        """""" Get the length of this collection.

        Use ``len(collection)`` to find the number of items in this
        collection.

        """"""
        ...

    def __delitem__(self, item):
        """""" Collections do not support remove by index. """"""
        ...

    def __contains__(self, item) -> bool:
        """""" Check if this collection contains this item.

        Use ``item in collection`` to check if the item is 
        present.

        Args:
           item: is the item to check for.  This must be a Java
           object or an object which can be automatically converted
           such as a string.

        Returns:
           bool: True if the item is in the collection.
        """"""
        ...","class Collection:
    
    def __len__(self) -> int:
        
        pass
    def __delitem__(self, item):
        
        pass
    def __contains__(self, item) -> bool:
        
        pass",snippet_56,4,"```python
class Collection:
    def __init__(self):
        self.items = []

    def __len__(self) -> int:
        return len(self.items)

    def __delitem__(self, item):
        if item in self.items:
            self.items.remove(item)
        else:
            raise KeyError(f""{item} not found in collection"")

    def __contains__(self, item) -> bool:
        return item in self.items

    def add(self, item):
        self.items.append(item)

# Example usage:
def main():
    collection = Collection()
    collection.add(1)
    collection.add(2)
    collection.add(3)

    print(len(collection))  # Output: 3
    print(2 in collection)  # Output: True
    del collection[2]
    print(2 in collection)  # Output: False
    try:
        del collection[4]
    except KeyError as e:
        print(e)  # Output: 4 not found in collection

if __name__ == ""__main__"":
    main()
```"
138700,sebp/scikit-survival,sebp_scikit-survival/sksurv/util.py,sksurv.util.Surv,"from sklearn.utils.validation import check_array, check_consistent_length
import numpy as np
import pandas as pd

class Surv:
    """"""A helper class to create a structured array for survival analysis.

    This class provides helper functions to create a structured array that
    encapsulates the event indicator and the observed time. The resulting
    structured array is the recommended format for the ``y`` argument in
    scikit-survival's estimators.
    """"""

    @staticmethod
    def from_arrays(event, time, name_event=None, name_time=None):
        """"""Create structured array from event indicator and time arrays.

        Parameters
        ----------
        event : array-like, shape=(n_samples,)
            Event indicator. A boolean array or array with values 0/1,
            where ``True`` or 1 indicates an event and ``False`` or 0
            indicates right-censoring.
        time : array-like, shape=(n_samples,)
            Observed time. Time to event or time of censoring.
        name_event : str, optional, default: 'event'
            Name of the event field in the structured array.
        name_time : str, optional, default: 'time'
            Name of the observed time field in the structured array.

        Returns
        -------
        y : numpy.ndarray
            A structured array with two fields. The first field is a boolean
            where ``True`` indicates an event and ``False`` indicates right-censoring.
            The second field is a float with the time of event or time of censoring.
            The names of the fields are set to the values of `name_event` and `name_time`.

        Examples
        --------
        >>> from sksurv.util import Surv
        >>>
        >>> y = Surv.from_arrays(event=[True, False, True],
        ...                      time=[10, 25, 15])
        >>> y
        array([( True, 10.), (False, 25.), ( True, 15.)],
            dtype=[('event', '?'), ('time', '<f8')])
        >>> y['event']
        array([ True, False,  True])
        >>> y['time']
        array([10., 25., 15.])
        """"""
        name_event = name_event or 'event'
        name_time = name_time or 'time'
        if name_time == name_event:
            raise ValueError('name_time must be different from name_event')
        time = np.asanyarray(time, dtype=float)
        y = np.empty(time.shape[0], dtype=[(name_event, bool), (name_time, float)])
        y[name_time] = time
        event = np.asanyarray(event)
        check_consistent_length(time, event)
        if np.issubdtype(event.dtype, np.bool_):
            y[name_event] = event
        else:
            events = np.unique(event)
            events.sort()
            if len(events) != 2:
                raise ValueError('event indicator must be binary')
            if np.all(events == np.array([0, 1], dtype=events.dtype)):
                y[name_event] = event.astype(bool)
            else:
                raise ValueError('non-boolean event indicator must contain 0 and 1 only')
        return y

    @staticmethod
    def from_dataframe(event, time, data):
        """"""Create structured array from columns in a pandas DataFrame.

        Parameters
        ----------
        event : str
            Name of the column in ``data`` containing the event indicator.
            It must be a boolean or have values 0/1,
            where ``True`` or 1 indicates an event and ``False`` or 0
            indicates right-censoring.
        time : str
            Name of the column in ``data`` containing the observed time
            (time to event or time of censoring).
        data : pandas.DataFrame
            A DataFrame with columns for event and time.

        Returns
        -------
        y : numpy.ndarray
            A structured array with two fields. The first field is a boolean
            where ``True`` indicates an event and ``False`` indicates right-censoring.
            The second field is a float with the time of event or time of censoring.
            The names of the fields are the respective column names.

        Examples
        --------
        >>> import pandas as pd
        >>> from sksurv.util import Surv
        >>>
        >>> df = pd.DataFrame({
        ...     'status': [True, False, True],
        ...     'followup_time': [10, 25, 15],
        ... })
        >>> y = Surv.from_dataframe(
        ...     event='status', time='followup_time', data=df,
        ... )
        >>> y
        array([( True, 10.), (False, 25.), ( True, 15.)],
            dtype=[('status', '?'), ('followup_time', '<f8')])
        >>> y['status']
        array([ True, False,  True])
        >>> y['followup_time']
        array([10., 25., 15.])
        """"""
        if not isinstance(data, pd.DataFrame):
            raise TypeError(f'expected pandas.DataFrame, but got {type(data)!r}')
        return Surv.from_arrays(data.loc[:, event].values, data.loc[:, time].values, name_event=str(event), name_time=str(time))","
class Surv:
    
    @staticmethod
    def from_arrays(event, time, name_event=None, name_time=None):
        '''Create structured array from event indicator and time arrays.
        Parameters
        ----------
        event : array-like, shape=(n_samples,)
            Event indicator. A boolean array or array with values 0/1,
            where ``True`` or 1 indicates an event and ``False`` or 0
            indicates right-censoring.
        time : array-like, shape=(n_samples,)
            Observed time. Time to event or time of censoring.
        name_event : str, optional, default: 'event'
            Name of the event field in the structured array.
        name_time : str, optional, default: 'time'
            Name of the observed time field in the structured array.
        Returns
        -------
        y : numpy.ndarray
            A structured array with two fields. The first field is a boolean
            where ``True`` indicates an event and ``False`` indicates right-censoring.
            The second field is a float with the time of event or time of censoring.
            The names of the fields are set to the values of `name_event` and `name_time`.
        Examples
        --------
        >>> from sksurv.util import Surv
        >>>
        >>> y = Surv.from_arrays(event=[True, False, True],
        ...                      time=[10, 25, 15])
        >>> y
        array([( True, 10.), (False, 25.), ( True, 15.)],
            dtype=[('event', '?'), ('time', '<f8')])
        >>> y['event']
        array([ True, False,  True])
        >>> y['time']
        array([10., 25., 15.])
        '''
        pass
    @staticmethod
    def from_dataframe(event, time, data):
        '''Create structured array from columns in a pandas DataFrame.
        Parameters
        ----------
        event : str
            Name of the column in ``data`` containing the event indicator.
            It must be a boolean or have values 0/1,
            where ``True`` or 1 indicates an event and ``False`` or 0
            indicates right-censoring.
        time : str
            Name of the column in ``data`` containing the observed time
            (time to event or time of censoring).
        data : pandas.DataFrame
            A DataFrame with columns for event and time.
        Returns
        -------
        y : numpy.ndarray
            A structured array with two fields. The first field is a boolean
            where ``True`` indicates an event and ``False`` indicates right-censoring.
            The second field is a float with the time of event or time of censoring.
            The names of the fields are the respective column names.
        Examples
        --------
        >>> import pandas as pd
        >>> from sksurv.util import Surv
        >>>
        >>> df = pd.DataFrame({
        ...     'status': [True, False, True],
        ...     'followup_time': [10, 25, 15],
        ... })
        >>> y = Surv.from_dataframe(
        ...     event='status', time='followup_time', data=df,
        ... )
        >>> y
        array([( True, 10.), (False, 25.), ( True, 15.)],
            dtype=[('status', '?'), ('followup_time', '<f8')])
        >>> y['status']
        array([ True, False,  True])
        >>> y['followup_time']
        array([10., 25., 15.])
        '''
        pass",snippet_57,3,"```python
import numpy as np
import pandas as pd

class Surv:
    
    @staticmethod
    def from_arrays(event, time, name_event='event', name_time='time'):
        event = np.asarray(event, dtype=bool)
        time = np.asarray(time, dtype=float)
        
        if event.shape != time.shape:
            raise ValueError(""event and time must have the same shape"")
        
        y = np.empty(event.shape[0], dtype=[(name_event, bool), (name_time, float)])
        y[name_event] = event
        y[name_time] = time
        
        return y
    
    @staticmethod
    def from_dataframe(event, time, data):
        if not isinstance(data, pd.DataFrame):
            raise TypeError(""data must be a pandas DataFrame"")
        
        if event not in data.columns or time not in data.columns:
            raise ValueError(""event and time must be columns in data"")
        
        event_values = data[event].values
        time_values = data[time].values
        
        return Surv.from_arrays(event_values, time_values, name_event=event, name_time=time)
```"
139652,sentinel-hub/eo-learn,sentinel-hub_eo-learn/eolearn/geometry/morphology.py,eolearn.geometry.morphology.MorphologicalStructFactory,"import cv2
import numpy as np

class MorphologicalStructFactory:
    """"""
    Factory methods for generating morphological structuring elements
    """"""

    @staticmethod
    def get_disk(radius: int) -> np.ndarray:
        """"""
        :param radius: Radius of disk
        :return: The structuring element where elements of the neighborhood are 1 and 0 otherwise.
        """"""
        return cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (radius, radius))

    @staticmethod
    def get_rectangle(width: int, height: int) -> np.ndarray:
        """"""
        :param width: Width of rectangle
        :param height: Height of rectangle
        :return: A structuring element consisting only of ones, i.e. every pixel belongs to the neighborhood.
        """"""
        return cv2.getStructuringElement(cv2.MORPH_RECT, (height, width))

    @staticmethod
    def get_square(width: int) -> np.ndarray:
        """"""
        :param width: Size of square
        :return: A structuring element consisting only of ones, i.e. every pixel belongs to the neighborhood.
        """"""
        return cv2.getStructuringElement(cv2.MORPH_RECT, (width, width))","
class MorphologicalStructFactory:
    
    @staticmethod
    def get_disk(radius: int) -> np.ndarray:
        
        pass
    @staticmethod
    def get_rectangle(width: int, height: int) -> np.ndarray:
        
        pass
    @staticmethod
    def get_square(width: int) -> np.ndarray:
        
        pass",snippet_58,4,"```python
import numpy as np

class MorphologicalStructFactory:
    
    @staticmethod
    def get_disk(radius: int) -> np.ndarray:
        diameter = 2 * radius + 1
        struct = np.zeros((diameter, diameter), dtype=np.uint8)
        for i in range(diameter):
            for j in range(diameter):
                if (i - radius) ** 2 + (j - radius) ** 2 <= radius ** 2:
                    struct[i, j] = 1
        return struct

    @staticmethod
    def get_rectangle(width: int, height: int) -> np.ndarray:
        return np.ones((height, width), dtype=np.uint8)

    @staticmethod
    def get_square(width: int) -> np.ndarray:
        return np.ones((width, width), dtype=np.uint8)


# Example usage:
if __name__ == ""__main__"":
    disk = MorphologicalStructFactory.get_disk(3)
    rectangle = MorphologicalStructFactory.get_rectangle(5, 3)
    square = MorphologicalStructFactory.get_square(4)

    print(""Disk:"")
    print(disk)
    print(""\nRectangle:"")
    print(rectangle)
    print(""\nSquare:"")
    print(square)
```"
139672,sentinel-hub/eo-learn,sentinel-hub_eo-learn/eolearn/visualization/eoexecutor.py,eolearn.visualization.eoexecutor._ErrorSummary,"from dataclasses import dataclass

@dataclass()
class _ErrorSummary:
    """"""Contains data for errors of a node.""""""
    origin: str
    example_message: str
    failed_indexed_executions: list[tuple[int, str]]

    def add_execution(self, index: int, name: str) -> None:
        """"""Adds an execution to the summary.""""""
        self.failed_indexed_executions.append((index, name))

    @property
    def num_failed(self) -> int:
        """"""Helps with jinja""""""
        return len(self.failed_indexed_executions)","@dataclass()
class _ErrorSummary:
    
    def add_execution(self, index: int, name: str) -> None:
        
        pass
    @property
    def num_failed(self) -> int:
        
        pass",snippet_59,3,"```python
from dataclasses import dataclass, field
from typing import Dict

@dataclass()
class _ErrorSummary:
    _executions: Dict[int, str] = field(default_factory=dict)
    _failed_count: int = field(default=0)

    def add_execution(self, index: int, name: str) -> None:
        self._executions[index] = name
        self._failed_count += 1

    @property
    def num_failed(self) -> int:
        return self._failed_count
```"
139835,python-escpos/python-escpos,python-escpos_python-escpos/src/escpos/codepages.py,escpos.codepages.CodePageManager,"class CodePageManager:
    """"""Holds information about all the code pages.

    Information as defined in escpos-printer-db.
    """"""

    def __init__(self, data):
        """"""Initialize code page manager.""""""
        self.data = data

    @staticmethod
    def get_encoding_name(encoding):
        """"""Get encoding name.

        .. todo:: Resolve the encoding alias.
        """"""
        return encoding.upper()

    def get_encoding(self, encoding):
        """"""Return the encoding data.""""""
        return self.data[encoding]","class CodePageManager:
    
    def __init__(self, data):
        
        pass
    @staticmethod
    def get_encoding_name(encoding):
        
        pass
    def get_encoding_name(encoding):
        
        pass",snippet_60,4,"```python
class CodePageManager:
    
    def __init__(self, data):
        self.data = data

    @staticmethod
    def get_encoding_name_static(encoding):
        encoding_names = {
            'utf-8': 'UTF-8',
            'utf-16': 'UTF-16',
            'utf-32': 'UTF-32',
            'ascii': 'ASCII',
            'latin1': 'ISO-8859-1',
            'cp1252': 'Windows-1252'
        }
        return encoding_names.get(encoding.lower(), 'Unknown Encoding')

    def get_encoding_name(self, encoding):
        return CodePageManager.get_encoding_name_static(encoding)
```"
141706,mar10/wsgidav,mar10_wsgidav/wsgidav/rw_lock.py,wsgidav.rw_lock.ReadWriteLock,"from threading import Condition, Lock, current_thread
from time import time

class ReadWriteLock:
    """"""Read-Write lock class. A read-write lock differs from a standard
    threading.RLock() by allowing multiple threads to simultaneously hold a
    read lock, while allowing only a single thread to hold a write lock at the
    same point of time.

    When a read lock is requested while a write lock is held, the reader
    is blocked; when a write lock is requested while another write lock is
    held or there are read locks, the writer is blocked.

    Writers are always preferred by this implementation: if there are blocked
    threads waiting for a write lock, current readers may request more read
    locks (which they eventually should free, as they starve the waiting
    writers otherwise), but a new thread requesting a read lock will not
    be granted one, and block. This might mean starvation for readers if
    two writer threads interweave their calls to acquire_write() without
    leaving a window only for readers.

    In case a current reader requests a write lock, this can and will be
    satisfied without giving up the read locks first, but, only one thread
    may perform this kind of lock upgrade, as a deadlock would otherwise
    occur. After the write lock has been granted, the thread will hold a
    full write lock, and not be downgraded after the upgrading call to
    acquire_write() has been match by a corresponding release().
    """"""

    def __init__(self):
        """"""Initialize this read-write lock.""""""
        self.__condition = Condition(Lock())
        self.__writer = None
        self.__upgradewritercount = 0
        self.__pendingwriters = []
        self.__readers = {}

    def acquire_read(self, *, timeout=None):
        """"""Acquire a read lock for the current thread, waiting at most
        timeout seconds or doing a non-blocking check in case timeout is <= 0.

        In case timeout is None, the call to acquire_read blocks until the
        lock request can be serviced.

        In case the timeout expires before the lock could be serviced, a
        RuntimeError is thrown.""""""
        if timeout is not None:
            endtime = time() + timeout
        me = current_thread()
        self.__condition.acquire()
        try:
            if self.__writer is me:
                self.__writercount += 1
                return
            while True:
                if self.__writer is None:
                    if self.__upgradewritercount or self.__pendingwriters:
                        if me in self.__readers:
                            self.__readers[me] += 1
                            return
                    else:
                        self.__readers[me] = self.__readers.get(me, 0) + 1
                        return
                if timeout is not None:
                    remaining = endtime - time()
                    if remaining <= 0:
                        raise RuntimeError('Acquiring read lock timed out')
                    self.__condition.wait(remaining)
                else:
                    self.__condition.wait()
        finally:
            self.__condition.release()

    def acquire_write(self, *, timeout=None):
        """"""Acquire a write lock for the current thread, waiting at most
        timeout seconds or doing a non-blocking check in case timeout is <= 0.

        In case the write lock cannot be serviced due to the deadlock
        condition mentioned above, a ValueError is raised.

        In case timeout is None, the call to acquire_write blocks until the
        lock request can be serviced.

        In case the timeout expires before the lock could be serviced, a
        RuntimeError is thrown.""""""
        if timeout is not None:
            endtime = time() + timeout
        me, upgradewriter = (current_thread(), False)
        self.__condition.acquire()
        try:
            if self.__writer is me:
                self.__writercount += 1
                return
            elif me in self.__readers:
                if self.__upgradewritercount:
                    raise ValueError('Inevitable dead lock, denying write lock')
                upgradewriter = True
                self.__upgradewritercount = self.__readers.pop(me)
            else:
                self.__pendingwriters.append(me)
            while True:
                if not self.__readers and self.__writer is None:
                    if self.__upgradewritercount:
                        if upgradewriter:
                            self.__writer = me
                            self.__writercount = self.__upgradewritercount + 1
                            self.__upgradewritercount = 0
                            return
                    elif self.__pendingwriters[0] is me:
                        self.__writer = me
                        self.__writercount = 1
                        self.__pendingwriters = self.__pendingwriters[1:]
                        return
                if timeout is not None:
                    remaining = endtime - time()
                    if remaining <= 0:
                        if upgradewriter:
                            self.__readers[me] = self.__upgradewritercount
                            self.__upgradewritercount = 0
                        else:
                            self.__pendingwriters.remove(me)
                        raise RuntimeError('Acquiring write lock timed out')
                    self.__condition.wait(remaining)
                else:
                    self.__condition.wait()
        finally:
            self.__condition.release()

    def release(self):
        """"""Release the currently held lock.

        In case the current thread holds no lock, a ValueError is thrown.""""""
        me = current_thread()
        self.__condition.acquire()
        try:
            if self.__writer is me:
                self.__writercount -= 1
                if not self.__writercount:
                    self.__writer = None
                    self.__condition.notify_all()
            elif me in self.__readers:
                self.__readers[me] -= 1
                if not self.__readers[me]:
                    del self.__readers[me]
                    if not self.__readers:
                        self.__condition.notify_all()
            else:
                raise ValueError('Trying to release unheld lock')
        finally:
            self.__condition.release()","
class ReadWriteLock:
    
    def __init__(self):
        
        pass
    def acquire_read(self, *, timeout=None):
        '''Acquire a read lock for the current thread, waiting at most
        timeout seconds or doing a non-blocking check in case timeout is <= 0.
        In case timeout is None, the call to acquire_read blocks until the
        lock request can be serviced.
        In case the timeout expires before the lock could be serviced, a
        RuntimeError is thrown.'''
        pass

    def acquire_write(self, *, timeout=None):
        '''Acquire a write lock for the current thread, waiting at most
        timeout seconds or doing a non-blocking check in case timeout is <= 0.
        In case the write lock cannot be serviced due to the deadlock
        condition mentioned above, a ValueError is raised.
        In case timeout is None, the call to acquire_write blocks until the
        lock request can be serviced.
        In case the timeout expires before the lock could be serviced, a
        RuntimeError is thrown.'''
        pass

    def release(self):
        
        pass",snippet_62,5,"```python
import threading
import time

class ReadWriteLock:
    def __init__(self):
        self._read_ready = threading.Condition(threading.Lock())
        self._readers = 0
        self._writers = 0
        self._pending_writers = 0

    def acquire_read(self, *, timeout=None):
        if timeout is not None and timeout <= 0:
            return self._try_acquire_read()
        
        with self._read_ready:
            if timeout is None:
                while self._writers > 0 or self._pending_writers > 0:
                    self._read_ready.wait()
            else:
                end_time = time.time() + timeout
                while self._writers > 0 or self._pending_writers > 0:
                    remaining_time = end_time - time.time()
                    if remaining_time <= 0:
                        raise RuntimeError(""Timeout expired"")
                    self._read_ready.wait(remaining_time)
            self._readers += 1

    def _try_acquire_read(self):
        with self._read_ready:
            if self._writers > 0 or self._pending_writers > 0:
                return False
            self._readers += 1
            return True

    def acquire_write(self, *, timeout=None):
        if timeout is not None and timeout <= 0:
            return self._try_acquire_write()
        
        with self._read_ready:
            self._pending_writers += 1
            try:
                if timeout is None:
                    while self._readers > 0 or self._writers > 0:
                        self._read_ready.wait()
                else:
                    end_time = time.time() + timeout
                    while self._readers > 0 or self._writers > 0:
                        remaining_time = end_time - time.time()
                        if remaining_time <= 0:
                            raise RuntimeError(""Timeout expired"")
                        self._read_ready.wait(remaining_time)
                if self._readers > 0:
                    raise ValueError(""Deadlock condition detected"")
                self._writers += 1
            finally:
                self._pending_writers -= 1

    def _try_acquire_write(self):
        with self._read_ready:
            if self._readers > 0 or self._writers > 0:
                return False
            self._writers += 1
            return True

    def release(self):
        with self._read_ready:
            if self._readers > 0:
                self._readers -= 1
            elif self._writers > 0:
                self._writers -= 1
            else:
                raise RuntimeError(""Lock is not held by the current thread"")
            self._read_ready.notify_all()
```"
141733,mar10/wsgidav,mar10_wsgidav/wsgidav/stream_tools.py,wsgidav.stream_tools.StreamingFile,"class StreamingFile:
    """"""A file object wrapped around an iterator / data stream.""""""

    def __init__(self, data_stream):
        """"""Initialise the object with the data stream.""""""
        self.data_stream = data_stream
        self.buffer = ''

    def read(self, size=None):
        """"""Read bytes from an iterator.""""""
        while size is None or len(self.buffer) < size:
            try:
                self.buffer += next(self.data_stream)
            except StopIteration:
                break
        sized_chunk = self.buffer[:size]
        if size is None:
            self.buffer = ''
        else:
            self.buffer = self.buffer[size:]
        return sized_chunk","class StreamingFile:
    
    def __init__(self, data_stream):
        
        pass
    def read(self, size=None):
        
        pass",snippet_63,3,"```python
class StreamingFile:
    
    def __init__(self, data_stream):
        """"""
        Initialize the StreamingFile object.

        Args:
            data_stream: A generator or iterable that yields chunks of data.
        """"""
        self.data_stream = iter(data_stream)
        self.buffer = b''

    def read(self, size=None):
        """"""
        Read data from the stream.

        Args:
            size (int, optional): The number of bytes to read. If None, read until the end of the stream.

        Returns:
            bytes: The data read from the stream.
        """"""
        if size is None:
            # Read until the end of the stream
            result = self.buffer
            self.buffer = b''
            for chunk in self.data_stream:
                result += chunk
            return result
        else:
            # Read until we have 'size' bytes in the buffer
            while len(self.buffer) < size:
                try:
                    chunk = next(self.data_stream)
                    self.buffer += chunk
                except StopIteration:
                    # We've reached the end of the stream
                    break
            # Return the requested amount of data
            result = self.buffer[:size]
            self.buffer = self.buffer[size:]
            return result

# Example usage:
def data_stream():
    yield b'Hello, '
    yield b'world!'
    yield b' This is a test.'

streaming_file = StreamingFile(data_stream())
print(streaming_file.read(5))  # b'Hello'
print(streaming_file.read())   # b', world! This is a test.'
```"
142723,PyThaiNLP/pythainlp,PyThaiNLP_pythainlp/pythainlp/augment/lm/fasttext.py,pythainlp.augment.lm.fasttext.FastTextAug,"from gensim.models.fasttext import FastText as FastText_gensim
from typing import List, Tuple
import itertools
from gensim.models.keyedvectors import KeyedVectors
from pythainlp.tokenize import word_tokenize

class FastTextAug:
    """"""
    Text Augment from fastText

    :param str model_path: path of model file
    """"""

    def __init__(self, model_path: str):
        """"""
        :param str model_path: path of model file
        """"""
        if model_path.endswith('.bin'):
            self.model = FastText_gensim.load_facebook_vectors(model_path)
        elif model_path.endswith('.vec'):
            self.model = KeyedVectors.load_word2vec_format(model_path)
        else:
            self.model = FastText_gensim.load(model_path)
        self.dict_wv = list(self.model.key_to_index.keys())

    def tokenize(self, text: str) -> List[str]:
        """"""
        Thai text tokenization for fastText

        :param str text: Thai text

        :return: list of words
        :rtype: List[str]
        """"""
        return word_tokenize(text, engine='icu')

    def modify_sent(self, sent: str, p: float=0.7) -> List[List[str]]:
        """"""
        :param str sent: text of sentence
        :param float p: probability
        :rtype: List[List[str]]
        """"""
        list_sent_new = []
        for i in sent:
            if i in self.dict_wv:
                w = [j for j, v in self.model.most_similar(i) if v >= p]
                if w == []:
                    list_sent_new.append([i])
                else:
                    list_sent_new.append(w)
            else:
                list_sent_new.append([i])
        return list_sent_new

    def augment(self, sentence: str, n_sent: int=1, p: float=0.7) -> List[Tuple[str]]:
        """"""
        Text Augment from fastText

        You may want to download the Thai model
        from https://fasttext.cc/docs/en/crawl-vectors.html.

        :param str sentence: Thai sentence
        :param int n_sent: number of sentences
        :param float p: probability of word

        :return: list of synonyms
        :rtype: List[Tuple[str]]
        """"""
        self.sentence = self.tokenize(sentence)
        self.list_synonym = self.modify_sent(self.sentence, p=p)
        new_sentences = []
        for x in list(itertools.product(*self.list_synonym))[0:n_sent]:
            new_sentences.append(x)
        return new_sentences","
class FastTextAug:
    
    def __init__(self, model_path: str):
        
        pass
    def tokenize(self, text: str) -> List[str]:
        
        pass

    def modify_sent(self, sent: str, p: float=0.7) -> List[List[str]]:
        
        pass

    def augment(self, sentence: str, n_sent: int=1, p: float=0.7) -> List[Tuple[str]]:
        
        pass",snippet_64,5,"```python
from typing import List, Tuple
import fasttext
import random

class FastTextAug:
    
    def __init__(self, model_path: str):
        self.model = fasttext.load_model(model_path)

    def tokenize(self, text: str) -> List[str]:
        return text.split()

    def modify_sent(self, sent: str, p: float=0.7) -> List[List[str]]:
        tokens = self.tokenize(sent)
        modified_sents = []
        for _ in range(len(tokens)):
            new_tokens = tokens.copy()
            if random.random() < p:
                word = tokens[_]
                neighbors = self.model.get_nearest_neighbors(word, k=10)
                if neighbors:
                    new_word = random.choice([n[1] for n in neighbors])
                    new_tokens[_] = new_word
                    modified_sents.append(new_tokens)
        return modified_sents

    def augment(self, sentence: str, n_sent: int=1, p: float=0.7) -> List[Tuple[str]]:
        augmented_sentences = []
        for _ in range(n_sent):
            modified_sents = self.modify_sent(sentence, p)
            if modified_sents:
                augmented_sentences.append(' '.join(random.choice(modified_sents)))
            else:
                augmented_sentences.append(sentence)
        return list(set(augmented_sentences))
```"
142777,PyThaiNLP/pythainlp,PyThaiNLP_pythainlp/pythainlp/tokenize/core.py,pythainlp.tokenize.core.Tokenizer,"from typing import Iterable, List, Union
from pythainlp.tokenize import DEFAULT_SENT_TOKENIZE_ENGINE, DEFAULT_SUBWORD_TOKENIZE_ENGINE, DEFAULT_SYLLABLE_DICT_TRIE, DEFAULT_SYLLABLE_TOKENIZE_ENGINE, DEFAULT_WORD_DICT_TRIE, DEFAULT_WORD_TOKENIZE_ENGINE
from pythainlp.util.trie import Trie, dict_trie

class Tokenizer:
    """"""
    Tokenizer class for a custom tokenizer.

    This class allows users to pre-define custom dictionary along with
    tokenizer and encapsulate them into one single object.
    It is an wrapper for both functions, that are
    :func:`pythainlp.tokenize.word_tokenize`,
    and :func:`pythainlp.util.dict_trie`

    :Example:

    Tokenizer object instantiated with :class:`pythainlp.util.Trie`::

        from pythainlp.tokenize import Tokenizer
        from pythainlp.corpus.common import thai_words
        from pythainlp.util import dict_trie

        custom_words_list = set(thai_words())
        custom_words_list.add('อะเฟเซีย')
        custom_words_list.add('Aphasia')
        trie = dict_trie(dict_source=custom_words_list)

        text = ""อะเฟเซีย (Aphasia*) เป็นอาการผิดปกติของการพูด""
        _tokenizer = Tokenizer(custom_dict=trie, engine='newmm')
        _tokenizer.word_tokenize(text)
        # output: ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ',
        'ผิดปกติ', 'ของ', 'การ', 'พูด']

    Tokenizer object instantiated with a list of words::

        text = ""อะเฟเซีย (Aphasia) เป็นอาการผิดปกติของการพูด""
        _tokenizer = Tokenizer(custom_dict=list(thai_words()), engine='newmm')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะ', 'เฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ',
        #   'ผิดปกติ', 'ของ', 'การ', 'พูด']

    Tokenizer object instantiated with a file path containing a list of
    words separated with *newline* and explicitly setting a new tokenizer
    after initiation::

        PATH_TO_CUSTOM_DICTIONARY = './custom_dictionary.txtt'

        # write a file
        with open(PATH_TO_CUSTOM_DICTIONARY, 'w', encoding='utf-8') as f:
            f.write('อะเฟเซีย\\nAphasia\\nผิด\\nปกติ')

        text = ""อะเฟเซีย (Aphasia) เป็นอาการผิดปกติของการพูด""

        # initiate an object from file with `attacut` as tokenizer
        _tokenizer = Tokenizer(custom_dict=PATH_TO_CUSTOM_DICTIONARY, \\
            engine='attacut')

        _tokenizer.word_tokenize(text)
        # output:
        # ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ', 'ผิด',
        #   'ปกติ', 'ของ', 'การ', 'พูด']

        # change tokenizer to `newmm`
        _tokenizer.set_tokenizer_engine(engine='newmm')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็นอาการ', 'ผิด',
        #   'ปกติ', 'ของการพูด']
    """"""

    def __init__(self, custom_dict: Union[Trie, Iterable[str], str]=[], engine: str='newmm', keep_whitespace: bool=True, join_broken_num: bool=True):
        """"""
        Initialize tokenizer object.

        :param str custom_dict: a file path, a list of vocaburaies* to be
                    used to create a trie, or an instantiated
                    :class:`pythainlp.util.Trie` object.
        :param str engine: choose between different options of tokenizer engines
                            (i.e.  *newmm*, *mm*, *longest*, *deepcut*)
        :param bool keep_whitespace: True to keep whitespace, a common mark
                                     for end of phrase in Thai
        """"""
        self.__trie_dict = Trie([])
        if custom_dict:
            self.__trie_dict = dict_trie(custom_dict)
        else:
            self.__trie_dict = DEFAULT_WORD_DICT_TRIE
        self.__engine = engine
        if self.__engine not in ['newmm', 'mm', 'longest', 'deepcut']:
            raise NotImplementedError('\n                The Tokenizer class is not support %s for custom tokenizer\n                ' % self.__engine)
        self.__keep_whitespace = keep_whitespace
        self.__join_broken_num = join_broken_num

    def word_tokenize(self, text: str) -> List[str]:
        """"""
        Main tokenization function.

        :param str text: text to be tokenized
        :return: list of words, tokenized from the text
        :rtype: list[str]
        """"""
        return word_tokenize(text, custom_dict=self.__trie_dict, engine=self.__engine, keep_whitespace=self.__keep_whitespace, join_broken_num=self.__join_broken_num)

    def set_tokenize_engine(self, engine: str) -> None:
        """"""
        Set the tokenizer's engine.

        :param str engine: choose between different options of tokenizer engines
                           (i.e. *newmm*, *mm*, *longest*, *deepcut*)
        """"""
        self.__engine = engine","
class Tokenizer:
    '''
    Tokenizer class for a custom tokenizer.
    This class allows users to pre-define custom dictionary along with
    tokenizer and encapsulate them into one single object.
    It is an wrapper for both functions, that are
    :func:`pythainlp.tokenize.word_tokenize`,
    and :func:`pythainlp.util.dict_trie`
    :Example:
    Tokenizer object instantiated with :class:`pythainlp.util.Trie`::
        from pythainlp.tokenize import Tokenizer
        from pythainlp.corpus.common import thai_words
        from pythainlp.util import dict_trie
        custom_words_list = set(thai_words())
        custom_words_list.add('อะเฟเซีย')
        custom_words_list.add('Aphasia')
        trie = dict_trie(dict_source=custom_words_list)
        text = ""อะเฟเซีย (Aphasia*) เป็นอาการผิดปกติของการพูด""
        _tokenizer = Tokenizer(custom_dict=trie, engine='newmm')
        _tokenizer.word_tokenize(text)
        # output: ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ',
        'ผิดปกติ', 'ของ', 'การ', 'พูด']
    Tokenizer object instantiated with a list of words::
        text = ""อะเฟเซีย (Aphasia) เป็นอาการผิดปกติของการพูด""
        _tokenizer = Tokenizer(custom_dict=list(thai_words()), engine='newmm')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะ', 'เฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ',
        #   'ผิดปกติ', 'ของ', 'การ', 'พูด']
    Tokenizer object instantiated with a file path containing a list of
    words separated with *newline* and explicitly setting a new tokenizer
    after initiation::
        PATH_TO_CUSTOM_DICTIONARY = './custom_dictionary.txtt'
        # write a file
        with open(PATH_TO_CUSTOM_DICTIONARY, 'w', encoding='utf-8') as f:
            f.write('อะเฟเซีย\nAphasia\nผิด\nปกติ')
        text = ""อะเฟเซีย (Aphasia) เป็นอาการผิดปกติของการพูด""
        # initiate an object from file with `attacut` as tokenizer
        _tokenizer = Tokenizer(custom_dict=PATH_TO_CUSTOM_DICTIONARY, \
            engine='attacut')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ', 'ผิด',
        #   'ปกติ', 'ของ', 'การ', 'พูด']
        # change tokenizer to `newmm`
        _tokenizer.set_tokenizer_engine(engine='newmm')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็นอาการ', 'ผิด',
        #   'ปกติ', 'ของการพูด']
    '''
    def __init__(self, custom_dict: Union[Trie, Iterable[str], str]=[], engine: str='newmm', keep_whitespace: bool=True, join_broken_num: bool=True):
        
        pass

    def word_tokenize(self, text: str) -> List[str]:
        
        pass

    def set_tokenize_engine(self, engine: str) -> None:
        
        pass",snippet_65,4,"```python
from typing import Union, Iterable, List
from pythainlp.tokenize import word_tokenize
from pythainlp.util import dict_trie
from pythainlp.tokenize import Trie

class Tokenizer:
    '''
    Tokenizer class for a custom tokenizer.
    This class allows users to pre-define custom dictionary along with
    tokenizer and encapsulate them into one single object.
    It is an wrapper for both functions, that are
    :func:`pythainlp.tokenize.word_tokenize`,
    and :func:`pythainlp.util.dict_trie`
    :Example:
    Tokenizer object instantiated with :class:`pythainlp.util.Trie`::
        from pythainlp.tokenize import Tokenizer
        from pythainlp.corpus.common import thai_words
        from pythainlp.util import dict_trie
        custom_words_list = set(thai_words())
        custom_words_list.add('อะเฟเซีย')
        custom_words_list.add('Aphasia')
        trie = dict_trie(dict_source=custom_words_list)
        text = ""อะเฟเซีย (Aphasia*) เป็นอาการผิดปกติของการพูด""
        _tokenizer = Tokenizer(custom_dict=trie, engine='newmm')
        _tokenizer.word_tokenize(text)
        # output: ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ',
        'ผิดปกติ', 'ของ', 'การ', 'พูด']
    Tokenizer object instantiated with a list of words::
        text = ""อะเฟเซีย (Aphasia) เป็นอาการผิดปกติของการพูด""
        _tokenizer = Tokenizer(custom_dict=list(thai_words()), engine='newmm')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะ', 'เฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ',
        #   'ผิดปกติ', 'ของ', 'การ', 'พูด']
    Tokenizer object instantiated with a file path containing a list of
    words separated with *newline* and explicitly setting a new tokenizer
    after initiation::
        PATH_TO_CUSTOM_DICTIONARY = './custom_dictionary.txtt'
        # write a file
        with open(PATH_TO_CUSTOM_DICTIONARY, 'w', encoding='utf-8') as f:
            f.write('อะเฟเซีย\nAphasia\nผิด\nปกติ')
        text = ""อะเฟเซีย (Aphasia) เป็นอาการผิดปกติของการพูด""
        # initiate an object from file with `attacut` as tokenizer
        _tokenizer = Tokenizer(custom_dict=PATH_TO_CUSTOM_DICTIONARY, \
            engine='attacut')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็น', 'อาการ', 'ผิด',
        #   'ปกติ', 'ของ', 'การ', 'พูด']
        # change tokenizer to `newmm`
        _tokenizer.set_tokenize_engine(engine='newmm')
        _tokenizer.word_tokenize(text)
        # output:
        # ['อะเฟเซีย', ' ', '(', 'Aphasia', ')', ' ', 'เป็นอาการ', 'ผิด',
        #   'ปกติ', 'ของการพูด']
    '''
    def __init__(self, custom_dict: Union[Trie, Iterable[str], str]=[], engine: str='newmm', keep_whitespace: bool=True, join_broken_num: bool=True):
        if isinstance(custom_dict, str):
            with open(custom_dict, 'r', encoding='utf-8') as f:
                custom_dict = [line.strip() for line in f.readlines()]
        if not isinstance(custom_dict, Trie):
            custom_dict = dict_trie(custom_dict)
        self.__custom_dict = custom_dict
        self.__engine = engine
        self.__keep_whitespace = keep_whitespace
        self.__join_broken_num = join_broken_num

    def word_tokenize(self, text: str) -> List[str]:
        return word_tokenize(text, engine=self.__engine, custom_dict=self.__custom_dict, keep_whitespace=self.__keep_whitespace, join_broken_num=self.__join_broken_num)

    def set_tokenize_engine(self, engine: str) -> None:
        self.__engine = engine
```"
145446,TomasTomecek/sen,TomasTomecek_sen/sen/tui/commands/base.py,sen.tui.commands.base.ArgumentProcessor,"class ArgumentProcessor:
    """"""
    responsible for parsing given list of arguments
    """"""

    def __init__(self, options, arguments):
        """"""
        :param options: list of options
        :param arguments: list of arguments
        """"""
        self.given_arguments = {}
        self.options = {}
        for a in options:
            self.options[a.name] = a
            self.given_arguments[normalize_arg_name(a.name)] = a.default
            for alias in a.aliases:
                self.options[alias] = a
        for o in arguments:
            self.given_arguments[normalize_arg_name(o.name)] = o.default
        self.arguments = arguments
        logger.info('arguments = %s', arguments)
        logger.info('options = %s', options)

    def process(self, argument_list):
        """"""
        :param argument_list: list of str, input from user
        :return: dict:
            {""cleaned_arg_name"": ""value""}
        """"""
        arg_index = 0
        for a in argument_list:
            opt_and_val = a.split('=', 1)
            opt_name = opt_and_val[0]
            try:
                argument = self.options[opt_name]
            except KeyError:
                try:
                    argument = self.arguments[arg_index]
                except IndexError:
                    logger.error('option/argument %r not specified', a)
                    raise NoSuchOptionOrArgument('No such option or argument: %r' % opt_name)
            logger.info('argument found: %s', argument)
            safe_arg_name = normalize_arg_name(argument.name)
            logger.info('argument is available under name %r', safe_arg_name)
            if isinstance(argument, Argument):
                arg_index += 1
                value = (a,)
            else:
                try:
                    value = (opt_and_val[1],)
                except IndexError:
                    value = tuple()
            arg_val = argument.action(*value)
            logger.info('argument %r has value %r', safe_arg_name, arg_val)
            self.given_arguments[safe_arg_name] = arg_val
        return self.given_arguments","class ArgumentProcessor:
    
    def __init__(self, options, arguments):
        
        pass
    def process(self, argument_list):
        
        pass",snippet_66,3,"```python
class ArgumentProcessor:
    
    def __init__(self, options, arguments):
        """"""
        Initialize the ArgumentProcessor.

        :param options: A list of valid options (e.g., ['-h', '--help'])
        :param arguments: A list of valid arguments (e.g., ['input_file', 'output_file'])
        """"""
        self.options = options
        self.arguments = arguments

    def process(self, argument_list):
        """"""
        Process the given argument list.

        :param argument_list: A list of command-line arguments
        :return: A dictionary containing the parsed options and arguments
        """"""
        parsed_args = {'options': [], 'arguments': {}}
        
        # Separate options and arguments
        args = []
        for arg in argument_list:
            if arg in self.options:
                parsed_args['options'].append(arg)
            else:
                args.append(arg)
        
        # Check if the number of provided arguments matches the expected number
        if len(args) != len(self.arguments):
            raise ValueError(""Invalid number of arguments. Expected {} but got {}."".format(len(self.arguments), len(args)))
        
        # Map arguments to their corresponding values
        for i, arg in enumerate(self.arguments):
            parsed_args['arguments'][arg] = args[i]
        
        return parsed_args


# Example usage:
if __name__ == ""__main__"":
    processor = ArgumentProcessor(['-h', '--help'], ['input_file', 'output_file'])
    argument_list = ['-h', 'data.txt', 'result.txt']
    result = processor.process(argument_list)
    print(result)
```"
152154,hellock/icrawler,hellock_icrawler/icrawler/storage/base.py,icrawler.storage.base.BaseStorage,"from abc import ABCMeta, abstractmethod

class BaseStorage:
    """"""Base class of backend storage""""""
    __metaclass__ = ABCMeta

    @abstractmethod
    def write(self, id, data):
        """"""Abstract interface of writing data

        Args:
            id (str): unique id of the data in the storage.
            data (bytes or str): data to be stored.
        """"""
        return

    @abstractmethod
    def exists(self, id):
        """"""Check the existence of some data

        Args:
            id (str): unique id of the data in the storage

        Returns:
            bool: whether the data exists
        """"""
        return False

    @abstractmethod
    def max_file_idx(self):
        """"""Get the max existing file index

        Returns:
            int: the max index
        """"""
        return 0","
class BaseStorage:
    
    @abstractmethod
    def write(self, id, data):
        
        pass
    @abstractmethod
    def exists(self, id):
        
        pass
    @abstractmethod
    def max_file_idx(self):
        
        pass",snippet_69,4,"```python
from abc import ABC, abstractmethod
import os

class BaseStorage(ABC):
    
    @abstractmethod
    def write(self, id, data):
        pass
    
    @abstractmethod
    def exists(self, id):
        pass
    
    @abstractmethod
    def max_file_idx(self):
        pass


class FileStorage(BaseStorage):
    def __init__(self, storage_dir):
        self.storage_dir = storage_dir
        if not os.path.exists(storage_dir):
            os.makedirs(storage_dir)

    def write(self, id, data):
        file_path = os.path.join(self.storage_dir, f'{id}.dat')
        with open(file_path, 'wb') as f:
            f.write(data)

    def exists(self, id):
        file_path = os.path.join(self.storage_dir, f'{id}.dat')
        return os.path.exists(file_path)

    def max_file_idx(self):
        files = [f for f in os.listdir(self.storage_dir) if f.endswith('.dat')]
        if not files:
            return -1
        idxs = [int(f.split('.')[0]) for f in files]
        return max(idxs)


# Example usage:
if __name__ == ""__main__"":
    storage = FileStorage('storage')
    storage.write(1, b'Hello, world!')
    print(storage.exists(1))  # True
    print(storage.exists(2))  # False
    storage.write(2, b'Another file')
    print(storage.max_file_idx())  # 2
```"
155190,sentinel-hub/sentinelhub-py,sentinelhub/download/rate_limit.py,sentinelhub.download.rate_limit.SentinelHubRateLimit,"import time

class SentinelHubRateLimit:
    """"""Class implementing rate limiting logic of Sentinel Hub service

    It has 2 public methods:

    - register_next - tells if next download can start or if not, what is the wait before it can be asked again
    - update - updates expectations according to headers obtained from download

    The rate limiting object is collecting information about the status of rate limiting policy buckets from
    Sentinel Hub service. According to this information and a feedback from download requests it adapts expectations
    about when the next download attempt will be possible.
    """"""
    RETRY_HEADER = 'Retry-After'
    UNITS_SPENT_HEADER = 'X-ProcessingUnits-Spent'

    def __init__(self, num_processes: int=1, minimum_wait_time: float=0.05, maximum_wait_time: float=60.0):
        """"""
        :param num_processes: Number of parallel download processes running.
        :param minimum_wait_time: Minimum wait time between two consecutive download requests in seconds.
        :param maximum_wait_time: Maximum wait time between two consecutive download requests in seconds.
        """"""
        self.wait_time = min(num_processes * minimum_wait_time, maximum_wait_time)
        self.next_download_time = time.monotonic()

    def register_next(self) -> float:
        """"""Determines if next download request can start or not by returning the waiting time in seconds.""""""
        current_time = time.monotonic()
        wait_time = max(self.next_download_time - current_time, 0)
        if wait_time == 0:
            self.next_download_time = max(current_time + self.wait_time, self.next_download_time)
        return wait_time

    def update(self, headers: dict, *, default: float) -> None:
        """"""Update the next possible download time if the service has responded with the rate limit.

        :param headers: The headers that (may) contain information about waiting times.
        :param default: The default waiting time (in milliseconds) when retrying after getting a
            TOO_MANY_REQUESTS response without appropriate retry headers.
        """"""
        retry_after: float = int(headers.get(self.RETRY_HEADER, default))
        retry_after = retry_after / 1000
        if retry_after:
            self.next_download_time = max(time.monotonic() + retry_after, self.next_download_time)","
class SentinelHubRateLimit:
    
    def __init__(self, num_processes: int=1, minimum_wait_time: float=0.05, maximum_wait_time: float=60.0):
        
        pass
    def register_next(self) -> float:
        
        pass

    def update(self, headers: dict, *, default: float) -> None:
        
        pass",snippet_73,4,"```python
import time
from typing import Dict

class SentinelHubRateLimit:
    def __init__(self, num_processes: int = 1, minimum_wait_time: float = 0.05, maximum_wait_time: float = 60.0):
        self.num_processes = num_processes
        self.minimum_wait_time = minimum_wait_time
        self.maximum_wait_time = maximum_wait_time
        self.last_request_time = time.time()
        self.request_count = 0
        self.unit_time = 1.0  # Assuming unit time is 1 second
        self.max_requests = float('inf')  # Will be updated with actual value from headers

    def register_next(self) -> float:
        current_time = time.time()
        elapsed_time = current_time - self.last_request_time
        if elapsed_time > self.unit_time:
            self.request_count = 0
            self.last_request_time = current_time

        wait_time = max(0, (self.request_count + 1) * self.unit_time / self.max_requests - elapsed_time)
        wait_time = max(self.minimum_wait_time, min(wait_time, self.maximum_wait_time))
        self.request_count += 1
        return wait_time

    def update(self, headers: Dict[str, str], *, default: float) -> None:
        try:
            self.max_requests = int(headers.get('x-ratelimit-remaining', default))
            self.unit_time = int(headers.get('x-ratelimit-unit', 1))
        except ValueError:
            self.max_requests = default
```"
156520,textX/textX,textx/scoping/providers.py,textx.scoping.providers.PlainName,"from textx.exceptions import TextXSemanticError

class PlainName:
    """"""
    plain name scope provider
    """"""

    def __init__(self, multi_metamodel_support=True):
        """"""
        the default scope provider constructor

        Args:
            multi_metamodel_support: enable a AST based search, instead
            of using the parser._instances
        """"""
        self.multi_metamodel_support = multi_metamodel_support
        pass

    def __call__(self, obj, attr, obj_ref):
        """"""
        the default scope provider

        Args:
            obj: unused (used for multi_metamodel_support)
            attr: unused
            obj_ref: the cross reference to be resolved

        Returns:
            the resolved reference or None
        """"""
        from textx.const import RULE_ABSTRACT, RULE_COMMON
        from textx.model import ObjCrossRef
        from textx.scoping.tools import get_parser
        if obj_ref is None:
            return None
        assert type(obj_ref) is ObjCrossRef, type(obj_ref)
        if get_parser(obj).debug:
            get_parser(obj).dprint(f'Resolving obj crossref: {obj_ref.cls}:{obj_ref.obj_name}')

        def _inner_resolve_link_rule_ref(cls, obj_name):
            """"""
            Depth-first resolving of link rule reference.
            """"""
            if cls._tx_type is RULE_ABSTRACT:
                for inherited in cls._tx_inh_by:
                    result = _inner_resolve_link_rule_ref(inherited, obj_name)
                    if result:
                        return result
            elif cls._tx_type == RULE_COMMON and id(cls) in get_parser(obj)._instances:
                objs = get_parser(obj)._instances[id(cls)]
                return objs.get(obj_name)
        if self.multi_metamodel_support:
            from textx import get_children, get_model, textx_isinstance
            result_lst = get_children(lambda x: hasattr(x, 'name') and x.name == obj_ref.obj_name and textx_isinstance(x, obj_ref.cls), get_model(obj))
            if len(result_lst) == 1:
                result = result_lst[0]
            elif len(result_lst) > 1:
                line, col = get_parser(obj).pos_to_linecol(obj_ref.position)
                raise TextXSemanticError(f'name {obj_ref.obj_name} is not unique.', line=line, col=col, filename=get_model(obj)._tx_filename)
            else:
                result = None
        else:
            result = _inner_resolve_link_rule_ref(obj_ref.cls, obj_ref.obj_name)
        return result","
class PlainName:
    
    def __init__(self, multi_metamodel_support=True):
        
        pass
    def __call__(self, obj, attr, obj_ref):
        
        pass

        def _inner_resolve_link_rule_ref(cls, obj_name):
            
                pass",snippet_74,4,"```python
class PlainName:
    
    def __init__(self, multi_metamodel_support=True):
        self.multi_metamodel_support = multi_metamodel_support

    def __call__(self, obj, attr, obj_ref):
        return self._inner_resolve_link_rule_ref(obj_ref.__class__, obj_ref.name)

    def _inner_resolve_link_rule_ref(self, cls, obj_name):
        return obj_name
```"
156861,csparpa/pyowm,csparpa_pyowm/pyowm/utils/geo.py,pyowm.utils.geo.Geometry,"class Geometry:
    """"""
    Abstract parent class for geotypes

    """"""

    def geojson(self):
        """"""
        Returns a GeoJSON string representation of this geotype, compliant to
        RFC 7946 (https://tools.ietf.org/html/rfc7946)
        :return: str
        """"""
        raise NotImplementedError()

    def to_dict(self):
        """"""
        Returns a dict representation of this geotype
        :return: dict
        """"""
        raise NotImplementedError()","class Geometry:
    
    def geojson(self):
        
        pass
    def to_dict(self):
        
        pass",snippet_75,3,"```python
import json

class Geometry:
    def __init__(self, geometry_type, coordinates):
        """"""
        Initialize a Geometry object.

        Args:
            geometry_type (str): The type of geometry (e.g., 'Point', 'LineString', 'Polygon').
            coordinates (list): The coordinates of the geometry.
        """"""
        self.geometry_type = geometry_type
        self.coordinates = coordinates

    def geojson(self):
        """"""
        Return the geometry as a GeoJSON string.

        Returns:
            str: The GeoJSON representation of the geometry.
        """"""
        geojson_dict = self.to_dict()
        return json.dumps(geojson_dict)

    def to_dict(self):
        """"""
        Return the geometry as a dictionary.

        Returns:
            dict: The dictionary representation of the geometry.
        """"""
        return {
            'type': self.geometry_type,
            'coordinates': self.coordinates
        }

# Example usage:
if __name__ == ""__main__"":
    point = Geometry('Point', [12.5, 34.7])
    print(point.geojson())
    print(point.to_dict())

    linestring = Geometry('LineString', [[12.5, 34.7], [13.2, 35.1]])
    print(linestring.geojson())
    print(linestring.to_dict())

    polygon = Geometry('Polygon', [[[12.5, 34.7], [13.2, 35.1], [12.8, 35.3], [12.5, 34.7]]])
    print(polygon.geojson())
    print(polygon.to_dict())
```"
157718,jwkvam/bowtie,bowtie/_cache.py,bowtie._cache._Cache,"from eventlet.queue import LightQueue
from flask_socketio import emit
import eventlet
import flask
import msgpack
from bowtie._component import pack

class _Cache:
    """"""Store data in the browser.

    This cache uses session storage so data will stay
    in the browser until the tab is closed.
    All data must be serializable, which means if the
    serialization transforms the data it won't be the same
    when it is fetched.

    Examples
    --------
    >>> from bowtie import cache
    >>> cache['a'] = True  # doctest: +SKIP
    >>> cache['a']  # doctest: +SKIP
    True
    >>> cache['b'] = np.arange(5)  # doctest: +SKIP
    >>> cache['b']  # doctest: +SKIP
    [1, 2, 3, 4, 5]

    """"""

    def __getitem__(self, key):
        """"""Load the value stored with the key.

        Parameters
        ----------
        key : str
            The key to lookup the value stored.

        Returns
        -------
        object
            The value if the key exists in the cache, otherwise None.

        """"""
        validate(key)
        signal = 'cache_load'
        event = LightQueue(1)
        if flask.has_request_context():
            emit(signal, {'data': pack(key)}, callback=event.put)
        else:
            sio = flask.current_app.extensions['socketio']
            sio.emit(signal, {'data': pack(key)}, callback=event.put)
        return msgpack.unpackb(bytes(event.get(timeout=10)), encoding='utf8')

    def __setitem__(self, key, value):
        """"""Store the key value pair.

        Parameters
        ----------
        key : str
            The key to determine where it's stored, you'll need this to load the value later.
        value : object
            The value to store in the cache.

        Returns
        -------
        None

        """"""
        validate(key)
        signal = 'cache_save'
        if flask.has_request_context():
            emit(signal, {'key': pack(key), 'data': pack(value)})
        else:
            sio = flask.current_app.extensions['socketio']
            sio.emit(signal, {'key': pack(key), 'data': pack(value)})
        eventlet.sleep()","
class _Cache:
    '''Store data in the browser.
    This cache uses session storage so data will stay
    in the browser until the tab is closed.
    All data must be serializable, which means if the
    serialization transforms the data it won't be the same
    when it is fetched.
    Examples
    --------
    >>> from bowtie import cache
    >>> cache['a'] = True  # doctest: +SKIP
    >>> cache['a']  # doctest: +SKIP
    True
    >>> cache['b'] = np.arange(5)  # doctest: +SKIP
    >>> cache['b']  # doctest: +SKIP
    [1, 2, 3, 4, 5]
    '''
    def __getitem__(self, key):
        
        pass

    def __setitem__(self, key, value):
        
        pass",snippet_78,3,"```python
import json

class _Cache:
    '''Store data in the browser.
    This cache uses session storage so data will stay
    in the browser until the tab is closed.
    All data must be serializable, which means if the
    serialization transforms the data it won't be the same
    when it is fetched.
    Examples
    --------
    >>> from bowtie import cache
    >>> cache['a'] = True  # doctest: +SKIP
    >>> cache['a']  # doctest: +SKIP
    True
    >>> cache['b'] = np.arange(5)  # doctest: +SKIP
    >>> cache['b']  # doctest: +SKIP
    [1, 2, 3, 4, 5]
    '''
    def __getitem__(self, key):
        try:
            import js  # pyodide
            data = js.sessionStorage.getItem(key)
            if data is None:
                raise KeyError(key)
            return json.loads(data)
        except ImportError:
            raise NotImplementedError(""Cache is only available in a pyodide environment"")

    def __setitem__(self, key, value):
        try:
            import js  # pyodide
            js.sessionStorage.setItem(key, json.dumps(value))
        except ImportError:
            raise NotImplementedError(""Cache is only available in a pyodide environment"")
```"
159496,Erotemic/ubelt,Erotemic_ubelt/ubelt/util_mixins.py,ubelt.util_mixins.NiceRepr,"import warnings

class NiceRepr:
    """"""
    Inherit from this class and define ``__nice__`` to ""nicely"" print your
    objects.

    Defines ``__str__`` and ``__repr__`` in terms of ``__nice__`` function
    Classes that inherit from :class:`NiceRepr` should redefine ``__nice__``.
    If the inheriting class has a ``__len__``, method then the default
    ``__nice__`` method will return its length.

    Example:
        >>> import ubelt as ub
        >>> class Foo(ub.NiceRepr):
        ...    def __nice__(self):
        ...        return 'info'
        >>> foo = Foo()
        >>> assert str(foo) == '<Foo(info)>'
        >>> assert repr(foo).startswith('<Foo(info) at ')

    Example:
        >>> import ubelt as ub
        >>> class Bar(ub.NiceRepr):
        ...    pass
        >>> bar = Bar()
        >>> import pytest
        >>> with pytest.warns(RuntimeWarning) as record:
        >>>     assert 'object at' in str(bar)
        >>>     assert 'object at' in repr(bar)

    Example:
        >>> import ubelt as ub
        >>> class Baz(ub.NiceRepr):
        ...    def __len__(self):
        ...        return 5
        >>> baz = Baz()
        >>> assert str(baz) == '<Baz(5)>'

    Example:
        >>> import ubelt as ub
        >>> # If your nice message has a bug, it shouldn't bring down the house
        >>> class Foo(ub.NiceRepr):
        ...    def __nice__(self):
        ...        assert False
        >>> foo = Foo()
        >>> import pytest
        >>> with pytest.warns(RuntimeWarning) as record:
        >>>     print('foo = {!r}'.format(foo))
        foo = <...Foo ...>

    Example:
        >>> import ubelt as ub
        >>> class Animal(ub.NiceRepr):
        ...    def __init__(self):
        ...        ...
        ...    def __nice__(self):
        ...        return ''
        >>> class Cat(Animal):
        >>>     ...
        >>> class Dog(Animal):
        >>>     ...
        >>> class Beagle(Dog):
        >>>     ...
        >>> class Ragdoll(Cat):
        >>>     ...
        >>> instances = [Animal(), Cat(), Dog(), Beagle(), Ragdoll()]
        >>> for inst in instances:
        >>>     print(str(inst))
        <Animal()>
        <Cat()>
        <Dog()>
        <Beagle()>
        <Ragdoll()>

    In the case where you cant or dont want to use ubelt.NiceRepr you can get
    similar behavior by pasting the methods from the following snippet into
    your class:

    .. code:: python

        class MyClass:

            def __nice__(self):
                return 'your concise information'

            def __repr__(self):
                nice = self.__nice__()
                classname = self.__class__.__name__
                return '<{0}({1}) at {2}>'.format(classname, nice, hex(id(self)))

            def __str__(self):
                classname = self.__class__.__name__
                nice = self.__nice__()
                return '<{0}({1})>'.format(classname, nice)
    """"""

    def __nice__(self):
        """"""
        Returns:
            str
        """"""
        if hasattr(self, '__len__'):
            return str(len(self))
        else:
            raise NotImplementedError('Define the __nice__ method for {!r}'.format(self.__class__))

    def __repr__(self):
        """"""
        Returns:
            str
        """"""
        try:
            nice = self.__nice__()
            classname = self.__class__.__name__
            return '<{0}({1}) at {2}>'.format(classname, nice, hex(id(self)))
        except Exception as ex:
            warnings.warn(str(ex), category=RuntimeWarning)
            return object.__repr__(self)

    def __str__(self):
        """"""
        Returns:
            str
        """"""
        try:
            classname = self.__class__.__name__
            nice = self.__nice__()
            return '<{0}({1})>'.format(classname, nice)
        except Exception as ex:
            warnings.warn(str(ex), category=RuntimeWarning)
            return object.__repr__(self)","
class NiceRepr:
    '''
    Inherit from this class and define ``__nice__`` to ""nicely"" print your
    objects.
    Defines ``__str__`` and ``__repr__`` in terms of ``__nice__`` function
    Classes that inherit from :class:`NiceRepr` should redefine ``__nice__``.
    If the inheriting class has a ``__len__``, method then the default
    ``__nice__`` method will return its length.
    Example:
        >>> import ubelt as ub
        >>> class Foo(ub.NiceRepr):
        ...    def __nice__(self):
        ...        return 'info'
        >>> foo = Foo()
        >>> assert str(foo) == '<Foo(info)>'
        >>> assert repr(foo).startswith('<Foo(info) at ')
    Example:
        >>> import ubelt as ub
        >>> class Bar(ub.NiceRepr):
        ...    pass
        >>> bar = Bar()
        >>> import pytest
        >>> with pytest.warns(RuntimeWarning) as record:
        >>>     assert 'object at' in str(bar)
        >>>     assert 'object at' in repr(bar)
    Example:
        >>> import ubelt as ub
        >>> class Baz(ub.NiceRepr):
        ...    def __len__(self):
        ...        return 5
        >>> baz = Baz()
        >>> assert str(baz) == '<Baz(5)>'
    Example:
        >>> import ubelt as ub
        >>> # If your nice message has a bug, it shouldn't bring down the house
        >>> class Foo(ub.NiceRepr):
        ...    def __nice__(self):
        ...        assert False
        >>> foo = Foo()
        >>> import pytest
        >>> with pytest.warns(RuntimeWarning) as record:
        >>>     print('foo = {!r}'.format(foo))
        foo = <...Foo ...>
    Example:
        >>> import ubelt as ub
        >>> class Animal(ub.NiceRepr):
        ...    def __init__(self):
        ...        ...
        ...    def __nice__(self):
        ...        return ''
        >>> class Cat(Animal):
        >>>     ...
        >>> class Dog(Animal):
        >>>     ...
        >>> class Beagle(Dog):
        >>>     ...
        >>> class Ragdoll(Cat):
        >>>     ...
        >>> instances = [Animal(), Cat(), Dog(), Beagle(), Ragdoll()]
        >>> for inst in instances:
        >>>     print(str(inst))
        <Animal()>
        <Cat()>
        <Dog()>
        <Beagle()>
        <Ragdoll()>
    In the case where you cant or dont want to use ubelt.NiceRepr you can get
    similar behavior by pasting the methods from the following snippet into
    your class:
    .. code:: python
        class MyClass:
            def __nice__(self):
                return 'your concise information'
            def __repr__(self):
                nice = self.__nice__()
                classname = self.__class__.__name__
                return '<{0}({1}) at {2}>'.format(classname, nice, hex(id(self)))
            def __str__(self):
                classname = self.__class__.__name__
                nice = self.__nice__()
                return '<{0}({1})>'.format(classname, nice)
                    '''
            def __nice__(self):
                
                        pass

            def __repr__(self):
                
                        pass

            def __str__(self):
                
                        pass",snippet_80,4,"```python
class NiceRepr:
    '''
    Inherit from this class and define ``__nice__`` to ""nicely"" print your
    objects.
    Defines ``__str__`` and ``__repr__`` in terms of ``__nice__`` function
    Classes that inherit from :class:`NiceRepr` should redefine ``__nice__``.
    If the inheriting class has a ``__len__``, method then the default
    ``__nice__`` method will return its length.
    Example:
        >>> import ubelt as ub
        >>> class Foo(ub.NiceRepr):
        ...    def __nice__(self):
        ...        return 'info'
        >>> foo = Foo()
        >>> assert str(foo) == '<Foo(info)>'
        >>> assert repr(foo).startswith('<Foo(info) at ')
    Example:
        >>> import ubelt as ub
        >>> class Bar(ub.NiceRepr):
        ...    pass
        >>> bar = Bar()
        >>> import pytest
        >>> with pytest.warns(RuntimeWarning) as record:
        >>>     assert 'object at' in str(bar)
        >>>     assert 'object at' in repr(bar)
    Example:
        >>> import ubelt as ub
        >>> class Baz(ub.NiceRepr):
        ...    def __len__(self):
        ...        return 5
        >>> baz = Baz()
        >>> assert str(baz) == '<Baz(5)>'
    Example:
        >>> import ubelt as ub
        >>> # If your nice message has a bug, it shouldn't bring down the house
        >>> class Foo(ub.NiceRepr):
        ...    def __nice__(self):
        ...        assert False
        >>> foo = Foo()
        >>> import pytest
        >>> with pytest.warns(RuntimeWarning) as record:
        >>>     print('foo = {!r}'.format(foo))
        foo = <...Foo ...>
    Example:
        >>> import ubelt as ub
        >>> class Animal(ub.NiceRepr):
        ...    def __init__(self):
        ...        ...
        ...    def __nice__(self):
        ...        return ''
        >>> class Cat(Animal):
        >>>     ...
        >>> class Dog(Animal):
        >>>     ...
        >>> class Beagle(Dog):
        >>>     ...
        >>> class Ragdoll(Cat):
        >>>     ...
        >>> instances = [Animal(), Cat(), Dog(), Beagle(), Ragdoll()]
        >>> for inst in instances:
        >>>     print(str(inst))
        <Animal()>
        <Cat()>
        <Dog()>
        <Beagle()>
        <Ragdoll()>
    In the case where you cant or dont want to use ubelt.NiceRepr you can get
    similar behavior by pasting the methods from the following snippet into
    your class:
    .. code:: python
        class MyClass:
            def __nice__(self):
                return 'your concise information'
            def __repr__(self):
                nice = self.__nice__()
                classname = self.__class__.__name__
                return '<{0}({1}) at {2}>'.format(classname, nice, hex(id(self)))
            def __str__(self):
                classname = self.__class__.__name__
                nice = self.__nice__()
                return '<{0}({1})>'.format(classname, nice)
    '''
    def __nice__(self):
        try:
            if hasattr(self, '__len__'):
                return str(len(self))
            else:
                raise NotImplementedError('subclass should override __nice__')
        except Exception as ex:
            import warnings
            warnings.warn(str(ex), category=RuntimeWarning)
            return 'object at {}'.format(hex(id(self)))

    def __repr__(self):
        try:
            nice = self.__nice__()
            classname = self.__class__.__name__
            return '<{0}({1}) at {2}>'.format(classname, nice, hex(id(self)))
        except Exception as ex:
            import warnings
            warnings.warn(str(ex), category=RuntimeWarning)
            return object.__repr__(self)

    def __str__(self):
        try:
            classname = self.__class__.__name__
            nice = self.__nice__()
            return '<{0}({1})>'.format(classname, nice)
        except Exception as ex:
            import warnings
            warnings.warn(str(ex), category=RuntimeWarning)
            return object.__repr__(self)
```"
159497,Erotemic/ubelt,Erotemic_ubelt/ubelt/util_path.py,ubelt.util_path.ChDir,"import os

class ChDir:
    """"""
    Context manager that changes the current working directory and then
    returns you to where you were.

    This is nearly the same as the stdlib :func:`contextlib.chdir`, with the
    exception that it will do nothing if the input path is None (i.e. the user
    did not want to change directories).

    SeeAlso:
        :func:`contextlib.chdir`

    Example:
        >>> import ubelt as ub
        >>> dpath = ub.Path.appdir('ubelt/tests/chdir').ensuredir()
        >>> dir1 = (dpath / 'dir1').ensuredir()
        >>> dir2 = (dpath / 'dir2').ensuredir()
        >>> with ChDir(dpath):
        >>>     assert ub.Path.cwd() == dpath
        >>>     # change to the given directory, and then returns back
        >>>     with ChDir(dir1):
        >>>         assert ub.Path.cwd() == dir1
        >>>         with ChDir(dir2):
        >>>             assert ub.Path.cwd() == dir2
        >>>             # changes inside the context manager will be reset
        >>>             os.chdir(dpath)
        >>>         assert ub.Path.cwd() == dir1
        >>>     assert ub.Path.cwd() == dpath
        >>>     with ChDir(dir1):
        >>>         assert ub.Path.cwd() == dir1
        >>>         with ChDir(None):
        >>>             assert ub.Path.cwd() == dir1
        >>>             # When disabled, the cwd does *not* reset at context exit
        >>>             os.chdir(dir2)
        >>>         assert ub.Path.cwd() == dir2
        >>>         os.chdir(dir1)
        >>>         # Dont change dirs, but reset to your cwd at context end
        >>>         with ChDir('.'):
        >>>             os.chdir(dir2)
        >>>         assert ub.Path.cwd() == dir1
        >>>     assert ub.Path.cwd() == dpath
    """"""

    def __init__(self, dpath):
        """"""
        Args:
            dpath (str | PathLike | None):
                The new directory to work in.
                If None, then the context manager is disabled.
        """"""
        self._context_dpath = dpath
        self._orig_dpath = None

    def __enter__(self):
        """"""
        Returns:
            ChDir: self
        """"""
        if self._context_dpath is not None:
            self._orig_dpath = os.getcwd()
            os.chdir(self._context_dpath)
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        """"""
        Args:
            ex_type (Type[BaseException] | None):
            ex_value (BaseException | None):
            ex_traceback (TracebackType | None):

        Returns:
            bool | None
        """"""
        if self._context_dpath is not None:
            os.chdir(self._orig_dpath)","
class ChDir:
    '''
    Context manager that changes the current working directory and then
    returns you to where you were.
    This is nearly the same as the stdlib :func:`contextlib.chdir`, with the
    exception that it will do nothing if the input path is None (i.e. the user
    did not want to change directories).
    SeeAlso:
        :func:`contextlib.chdir`
    Example:
        >>> import ubelt as ub
        >>> dpath = ub.Path.appdir('ubelt/tests/chdir').ensuredir()
        >>> dir1 = (dpath / 'dir1').ensuredir()
        >>> dir2 = (dpath / 'dir2').ensuredir()
        >>> with ChDir(dpath):
        >>>     assert ub.Path.cwd() == dpath
        >>>     # change to the given directory, and then returns back
        >>>     with ChDir(dir1):
        >>>         assert ub.Path.cwd() == dir1
        >>>         with ChDir(dir2):
        >>>             assert ub.Path.cwd() == dir2
        >>>             # changes inside the context manager will be reset
        >>>             os.chdir(dpath)
        >>>         assert ub.Path.cwd() == dir1
        >>>     assert ub.Path.cwd() == dpath
        >>>     with ChDir(dir1):
        >>>         assert ub.Path.cwd() == dir1
        >>>         with ChDir(None):
        >>>             assert ub.Path.cwd() == dir1
        >>>             # When disabled, the cwd does *not* reset at context exit
        >>>             os.chdir(dir2)
        >>>         assert ub.Path.cwd() == dir2
        >>>         os.chdir(dir1)
        >>>         # Dont change dirs, but reset to your cwd at context end
        >>>         with ChDir('.'):
        >>>             os.chdir(dir2)
        >>>         assert ub.Path.cwd() == dir1
        >>>     assert ub.Path.cwd() == dpath
    '''
    def __init__(self, dpath):
        
        pass

    def __enter__(self):
        
        pass

    def __exit__(self, ex_type, ex_value, ex_traceback):
        
        pass",snippet_81,4,"```python
import os

class ChDir:
    '''
    Context manager that changes the current working directory and then
    returns you to where you were.
    This is nearly the same as the stdlib :func:`contextlib.chdir`, with the
    exception that it will do nothing if the input path is None (i.e. the user
    did not want to change directories).
    SeeAlso:
        :func:`contextlib.chdir`
    Example:
        >>> import ubelt as ub
        >>> dpath = ub.Path.appdir('ubelt/tests/chdir').ensuredir()
        >>> dir1 = (dpath / 'dir1').ensuredir()
        >>> dir2 = (dpath / 'dir2').ensuredir()
        >>> with ChDir(dpath):
        >>>     assert ub.Path.cwd() == dpath
        >>>     # change to the given directory, and then returns back
        >>>     with ChDir(dir1):
        >>>         assert ub.Path.cwd() == dir1
        >>>         with ChDir(dir2):
        >>>             assert ub.Path.cwd() == dir2
        >>>             # changes inside the context manager will be reset
        >>>             os.chdir(dpath)
        >>>         assert ub.Path.cwd() == dir1
        >>>     assert ub.Path.cwd() == dpath
        >>>     with ChDir(dir1):
        >>>         assert ub.Path.cwd() == dir1
        >>>         with ChDir(None):
        >>>             assert ub.Path.cwd() == dir1
        >>>             # When disabled, the cwd does *not* reset at context exit
        >>>             os.chdir(dir2)
        >>>         assert ub.Path.cwd() == dir2
        >>>         os.chdir(dir1)
        >>>         # Dont change dirs, but reset to your cwd at context end
        >>>         with ChDir('.'):
        >>>             os.chdir(dir2)
        >>>         assert ub.Path.cwd() == dir1
        >>>     assert ub.Path.cwd() == dpath
    '''
    def __init__(self, dpath):
        self.dpath = dpath
        self.orig_dpath = None

    def __enter__(self):
        if self.dpath is not None:
            self.orig_dpath = os.getcwd()
            os.chdir(self.dpath)
        return self

    def __exit__(self, ex_type, ex_value, ex_traceback):
        if self.orig_dpath is not None:
            os.chdir(self.orig_dpath)
```"
159980,pazz/alot,alot/completion/completer.py,alot.completion.completer.Completer,"import abc

class Completer:
    """"""base class for completers""""""
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def complete(self, original, pos):
        """"""returns a list of completions and cursor positions for the string
        `original` from position `pos` on.

        :param original: the string to complete
        :type original: str
        :param pos: starting position to complete from
        :type pos: int
        :returns: pairs of completed string and cursor position in the
                  new string
        :rtype: list of (str, int)
        :raises: :exc:`CompletionError`
        """"""
        pass

    def relevant_part(self, original, pos):
        """"""
        Calculate the subword in a ' '-separated list of substrings of
        `original` that `pos` is in.
        """"""
        start = original.rfind(' ', 0, pos) + 1
        end = original.find(' ', pos - 1)
        if end == -1:
            end = len(original)
        return (original[start:end], start, end, pos - start)","
class Completer:
    
    @abc.abstractmethod
    def complete(self, original, pos):
        
        pass
    def relevant_part(self, original, pos):
        
        pass",snippet_82,3,"```python
import abc
import re

class Completer(abc.ABC):
    
    @abc.abstractmethod
    def complete(self, original, pos):
        pass
    
    def relevant_part(self, original, pos):
        """"""Extract the relevant part of the input string for completion.

        This method is used to determine the part of the input string that is relevant for completion.
        It is assumed that the relevant part is the word preceding the cursor position.

        Args:
            original (str): The original input string.
            pos (int): The cursor position in the input string.

        Returns:
            str: The relevant part of the input string.
        """"""
        # Find the start of the word preceding the cursor position
        start = pos
        while start > 0 and re.match(r'\w', original[start - 1]):
            start -= 1
        
        # Extract the relevant part
        return original[start:pos]
```"
160363,splunk/splunk-sdk-python,splunk_splunk-sdk-python/splunklib/modularinput/argument.py,splunklib.modularinput.argument.Argument,"import xml.etree.ElementTree as ET

class Argument:
    """"""Class representing an argument to a modular input kind.

    ``Argument`` is meant to be used with ``Scheme`` to generate an XML
    definition of the modular input kind that Splunk understands.

    ``name`` is the only required parameter for the constructor.

        **Example with least parameters**::

            arg1 = Argument(name=""arg1"")

        **Example with all parameters**::

            arg2 = Argument(
                name=""arg2"",
                description=""This is an argument with lots of parameters"",
                validation=""is_pos_int('some_name')"",
                data_type=Argument.data_type_number,
                required_on_edit=True,
                required_on_create=True
            )
    """"""
    data_type_boolean = 'BOOLEAN'
    data_type_number = 'NUMBER'
    data_type_string = 'STRING'

    def __init__(self, name, description=None, validation=None, data_type=data_type_string, required_on_edit=False, required_on_create=False, title=None):
        """"""
        :param name: ``string``, identifier for this argument in Splunk.
        :param description: ``string``, human-readable description of the argument.
        :param validation: ``string`` specifying how the argument should be validated, if using internal validation.
               If using external validation, this will be ignored.
        :param data_type: ``string``, data type of this field; use the class constants.
               ""data_type_boolean"", ""data_type_number"", or ""data_type_string"".
        :param required_on_edit: ``Boolean``, whether this arg is required when editing an existing modular input of this kind.
        :param required_on_create: ``Boolean``, whether this arg is required when creating a modular input of this kind.
        :param title: ``String``, a human-readable title for the argument.
        """"""
        self.name = name
        self.description = description
        self.validation = validation
        self.data_type = data_type
        self.required_on_edit = required_on_edit
        self.required_on_create = required_on_create
        self.title = title

    def add_to_document(self, parent):
        """"""Adds an ``Argument`` object to this ElementTree document.

        Adds an <arg> subelement to the parent element, typically <args>
        and sets up its subelements with their respective text.

        :param parent: An ``ET.Element`` to be the parent of a new <arg> subelement
        :returns: An ``ET.Element`` object representing this argument.
        """"""
        arg = ET.SubElement(parent, 'arg')
        arg.set('name', self.name)
        if self.title is not None:
            ET.SubElement(arg, 'title').text = self.title
        if self.description is not None:
            ET.SubElement(arg, 'description').text = self.description
        if self.validation is not None:
            ET.SubElement(arg, 'validation').text = self.validation
        subelements = [('data_type', self.data_type), ('required_on_edit', self.required_on_edit), ('required_on_create', self.required_on_create)]
        for name, value in subelements:
            ET.SubElement(arg, name).text = str(value).lower()
        return arg","
class Argument:
    '''Class representing an argument to a modular input kind.
    ``Argument`` is meant to be used with ``Scheme`` to generate an XML
    definition of the modular input kind that Splunk understands.
    ``name`` is the only required parameter for the constructor.
        **Example with least parameters**::
            arg1 = Argument(name=""arg1"")
        **Example with all parameters**::
            arg2 = Argument(
                name=""arg2"",
                description=""This is an argument with lots of parameters"",
                validation=""is_pos_int('some_name')"",
                data_type=Argument.data_type_number,
                required_on_edit=True,
                required_on_create=True
            )
    '''
    def __init__(self, name, description=None, validation=None, data_type=data_type_string, required_on_edit=False, required_on_create=False, title=None):
        
        pass

    def add_to_document(self, parent):
        
        pass",snippet_83,3,"```python
from xml.dom.minidom import Document

class Argument:
    '''Class representing an argument to a modular input kind.
    ``Argument`` is meant to be used with ``Scheme`` to generate an XML
    definition of the modular input kind that Splunk understands.
    ``name`` is the only required parameter for the constructor.
        **Example with least parameters**::
            arg1 = Argument(name=""arg1"")
        **Example with all parameters**::
            arg2 = Argument(
                name=""arg2"",
                description=""This is an argument with lots of parameters"",
                validation=""is_pos_int('some_name')"",
                data_type=Argument.data_type_number,
                required_on_edit=True,
                required_on_create=True
            )
    '''
    data_type_string = ""string""
    data_type_number = ""number""
    data_type_boolean = ""boolean""

    def __init__(self, name, description=None, validation=None, data_type=data_type_string, required_on_edit=False, required_on_create=False, title=None):
        self.name = name
        self.description = description
        self.validation = validation
        self.data_type = data_type
        self.required_on_edit = required_on_edit
        self.required_on_create = required_on_create
        self.title = title

    def add_to_document(self, parent):
        doc = Document()
        element = doc.createElement(""arg"")
        element.setAttribute(""name"", self.name)

        if self.title is not None:
            title_element = doc.createElement(""title"")
            title_element.appendChild(doc.createTextNode(self.title))
            element.appendChild(title_element)

        if self.description is not None:
            description_element = doc.createElement(""description"")
            description_element.appendChild(doc.createTextNode(self.description))
            element.appendChild(description_element)

        if self.validation is not None:
            validation_element = doc.createElement(""validation"")
            validation_element.appendChild(doc.createTextNode(self.validation))
            element.appendChild(validation_element)

        data_type_element = doc.createElement(""data_type"")
        data_type_element.appendChild(doc.createTextNode(self.data_type))
        element.appendChild(data_type_element)

        required_on_edit_element = doc.createElement(""required_on_edit"")
        required_on_edit_element.appendChild(doc.createTextNode(str(self.required_on_edit).lower()))
        element.appendChild(required_on_edit_element)

        required_on_create_element = doc.createElement(""required_on_create"")
        required_on_create_element.appendChild(doc.createTextNode(str(self.required_on_create).lower()))
        element.appendChild(required_on_create_element)

        parent.appendChild(element)
```"
160367,splunk/splunk-sdk-python,splunk_splunk-sdk-python/splunklib/modularinput/scheme.py,splunklib.modularinput.scheme.Scheme,"import xml.etree.ElementTree as ET

class Scheme:
    """"""Class representing the metadata for a modular input kind.

    A ``Scheme`` specifies a title, description, several options of how Splunk should run modular inputs of this
    kind, and a set of arguments which define a particular modular input's properties.

    The primary use of ``Scheme`` is to abstract away the construction of XML to feed to Splunk.
    """"""
    streaming_mode_simple = 'SIMPLE'
    streaming_mode_xml = 'XML'

    def __init__(self, title):
        """"""
        :param title: ``string`` identifier for this Scheme in Splunk.
        """"""
        self.title = title
        self.description = None
        self.use_external_validation = True
        self.use_single_instance = False
        self.streaming_mode = Scheme.streaming_mode_xml
        self.arguments = []

    def add_argument(self, arg):
        """"""Add the provided argument, ``arg``, to the ``self.arguments`` list.

        :param arg: An ``Argument`` object to add to ``self.arguments``.
        """"""
        self.arguments.append(arg)

    def to_xml(self):
        """"""Creates an ``ET.Element`` representing self, then returns it.

        :returns: an ``ET.Element`` representing this scheme.
        """"""
        root = ET.Element('scheme')
        ET.SubElement(root, 'title').text = self.title
        if self.description is not None:
            ET.SubElement(root, 'description').text = self.description
        subelements = [('use_external_validation', self.use_external_validation), ('use_single_instance', self.use_single_instance), ('streaming_mode', self.streaming_mode)]
        for name, value in subelements:
            ET.SubElement(root, name).text = str(value).lower()
        endpoint = ET.SubElement(root, 'endpoint')
        args = ET.SubElement(endpoint, 'args')
        for arg in self.arguments:
            arg.add_to_document(args)
        return root","
class Scheme:
    
    def __init__(self, title):
        
        pass
    def add_argument(self, arg):
        
        pass

    def to_xml(self):
        
        pass",snippet_84,4,"```python
import xml.etree.ElementTree as ET

class Scheme:
    
    def __init__(self, title):
        self.title = title
        self.arguments = []

    def add_argument(self, arg):
        self.arguments.append(arg)

    def to_xml(self):
        root = ET.Element(""scheme"")
        title_element = ET.SubElement(root, ""title"")
        title_element.text = self.title
        
        args_element = ET.SubElement(root, ""arguments"")
        for arg in self.arguments:
            arg_element = ET.SubElement(args_element, ""argument"")
            arg_element.text = arg
        
        return ET.tostring(root, encoding=""unicode"")

# Example usage:
if __name__ == ""__main__"":
    scheme = Scheme(""Example Scheme"")
    scheme.add_argument(""arg1"")
    scheme.add_argument(""arg2"")
    print(scheme.to_xml())
```"
160991,ncclient/ncclient,ncclient_ncclient/ncclient/transport/session.py,ncclient.transport.session.SessionListener,"class SessionListener:
    """"""Base class for :class:`Session` listeners, which are notified when a new
    NETCONF message is received or an error occurs.

    .. note::
        Avoid time-intensive tasks in a callback's context.
    """"""

    def callback(self, root, raw):
        """"""Called when a new XML document is received. The *root* argument allows the callback to determine whether it wants to further process the document.

        Here, *root* is a tuple of *(tag, attributes)* where *tag* is the qualified name of the root element and *attributes* is a dictionary of its attributes (also qualified names).

        *raw* will contain the XML document as a string.
        """"""
        raise NotImplementedError

    def errback(self, ex):
        """"""Called when an error occurs.

        :type ex: :exc:`Exception`
        """"""
        raise NotImplementedError","class SessionListener:
    
    def callback(self, root, raw):
        
        pass
    def errback(self, ex):
        
        pass",snippet_85,3,"```python
class SessionListener:
    """"""
    A class used to listen to session events.

    Methods
    -------
    callback(root, raw)
        Called when a session event is received.
    errback(ex)
        Called when an error occurs during a session event.
    """"""

    def callback(self, root, raw):
        """"""
        Called when a session event is received.

        Parameters
        ----------
        root : object
            The root object of the session event.
        raw : object
            The raw data of the session event.
        """"""
        pass

    def errback(self, ex):
        """"""
        Called when an error occurs during a session event.

        Parameters
        ----------
        ex : Exception
            The exception that occurred.
        """"""
        pass


# Example implementation
class MySessionListener(SessionListener):
    def callback(self, root, raw):
        print(f""Received session event: root={root}, raw={raw}"")

    def errback(self, ex):
        print(f""Error occurred during session event: {ex}"")


# Example usage
if __name__ == ""__main__"":
    listener = MySessionListener()
    listener.callback(""example_root"", ""example_raw"")
    listener.errback(Exception(""example_error""))
```"
163149,python-cmd2/cmd2,python-cmd2_cmd2/cmd2/argparse_custom.py,cmd2.argparse_custom.Cmd2AttributeWrapper,"from typing import TYPE_CHECKING, Any, ClassVar, NoReturn, Protocol, cast, runtime_checkable

class Cmd2AttributeWrapper:
    """"""Wraps a cmd2-specific attribute added to an argparse Namespace.

    This makes it easy to know which attributes in a Namespace are
    arguments from a parser and which were added by cmd2.
    """"""

    def __init__(self, attribute: Any) -> None:
        """"""Initialize Cmd2AttributeWrapper instances.""""""
        self.__attribute = attribute

    def get(self) -> Any:
        """"""Get the value of the attribute.""""""
        return self.__attribute

    def set(self, new_val: Any) -> None:
        """"""Set the value of the attribute.""""""
        self.__attribute = new_val","
class Cmd2AttributeWrapper:
    
    def __init__(self, attribute: Any) -> None:
        
        pass
    def get(self) -> Any:
        
        pass

    def set(self, new_val: Any) -> None:
        
        pass",snippet_86,4,"```python
from typing import Any

class Cmd2AttributeWrapper:
    
    def __init__(self, attribute: Any) -> None:
        """"""
        Initializes the Cmd2AttributeWrapper instance.

        Args:
        attribute (Any): The attribute to be wrapped.
        """"""
        self._attribute = attribute

    def get(self) -> Any:
        """"""
        Retrieves the wrapped attribute.

        Returns:
        Any: The wrapped attribute.
        """"""
        return self._attribute

    def set(self, new_val: Any) -> None:
        """"""
        Sets the wrapped attribute to a new value.

        Args:
        new_val (Any): The new value for the wrapped attribute.
        """"""
        self._attribute = new_val
```"
163184,python-cmd2/cmd2,python-cmd2_cmd2/cmd2/utils.py,cmd2.utils.ContextFlag,"class ContextFlag:
    """"""A context manager which is also used as a boolean flag value within the default sigint handler.

    Its main use is as a flag to prevent the SIGINT handler in cmd2 from raising a KeyboardInterrupt
    while a critical code section has set the flag to True. Because signal handling is always done on the
    main thread, this class is not thread-safe since there is no need.
    """"""

    def __init__(self) -> None:
        """"""When this flag has a positive value, it is considered set. When it is 0, it is not set.

        It should never go below 0.
        """"""
        self.__count = 0

    def __bool__(self) -> bool:
        """"""Define the truth value of an object when it is used in a boolean context.""""""
        return self.__count > 0

    def __enter__(self) -> None:
        """"""When a with block is entered, the __enter__ method of the context manager is called.""""""
        self.__count += 1

    def __exit__(self, *args: object) -> None:
        """"""When the execution flow exits a with statement block this is called, regardless of whether an exception occurred.""""""
        self.__count -= 1
        if self.__count < 0:
            raise ValueError('count has gone below 0')","class ContextFlag:
    
    def __init__(self) -> None:
        
        pass
    def __bool__(self) -> bool:
        
        pass
    def __enter__(self) -> None:
        
        pass

    def __exit__(self, *args: object) -> None:
        
        pass",snippet_87,5,"```python
class ContextFlag:
    
    def __init__(self) -> None:
        self._flag = False

    def __bool__(self) -> bool:
        return self._flag

    def __enter__(self) -> None:
        self._flag = True

    def __exit__(self, *args: object) -> None:
        self._flag = False
```"
166548,pypyr/pypyr-cli,pypyr_pypyr-cli/pypyr/cache/cache.py,pypyr.cache.cache.Cache,"import threading
from pypyr.config import config

class Cache:
    """"""Thread-safe general purpose cache for objects.

    Add things to the cache by calling get(key, creator). If the requested key
    doesn't exist, will add the item to the cache for you.
    """"""

    def __init__(self):
        """"""Instantiate the cache.""""""
        self._lock = threading.Lock()
        self._cache = {}

    def clear(self):
        """"""Clear the cache of all objects.""""""
        with self._lock:
            self._cache.clear()

    def get(self, key, creator):
        """"""Get key from cache. If key not exist, call creator and cache result.

        Looks for key in cache and returns object for that key.

        If key is not found, call creator and save the result to cache for that
        key.

        Be warned that get happens under the context of a Lock. . . so if
        creator takes a long time you might well be blocking.

        If config no_cache is True, bypasses cache entirely - will call
        creator each time and also not save the result to cache.

        Args:
            key: key (unique id) of cached item
            creator: callable that will create cached object if key not found

        Returns:
            Cached item at key or the result of creator()
        """"""
        if config.no_cache:
            logger.debug('no cache mode enabled. creating `%s` sans cache', key)
            return creator()
        with self._lock:
            if key in self._cache:
                logger.debug('`%s` loading from cache', key)
                obj = self._cache[key]
            else:
                logger.debug('`%s` not found in cache. . . creating', key)
                obj = creator()
                self._cache[key] = obj
        return obj","
class Cache:
    
    def __init__(self):
        
        pass
    def clear(self):
        
        pass

    def get(self, key, creator):
        
        pass",snippet_88,4,"```python
from threading import Lock

class Cache:
    
    def __init__(self):
        self.cache = {}
        self.lock = Lock()

    def clear(self):
        with self.lock:
            self.cache.clear()

    def get(self, key, creator):
        with self.lock:
            if key not in self.cache:
                self.cache[key] = creator()
        return self.cache[key]
```"
166549,pypyr/pypyr-cli,pypyr_pypyr-cli/pypyr/cache/loadercache.py,pypyr.cache.loadercache.Loader,"from pypyr.pipedef import PipelineDefinition, PipelineInfo
from pypyr.cache.cache import Cache
from collections.abc import Mapping
from pypyr.errors import PipelineDefinitionError

class Loader:
    """"""A single pipeline loader & the cache for all pipelines it has loaded.

    It loads pipelines using the get_pipeline_definition you assign to the
    loader at initialization.

    Attributes:
        name (str): Absolute module name of loader.
    """"""
    __slots__ = ['name', '_get_pipeline_definition', '_pipeline_cache']

    def __init__(self, name, get_pipeline_definition):
        """"""Initialize the loader and its pipeline cache.

        The expected function signature is:
        get_pipeline_definition(name: str,
                                parent: any) -> PipelineDefinition | Mapping

        Args:
            name: Absolute name of loader
            get_pipeline_definition: Reference to the function to call when
                loading a pipeline with this Loader.
        """"""
        self.name = name
        self._get_pipeline_definition = get_pipeline_definition
        self._pipeline_cache = Cache()

    def clear(self):
        """"""Clear all the pipelines in this Loader's cache.""""""
        self._pipeline_cache.clear()

    def get_pipeline(self, name, parent):
        """"""Get cached PipelineDefinition. Adds it to cache if it doesn't exist.

        The cache is local to this Loader instance.

        The combination of parent+name must be unique for this Loader. Parent
        should therefore have a sensible __str__ implementation because it
        forms part of the pipeline's identifying str key in the cache.

        Args:
            name (str): Name of pipeline, sans .yaml at end.
            parent (any): Parent in which to look for pipeline.

        Returns:
            pypyr.pipedef.PipelineDefinition: Yaml payload and loader info
                metadata for the pipeline.
        """"""
        normalized_name = f'{parent}+{name}' if parent else name
        return self._pipeline_cache.get(normalized_name, lambda: self._load_pipeline(name, parent))

    def _load_pipeline(self, name, parent):
        """"""Execute get_pipeline_definition(name, parent) for this loader.

        If the loader get_pipeline_definition does not return a
        PipelineDefinition, this method will wrap the payload inside a
        PipelineDefinition for you.

        Args:
            name (str): Name of pipeline, sans .yaml at end.
            parent (any): Parent in which to look for pipeline.

        Returns:
            pypyr.pipedef.PipelineDefinition: Yaml payload and loader info
                metadata for the pipeline.
        """"""
        logger.debug('starting')
        logger.debug('loading the pipeline definition with %s', self.name)
        pipeline_definition = self._get_pipeline_definition(pipeline_name=name, parent=parent)
        if not isinstance(pipeline_definition, PipelineDefinition):
            pipeline_definition = PipelineDefinition(pipeline=pipeline_definition, info=PipelineInfo(pipeline_name=name, loader=self.name, parent=parent))
        if not isinstance(pipeline_definition.pipeline, Mapping):
            raise PipelineDefinitionError(""A pipeline must be a mapping at the top level. Does your top-level yaml have a 'steps:' key? For example:\n\nsteps:\n  - name: pypyr.steps.echo\n    in:\n      echoMe: this is a bare bones pipeline example.\n"")
        logger.debug('done')
        return pipeline_definition","
class Loader:
    
    def __init__(self, name, get_pipeline_definition):
        
        pass
    def clear(self):
        
        pass

    def get_pipeline(self, name, parent):
        
        pass

    def _load_pipeline(self, name, parent):
        
        pass",snippet_89,5,"```python
class Loader:
    
    def __init__(self, name, get_pipeline_definition):
        self.name = name
        self.get_pipeline_definition = get_pipeline_definition
        self.pipeline_cache = {}

    def clear(self):
        self.pipeline_cache.clear()

    def get_pipeline(self, name, parent):
        if name not in self.pipeline_cache:
            self._load_pipeline(name, parent)
        return self.pipeline_cache[name]

    def _load_pipeline(self, name, parent):
        pipeline_definition = self.get_pipeline_definition(name)
        if pipeline_definition is None:
            raise ValueError(f""Pipeline '{name}' not found"")
        # Assuming pipeline_definition is a valid pipeline object or can be used to create one
        self.pipeline_cache[name] = pipeline_definition
```"
166587,pypyr/pypyr-cli,pypyr_pypyr-cli/pypyr/pipedef.py,pypyr.pipedef.PipelineDefinition,"class PipelineDefinition:
    """"""The pipeline body and its metadata.

    A loader creates the PipelineDefinition and sets the metadata in .info.

    The PipelineDefinition is a globally shared cache of the pipeline body &
    meta-data.

    Attributes:
        pipeline (dict-like): The pipeline yaml body.
        info (PipelineInfo): Meta-data set by the loader for the pipeline.
    """"""
    __slots__ = ['pipeline', 'info']

    def __init__(self, pipeline, info):
        """"""Initialize a pipeline definition.

        Args:
            pipeline (dict-like): The pipeline yaml body itself.
            info (PipelineInfo): Meta-data set by the loader for the pipeline.
        """"""
        self.pipeline = pipeline
        self.info = info

    def __eq__(self, other):
        """"""Equality comparison checks Pipeline and info objects are equal.""""""
        type_self = type(self)
        if type_self is type(other):
            all_slots = [p for c in type_self.__mro__ for p in getattr(c, '__slots__', [])]
            return all((getattr(self, s, id(self)) == getattr(other, s, id(other)) for s in all_slots))
        else:
            return False","class PipelineDefinition:
    
    def __init__(self, pipeline, info):
        
        pass
    def __eq__(self, other):
        
        pass",snippet_92,3,"```python
class PipelineDefinition:
    
    def __init__(self, pipeline, info):
        """"""
        Initialize a PipelineDefinition object.

        Args:
            pipeline (object): The pipeline object.
            info (dict): Additional information about the pipeline.
        """"""
        self.pipeline = pipeline
        self.info = info

    def __eq__(self, other):
        """"""
        Check if two PipelineDefinition objects are equal.

        Args:
            other (PipelineDefinition): The other PipelineDefinition object.

        Returns:
            bool: True if the two objects are equal, False otherwise.
        """"""
        if not isinstance(other, PipelineDefinition):
            return False
        return self.pipeline == other.pipeline and self.info == other.info
```"
166589,pypyr/pypyr-cli,pypyr_pypyr-cli/pypyr/pipedef.py,pypyr.pipedef.PipelineInfo,"class PipelineInfo:
    """"""The common attributes that every pipeline loader should set.

    Custom loaders that want to add more properties to a pipeline's meta-data
    should probably derive from this class.

    Attributes:
        pipeline_name (str): Name of pipeline, as set by the loader.
        loader (str): Absolute module name of the pipeline loader.
        parent (any): pipeline_name resolves from parent. The parent can be any
            type - it is up to the loader to interpret the parent property.
        is_loader_cascading (bool): Loader cascades to child pipelines if not
            otherwise set on pype. Default True.
        is_parent_cascading (bool): Parent cascades to child pipelines if not
            otherwise set on pype. Default True.
    """"""
    __slots__ = ['pipeline_name', 'loader', 'parent', 'is_loader_cascading', 'is_parent_cascading']

    def __init__(self, pipeline_name, loader, parent, is_parent_cascading=True, is_loader_cascading=True):
        """"""Initialize PipelineInfo.

        Args:
            pipeline_name (str): name of pipeline, as set by the loader.
            loader (str): absolute module name of pypeloader.
            parent (any): pipeline_name resolves from parent.
            is_loader_cascading (bool): Loader cascades to child pipelines if
                not otherwise set on pype. Default True.
            is_parent_cascading (bool): Parent cascades to child pipelines if
                not otherwise set on pype. Default True.
        """"""
        self.pipeline_name = pipeline_name
        self.loader = loader
        self.parent = parent
        self.is_loader_cascading = is_loader_cascading
        self.is_parent_cascading = is_parent_cascading

    def __eq__(self, other):
        """"""Check all instance attributes are equal.""""""
        type_self = type(self)
        if type_self is type(other):
            all_slots = [p for c in type_self.__mro__ for p in getattr(c, '__slots__', [])]
            return all((getattr(self, s, id(self)) == getattr(other, s, id(other)) for s in all_slots))
        else:
            return False","class PipelineInfo:
    
    def __init__(self, pipeline_name, loader, parent, is_parent_cascading=True, is_loader_cascading=True):
        
        pass
    def __eq__(self, other):
        
        pass",snippet_93,3,"```python
class PipelineInfo:
    
    def __init__(self, pipeline_name, loader, parent, is_parent_cascading=True, is_loader_cascading=True):
        self.pipeline_name = pipeline_name
        self.loader = loader
        self.parent = parent
        self.is_parent_cascading = is_parent_cascading
        self.is_loader_cascading = is_loader_cascading

    def __eq__(self, other):
        if not isinstance(other, PipelineInfo):
            return False
        return (self.pipeline_name == other.pipeline_name and 
                self.loader == other.loader and 
                self.parent == other.parent and 
                self.is_parent_cascading == other.is_parent_cascading and 
                self.is_loader_cascading == other.is_loader_cascading)
```"
166604,pypyr/pypyr-cli,pypyr_pypyr-cli/pypyr/steps/dsl/cmd.py,pypyr.steps.dsl.cmd.CmdStep,"import pypyr.utils.types
from pypyr.errors import ContextError, KeyInContextHasNoValueError, KeyNotInContextError
from collections.abc import Mapping, Sequence
from pypyr.context import Context
import logging
from pypyr.subproc import Command, SimpleCommandTypes

class CmdStep:
    """"""A pypyr step to run an executable or command as a subprocess.

    This models a step that takes config like this:
        cmd: <<cmd string>>

    OR, expanded syntax is as a dict
        cmd:
            run: str. mandatory. command + args to execute.
            save: bool. defaults False. save output to cmdOut. Treats output
                as text in the system's encoding and removes newlines at end.
            cwd: str/Pathlike. optional. Working directory for this command.
            bytes (bool): Default False. When `save` return output bytes from
                cmd unaltered, without applying any encoding & text newline
                processing.
            encoding (str): Default None. When `save`, decode cmd output with
                this encoding. The default of None uses the system encoding and
                should ""just work"".
            stdout (str | Path): Default None. Write stdout to this file path.
                Special value `/dev/null` writes to the system null device.
            stderr (str | Path): Default None. Write stderr to this file path.
                Special value `/dev/null` writes to the system null device.
                Special value `/dev/stdout` redirects err output to stdout.
            append (bool): Default False. When stdout/stderr a file, append
                rather than overwrite. Default is to overwrite.

    In expanded syntax, `run` can be a simple string or a list:
        cmd:
          run:
            - my-executable --arg
            - cmd here
          save: False
          cwd: ./path/here

    OR, as a list in simplified syntax:
        cmd:
          - my-executable --arg
          - ./another-executable --arg

    Any or all of the list items can use expanded syntax:
        cmd:
          - ./simple-cmd-here --arg1 value
          - run: cmd here
            save: False
            cwd: ./path/here
          - run:
              - my-executable --arg
              - ./another-executable --arg
            save: True cwd: ./path/here

    If save is True, will save the output to context as follows:
        cmdOut:
            returncode: 0
            stdout: 'stdout str here. None if empty.'
            stderr: 'stderr str here. None if empty.'

    If the cmd input contains a list of executables, cmdOut will be a list of
    cmdOut objects, in order executed.

    cmdOut.returncode is the exit status of the called process. Typically 0
    means OK. A negative value -N indicates that the child was terminated by
    signal N (POSIX only).

    The run_step method does the actual work. init parses the input yaml.

    Attributes:
        logger (logger): Logger instantiated by name of calling step.
        context: (pypyr.context.Context): The current pypyr Context.
        commands (list[pypyr.subproc.Command]): Commands to run as subprocess.
        is_shell (bool): True if subprocess should run through default shell.
        name (str): Name of calling step. Used for logging output & error
            messages.
    """"""

    def __init__(self, name: str, context: Context, is_shell: bool=False) -> None:
        """"""Initialize the CmdStep.

        The step config in the context dict in simplified syntax:
            cmd: <<cmd string>>

        OR, as a dict in expanded syntax:
            cmd:
                run: str. mandatory. command + args to execute.
                save: bool. optional. defaults False. save output to cmdOut.
                cwd: str/path. optional. if specified, change the working
                     directory just for the duration of the command.

        `run` can be a single string, or it can be a list of string if there
        are multiple commands to execute with the same settings.

        OR, as a list:
            cmd:
                - my-executable --arg
                - ./another-executable --arg

        Any or all of the list items can be in expanded syntax.

        Args:
            name (str): Unique name for step. Likely __name__ of calling step.
            context (pypyr.context.Context): Look for step config in this
                context instance.
            is_shell (bool): Set to true to execute cmd through the default
                shell.
        """"""
        assert name, 'name parameter must exist for CmdStep.'
        assert context, 'context param must exist for CmdStep.'
        self.name = name
        self.logger = logging.getLogger(name)
        context.assert_key_has_value(key='cmd', caller=name)
        self.context = context
        self.is_shell = is_shell
        cmd_config = context.get_formatted('cmd')
        commands: list[Command] = []
        if isinstance(cmd_config, SimpleCommandTypes):
            commands.append(Command(cmd_config, is_shell=is_shell))
        elif isinstance(cmd_config, Mapping):
            commands.append(self.create_command(cmd_config))
        elif isinstance(cmd_config, Sequence):
            for cmd in cmd_config:
                if isinstance(cmd, SimpleCommandTypes):
                    commands.append(Command(cmd, is_shell=is_shell))
                elif isinstance(cmd, Mapping):
                    commands.append(self.create_command(cmd))
                else:
                    raise ContextError(f'{cmd} in {name} cmd config is wrong.\nEach list item should be either a simple string or a dict for expanded syntax:\ncmd:\n  - my-executable --arg\n  - run: another-executable --arg value\n    cwd: ../mydir/subdir\n  - run:\n      - arb-executable1 --arg value1\n      - arb-executable2 --arg value2\n    cwd: ../mydir/arbdir')
        else:
            raise ContextError(f'{name} cmd config should be either a simple string:\ncmd: my-executable --arg\n\nor a dictionary:\ncmd:\n  run: subdir/my-executable --arg\n  cwd: ./mydir\n\nor a list of commands:\ncmd:\n  - my-executable --arg\n  - run: another-executable --arg value\n    cwd: ../mydir/subdir')
        self.commands: list[Command] = commands

    def create_command(self, cmd_input: Mapping) -> Command:
        """"""Create a pypyr.subproc.Command object from expanded step input.""""""
        try:
            cmd = cmd_input['run']
            if not cmd:
                raise KeyInContextHasNoValueError(f'cmd.run must have a value for {self.name}.\nThe `run` input should look something like this:\ncmd:\n  run: my-executable-here --arg1\n  cwd: ./mydir/subdir\n\nOr, `run` could be a list of commands:\ncmd:\n  run:\n    - arb-executable1 --arg value1\n    - arb-executable2 --arg value2\n  cwd: ../mydir/arbdir')
        except KeyError as err:
            raise KeyNotInContextError(f""cmd.run doesn't exist for {self.name}.\nThe input should look like this in the simplified syntax:\ncmd: my-executable-here --arg1\n\nOr in the expanded syntax:\ncmd:\n  run: my-executable-here --arg1\n\nIf you're passing in a list of commands, each command should be a simple string,\nor a dict with a `run` entry:\ncmd:\n  - my-executable --arg\n  - run: another-executable --arg value\n    cwd: ../mydir/subdir\n  - run:\n      - arb-executable1 --arg value1\n      - arb-executable2 --arg value2\n    cwd: ../mydir/arbdir"") from err
        is_save = pypyr.utils.types.cast_to_bool(cmd_input.get('save', False))
        cwd = cmd_input.get('cwd')
        is_bytes = cmd_input.get('bytes')
        is_text = not is_bytes if is_save else False
        stdout = cmd_input.get('stdout')
        stderr = cmd_input.get('stderr')
        if is_save:
            if stderr or stderr:
                raise ContextError(""You can't set `stdout` or `stderr` when `save` is True."")
        encoding = cmd_input.get('encoding')
        append = cmd_input.get('append', False)
        is_shell_override = cmd_input.get('shell', None)
        is_shell = self.is_shell if is_shell_override is None else is_shell_override
        return Command(cmd=cmd, is_shell=is_shell, cwd=cwd, is_save=is_save, is_text=is_text, stdout=stdout, stderr=stderr, encoding=encoding, append=append)

    def run_step(self) -> None:
        """"""Spawn a subprocess to run the command or program.

        If cmd.is_save==True, save result of each command to context 'cmdOut'.
        """"""
        results = []
        try:
            for cmd in self.commands:
                try:
                    cmd.run()
                finally:
                    if cmd.results:
                        results.extend(cmd.results)
        finally:
            if results:
                if len(results) == 1:
                    self.context['cmdOut'] = results[0]
                else:
                    self.context['cmdOut'] = results","
class CmdStep:
    
    def __init__(self, name: str, context: Context, is_shell: bool=False) -> None:
        
        pass
    def create_command(self, cmd_input: Mapping) -> Command:
        
        pass

    def run_step(self) -> None:
        
        pass",snippet_94,4,"```python
from typing import Mapping

class Context:
    # Assuming Context class is defined elsewhere
    pass

class Command:
    # Assuming Command class is defined elsewhere
    def __init__(self, *args, **kwargs):
        pass

    def execute(self):
        # Assuming this method is defined in Command class
        pass

class CmdStep:
    
    def __init__(self, name: str, context: Context, is_shell: bool=False) -> None:
        self.name = name
        self.context = context
        self.is_shell = is_shell
        self.command = None

    def create_command(self, cmd_input: Mapping) -> Command:
        # Assuming Command class has a constructor that accepts the command and is_shell flag
        self.command = Command(cmd_input, self.is_shell)
        return self.command

    def run_step(self) -> None:
        if self.command is None:
            raise ValueError(""Command is not created. Call create_command first."")
        self.command.execute()
```"
166605,pypyr/pypyr-cli,pypyr_pypyr-cli/pypyr/steps/dsl/cmdasync.py,pypyr.steps.dsl.cmdasync.AsyncCmdStep,"import logging
from pypyr.aio.subproc import Command, Commands
from pypyr.context import Context
import pypyr.utils.types
from collections.abc import Mapping, Sequence
from pypyr.errors import ContextError, KeyInContextHasNoValueError, KeyNotInContextError
from pypyr.subproc import SimpleCommandTypes

class AsyncCmdStep:
    """"""A pypyr step to run executables/commands concurrently as a subprocess.

    This models a step that takes config like this in simple syntax:
        cmds:
            - <<cmd string 1>>
            - <<cmd string 2>>

    All the commands will run concurrently, in parallel.

    OR, expanded syntax is as a dict
        cmds:
            run: list[str | list[str]]. mandatory. command + args to execute.
                If list entry is another list[str], the sub-list will run in
                serial.
            save: bool. defaults False. save output to cmdOut. Treats output
                as text in the system's encoding and removes newlines at end.
            cwd: str/Pathlike. optional. Working directory for these commands.
            bytes (bool): Default False. When `save` return output bytes from
                cmds unaltered, without applying any encoding & text newline
                processing.
            encoding (str): Default None. When `save`, decode output with
                this encoding. The default of None uses the system encoding and
                should ""just work"".
            stdout (str | Path): Default None. Write stdout to this file path.
                Special value `/dev/null` writes to the system null device.
            stderr (str | Path): Default None. Write stderr to this file path.
                Special value `/dev/null` writes to the system null device.
                Special value `/dev/stdout` redirects err output to stdout.
            append (bool): Default False. When stdout/stderr a file, append
                rather than overwrite. Default is to overwrite.

    In expanded syntax, `run` can be a simple string or a list:
        cmds:
          run:
            - ./my-executable --arg
            - [./another-executable --arg, ./arb-executable arghere]
          save: False
          cwd: ./path/here

    As a list in simplified syntax:
        cmds:
          - my-executable --arg
          - ./another-executable --arg

    Any or all of the list items can use expanded syntax:
        cmds:
          - ./simple-cmd-here --arg1 value
          - run: cmd here
            save: False cwd: ./path/here
          - run:
              - my-executable --arg
              - ./another-executable --arg
            save: True
            cwd: ./path/here

    Any of the list items can in turn be a list. A sub-list will run in serial.

    In this example A, B.1 & C will start concurrently. B.2 will only run once
    B.1 is finished.

        cmds:
            - A
            - [B.1, B.2]
            - C

    If save is True, will save the output to context as cmdOut.

    cmdOut will be a list of pypyr.subproc.SubprocessResult objects, in order
    executed.

    SubprocessResult has the following properties:
    cmd: the cmd/args executed
    returncode: 0
    stdout: 'stdout str here. None if empty.'
    stderr: 'stderr str here. None if empty.'

    cmdOut.returncode is the exit status of the called process. Typically 0
    means OK. A negative value -N indicates that the child was terminated by
    signal N (POSIX only).

    The run_step method does the actual work. init parses the input yaml.

    Attributes:
        logger (logger): Logger instantiated by name of calling step.
        context: (pypyr.context.Context): The current pypyr Context.
        commands (pypyr.subproc.Commands): Commands to run as subprocess.
        is_shell (bool): True if subprocess should run through default shell.
        name (str): Name of calling step. Used for logging output & error
            messages.
    """"""

    def __init__(self, name: str, context: Context, is_shell: bool=False) -> None:
        """"""Initialize the CmdStep.

        The step config in the context dict in simplified syntax:
            cmd: <<cmd string>>

        OR, as a dict in expanded syntax:
            cmd:
                run: str. mandatory. command + args to execute.
                save: bool. optional. defaults False. save output to cmdOut.
                cwd: str/path. optional. if specified, change the working
                     directory just for the duration of the command.

        `run` can be a single string, or it can be a list of string if there
        are multiple commands to execute with the same settings.

        OR, as a list:
            cmd:
                - my-executable --arg
                - ./another-executable --arg

        Any or all of the list items can be in expanded syntax.

        Args:
            name (str): Unique name for step. Likely __name__ of calling step.
            context (pypyr.context.Context): Look for step config in this
                context instance.
            is_shell (bool): Set to true to execute cmd through the default
                shell.
        """"""
        assert name, 'name parameter must exist for CmdStep.'
        assert context, 'context param must exist for CmdStep.'
        self.name = name
        self.logger = logging.getLogger(name)
        context.assert_key_has_value(key='cmds', caller=name)
        self.context = context
        self.is_shell = is_shell
        cmd_config = context.get_formatted('cmds')
        commands = Commands()
        if isinstance(cmd_config, SimpleCommandTypes):
            commands.append(Command(cmd_config, is_shell=is_shell))
        elif isinstance(cmd_config, Mapping):
            commands.append(self.create_command(cmd_config))
        elif isinstance(cmd_config, Sequence):
            for cmd in cmd_config:
                if isinstance(cmd, SimpleCommandTypes):
                    commands.append(Command(cmd, is_shell=is_shell))
                elif isinstance(cmd, Sequence):
                    commands.append(Command([cmd], is_shell=is_shell))
                elif isinstance(cmd, Mapping):
                    commands.append(self.create_command(cmd))
                else:
                    raise ContextError(f'{cmd} in {name} cmds config is wrong.\nEach list item should be either a simple string, or a list to run in serial,\nor a dict for expanded syntax:\ncmds:\n  - ./my-executable --arg\n  - run:\n      - ./another-executable --arg value\n      - ./another-executable --arg value2\n    cwd: ../mydir/subdir\n  - run:\n      - ./arb-executable1 --arg value1\n      - [./arb-executable2.1, ./arb-executable2.2]\n    cwd: ../mydir/arbdir\n  - [./arb-executable3.1, ./arb-executable3.2]')
        else:
            raise ContextError(f'{name} cmds config should be either a list:\ncmds:\n  - ./my-executable --arg\n  - subdir/executable --arg1\n\nor a dictionary with a `run` sub-key:\ncmds:\n  run:\n    - ./my-executable --arg\n    - subdir/executable --arg1\n  cwd: ./mydir\n\nAny of the list items in root can be in expanded syntax:\ncmds:\n  - ./my-executable --arg\n  - subdir/executable --arg1\n  - run:\n      - ./arb-executable1 --arg value1\n      - [./arb-executable2.1, ./arb-executable2.2]\n    cwd: ../mydir/subdir\n  - [./arb-executable3.1, ./arb-executable3.2]')
        self.commands: Commands = commands

    def create_command(self, cmd_input: Mapping) -> Command:
        """"""Create pypyr.aio.subproc.Command object from expanded step input.""""""
        try:
            cmd = cmd_input['run']
            if not cmd:
                raise KeyInContextHasNoValueError(f'cmds.run must have a value for {self.name}.\nThe `run` input should look something like this:\ncmds:\n  run:\n    - ./arb-executable1 --arg value1\n    - ./arb-executable2 --arg value2\n  cwd: ../mydir/arbdir')
        except KeyError as err:
            raise KeyNotInContextError(f""cmds.run doesn't exist for {self.name}.\nThe input should look like this in expanded syntax:\ncmds:\n  run:\n    - ./my-executable --arg\n    - subdir/executable --arg1\n  cwd: ./mydir\n\nIf you're passing in a list of commands, each command should be a simple string,\nor a sub-list of commands to run in serial,\nor a dict with a `run` entry:\ncmds:\n  - ./my-executable --arg\n  - run: ./another-executable --arg value\n    cwd: ../mydir/subdir\n  - run:\n      - ./arb-executable1 --arg value1\n      - [./arb-executable2.1, ./arb-executable2.2]\n    cwd: ../mydir/arbdir\n  - [./arb-executable3.1, ./arb-executable3.2]"") from err
        is_save = pypyr.utils.types.cast_to_bool(cmd_input.get('save', False))
        cwd = cmd_input.get('cwd')
        is_bytes = cmd_input.get('bytes')
        is_text = not is_bytes if is_save else False
        stdout = cmd_input.get('stdout')
        stderr = cmd_input.get('stderr')
        if is_save:
            if stderr or stderr:
                raise ContextError(""You can't set `stdout` or `stderr` when `save` is True."")
        encoding = cmd_input.get('encoding')
        append = cmd_input.get('append', False)
        is_shell_override = cmd_input.get('shell', None)
        is_shell = self.is_shell if is_shell_override is None else is_shell_override
        return Command(cmd=cmd, is_shell=is_shell, cwd=cwd, is_save=is_save, is_text=is_text, stdout=stdout, stderr=stderr, encoding=encoding, append=append)

    def run_step(self) -> None:
        """"""Spawn subprocesses to run the commands asynchronously.

        If cmd.is_save==True, save aggregate result of all commands to context
        'cmdOut'.

        cmdOut will be a list of pypyr.subproc.SubprocessResult or Exception
        objects, in order executed.

        SubprocessResult has the following properties:
        cmd: the cmd/args executed
        returncode: 0
        stdout: 'stdout str here. None if empty.'
        stderr: 'stderr str here. None if empty.'
        """"""
        try:
            self.commands.run()
        finally:
            if self.commands.is_save:
                self.logger.debug('saving results to cmdOut')
                self.context['cmdOut'] = self.commands.results
            else:
                self.logger.debug('save is False: not saving results to cmdOut')","
class AsyncCmdStep:
    
    def __init__(self, name: str, context: Context, is_shell: bool=False) -> None:
        
        pass
    def create_command(self, cmd_input: Mapping) -> Command:
        
        pass

    def run_step(self) -> None:
        
        pass",snippet_95,4,"```python
from typing import Mapping

class Context:
    # Assuming Context is defined elsewhere
    pass

class Command:
    # Assuming Command is defined elsewhere
    pass

class AsyncCmdStep:
    
    def __init__(self, name: str, context: Context, is_shell: bool=False) -> None:
        """"""
        Initialize an AsyncCmdStep instance.

        Args:
        - name (str): The name of the step.
        - context (Context): The context in which the step is executed.
        - is_shell (bool): Whether the command should be executed through a shell. Defaults to False.
        """"""
        self.name = name
        self.context = context
        self.is_shell = is_shell
        self.command = None

    def create_command(self, cmd_input: Mapping) -> Command:
        """"""
        Create a Command instance based on the provided input.

        Args:
        - cmd_input (Mapping): A mapping containing the command details.

        Returns:
        - Command: The created Command instance.
        """"""
        # Assuming Command has a constructor that accepts cmd_input and is_shell
        self.command = Command(cmd_input, self.is_shell)
        return self.command

    async def run_step(self) -> None:
        """"""
        Run the step asynchronously.

        This method assumes that the command has been created using create_command.
        """"""
        if self.command is None:
            raise ValueError(""Command has not been created"")
        
        # Assuming Command has a method to run asynchronously
        await self.command.run_async()
```"
167547,automl/HpBandSter,automl_HpBandSter/hpbandster/optimizers/learning_curve_models/base.py,hpbandster.optimizers.learning_curve_models.base.LCModel,"class LCModel:
    """"""
        base class for simple learning curve models
    """"""

    def fit(self, times, losses, configs=None):
        """"""
            function to train the model on the observed data

            Parameters:
            -----------

            times: list
                list of numpy arrays of the timesteps for each curve
            losses: list
                list of numpy arrays of the loss (the actual learning curve)
            configs: list or None
                list of the configurations for each sample. Each element
                has to be a numpy array. Set to None, if no configuration
                information is available.
        """"""
        raise NotImplementedError()

    def predict_unseen(self, times, config):
        """"""
            predict the loss of an unseen configuration

            Parameters:
            -----------

            times: numpy array
                times where to predict the loss
            config: numpy array
                the numerical representation of the config

            Returns:
            --------

            mean and variance prediction at input times for the given config
        """"""
        raise NotImplementedError()

    def extend_partial(self, times, obs_times, obs_losses, config=None):
        """"""
            extends a partially observed curve

            Parameters:
            -----------

            times: numpy array
                times where to predict the loss
            obs_times: numpy array
                times where the curve has already been observed
            obs_losses: numpy array
                corresponding observed losses
            config: numpy array
                numerical reperesentation of the config; None if no config
                information is available

            Returns:
            --------

            mean and variance prediction at input times


        """"""","class LCModel:
    
    def fit(self, times, losses, configs=None):
        
        pass
    def predict_unseen(self, times, config):
        
        pass
    def extend_partial(self, times, obs_times, obs_losses, config=None):
        
        pass",snippet_98,4,"```python
import numpy as np
from scipy.interpolate import interp1d

class LCModel:
    """"""
    A class used to model learning curves.

    Attributes:
    ----------
    models : dict
        A dictionary to store the models for each configuration.

    Methods:
    -------
    fit(times, losses, configs=None)
        Fits the model to the given data.
    predict_unseen(times, config)
        Predicts the learning curve for a new, unseen configuration.
    extend_partial(times, obs_times, obs_losses, config=None)
        Extends a partially observed learning curve.
    """"""

    def __init__(self):
        self.models = {}

    def fit(self, times, losses, configs=None):
        """"""
        Fits the model to the given data.

        Parameters:
        ----------
        times : numpy array
            The time points at which the losses were observed.
        losses : numpy array
            The observed losses.
        configs : numpy array or list, optional
            The configurations corresponding to the losses (default is None).
        """"""
        if configs is None:
            # If no configs are given, assume there's only one config
            self.models[0] = interp1d(times, losses, kind='linear', fill_value=""extrapolate"")
        else:
            for config, loss in zip(configs, losses):
                if config not in self.models:
                    self.models[config] = []
                self.models[config].append((times, loss))

        # For each config, fit a model
        for config in self.models:
            if config == 0:
                continue
            times_list, losses_list = zip(*self.models[config])
            # For simplicity, we just average the losses at each time point
            # In a real implementation, you'd want to handle this more robustly
            times_avg = np.unique(np.concatenate(times_list))
            losses_avg = np.array([np.mean([loss[np.argmin(np.abs(t - times))] for t, loss in zip(times_list, losses_list) if np.any(np.isclose(t, time))]) for time in times_avg])
            self.models[config] = interp1d(times_avg, losses_avg, kind='linear', fill_value=""extrapolate"")

    def predict_unseen(self, times, config):
        """"""
        Predicts the learning curve for a new, unseen configuration.

        Parameters:
        ----------
        times : numpy array
            The time points at which to predict the losses.
        config : 
            The new configuration.

        Returns:
        -------
        numpy array
            The predicted losses.
        """"""
        # For an unseen config, we could use the average model or some other strategy
        # Here, we simply average the predictions of all seen configs
        predictions = []
        for model in self.models.values():
            if callable(model):  # Check if model is a function (i.e., interp1d object)
                predictions.append(model(times))
        return np.mean(predictions, axis=0)

    def extend_partial(self, times, obs_times, obs_losses, config=None):
        """"""
        Extends a partially observed learning curve.

        Parameters:
        ----------
        times : numpy array
            The time points at which to predict the losses.
        obs_times : numpy array
            The time points at which the losses were observed.
        obs_losses : numpy array
            The observed losses.
        config : optional
            The configuration corresponding to the observed losses (default is None).

        Returns:
        -------
        numpy array
            The predicted losses.
        """"""
        if config is None:
            # If no config is given, assume there's only one config
            config = 0
        if config in self.models:
            # If we have a model for this config, use it to extend the curve
            model = self.models[config]
            pred_losses = model(times)
            # Adjust the prediction based on the observed losses
            obs_model = interp1d(obs_times, obs_losses, kind='linear', fill_value=""extrapolate"")
            adjustment = obs_model(times) - model(obs_times)
            adjustment_func = interp1d(obs_times, adjustment, kind='linear', fill_value=""extrapolate"")
            return pred_losses + adjustment_func(times)
        else:
            # If we don't have a model for this config, fit a new model to the observed data
            model = interp1d(obs_times, obs_losses, kind='linear', fill_value=""extrapolate"")
            return model(times)

# Example usage
if __name__ == ""__main__"":
    model = LCModel()
    times = np.array([1, 2, 3, 4, 5])
    losses1 = np.array([10, 8, 6, 4, 2])
    losses2 = np.array([12, 9, 7, 5, 3])
    configs = [0, 1]
    losses = [losses1, losses2]
    model.fit(times, losses, configs)
    new_times = np.array([6, 7, 8])
    print(model.predict_unseen(new_times, 2))
    obs_times = np.array([1, 2, 3])
    obs_losses = np.array([11, 9, 7])
    print(model.extend_partial(new_times, obs_times, obs_losses, config=0))
```"
168574,romanz/trezor-agent,romanz_trezor-agent/libagent/age/client.py,libagent.age.client.Client,"from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.hazmat.primitives import hashes

class Client:
    """"""Sign messages and get public keys from a hardware device.""""""

    def __init__(self, device):
        """"""C-tor.""""""
        self.device = device

    def pubkey(self, identity, ecdh=False):
        """"""Return public key as VerifyingKey object.""""""
        with self.device:
            pubkey = bytes(self.device.pubkey(ecdh=ecdh, identity=identity))
            assert len(pubkey) == 32
            return pubkey

    def ecdh(self, identity, peer_pubkey):
        """"""Derive shared secret using ECDH from peer public key.""""""
        log.info('please confirm AGE decryption on %s for ""%s""...', self.device, identity.to_string())
        with self.device:
            assert len(peer_pubkey) == 32
            result, self_pubkey = self.device.ecdh_with_pubkey(pubkey=b'@' + peer_pubkey, identity=identity)
            assert result[:1] == b'\x04'
            hkdf = HKDF(algorithm=hashes.SHA256(), length=32, salt=peer_pubkey + self_pubkey, info=b'age-encryption.org/v1/X25519')
            return hkdf.derive(result[1:])","
class Client:
    
    def __init__(self, device):
        
        pass
    def pubkey(self, identity, ecdh=False):
        
        pass

    def ecdh(self, identity, peer_pubkey):
        
        pass",snippet_100,4,"```python
import hashlib
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.hazmat.primitives import hashes
from cryptography.exceptions import InvalidSignature

class Client:
    
    def __init__(self, device):
        self.device = device
        self.private_key = ec.generate_private_key(ec.SECP256R1())
        self.public_key = self.private_key.public_key()

    def pubkey(self, identity, ecdh=False):
        if ecdh:
            return self.public_key.public_bytes(
                encoding=serialization.Encoding.X962,
                format=serialization.PublicFormat.CompressedPoint
            )
        else:
            return self.public_key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            )

    def ecdh(self, identity, peer_pubkey):
        peer_public_key = serialization.load_der_public_key(
            peer_pubkey,
            backend=None
        )
        shared_secret = self.private_key.exchange(ec.ECDH(), peer_public_key)
        derived_key = HKDF(
            algorithm=hashes.SHA256(),
            length=32,
            salt=None,
            info=None,
        ).derive(shared_secret)
        return derived_key
```"
168596,romanz/trezor-agent,romanz_trezor-agent/libagent/ssh/__init__.py,libagent.ssh.ClosableNamedTemporaryFile,"import tempfile
import os

class ClosableNamedTemporaryFile:
    """"""Creates a temporary file that is not deleted when the file is closed.

    This allows the file to be opened with an exclusive lock, but used by other programs before
    it is deleted
    """"""

    def __init__(self):
        """"""Create a temporary file.""""""
        self.file = tempfile.NamedTemporaryFile(prefix='trezor-ssh-pubkey-', mode='w', delete=False)
        self.name = self.file.name

    def write(self, buf):
        """"""Write `buf` to the file.""""""
        self.file.write(buf)

    def close(self):
        """"""Closes the file, allowing it to be opened by other programs. Does not delete the file.""""""
        self.file.close()

    def __del__(self):
        """"""Deletes the temporary file.""""""
        try:
            os.unlink(self.file.name)
        except OSError:
            log.warning('Failed to delete temporary file: %s', self.file.name)","
class ClosableNamedTemporaryFile:
    
    def __init__(self):
        
        pass
    def write(self, buf):
        
        pass

    def close(self):
        
        pass

    def __del__(self):
        
        pass",snippet_101,5,"```python
import tempfile

class ClosableNamedTemporaryFile:
    
    def __init__(self):
        self.file = tempfile.NamedTemporaryFile(delete=False)

    def write(self, buf):
        self.file.write(buf)

    def close(self):
        self.file.close()

    def __del__(self):
        import os
        try:
            os.unlink(self.file.name)
        except AttributeError:
            pass
        except FileNotFoundError:
            pass
```"
168603,romanz/trezor-agent,romanz_trezor-agent/libagent/util.py,libagent.util.ExpiringCache,"import time

class ExpiringCache:
    """"""Simple cache with a deadline.""""""

    def __init__(self, seconds, timer=time.time):
        """"""C-tor.""""""
        self.duration = seconds
        self.timer = timer
        self.value = None
        self.set(None)

    def get(self):
        """"""Returns existing value, or None if deadline has expired.""""""
        if self.timer() > self.deadline:
            self.value = None
        return self.value

    def set(self, value):
        """"""Set new value and reset the deadline for expiration.""""""
        self.deadline = self.timer() + self.duration
        self.value = value","
class ExpiringCache:
    
    def __init__(self, seconds, timer=time.time):
        
        pass
    def get(self):
        
        pass

    def set(self, value):
        
        pass",snippet_102,4,"```python
import time

class ExpiringCache:
    
    def __init__(self, seconds, timer=time.time):
        self.seconds = seconds
        self.timer = timer
        self.value = None
        self.expiration_time = None

    def get(self):
        if self.expiration_time is None or self.timer() > self.expiration_time:
            return None
        return self.value

    def set(self, value):
        self.value = value
        self.expiration_time = self.timer() + self.seconds
```"
168604,romanz/trezor-agent,romanz_trezor-agent/libagent/util.py,libagent.util.Reader,"import struct
import contextlib

class Reader:
    """"""Read basic type objects out of given stream.""""""

    def __init__(self, stream):
        """"""Create a non-capturing reader.""""""
        self.s = stream
        self._captured = None

    def readfmt(self, fmt):
        """"""Read a specified object, using a struct format string.""""""
        size = struct.calcsize(fmt)
        blob = self.read(size)
        obj, = struct.unpack(fmt, blob)
        return obj

    def read(self, size=None):
        """"""Read `size` bytes from stream.""""""
        blob = self.s.read(size)
        if size is not None and len(blob) < size:
            raise EOFError
        if self._captured:
            self._captured.write(blob)
        return blob

    @contextlib.contextmanager
    def capture(self, stream):
        """"""Capture all data read during this context.""""""
        self._captured = stream
        try:
            yield
        finally:
            self._captured = None","
class Reader:
    
    def __init__(self, stream):
        
        pass
    def readfmt(self, fmt):
        
        pass

    def readfmt(self, fmt):
        
        pass
    @contextlib.contextmanager
    def capture(self, stream):
        
        pass",snippet_103,5,"```python
import struct
import contextlib
import io

class Reader:
    
    def __init__(self, stream):
        self.stream = stream

    def readfmt(self, fmt):
        size = struct.calcsize(fmt)
        data = self.stream.read(size)
        if len(data) < size:
            raise EOFError('Not enough data to read')
        return struct.unpack(fmt, data)

    def read(self, size):
        data = self.stream.read(size)
        if len(data) < size:
            raise EOFError('Not enough data to read')
        return data

    @contextlib.contextmanager
    def capture(self, stream):
        original_stream = self.stream
        self.stream = stream
        try:
            yield self
        finally:
            self.stream = original_stream

# Example usage:
if __name__ == ""__main__"":
    data = b'Hello, World!'
    stream = io.BytesIO(data)
    reader = Reader(stream)
    print(reader.read(len(data)))  # prints: b'Hello, World!'

    stream = io.BytesIO(struct.pack('i', 12345))
    reader = Reader(stream)
    print(reader.readfmt('i'))  # prints: (12345,)

    stream = io.BytesIO(b'Hello')
    reader = Reader(stream)
    with reader.capture(io.BytesIO(b'Captured')) as captured_reader:
        print(captured_reader.read(8))  # prints: b'Captured'
    print(reader.read(5))  # prints: b'Hello'
```"
171012,indygreg/python-zstandard,indygreg_python-zstandard/zstandard/backend_cffi.py,zstandard.backend_cffi.BufferSegment,"class BufferSegment:
    """"""Represents a segment within a ``BufferWithSegments``.

    This type is essentially a reference to N bytes within a
    ``BufferWithSegments``.

    The object conforms to the buffer protocol.
    """"""

    @property
    def offset(self):
        """"""The byte offset of this segment within its parent buffer.""""""
        raise NotImplementedError()

    def __len__(self):
        """"""Obtain the length of the segment, in bytes.""""""
        raise NotImplementedError()

    def tobytes(self):
        """"""Obtain bytes copy of this segment.""""""
        raise NotImplementedError()","class BufferSegment:
    
    @property
    def offset(self):
        
        pass
    def __len__(self):
        
        pass

    def tobytes(self):
        
        pass",snippet_104,4,"```python
class BufferSegment:
    def __init__(self, data, offset=0):
        """"""
        Initialize a BufferSegment instance.

        Args:
            data (bytes or BufferSegment): The data to be stored in the segment.
            offset (int, optional): The offset of the segment. Defaults to 0.
        """"""
        if isinstance(data, BufferSegment):
            self._data = data._data
            self._offset = data._offset + offset
        else:
            self._data = data
            self._offset = offset

    @property
    def offset(self):
        """"""
        Get the offset of the segment.

        Returns:
            int: The offset of the segment.
        """"""
        return self._offset

    def __len__(self):
        """"""
        Get the length of the segment.

        Returns:
            int: The length of the segment.
        """"""
        return len(self._data)

    def tobytes(self):
        """"""
        Convert the segment to bytes.

        Returns:
            bytes: The bytes representation of the segment.
        """"""
        return self._data
```"
171015,indygreg/python-zstandard,indygreg_python-zstandard/zstandard/backend_cffi.py,zstandard.backend_cffi.BufferWithSegmentsCollection,"class BufferWithSegmentsCollection:
    """"""A virtual spanning view over multiple BufferWithSegments.

    Instances are constructed from 1 or more :py:class:`BufferWithSegments`
    instances. The resulting object behaves like an ordered sequence whose
    members are the segments within each ``BufferWithSegments``.

    If the object is composed of 2 ``BufferWithSegments`` instances with the
    first having 2 segments and the second have 3 segments, then ``b[0]``
    and ``b[1]`` access segments in the first object and ``b[2]``, ``b[3]``,
    and ``b[4]`` access segments from the second.
    """"""

    def __len__(self):
        """"""The number of segments within all ``BufferWithSegments``.""""""
        raise NotImplementedError()

    def __getitem__(self, i):
        """"""Obtain the ``BufferSegment`` at an offset.""""""
        raise NotImplementedError()","class BufferWithSegmentsCollection:
    
    def __len__(self):
        
        pass
    def __getitem__(self, i):
        
        pass",snippet_105,3,"```python
class BufferWithSegmentsCollection:
    def __init__(self, buffer, segments):
        """"""
        Initialize the BufferWithSegmentsCollection.

        Args:
        buffer (bytes or bytearray): The underlying buffer.
        segments (list of tuples): A list of tuples where each tuple contains 
            the start and end indices of a segment in the buffer.
        """"""
        self.buffer = buffer
        self.segments = segments

    def __len__(self):
        """"""
        Return the number of segments in the collection.

        Returns:
        int: The number of segments.
        """"""
        return len(self.segments)

    def __getitem__(self, i):
        """"""
        Return the segment at the specified index.

        Args:
        i (int or slice): The index or slice of the segment(s) to retrieve.

        Returns:
        bytes or list of bytes: The segment(s) at the specified index or slice.
        """"""
        if isinstance(i, int):
            if i < 0:
                i += len(self)
            if i < 0 or i >= len(self):
                raise IndexError(""Index out of range"")
            start, end = self.segments[i]
            return self.buffer[start:end]
        elif isinstance(i, slice):
            return [self.buffer[start:end] for start, end in self.segments[i]]
        else:
            raise TypeError(""Index must be an integer or slice"")

# Example usage:
if __name__ == ""__main__"":
    buffer = b""Hello, World!""
    segments = [(0, 5), (7, 12)]
    collection = BufferWithSegmentsCollection(buffer, segments)
    print(len(collection))  # Output: 2
    print(collection[0])    # Output: b'Hello'
    print(collection[1])    # Output: b'World'
    print(collection[:])    # Output: [b'Hello', b'World']
```"
171185,ssalentin/plip,ssalentin_plip/plip/exchange/xml.py,plip.exchange.xml.XMLStorage,"class XMLStorage:
    """"""Generic class for storing XML data from PLIP XML files.""""""

    @staticmethod
    def getdata(tree, location, force_string=False):
        """"""Gets XML data from a specific element and handles types.""""""
        found = tree.xpath('%s/text()' % location)
        if not found:
            return None
        else:
            data = found[0]
        if force_string:
            return data
        if data == 'True':
            return True
        elif data == 'False':
            return False
        else:
            try:
                return int(data)
            except ValueError:
                try:
                    return float(data)
                except ValueError:
                    return data

    @staticmethod
    def getcoordinates(tree, location):
        """"""Gets coordinates from a specific element in PLIP XML""""""
        return tuple((float(x) for x in tree.xpath('.//%s/*/text()' % location)))","class XMLStorage:
    
    @staticmethod
    def getdata(tree, location, force_string=False):
        
        pass
    @staticmethod
    def getcoordinates(tree, location):
        
        pass",snippet_106,3,"```python
import xml.etree.ElementTree as ET

class XMLStorage:
    
    @staticmethod
    def getdata(tree, location, force_string=False):
        """"""
        Retrieves data from an XML tree based on the given location.

        Args:
            tree (ET.Element): The root element of the XML tree.
            location (str): The XPath expression to locate the desired element.
            force_string (bool, optional): If True, the result will be returned as a string. Defaults to False.

        Returns:
            The data at the specified location. If force_string is True, it returns a string; otherwise, it returns the text content of the element or None if not found.
        """"""
        element = tree.find(location)
        if element is None:
            return None
        if force_string:
            return ET.tostring(element, encoding='unicode')
        else:
            return element.text

    @staticmethod
    def getcoordinates(tree, location):
        """"""
        Retrieves coordinates from an XML tree based on the given location.

        Args:
            tree (ET.Element): The root element of the XML tree.
            location (str): The XPath expression to locate the desired element.

        Returns:
            tuple: A tuple containing the latitude and longitude coordinates. If the coordinates are not found, it returns (None, None).
        """"""
        data = XMLStorage.getdata(tree, location)
        if data is None:
            return None, None
        try:
            coordinates = data.split(',')
            if len(coordinates) != 2:
                return None, None
            latitude = float(coordinates[0].strip())
            longitude = float(coordinates[1].strip())
            return latitude, longitude
        except ValueError:
            return None, None
```"
172857,cogeotiff/rio-tiler,rio_tiler/colormap.py,rio_tiler.colormap.ColorMaps,"import attr
from rio_tiler.errors import ColorMapAlreadyRegistered, InvalidColorFormat, InvalidColorMapName, InvalidFormat
import json
import numpy
from typing import Dict, List, Sequence, Tuple, Union
import pathlib
from rio_tiler.types import ColorMapType, DataMaskType, DiscreteColorMapType, GDALColorMapType, IntervalColorMapType

@attr.s(frozen=True)
class ColorMaps:
    """"""Default Colormaps holder.

    Attributes:
        data (dict): colormaps. Defaults to `rio_tiler.colormap.DEFAULTS_CMAPS`.

    """"""
    data: Dict[str, Union[str, pathlib.Path, ColorMapType]] = attr.ib(default=attr.Factory(lambda: DEFAULT_CMAPS_FILES))

    def get(self, name: str) -> ColorMapType:
        """"""Fetch a colormap.

        Args:
            name (str): colormap name.

        Returns
            dict: colormap dictionary.

        """"""
        cmap = self.data.get(name, None)
        if cmap is None:
            raise InvalidColorMapName(f'Invalid colormap name: {name}')
        if isinstance(cmap, (pathlib.Path, str)):
            if isinstance(cmap, str):
                cmap = pathlib.Path(cmap)
            if cmap.suffix == '.npy':
                colormap = numpy.load(cmap)
                assert colormap.shape == (256, 4)
                assert colormap.dtype == numpy.uint8
                cmap_data = {idx: tuple(value) for idx, value in enumerate(colormap)}
            elif cmap.suffix == '.json':
                with cmap.open() as f:
                    cmap_data = json.load(f, object_hook=lambda x: {int(k): parse_color(v) for k, v in x.items()})
                if isinstance(cmap_data, Sequence):
                    cmap_data = [(tuple(inter), parse_color(v)) for inter, v in cmap_data]
            else:
                raise ValueError(f'Not supported {cmap.suffix} extension for ColorMap')
            self.data[name] = cmap_data
            return cmap_data
        return cmap

    def list(self) -> List[str]:
        """"""List registered Colormaps.

        Returns
            list: list of colormap names.

        """"""
        return list(self.data)

    def register(self, custom_cmap: Dict[str, Union[str, pathlib.Path, ColorMapType]], overwrite: bool=False) -> 'ColorMaps':
        """"""Register a custom colormap.

        Args:
            custom_cmap (dict): custom colormap(s) to register.
            overwrite (bool): Overwrite existing colormap with same key. Defaults to False.

        Examples:
            >>> cmap = cmap.register({""acmap"": {0: (0, 0, 0, 0), ...}})

            >>> cmap = cmap.register({""acmap"": ""acmap.npy""})

        """"""
        for name, _ in custom_cmap.items():
            if not overwrite and name in self.data:
                raise ColorMapAlreadyRegistered(f'{name} is already registered. Use force=True to overwrite.')
        return ColorMaps({**self.data, **custom_cmap})","@attr.s(frozen=True)
class ColorMaps:
    
    def get(self, name: str) -> ColorMapType:
        
        pass
    def list(self) -> List[str]:
        
        pass

    def register(self, custom_cmap: Dict[str, Union[str, pathlib.Path, ColorMapType]], overwrite: bool=False) -> 'ColorMaps':
        '''Register a custom colormap.
        Args:
            custom_cmap (dict): custom colormap(s) to register.
            overwrite (bool): Overwrite existing colormap with same key. Defaults to False.
        Examples:
            >>> cmap = cmap.register({""acmap"": {0: (0, 0, 0, 0), ...}})
            >>> cmap = cmap.register({""acmap"": ""acmap.npy""})
        '''
        pass",snippet_107,4,"```python
import attr
from typing import List, Dict, Union
import pathlib
import numpy as np
from matplotlib.colors import ListedColormap
from copy import deepcopy

ColorMapType = ListedColormap

@attr.s(frozen=True)
class ColorMaps:
    _cmaps = attr.ib(factory=dict)

    def get(self, name: str) -> ColorMapType:
        return self._cmaps[name]

    def list(self) -> List[str]:
        return list(self._cmaps.keys())

    def register(self, custom_cmap: Dict[str, Union[str, pathlib.Path, ColorMapType, Dict]], overwrite: bool=False) -> 'ColorMaps':
        new_cmaps = deepcopy(self._cmaps)
        for name, cmap in custom_cmap.items():
            if isinstance(cmap, (str, pathlib.Path)):
                cmap = np.load(cmap)
                cmap = ListedColormap(cmap)
            elif isinstance(cmap, dict):
                cmap = ListedColormap(cmap)
            if name in new_cmaps and not overwrite:
                raise ValueError(f""Colormap {name} already exists. Use overwrite=True to overwrite."")
            new_cmaps[name] = cmap
        return attr.evolve(self, cmaps=new_cmaps)
```"
174678,ipinfo/python,ipinfo_python/ipinfo/details.py,ipinfo.details.Details,"class Details:
    """"""Encapsulates data for single IP address.""""""

    def __init__(self, details):
        """"""Initialize by settings `details` attribute.""""""
        self.details = details

    def __getattr__(self, attr):
        """"""Return attribute if it exists in details array, else return error.""""""
        if attr not in self.details:
            raise AttributeError(f'{attr} is not a valid attribute of Details')
        return self.details[attr]

    @property
    def all(self):
        """"""Return all details as dict.""""""
        return self.details","class Details:
    
    def __init__(self, details):
        
        pass
    def __getattr__(self, attr):
        
        pass
    @property
    def all(self):
        
        pass",snippet_108,4,"```python
class Details:
    
    def __init__(self, details):
        self._details = details

    def __getattr__(self, attr):
        if attr in self._details:
            return self._details[attr]
        else:
            raise AttributeError(f""'Details' object has no attribute '{attr}'"")

    @property
    def all(self):
        return self._details
```"
176091,opencobra/cobrapy,opencobra_cobrapy/src/cobra/util/context.py,cobra.util.context.HistoryManager,"from typing import TYPE_CHECKING, Any, Callable, Optional

class HistoryManager:
    """"""
    Define a base context manager.

    It records a list of actions to be taken at a later time.
    This is used to implement context managers that allow temporary
    changes to a `cobra.core.Model`.

    """"""

    def __init__(self, **kwargs) -> None:
        """"""Initialize the class.""""""
        super().__init__(**kwargs)
        self._history = []

    def __call__(self, operation: Callable[[Any], Any]) -> None:
        """"""Add the corresponding operation to the history stack.

        Parameters
        ----------
        operation : callable
            A function to be called at a later time.

        """"""
        self._history.append(operation)

    def reset(self) -> None:
        """"""Trigger executions for all items in the stack in reverse order.""""""
        while self._history:
            entry = self._history.pop()
            entry()

    def size(self) -> int:
        """"""Calculate number of operations on the stack.""""""
        return len(self._history)","
class HistoryManager:
    
    def __init__(self, **kwargs) -> None:
        
        pass
    def __call__(self, operation: Callable[[Any], Any]) -> None:
        
        pass

    def reset(self) -> None:
        
        pass

    def size(self) -> int:
        
        pass",snippet_109,5,"```python
from typing import Callable, Any

class HistoryManager:
    
    def __init__(self, **kwargs) -> None:
        self.max_size = kwargs.get('max_size', float('inf'))
        self.history = []

    def __call__(self, operation: Callable[[Any], Any]) -> None:
        def wrapper(*args, **kwargs):
            result = operation(*args, **kwargs)
            self.history.append({
                'operation': operation.__name__,
                'args': args,
                'kwargs': kwargs,
                'result': result
            })
            if len(self.history) > self.max_size:
                self.history.pop(0)
            return result
        return wrapper

    def reset(self) -> None:
        self.history.clear()

    def size(self) -> int:
        return len(self.history)
```"
176713,adafruit/Adafruit_Blinka,adafruit_Adafruit_Blinka/src/adafruit_blinka/__init__.py,adafruit_blinka.Enum,"class Enum:
    """"""
    Object supporting CircuitPython-style of static symbols
    as seen with Direction.OUTPUT, Pull.UP
    """"""

    def __repr__(self):
        """"""
        Assumes instance will be found as attribute of own class.
        Returns dot-subscripted path to instance
        (assuming absolute import of containing package)
        """"""
        cls = type(self)
        for key in dir(cls):
            if getattr(cls, key) is self:
                return '{}.{}.{}'.format(cls.__module__, cls.__qualname__, key)
        return repr(self)

    @classmethod
    def iteritems(cls):
        """"""
        Inspects attributes of the class for instances of the class
        and returns as key,value pairs mirroring dict#iteritems
        """"""
        for key in dir(cls):
            val = getattr(cls, key)
            if isinstance(cls, val):
                yield (key, val)","class Enum:
    
    def __repr__(self):
        
        pass
    @classmethod
    def iteritems(cls):
        
        pass",snippet_110,3,"```python
class Enum:
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)

    def __repr__(self):
        items = [f""{key}={value}"" for key, value in self.__dict__.items() if not key.startswith('__')]
        return f""{self.__class__.__name__}({', '.join(items)})""

    @classmethod
    def iteritems(cls):
        for key, value in cls.__dict__.items():
            if not key.startswith('__') and not callable(value):
                yield key, value


# Example usage:
class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3

print(Color.RED)  # Output: Color(RED=1)
for key, value in Color.iteritems():
    print(f""{key}: {value}"")
```"
176756,adafruit/Adafruit_Blinka,adafruit_Adafruit_Blinka/src/adafruit_blinka/microcontroller/nova/__init__.py,adafruit_blinka.microcontroller.nova.Connection,"class Connection:
    """"""Connection class""""""
    __instance = None

    @staticmethod
    def getInstance():
        """"""Static access method.""""""
        if Connection.__instance is None:
            Connection()
        return Connection.__instance

    def __init__(self):
        """"""Virtually private constructor.""""""
        if Connection.__instance is not None:
            raise Exception('This class is a singleton!')
        from binhoHostAdapter import binhoHostAdapter
        from binhoHostAdapter import binhoUtilities
        devices = binhoUtilities.listAvailableDevices()
        if len(devices) > 0:
            Connection.__instance = binhoHostAdapter.binhoHostAdapter(devices[0])
        else:
            raise RuntimeError('No Binho Nova found!')","class Connection:
    
    @staticmethod
    def getInstance():
        
        pass
    def __init__(self):
        
        pass",snippet_111,3,"```python
class Connection:
    _instance = None
    
    @staticmethod
    def getInstance():
        if Connection._instance is None:
            Connection._instance = Connection()
        return Connection._instance
    
    def __init__(self):
        if Connection._instance is not None:
            raise Exception(""This class is a singleton!"")
        else:
            Connection._instance = self
            # Add any other initialization code here
```"
177578,ottogroup/palladium,ottogroup_palladium/palladium/persistence.py,palladium.persistence.FileLikeIO,"from abc import abstractmethod

class FileLikeIO:
    """"""Used by :class:`FileLike` to access low level file handle
    operations.
    """"""

    @abstractmethod
    def open(self, path, mode='r'):
        """"""Return a file handle

        For normal files, the implementation is:

        ```python
        return open(path, mode)
        ```
        """"""

    @abstractmethod
    def exists(self, path):
        """"""Test whether a path exists

        For normal files, the implementation is:

        ```python
        return os.path.exists(path)
        ```
        """"""

    @abstractmethod
    def remove(self, path):
        """"""Remove a file

        For normal files, the implementation is:

        ```python
        os.remove(path)
        ```
        """"""","
class FileLikeIO:
    
    @abstractmethod
    def open(self, path, mode='r'):
        
        pass
    @abstractmethod
    def exists(self, path):
        
        pass
    @abstractmethod
    def remove(self, path):
        
        pass",snippet_113,4,"```python
from abc import ABC, abstractmethod

class FileLikeIO(ABC):
    
    @abstractmethod
    def open(self, path, mode='r'):
        pass
    
    @abstractmethod
    def exists(self, path):
        pass
    
    @abstractmethod
    def remove(self, path):
        pass


class LocalFileIO(FileLikeIO):
    def open(self, path, mode='r'):
        return open(path, mode)

    def exists(self, path):
        import os
        return os.path.exists(path)

    def remove(self, path):
        import os
        os.remove(path)


class InMemoryFileIO(FileLikeIO):
    def __init__(self):
        self.files = {}

    def open(self, path, mode='r'):
        if mode == 'r':
            if path not in self.files:
                raise FileNotFoundError(f""File {path} not found"")
            return self._open_for_read(path)
        elif mode == 'w':
            return self._open_for_write(path)
        else:
            raise ValueError(""Unsupported mode"")

    def _open_for_read(self, path):
        return InMemoryFileReader(self.files[path])

    def _open_for_write(self, path):
        return InMemoryFileWriter(self, path)

    def exists(self, path):
        return path in self.files

    def remove(self, path):
        if path in self.files:
            del self.files[path]
        else:
            raise FileNotFoundError(f""File {path} not found"")


class InMemoryFileReader:
    def __init__(self, content):
        self.content = content
        self.position = 0

    def read(self, size=None):
        if size is None:
            data = self.content[self.position:]
            self.position = len(self.content)
        else:
            data = self.content[self.position:self.position + size]
            self.position += size
        return data

    def close(self):
        pass


class InMemoryFileWriter:
    def __init__(self, file_io, path):
        self.file_io = file_io
        self.path = path
        self.content = ''

    def write(self, data):
        self.content += data

    def close(self):
        self.file_io.files[self.path] = self.content


# Example usage
if __name__ == ""__main__"":
    local_io = LocalFileIO()
    with local_io.open('test.txt', 'w') as f:
        f.write('Hello, world!')
    print(local_io.exists('test.txt'))  # True
    local_io.remove('test.txt')
    print(local_io.exists('test.txt'))  # False

    in_memory_io = InMemoryFileIO()
    with in_memory_io.open('test.txt', 'w') as f:
        f.write('Hello, world!')
    print(in_memory_io.exists('test.txt'))  # True
    with in_memory_io.open('test.txt', 'r') as f:
        print(f.read())  # Hello, world!
    in_memory_io.remove('test.txt')
    print(in_memory_io.exists('test.txt'))  # False
```"
179419,python-constraint/python-constraint,python-constraint_python-constraint/constraint/domain.py,constraint.domain.Variable,"class Variable:
    """"""Helper class for variable definition.

    Using this class is optional, since any hashable object,
    including plain strings and integers, may be used as variables.
    """"""

    def __init__(self, name):
        """"""Initialization method.

        Args:
            name (string): Generic variable name for problem-specific
                purposes
        """"""
        self.name = name

    def __repr__(self):
        """"""Represents itself with the name attribute.""""""
        return self.name","class Variable:
    
    def __init__(self, name):
        
        pass
    def __repr__(self):
        
        pass",snippet_115,3,"```python
class Variable:
    
    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return f""Variable('{self.name}')""
```"
179425,python-constraint/python-constraint,python-constraint_python-constraint/constraint/solvers.py,constraint.solvers.Solver,"class Solver:
    """"""Abstract base class for solvers.""""""
    requires_pickling = False

    def getSolution(self, domains: dict, constraints: list[tuple], vconstraints: dict):
        """"""Return one solution for the given problem.

        Args:
            domains (dict): Dictionary mapping variables to their domains
            constraints (list): List of pairs of (constraint, variables)
            vconstraints (dict): Dictionary mapping variables to a list
                of constraints affecting the given variables.
        """"""
        msg = f'{self.__class__.__name__} is an abstract class'
        raise NotImplementedError(msg)

    def getSolutions(self, domains: dict, constraints: list[tuple], vconstraints: dict):
        """"""Return all solutions for the given problem.

        Args:
            domains (dict): Dictionary mapping variables to domains
            constraints (list): List of pairs of (constraint, variables)
            vconstraints (dict): Dictionary mapping variables to a list
                of constraints affecting the given variables.
        """"""
        msg = f'{self.__class__.__name__} provides only a single solution'
        raise NotImplementedError(msg)

    def getSolutionIter(self, domains: dict, constraints: list[tuple], vconstraints: dict):
        """"""Return an iterator for the solutions of the given problem.

        Args:
            domains (dict): Dictionary mapping variables to domains
            constraints (list): List of pairs of (constraint, variables)
            vconstraints (dict): Dictionary mapping variables to a list
                of constraints affecting the given variables.
        """"""
        msg = f""{self.__class__.__name__} doesn't provide iteration""
        raise NotImplementedError(msg)","class Solver:
    
    def getSolution(self, domains: dict, constraints: list[tuple], vconstraints: dict):
        
        pass
    def getSolutions(self, domains: dict, constraints: list[tuple], vconstraints: dict):
        
        pass
    def getSolutionIter(self, domains: dict, constraints: list[tuple], vconstraints: dict):
        
        pass",snippet_116,4,"```python
from typing import Dict, List, Tuple, Iterator

class Solver:
    
    def getSolution(self, domains: Dict, constraints: List[Tuple], vconstraints: Dict) -> Dict:
        """"""Get the first solution that satisfies the given constraints.""""""
        solutions = self.getSolutions(domains, constraints, vconstraints)
        return next(iter(solutions), None)

    def getSolutions(self, domains: Dict, constraints: List[Tuple], vconstraints: Dict) -> List[Dict]:
        """"""Get all solutions that satisfy the given constraints.""""""
        return list(self.getSolutionIter(domains, constraints, vconstraints))

    def getSolutionIter(self, domains: Dict, constraints: List[Tuple], vconstraints: Dict) -> Iterator[Dict]:
        """"""Get an iterator over all solutions that satisfy the given constraints.""""""
        
        # Check if the domains are empty
        if not domains:
            yield {}
            return
        
        # Get the variables and their domains
        variables = list(domains.keys())
        
        def is_valid(assignment: Dict) -> bool:
            """"""Check if the given assignment satisfies the constraints.""""""
            for constraint in constraints:
                func, vars_involved = constraint
                vars_involved_values = [assignment[var] for var in vars_involved if var in assignment]
                if len(vars_involved_values) == len(vars_involved) and not func(*vars_involved_values):
                    return False
            for var, func in vconstraints.items():
                if var in assignment and not func(assignment[var]):
                    return False
            return True
        
        def backtrack(assignment: Dict = {}) -> Iterator[Dict]:
            """"""Recursively try all possible assignments.""""""
            if len(assignment) == len(variables):
                if is_valid(assignment):
                    yield assignment
            else:
                var = next((v for v in variables if v not in assignment), None)
                for value in domains[var]:
                    new_assignment = assignment.copy()
                    new_assignment[var] = value
                    yield from backtrack(new_assignment)
        
        yield from backtrack()
```"
179445,maroba/findiff,findiff/pde.py,findiff.pde.PDE,"import numpy as np
from scipy.sparse.linalg import spsolve
import scipy.sparse as sparse

class PDE:
    """"""
    Representation of a partial differential equation.
    """"""

    def __init__(self, lhs, rhs, bcs):
        """"""
        Initializes the PDE.

        You need to specify the left hand side (lhs) in terms of derivatives
        as well as the right hand side in terms of an array.

        Parameters
        ----------
        lhs: FinDiff object or combination of FinDiff objects
            the left hand side of the PDE
        rhs: numpy.ndarray
            the right hand side of the PDE
        bcs: BoundaryConditions
            the boundary conditions for the PDE

        """"""
        self.lhs = lhs
        self.rhs = rhs
        self.bcs = bcs
        self._L = None

    def solve(self):
        """"""
        Solves the PDE.

        Returns
        -------
        out: numpy.ndarray
            Array with the solution of the PDE.
        """"""
        shape = self.bcs.shape
        if self._L is None:
            self._L = self.lhs.matrix(shape)
        L = sparse.lil_matrix(self._L)
        f = self.rhs.reshape(-1, 1)
        nz = list(self.bcs.row_inds())
        L[nz, :] = self.bcs.lhs[nz, :]
        f[nz] = np.array(self.bcs.rhs[nz].toarray()).reshape(-1, 1)
        L = sparse.csr_matrix(L)
        return spsolve(L, f).reshape(shape)","
class PDE:
    
    def __init__(self, lhs, rhs, bcs):
        
        pass
    def solve(self):
        
        pass",snippet_117,3,"```python
import numpy as np
from scipy.linalg import solve_banded

class PDE:
    
    def __init__(self, lhs, rhs, bcs):
        """"""
        Initialize the PDE solver.

        Parameters:
        lhs (function): Left-hand side of the PDE, returns the coefficients of the finite difference equation.
        rhs (function): Right-hand side of the PDE, returns the value of the RHS at a given point.
        bcs (tuple): Boundary conditions, (left_bc, right_bc).
        """"""
        self.lhs = lhs
        self.rhs = rhs
        self.bcs = bcs

    def solve(self, N=100, L=1.0):
        """"""
        Solve the PDE using finite differences.

        Parameters:
        N (int): Number of grid points.
        L (float): Length of the domain.

        Returns:
        x (numpy array): Grid points.
        u (numpy array): Solution at the grid points.
        """"""
        x = np.linspace(0, L, N)
        h = x[1] - x[0]

        # Create the banded matrix for the LHS
        A = np.zeros((3, N))
        for i in range(N):
            A[:, i] = self.lhs(x[i], h)

        # Apply boundary conditions to the matrix
        A[1, 0] = 1
        A[0, 1] = 0
        A[2, 0] = 0
        A[1, -1] = 1
        A[0, -1] = 0
        A[2, -2] = 0

        # Create the RHS vector
        b = np.zeros(N)
        for i in range(N):
            b[i] = self.rhs(x[i])
        b[0] = self.bcs[0]
        b[-1] = self.bcs[1]

        # Solve the system
        u = solve_banded((1, 1), A, b)

        return x, u

# Example usage:
def lhs(x, h):
    return np.array([-1 / h**2, 2 / h**2, -1 / h**2])

def rhs(x):
    return np.sin(np.pi * x)

pde = PDE(lhs, rhs, (0, 0))
x, u = pde.solve(N=100, L=1.0)

import matplotlib.pyplot as plt
plt.plot(x, u)
plt.show()
```"
186773,sphinx-gallery/sphinx-gallery,sphinx_gallery/_dummy/__init__.py,sphinx_gallery._dummy.DummyClass,"class DummyClass:
    """"""Dummy class for testing method resolution.""""""

    def run(self):
        """"""Do nothing.""""""
        pass

    @property
    def prop(self):
        """"""Property.""""""
        return 'Property'","class DummyClass:
    
    def run(self):
        
        pass
    @property
    def prop(self):
        
        pass",snippet_119,3,"```python
class DummyClass:
    
    def __init__(self, value):
        self._value = value
        self._result = None

    def run(self):
        self._result = self._value * 2

    @property
    def prop(self):
        return self._result


# Example usage:
if __name__ == ""__main__"":
    dummy = DummyClass(10)
    print(dummy.prop)  # Output: None
    dummy.run()
    print(dummy.prop)  # Output: 20
```"
186774,sphinx-gallery/sphinx-gallery,sphinx_gallery/_dummy/nested.py,sphinx_gallery._dummy.nested.NestedDummyClass,"class NestedDummyClass:
    """"""Nested dummy class for testing method resolution.""""""

    def run(self):
        """"""Do nothing.""""""
        pass

    @property
    def prop(self):
        """"""Property.""""""
        return 'Property'","class NestedDummyClass:
    
    def run(self):
        
        pass
    @property
    def prop(self):
        
        pass",snippet_120,3,"```python
class NestedDummyClass:
    
    def __init__(self):
        self._prop = None

    def run(self):
        self._prop = ""Property Value""
        print(""Running NestedDummyClass"")

    @property
    def prop(self):
        return self._prop
```"
190420,JamesPHoughton/pysd,JamesPHoughton_pysd/pysd/py_backend/external.py,pysd.py_backend.external.Excels,"import numpy as np
from openpyxl import load_workbook
import pandas as pd

class Excels:
    """"""
    Class to save the read Excel files and thus avoid double reading
    """"""
    _Excels, _Excels_opyxl = ({}, {})

    @classmethod
    def read(cls, file_name, tab):
        """"""
        Read the Excel file or return the previously read one
        """"""
        if file_name.joinpath(tab) in cls._Excels:
            return cls._Excels[file_name.joinpath(tab)]
        else:
            read_kwargs = {}
            ext = file_name.suffix.lower()
            if ext in _SPREADSHEET_EXTS:
                read_func = pd.read_excel
                read_kwargs['sheet_name'] = tab
            elif ext == '.csv':
                read_func = pd.read_csv
                if tab and (not tab[0].isalnum()):
                    read_kwargs['sep'] = tab
            else:
                read_func = pd.read_table
                if tab and (not tab[0].isalnum()):
                    read_kwargs['sep'] = tab
            excel = np.array([pd.to_numeric(ex, errors='coerce') for ex in read_func(file_name, header=None, **read_kwargs).values])
            cls._Excels[file_name.joinpath(tab)] = excel
            return excel

    @classmethod
    def read_opyxl(cls, file_name):
        """"""
        Read the Excel file using OpenPyXL or return the previously read one
        """"""
        if file_name in cls._Excels_opyxl:
            return cls._Excels_opyxl[file_name]
        else:
            excel = load_workbook(file_name, read_only=True, data_only=True)
            cls._Excels_opyxl[file_name] = excel
            return excel

    @classmethod
    def clean(cls):
        """"""
        Clean the dictionary of read files
        """"""
        for file in cls._Excels_opyxl.values():
            file.close()
        cls._Excels, cls._Excels_opyxl = ({}, {})","
class Excels:
    
    @classmethod
    def read(cls, file_name, tab):
        
        pass
    @classmethod
    def read_opyxl(cls, file_name):
        
        pass
    @classmethod
    def clean(cls):
        
        pass",snippet_121,4,"```python
import pandas as pd
from openpyxl import load_workbook

class Excels:
    _data = {}

    @classmethod
    def read(cls, file_name, tab):
        """"""Read Excel file into a pandas DataFrame""""""
        try:
            cls._data[tab] = pd.read_excel(file_name, sheet_name=tab)
            return cls._data[tab]
        except Exception as e:
            print(f""Error reading file: {e}"")
            return None

    @classmethod
    def read_opyxl(cls, file_name):
        """"""Read Excel file using openpyxl""""""
        try:
            wb = load_workbook(filename=file_name)
            cls._data = {sheet.title: sheet for sheet in wb.worksheets}
            return cls._data
        except Exception as e:
            print(f""Error reading file: {e}"")
            return None

    @classmethod
    def clean(cls):
        """"""Clear stored data""""""
        cls._data = {}
```"
222265,box/flaky,box_flaky/flaky/multiprocess_string_io.py,flaky.multiprocess_string_io.MultiprocessingStringIO,"import multiprocessing

class MultiprocessingStringIO:
    """"""
    Provide a StringIO-like interface to the multiprocessing ListProxy. The
    multiprocessing ListProxy needs to be instantiated before the flaky plugin
    is configured, so the list is created as a class variable.
    """"""
    _manager = multiprocessing.Manager()
    proxy = _manager.list()

    def getvalue(self):
        """"""
        Shadow the StringIO.getvalue method.
        """"""
        return ''.join((i for i in self.proxy))

    def writelines(self, content_list):
        """"""
        Shadow the StringIO.writelines method. Ingests a list and
        translates that to a string
        """"""
        for item in content_list:
            self.write(item)

    def write(self, content):
        """"""
        Shadow the StringIO.write method.
        """"""
        content.strip('\n')
        self.proxy.append(content)","
class MultiprocessingStringIO:
    
    def getvalue(self):
        
        pass
    def writelines(self, content_list):
        
        pass

    def writelines(self, content_list):
        
        pass",snippet_123,4,"```python
import multiprocessing
from io import StringIO

class MultiprocessingStringIO:
    def __init__(self):
        self.manager = multiprocessing.Manager()
        self.queue = self.manager.Queue()
        self.buffer = StringIO()

    def getvalue(self):
        while not self.queue.empty():
            self.buffer.write(self.queue.get())
        return self.buffer.getvalue()

    def write(self, content):
        self.queue.put(content)

    def writelines(self, content_list):
        for content in content_list:
            self.write(content)
```"
222348,joshspeagle/dynesty,joshspeagle_dynesty/py/dynesty/utils.py,dynesty.utils.DelayTimer,"import time

class DelayTimer:
    """""" Utility class that allows us to detect a certain
    time has passed""""""

    def __init__(self, delay):
        """""" Initialise the time with delay of dt seconds

        Parameters
        ----------

        delay: float
            The number of seconds in the timer
        """"""
        self.delay = delay
        self.last_time = time.time()

    def is_time(self):
        """"""
        Returns true if more than self.dt seconds has passed
        since the initialization or last call of successful is_time()

        Returns
        -------
        ret: bool
             True if specified amout of time has passed since the
             initialization or last successful is_time() call
        """"""
        curt = time.time()
        if curt - self.last_time > self.delay:
            self.last_time = curt
            return True
        return False","
class DelayTimer:
    
    def __init__(self, delay):
        
        pass
    def is_time(self):
        
        pass",snippet_124,3,"```python
import time

class DelayTimer:
    
    def __init__(self, delay):
        self.delay = delay
        self.start_time = time.time()
        
    def is_time(self):
        return time.time() - self.start_time >= self.delay

# Example usage:
def main():
    timer = DelayTimer(5)  # Create a timer with a 5-second delay
    while True:
        if timer.is_time():
            print(""Time's up!"")
            break
        print(""Waiting..."", end='\r')
        time.sleep(1)

if __name__ == ""__main__"":
    main()
```"
223977,jilljenn/tryalgo,jilljenn_tryalgo/tryalgo/fenwick.py,tryalgo.fenwick.FenwickMin,"class FenwickMin:
    """"""maintains a tree to allow quick updates and queries
    of a virtual table t
    """"""

    def __init__(self, size):
        """"""stores a table t and allows updates and queries
        of prefix sums in logarithmic time.

        :param size: length of the table
        """"""
        self.s = [float('+inf')] * (size + 1)

    def prefixMin(self, a):
        """"""
        :param int a: index in t, negative a will return infinity
        :returns: min(t[0], ... ,t[a])
        """"""
        i = a + 1
        retval = float('+inf')
        while i > 0:
            retval = min(retval, self.s[i])
            i -= i & -i
        return retval

    def update(self, a, val):
        """"""
        :param int a: index in t
        :param val: a value
        :modifies: sets t[a] to the minimum of t[a] and val
        """"""
        i = a + 1
        while i < len(self.s):
            self.s[i] = min(self.s[i], val)
            i += i & -i","class FenwickMin:
    
    def __init__(self, size):
        
        pass
    def prefixMin(self, a):
        
        pass
    def update(self, a, val):
        
        pass",snippet_125,4,"```python
class FenwickMin:
    
    def __init__(self, size):
        self.size = size
        self.tree = [float('inf')] * (size + 1)

    def prefixMin(self, a):
        min_val = float('inf')
        while a > 0:
            min_val = min(min_val, self.tree[a])
            a -= a & -a
        return min_val

    def update(self, a, val):
        while a <= self.size:
            self.tree[a] = min(self.tree[a], val)
            a += a & -a
```"
223981,jilljenn/tryalgo,jilljenn_tryalgo/tryalgo/lowest_common_ancestor.py,tryalgo.lowest_common_ancestor.LowestCommonAncestorRMQ,"from tryalgo.range_minimum_query import RangeMinQuery

class LowestCommonAncestorRMQ:
    """"""Lowest common ancestor data structure using a reduction to
       range minimum query
    """"""

    def __init__(self, graph):
        """"""builds the structure from a given tree

        :param graph: adjacency matrix of a tree
        :complexity: O(n log n), with n = len(graph)
        """"""
        n = len(graph)
        dfs_trace = []
        self.last = [None] * n
        to_visit = [(0, 0, None)]
        succ = [0] * n
        while to_visit:
            level, node, father = to_visit[-1]
            self.last[node] = len(dfs_trace)
            dfs_trace.append((level, node))
            if succ[node] < len(graph[node]) and graph[node][succ[node]] == father:
                succ[node] += 1
            if succ[node] == len(graph[node]):
                to_visit.pop()
            else:
                neighbor = graph[node][succ[node]]
                succ[node] += 1
                to_visit.append((level + 1, neighbor, node))
        self.rmq = RangeMinQuery(dfs_trace, (float('inf'), None))

    def query(self, u, v):
        """""":returns: the lowest common ancestor of u and v
        :complexity: O(log n)
        """"""
        lu = self.last[u]
        lv = self.last[v]
        if lu > lv:
            lu, lv = (lv, lu)
        return self.rmq.range_min(lu, lv + 1)[1]","
class LowestCommonAncestorRMQ:
    
    def __init__(self, graph):
        '''builds the structure from a given tree
        :param graph: adjacency matrix of a tree
        :complexity: O(n log n), with n = len(graph)
        '''
        pass

    def query(self, u, v):
        
        pass",snippet_126,3,"```python
import math

class LowestCommonAncestorRMQ:
    
    def __init__(self, graph):
        '''builds the structure from a given tree
        :param graph: adjacency matrix of a tree
        :complexity: O(n log n), with n = len(graph)
        '''
        self.n = len(graph)
        self.graph = graph
        self.parent = [-1] * self.n
        self.first_visit = [-1] * self.n
        self.euler_tour = []
        self.depth = []
        self.log_n = int(math.log2(self.n)) + 1
        self.rmq = [[float('inf')] * (2 * self.n) for _ in range(self.log_n)]
        
        self.dfs(0, 0)
        for i in range(len(self.euler_tour)):
            self.rmq[0][i] = self.euler_tour[i]
        for k in range(1, self.log_n):
            for i in range(len(self.euler_tour) - (1 << k) + 1):
                self.rmq[k][i] = min(self.rmq[k - 1][i], self.rmq[k - 1][i + (1 << (k - 1))])

    def dfs(self, node, depth):
        self.first_visit[node] = len(self.euler_tour)
        self.euler_tour.append(node)
        self.depth.append(depth)
        for neighbor, edge in enumerate(self.graph[node]):
            if edge == 1 and neighbor != self.parent[node]:
                self.parent[neighbor] = node
                self.dfs(neighbor, depth + 1)
                self.euler_tour.append(node)
                self.depth.append(depth)

    def query(self, u, v):
        '''returns the lowest common ancestor of nodes u and v
        :complexity: O(log n), with n = len(graph)
        '''
        u_first_visit = self.first_visit[u]
        v_first_visit = self.first_visit[v]
        if u_first_visit > v_first_visit:
            u_first_visit, v_first_visit = v_first_visit, u_first_visit
        k = int(math.log2(v_first_visit - u_first_visit + 1))
        lca = min(self.rmq[k][u_first_visit], self.rmq[k][v_first_visit - (1 << k) + 1])
        return lca
```"
223982,jilljenn/tryalgo,jilljenn_tryalgo/tryalgo/lowest_common_ancestor.py,tryalgo.lowest_common_ancestor.LowestCommonAncestorShortcuts,"class LowestCommonAncestorShortcuts:
    """"""Lowest common ancestor data structure using shortcuts to ancestors
    """"""

    def __init__(self, prec):
        """"""builds the structure from a given tree

        :param prec: father for every node, with prec[0] = 0
        :assumes: prec[node] < node
        :complexity: O(n log n), with n = len(nodes)
        """"""
        n = len(prec)
        self.level = [None] * n
        self.level[0] = 0
        for u in range(1, n):
            self.level[u] = 1 + self.level[prec[u]]
        depth = log2ceil(max((self.level[u] for u in range(n)))) + 1
        self.anc = [[0] * n for _ in range(depth)]
        for u in range(n):
            self.anc[0][u] = prec[u]
        for k in range(1, depth):
            for u in range(n):
                self.anc[k][u] = self.anc[k - 1][self.anc[k - 1][u]]

    def query(self, u, v):
        """""":returns: the lowest common ancestor of u and v
        :complexity: O(log n)
        """"""
        if self.level[u] > self.level[v]:
            u, v = (v, u)
        depth = len(self.anc)
        for k in range(depth - 1, -1, -1):
            if self.level[u] <= self.level[v] - (1 << k):
                v = self.anc[k][v]
        assert self.level[u] == self.level[v]
        if u == v:
            return u
        for k in range(depth - 1, -1, -1):
            if self.anc[k][u] != self.anc[k][v]:
                u = self.anc[k][u]
                v = self.anc[k][v]
        assert self.anc[0][u] == self.anc[0][v]
        return self.anc[0][u]","class LowestCommonAncestorShortcuts:
    
    def __init__(self, prec):
        '''builds the structure from a given tree
        :param prec: father for every node, with prec[0] = 0
        :assumes: prec[node] < node
        :complexity: O(n log n), with n = len(nodes)
        '''
        pass

    def query(self, u, v):
        
        pass",snippet_127,3,"```python
class LowestCommonAncestorShortcuts:
    
    def __init__(self, prec):
        '''builds the structure from a given tree
        :param prec: father for every node, with prec[0] = 0
        :assumes: prec[node] < node
        :complexity: O(n log n), with n = len(prec)
        '''
        self.n = len(prec)
        self.ancestor = [[-1] * self.n for _ in range(20)]
        for i in range(self.n):
            self.ancestor[0][i] = prec[i]
        for k in range(1, 20):
            for i in range(self.n):
                a = self.ancestor[k - 1][i]
                if a != -1:
                    self.ancestor[k][i] = self.ancestor[k - 1][a]

    def query(self, u, v):
        '''returns the lowest common ancestor of u and v
        :complexity: O(log n), with n = number of nodes
        '''
        if u == v:
            return u
        depth_u = self.get_depth(u)
        depth_v = self.get_depth(v)
        if depth_u > depth_v:
            u, v = v, u
            depth_u, depth_v = depth_v, depth_u
        # -- now u is at most as deep as v
        # -- lift v to same depth as u
        depth_diff = depth_v - depth_u
        for k in range(depth_diff.bit_length()):
            if depth_diff & (1 << k):
                v = self.ancestor[k][v]
        if u == v:
            return u
        # -- now u and v are at the same depth
        # -- lift them together until they differ
        for k in range(19, -1, -1):
            if self.ancestor[k][u] != self.ancestor[k][v]:
                u = self.ancestor[k][u]
                v = self.ancestor[k][v]
        return self.ancestor[0][u]

    def get_depth(self, u):
        '''returns the depth of node u
        :complexity: O(log n), with n = number of nodes
        '''
        depth = 0
        for k in range(20):
            if u == -1:
                break
            depth += (1 << k) if (u & (1 << k)) else 0
            u = self.ancestor[k][u]
        return depth
```"
223988,jilljenn/tryalgo,jilljenn_tryalgo/tryalgo/partition_refinement.py,tryalgo.partition_refinement.PartitionRefinement,"class PartitionRefinement:
    """"""This data structure implements an order preserving
    partition with refinements.
    """"""

    def __init__(self, n):
        """"""Start with the partition consisting of the unique class {0,1,..,n-1}
        complexity: O(n) both in time and space
        """"""
        c = PartitionClass()
        self.classes = c
        self.items = [PartitionItem(i, c) for i in range(n)]

    def refine(self, pivot):
        """"""Split every class C in the partition into C intersection pivot
        and C setminus pivot complexity: linear in size of pivot
        """"""
        has_split = []
        for i in pivot:
            if 0 <= i < len(self.items):
                x = self.items[i]
                c = x.theclass
                if not c.split:
                    c.split = PartitionClass(c)
                    if self.classes is c:
                        self.classes = c.split
                    has_split.append(c)
                x.remove()
                x.theclass = c.split
                c.split.append(x)
        for c in has_split:
            c.split = None
            if not c.items:
                c.remove()
                del c

    def tolist(self):
        """"""produce a list representation of the partition
        """"""
        return [[x.val for x in theclass.items] for theclass in self.classes]

    def order(self):
        """"""Produce a flatten list of the partition, ordered by classes
        """"""
        return [x.val for theclass in self.classes for x in theclass.items]","class PartitionRefinement:
    
    def __init__(self, n):
        
        pass
    def refine(self, pivot):
        
        pass
    def tolist(self):
        
        pass

    def order(self):
        
        pass",snippet_128,5,"```python
class PartitionRefinement:
    
    def __init__(self, n):
        self.partition = [{i} for i in range(n)]
        self.lookup = {i: i for i in range(n)}

    def refine(self, pivot):
        new_partition = []
        pivot_set = set(pivot)
        for subset in self.partition:
            intersection = subset & pivot_set
            difference = subset - pivot_set
            if intersection and difference:
                new_partition.append(intersection)
                new_partition.append(difference)
                for elem in intersection:
                    self.lookup[elem] = len(new_partition) - 2
                for elem in difference:
                    self.lookup[elem] = len(new_partition) - 1
            else:
                new_partition.append(subset)
                for elem in subset:
                    self.lookup[elem] = len(new_partition) - 1
        self.partition = new_partition

    def tolist(self):
        result = [-1] * len(self.lookup)
        for i, subset in enumerate(self.partition):
            for elem in subset:
                result[elem] = i
        return result

    def order(self):
        return sorted(range(len(self.lookup)), key=lambda x: self.lookup[x])
```"
224105,rigetti/grove,rigetti_grove/grove/alpha/fermion_transforms/fenwick_tree.py,grove.alpha.fermion_transforms.fenwick_tree.FenwickNode,"class FenwickNode:
    """"""Fenwick Tree node.""""""
    parent = None
    children = None
    index = None

    def __init__(self, parent, children, index=None):
        """"""Fenwick Tree node. Single parent and multiple children.

        :param FenwickNode parent: a parent node
        :param list(FenwickNode) children: a list of children nodes
        :param int index: node label
        """"""
        self.children = children
        self.parent = parent
        self.index = index

    def get_ancestors(self):
        """"""Returns a list of ancestors of the node. Ordered from the earliest.

        :return: node's ancestors, ordered from most recent
        :rtype: list(FenwickNode)
        """"""
        node = self
        ancestor_list = []
        while node.parent is not None:
            ancestor_list.append(node.parent)
            node = node.parent
        return ancestor_list","class FenwickNode:
    
    def __init__(self, parent, children, index=None):
        
        pass
    def get_ancestors(self):
        
        pass",snippet_129,3,"```python
class FenwickNode:
    
    def __init__(self, parent=None, children=None, index=None):
        self.parent = parent
        self.children = children if children is not None else []
        self.index = index

    def get_ancestors(self):
        ancestors = []
        current = self
        while current.parent is not None:
            ancestors.append(current.parent)
            current = current.parent
        return ancestors
```"
227838,econ-ark/HARK,HARK/utilities.py,HARK.utilities.NullFunc,"import numpy as np

class NullFunc:
    """"""
    A trivial class that acts as a placeholder ""do nothing"" function.
    """"""

    def __call__(self, *args):
        """"""
        Returns meaningless output no matter what the input(s) is.  If no input,
        returns None.  Otherwise, returns an array of NaNs (or a single NaN) of
        the same size as the first input.
        """"""
        if len(args) == 0:
            return None
        else:
            arg = args[0]
            if hasattr(arg, 'shape'):
                return np.zeros_like(arg) + np.nan
            else:
                return np.nan

    def distance(self, other):
        """"""
        Trivial distance metric that only cares whether the other object is also
        an instance of NullFunc.  Intentionally does not inherit from HARKobject
        as this might create dependency problems.

        Parameters
        ----------
        other : any
            Any object for comparison to this instance of NullFunc.

        Returns
        -------
        (unnamed) : float
            The distance between self and other.  Returns 0 if other is also a
            NullFunc; otherwise returns an arbitrary high number.
        """"""
        try:
            if other.__class__ is self.__class__:
                return 0.0
            else:
                return 1000.0
        except:
            return 10000.0","
class NullFunc:
    
    def __call__(self, *args):
        
        pass
    def distance(self, other):
        
        pass",snippet_131,3,"```python
class NullFunc:
    
    def __call__(self, *args):
        return self
    
    def distance(self, other):
        return float('inf')
```"
228145,jcrobak/parquet-python,jcrobak_parquet-python/parquet/__init__.py,parquet.JsonWriter,"import json

class JsonWriter:
    """"""Utility for dumping rows as JSON objects.""""""

    def __init__(self, out):
        """"""Initialize with output destination.""""""
        self._out = out

    def writerow(self, row):
        """"""Write a single row.""""""
        json_text = json.dumps(row)
        if isinstance(json_text, bytes):
            json_text = json_text.decode('utf-8')
        self._out.write(json_text)
        self._out.write(u'\n')","
class JsonWriter:
    
    def __init__(self, out):
        
        pass
    def writerow(self, row):
        
        pass",snippet_132,3,"```python
import json

class JsonWriter:
    
    def __init__(self, out):
        self.out = out
        self.first_row = True

    def writerow(self, row):
        if self.first_row:
            self.out.write('[\n')
            self.first_row = False
        else:
            self.out.write(',\n')
        json.dump(row, self.out)
```"
228682,common-workflow-language/cwltool,common-workflow-language_cwltool/cwltool/software_requirements.py,cwltool.software_requirements.DependenciesConfiguration,"import os
from typing import TYPE_CHECKING, Any, Optional, Union, cast
import argparse

class DependenciesConfiguration:
    """"""Dependency configuration class, for RuntimeContext.job_script_provider.""""""

    def __init__(self, args: argparse.Namespace) -> None:
        """"""Initialize.""""""
        self.tool_dependency_dir: Optional[str] = None
        self.dependency_resolvers_config_file: Optional[str] = None
        conf_file = getattr(args, 'beta_dependency_resolvers_configuration', None)
        tool_dependency_dir = getattr(args, 'beta_dependencies_directory', None)
        conda_dependencies = getattr(args, 'beta_conda_dependencies', None)
        if conf_file is not None and os.path.exists(conf_file):
            self.use_tool_dependencies = True
            if tool_dependency_dir is None:
                tool_dependency_dir = os.path.abspath(os.path.dirname(conf_file))
            self.tool_dependency_dir = tool_dependency_dir
            self.dependency_resolvers_config_file = os.path.abspath(conf_file)
        elif conda_dependencies is not None:
            if tool_dependency_dir is None:
                tool_dependency_dir = os.path.abspath('./cwltool_deps')
            self.tool_dependency_dir = tool_dependency_dir
            self.use_tool_dependencies = True
            self.dependency_resolvers_config_file = None
        else:
            self.use_tool_dependencies = False
        if self.tool_dependency_dir and (not os.path.exists(self.tool_dependency_dir)):
            os.makedirs(self.tool_dependency_dir)

    def build_job_script(self, builder: 'Builder', command: list[str]) -> str:
        """"""Use the galaxy-tool-util library to construct a build script.""""""
        ensure_galaxy_lib_available()
        resolution_config_dict = {'use': self.use_tool_dependencies, 'default_base_path': self.tool_dependency_dir}
        app_config = {'conda_auto_install': True, 'conda_auto_init': True, 'debug': builder.debug}
        tool_dependency_manager: 'deps.DependencyManager' = deps.build_dependency_manager(app_config_dict=app_config, resolution_config_dict=resolution_config_dict, conf_file=self.dependency_resolvers_config_file)
        handle_dependencies: str = ''
        if (dependencies := get_dependencies(builder)):
            handle_dependencies = '\n'.join(tool_dependency_manager.dependency_shell_commands(dependencies, job_directory=builder.tmpdir))
        template_kwds: dict[str, str] = dict(handle_dependencies=handle_dependencies)
        job_script = COMMAND_WITH_DEPENDENCIES_TEMPLATE.substitute(template_kwds)
        return job_script","
class DependenciesConfiguration:
    
    def __init__(self, args: argparse.Namespace) -> None:
        
        pass
    def build_job_script(self, builder: 'Builder', command: list[str]) -> str:
        
        pass",snippet_133,3,"```python
import argparse
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from builder import Builder

class DependenciesConfiguration:
    
    def __init__(self, args: argparse.Namespace) -> None:
        self.args = args

    def build_job_script(self, builder: 'Builder', command: list[str]) -> str:
        script = ""#!/bin/bash\n""
        script += builder.get_dependencies_installation_script() + ""\n""
        script += "" "".join(command)
        return script
```"
229565,sourceperl/pyModbusTCP,sourceperl_pyModbusTCP/examples/client_serial_gw.py,client_serial_gw.Serial2ModbusClient,"from pyModbusTCP.constants import EXP_GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND
import struct

class Serial2ModbusClient:
    """""" Customize a slave serial worker for map a modbus TCP client. """"""

    def __init__(self, serial_w, mbus_cli, slave_addr=1, allow_bcast=False):
        """"""Serial2ModbusClient constructor.

        :param serial_w: a SlaveSerialWorker instance
        :type serial_w: SlaveSerialWorker
        :param mbus_cli: a ModbusClient instance
        :type mbus_cli: ModbusClient
        :param slave_addr: modbus slave address
        :type slave_addr: int
        :param allow_bcast: allow processing broadcast frames (slave @0)
        :type allow_bcast: bool
        """"""
        self.serial_w = serial_w
        self.mbus_cli = mbus_cli
        self.slave_addr = slave_addr
        self.allow_bcast = allow_bcast
        self.serial_w.handle_request = self._handle_request

    def _handle_request(self):
        """"""Request handler for SlaveSerialWorker""""""
        if self.serial_w.request.slave_addr == 0 and self.allow_bcast:
            self.mbus_cli.custom_request(self.serial_w.request.pdu)
        elif self.serial_w.request.slave_addr == self.slave_addr:
            resp_pdu = self.mbus_cli.custom_request(self.serial_w.request.pdu)
            if resp_pdu:
                self.serial_w.response.build(raw_pdu=resp_pdu, slave_addr=self.serial_w.request.slave_addr)
            else:
                exp_pdu = struct.pack('BB', self.serial_w.request.function_code + 128, EXP_GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND)
                self.serial_w.response.build(raw_pdu=exp_pdu, slave_addr=self.serial_w.request.slave_addr)

    def run(self):
        """"""Start serial processing.""""""
        self.serial_w.run()","
class Serial2ModbusClient:
    
    def __init__(self, serial_w, mbus_cli, slave_addr=1, allow_bcast=False):
        
        pass
    def _handle_request(self):
        
        pass

    def run(self):
        
        pass",snippet_134,4,"```python
import serial
from pymodbus.client import ModbusSerialClient as ModbusClient
from pymodbus.transaction import ModbusRtuFramer
from pymodbus.exceptions import ModbusIOException
from pymodbus.pdu import ExceptionResponse

class Serial2ModbusClient:
    
    def __init__(self, serial_w, mbus_cli, slave_addr=1, allow_bcast=False):
        self.serial_w = serial.Serial(**serial_w)
        self.mbus_cli = ModbusClient(**mbus_cli, framer=ModbusRtuFramer)
        self.slave_addr = slave_addr
        self.allow_bcast = allow_bcast
        self.mbus_cli.connect()

    def _handle_request(self):
        request = self.serial_w.read(256)
        if len(request) > 0:
            try:
                response = self.mbus_cli.execute(request, unit=self.slave_addr)
                if isinstance(response, ModbusIOException) or isinstance(response, ExceptionResponse):
                    # Handle Modbus exception or IO exception
                    self.serial_w.write(b'\x00')  # or some other error indicator
                else:
                    self.serial_w.write(response.encode())
            except Exception as e:
                # Handle other exceptions
                self.serial_w.write(b'\x00')  # or some other error indicator

    def run(self):
        while True:
            self._handle_request()
```

To use this class, you would need to provide the necessary parameters to the `__init__` method. The `serial_w` parameter should be a dictionary containing the configuration for the serial connection (e.g., `port`, `baudrate`, `timeout`, etc.). The `mbus_cli` parameter should be a dictionary containing the configuration for the Modbus client (e.g., `port`, `baudrate`, `timeout`, etc.).

Here's an example usage:

```python
if __name__ == ""__main__"":
    serial_w_cfg = {
        'port': '/dev/ttyUSB0',
        'baudrate': 9600,
        'timeout': 1
    }
    mbus_cli_cfg = {
        'port': '/dev/ttyUSB1',
        'baudrate': 19200,
        'timeout': 1
    }
    s2mb = Serial2ModbusClient(serial_w_cfg, mbus_cli_cfg)
    s2mb.run()
```"
230113,aws/aws-xray-sdk-python,aws_aws-xray-sdk-python/aws_xray_sdk/core/models/noop_traceid.py,aws_aws-xray-sdk-python.aws_xray_sdk.core.models.noop_traceid.NoOpTraceId,"class NoOpTraceId:
    """"""
    A trace ID tracks the path of a request through your application.
    A trace collects all the segments generated by a single request.
    A trace ID is required for a segment.
    """"""
    VERSION = '1'
    DELIMITER = '-'

    def __init__(self):
        """"""
        Generate a no-op trace id.
        """"""
        self.start_time = '00000000'
        self.__number = '000000000000000000000000'

    def to_id(self):
        """"""
        Convert TraceId object to a string.
        """"""
        return '%s%s%s%s%s' % (NoOpTraceId.VERSION, NoOpTraceId.DELIMITER, self.start_time, NoOpTraceId.DELIMITER, self.__number)","class NoOpTraceId:
    
    def __init__(self):
        
        pass
    def to_id(self):
        
        pass",snippet_135,3,"```python
class NoOpTraceId:
    
    def __init__(self):
        self.id = None
        
    def to_id(self):
        return self.id
```"
230120,aws/aws-xray-sdk-python,aws_aws-xray-sdk-python/aws_xray_sdk/core/models/traceid.py,aws_aws-xray-sdk-python.aws_xray_sdk.core.models.traceid.TraceId,"import binascii
import os
import time

class TraceId:
    """"""
    A trace ID tracks the path of a request through your application.
    A trace collects all the segments generated by a single request.
    A trace ID is required for a segment.
    """"""
    VERSION = '1'
    DELIMITER = '-'

    def __init__(self):
        """"""
        Generate a random trace id.
        """"""
        self.start_time = int(time.time())
        self.__number = binascii.b2a_hex(os.urandom(12)).decode('utf-8')

    def to_id(self):
        """"""
        Convert TraceId object to a string.
        """"""
        return '%s%s%s%s%s' % (TraceId.VERSION, TraceId.DELIMITER, format(self.start_time, 'x'), TraceId.DELIMITER, self.__number)","
class TraceId:
    
    def __init__(self):
        
        pass
    def to_id(self):
        
        pass",snippet_136,3,"```python
import uuid

class TraceId:
    
    def __init__(self):
        self.id = uuid.uuid4().hex
    
    def to_id(self):
        return self.id

# Example usage:
if __name__ == ""__main__"":
    trace_id = TraceId()
    print(trace_id.to_id())
```"
230123,aws/aws-xray-sdk-python,aws_aws-xray-sdk-python/aws_xray_sdk/core/sampling/local/reservoir.py,aws_aws-xray-sdk-python.aws_xray_sdk.core.sampling.local.reservoir.Reservoir,"import time
import threading

class Reservoir:
    """"""
    Keeps track of the number of sampled segments within
    a single second. This class is implemented to be
    thread-safe to achieve accurate sampling.
    """"""

    def __init__(self, traces_per_sec=0):
        """"""
        :param int traces_per_sec: number of guranteed
            sampled segments.
        """"""
        self._lock = threading.Lock()
        self.traces_per_sec = traces_per_sec
        self.used_this_sec = 0
        self.this_sec = int(time.time())

    def take(self):
        """"""
        Returns True if there are segments left within the
        current second, otherwise return False.
        """"""
        with self._lock:
            now = int(time.time())
            if now != self.this_sec:
                self.used_this_sec = 0
                self.this_sec = now
            if self.used_this_sec >= self.traces_per_sec:
                return False
            self.used_this_sec = self.used_this_sec + 1
            return True","
class Reservoir:
    
    def __init__(self, traces_per_sec=0):
        
        pass
    def take(self):
        
        pass",snippet_137,3,"```python
import random

class Reservoir:
    
    def __init__(self, traces_per_sec=0):
        self.traces_per_sec = traces_per_sec
        self.sample_size = 0
        self.sample = []

    def take(self):
        if self.traces_per_sec == 0:
            return False
        
        self.sample_size += 1
        if len(self.sample) < self.traces_per_sec:
            self.sample.append(1)
            return True
        
        rand_idx = random.randint(0, self.sample_size - 1)
        if rand_idx < self.traces_per_sec:
            self.sample[rand_idx] = 1
            return True
        
        return False
```"
230719,django-salesforce/django-salesforce,django-salesforce_django-salesforce/salesforce/backend/indep.py,salesforce.backend.indep.LazyField,"from typing import Any, Callable, Dict, Tuple, Type
from inspect import signature

class LazyField:
    """"""A Field that can be later customized until it is binded to the final Model""""""
    counter = 0

    def __init__(self, klass: 'Type[Field[Any, Any]]') -> None:
        """"""Instantiate the field type""""""
        self.klass = klass
        self.kw = {}
        self.args = ()
        self.called = False
        self.counter = self.counter

    def __call__(self, *args: Any, **kwargs: Any) -> 'LazyField':
        """"""Instantiate a new field with options""""""
        assert not self.called
        bound_args = signature(self.klass.__init__).bind(self, *args, **kwargs)
        obj = type(self)(self.klass)
        obj.args = bound_args.args[1:]
        obj.kw = bound_args.kwargs
        setattr(type(self), 'counter', getattr(type(self), 'counter') + 1)
        return obj

    def update(self, **kwargs: Any) -> 'LazyField':
        """"""Customize the lazy field""""""
        assert not self.called
        self.kw.update(kwargs)
        return self

    def create(self) -> 'Field[Any, Any]':
        """"""Create a normal field from the lazy field""""""
        assert not self.called
        return self.klass(*self.args, **self.kw)","
class LazyField:
    
    def __init__(self, klass: 'Type[Field[Any, Any]]') -> None:
        
        pass
    def __call__(self, *args: Any, **kwargs: Any) -> 'LazyField':
        
        pass

    def update(self, **kwargs: Any) -> 'LazyField':
        
        pass

    def create(self) -> 'Field[Any, Any]':
        
        pass",snippet_139,5,"```python
from typing import Type, Any, Callable

class Field:
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        pass

class LazyField:
    def __init__(self, klass: 'Type[Field[Any, Any]]') -> None:
        self.klass = klass
        self.args: tuple[Any, ...] = ()
        self.kwargs: dict[str, Any] = {}

    def __call__(self, *args: Any, **kwargs: Any) -> 'LazyField':
        self.args = args
        self.kwargs.update(kwargs)
        return self

    def update(self, **kwargs: Any) -> 'LazyField':
        self.kwargs.update(kwargs)
        return self

    def create(self) -> 'Field[Any, Any]':
        return self.klass(*self.args, **self.kwargs)
```"
231223,weblyzard/inscriptis,benchmarking/run_benchmarking.py,run_benchmarking.AbstractHtmlConverter,"from time import time

class AbstractHtmlConverter:
    """"""
    An abstract HTML convert class.
    """"""

    def get_text(self, html):
        """"""
        Returns:
            a text representation of the given HTML snippet.
        """"""
        raise NotImplementedError

    def benchmark(self, html):
        """"""
        Benchmarks the classes HTML to text converter.

        Returns:
            A tuple of the required time and the obtained text representation.
        """"""
        start_time = time()
        for _ in range(TRIES):
            text = self.get_text(html)
        return (time() - start_time, text)","
class AbstractHtmlConverter:
    
    def get_text(self, html):
        
        pass
    def benchmark(self, html):
        
        pass",snippet_140,3,"```python
from bs4 import BeautifulSoup
import time
from abc import ABC, abstractmethod

class AbstractHtmlConverter(ABC):
    
    @abstractmethod
    def get_text(self, html):
        pass
    
    def benchmark(self, html):
        start_time = time.time()
        self.get_text(html)
        end_time = time.time()
        return end_time - start_time

class HtmlConverter(AbstractHtmlConverter):
    
    def get_text(self, html):
        soup = BeautifulSoup(html, 'html.parser')
        return soup.get_text()

# Example usage:
if __name__ == ""__main__"":
    html = ""<html><body>This is a <span>test</span> html.</body></html>""
    converter = HtmlConverter()
    print(converter.get_text(html))
    print(f""Benchmark: {converter.benchmark(html)} seconds"")
```"
236113,richardchien/python-aiocqhttp,richardchien_python-aiocqhttp/aiocqhttp/api.py,aiocqhttp.api.Api,"from typing import Callable, Any, Union, Awaitable
import functools
import abc

class Api:
    """"""
    API 接口类。

    继承此类的具体实现类应实现 `call_action` 方法。
    """"""

    @abc.abstractmethod
    def call_action(self, action: str, **params) -> Union[Awaitable[Any], Any]:
        """"""
        调用 OneBot API，`action` 为要调用的 API 动作名，`**params`
        为 API 所需参数。

        根据实现类的不同，此函数可能是异步也可能是同步函数。
        """"""
        pass

    def __getattr__(self, item: str) -> Callable[..., Union[Awaitable[Any], Any]]:
        """"""获取一个可调用对象，用于调用对应 API。""""""
        return functools.partial(self.call_action, item)","
class Api:
    
    @abc.abstractmethod
    def call_action(self, action: str, **params) -> Union[Awaitable[Any], Any]:
        
        pass
    def __getattr__(self, item: str) -> Callable[..., Union[Awaitable[Any], Any]]:
        
        pass",snippet_141,3,"```python
from abc import ABC, abstractmethod
from typing import Any, Awaitable, Callable, Union

class Api(ABC):
    
    @abstractmethod
    def call_action(self, action: str, **params) -> Union[Awaitable[Any], Any]:
        pass

    def __getattr__(self, item: str) -> Callable[..., Union[Awaitable[Any], Any]]:
        def wrapper(**kwargs):
            return self.call_action(item, **kwargs)
        return wrapper
```"
237136,project-generator/project_generator,project-generator_project_generator/project_generator/project.py,project_generator.project.ProjectTemplate,"class ProjectTemplate:
    """""" Public data which can be set in yaml files
        Yaml data available are:
            'build_dir' : build_dir,    # Build output path
            'debugger' : debugger,      # Debugger
            'export_dir': '',           # Export directory path
            'includes': [],             # include paths
            'linker_file': None,        # linker script file
            'name': name,               # project name
            'macros': [],               # macros
            'misc': {},                 # misc settings related to tools
            'output_type': output_type, # output type, default - exe
            'sources': [],              # source files/folders
            'target': '',               # target
            'template' : [],            # tool template
            'tools_supported': [],      # Tools which are supported,
    """"""

    @staticmethod
    def _get_common_data_template():
        """""" Data for tool specific """"""
        data_template = {'includes': [], 'linker_file': '', 'macros': [], 'sources': []}
        return data_template

    @staticmethod
    def _get_tool_specific_data_template():
        """""" Data for tool specific """"""
        data_template = {'misc': {}, 'template': []}
        return data_template

    @staticmethod
    def get_project_template(name='Default', output_type='exe', debugger=None, build_dir='build'):
        """""" Project data (+ data) """"""
        project_template = {'build_dir': build_dir, 'debugger': debugger, 'export_dir': '', 'name': name, 'output_type': output_type, 'target': '', 'tools_supported': []}
        project_template.update(ProjectTemplate._get_common_data_template())
        project_template.update(ProjectTemplate._get_tool_specific_data_template())
        return project_template","class ProjectTemplate:
    
    @staticmethod
    def _get_common_data_template():
        
        pass
    @staticmethod
    def _get_tool_specific_data_template():
        
        pass
    @staticmethod
    def get_project_template(name='Default', output_type='exe', debugger=None, build_dir='build'):
        
        pass",snippet_142,4,"```python
class ProjectTemplate:
    
    @staticmethod
    def _get_common_data_template():
        return {
            'name': '',
            'output_type': '',
            'debugger': None,
            'build_dir': ''
        }

    @staticmethod
    def _get_tool_specific_data_template():
        return {
            'compiler': '',
            'flags': [],
            'include_dirs': [],
            'lib_dirs': [],
            'libs': []
        }

    @staticmethod
    def get_project_template(name='Default', output_type='exe', debugger=None, build_dir='build'):
        project_template = ProjectTemplate._get_common_data_template()
        project_template.update(ProjectTemplate._get_tool_specific_data_template())
        
        project_template['name'] = name
        project_template['output_type'] = output_type
        project_template['debugger'] = debugger
        project_template['build_dir'] = build_dir
        
        return project_template
```"
237503,astropy/photutils,photutils/psf/model_plotting.py,photutils.psf.model_plotting.ModelGridPlotMixin,"from astropy.utils import minversion
import numpy as np
from astropy.visualization import simple_norm
import astropy

class ModelGridPlotMixin:
    """"""
    Mixin class to plot a grid of ePSF models.
    """"""

    def _reshape_grid(self, data):
        """"""
        Reshape the 3D ePSF grid as a 2D array of horizontally and
        vertically stacked ePSFs.

        Parameters
        ----------
        data : `numpy.ndarray`
            The 3D array of ePSF data.

        Returns
        -------
        reshaped_data : `numpy.ndarray`
            The 2D array of ePSF data.
        """"""
        nypsfs = self._ygrid.shape[0]
        nxpsfs = self._xgrid.shape[0]
        ny, nx = self.data.shape[1:]
        data.shape = (nypsfs, nxpsfs, ny, nx)
        return data.transpose([0, 2, 1, 3]).reshape(nypsfs * ny, nxpsfs * nx)

    def plot_grid(self, *, ax=None, vmax_scale=None, peak_norm=False, deltas=False, cmap='viridis', dividers=True, divider_color='darkgray', divider_ls='-', figsize=None):
        """"""
        Plot the grid of ePSF models.

        Parameters
        ----------
        ax : `matplotlib.axes.Axes` or `None`, optional
            The matplotlib axes on which to plot. If `None`, then the
            current `~matplotlib.axes.Axes` instance is used.

        vmax_scale : float, optional
            Scale factor to apply to the image stretch limits. This
            value is multiplied by the peak ePSF value to determine the
            plotting ``vmax``. The defaults are 1.0 for plotting the
            ePSF data and 0.03 for plotting the ePSF difference data
            (``deltas=True``). If ``deltas=True``, the ``vmin`` is set
            to ``-vmax``. If ``deltas=False`` the ``vmin`` is set to
            ``vmax`` / 1e4.

        peak_norm : bool, optional
            Whether to normalize the ePSF data by the peak value. The
            default shows the ePSF flux per pixel.

        deltas : bool, optional
            Set to `True` to show the differences between each ePSF
            and the average ePSF.

        cmap : str or `matplotlib.colors.Colormap`, optional
            The colormap to use. The default is 'viridis'.

        dividers : bool, optional
            Whether to show divider lines between the ePSFs.

        divider_color, divider_ls : str, optional
            Matplotlib color and linestyle options for the divider
            lines between ePSFs. These keywords have no effect unless
            ``show_dividers=True``.

        figsize : (float, float), optional
            The figure (width, height) in inches.

        Returns
        -------
        fig : `matplotlib.figure.Figure`
            The matplotlib figure object. This will be the current
            figure if ``ax=None``. Use ``fig.savefig()`` to save the
            figure to a file.

        Notes
        -----
        This method returns a figure object. If you are using this
        method in a script, you will need to call ``plt.show()`` to
        display the figure. If you are using this method in a Jupyter
        notebook, the figure will be displayed automatically.

        When in a notebook, if you do not store the return value of this
        function, the figure will be displayed twice due to the REPL
        automatically displaying the return value of the last function
        call. Alternatively, you can append a semicolon to the end of
        the function call to suppress the display of the return value.
        """"""
        import matplotlib.pyplot as plt
        from mpl_toolkits.axes_grid1 import make_axes_locatable
        data = self.data.copy()
        if deltas:
            mask = np.zeros(data.shape[0], dtype=bool)
            for i, arr in enumerate(data):
                if np.count_nonzero(arr) == 0:
                    mask[i] = True
            data -= np.mean(data[~mask], axis=0)
            data[mask] = 0.0
        data = self._reshape_grid(data)
        if ax is None:
            if figsize is None and self.meta.get('detector', '') == 'NRCSW':
                figsize = (20, 8)
            fig, ax = plt.subplots(figsize=figsize)
        else:
            fig = plt.gcf()
        if peak_norm and data.max() != 0:
            data /= data.max()
        if deltas:
            if vmax_scale is None:
                vmax_scale = 0.03
            vmax = data.max() * vmax_scale
            vmin = -vmax
            if minversion(astropy, '6.1'):
                norm = simple_norm(data, 'linear', vmin=vmin, vmax=vmax)
            else:
                norm = simple_norm(data, 'linear', min_cut=vmin, max_cut=vmax)
        else:
            if vmax_scale is None:
                vmax_scale = 1.0
            vmax = data.max() * vmax_scale
            vmin = vmax / 10000.0
            if minversion(astropy, '6.1'):
                norm = simple_norm(data, 'log', vmin=vmin, vmax=vmax, log_a=10000.0)
            else:
                norm = simple_norm(data, 'log', min_cut=vmin, max_cut=vmax, log_a=10000.0)
        nypsfs = self._ygrid.shape[0]
        nxpsfs = self._xgrid.shape[0]
        extent = [-0.5, nxpsfs - 0.5, -0.5, nypsfs - 0.5]
        axim = ax.imshow(data, extent=extent, norm=norm, cmap=cmap, origin='lower')
        xticklabels = self._xgrid.astype(int)
        yticklabels = self._ygrid.astype(int)
        if self.meta.get('detector', '') == 'NRCSW':
            xticklabels = list(xticklabels[0:5]) * 4
            yticklabels = list(yticklabels[0:5]) * 2
        ax.set_xticks(np.arange(nxpsfs))
        ax.set_xticklabels(xticklabels)
        ax.set_xlabel('ePSF location in detector X pixels')
        ax.set_yticks(np.arange(nypsfs))
        ax.set_yticklabels(yticklabels)
        ax.set_ylabel('ePSF location in detector Y pixels')
        if dividers:
            for ix in range(nxpsfs - 1):
                ax.axvline(ix + 0.5, color=divider_color, ls=divider_ls)
            for iy in range(nypsfs - 1):
                ax.axhline(iy + 0.5, color=divider_color, ls=divider_ls)
        instrument = self.meta.get('instrument', '')
        if not instrument:
            instrument = self.meta.get('instrume', '')
        detector = self.meta.get('detector', '')
        filtername = self.meta.get('filter', '')
        if isinstance(instrument, (tuple, list, np.ndarray)):
            instrument = instrument[0]
        if isinstance(detector, (tuple, list, np.ndarray)):
            detector = detector[0]
        if isinstance(filtername, (tuple, list, np.ndarray)):
            filtername = filtername[0]
        title = f'{instrument} {detector} {filtername}'
        if title != '':
            title += ' '
        if deltas:
            minus = '−'
            ax.set_title(f'{title}(ePSFs {minus} <ePSF>)')
            if peak_norm:
                label = 'Difference relative to average ePSF peak'
            else:
                label = 'Difference relative to average ePSF values'
        else:
            ax.set_title(f'{title}ePSFs')
            if peak_norm:
                label = 'Scale relative to ePSF peak pixel'
            else:
                label = 'ePSF flux per pixel'
        divider = make_axes_locatable(ax)
        cax_cbar = divider.append_axes('right', size='3%', pad='3%')
        cbar = fig.colorbar(axim, cax=cax_cbar, label=label)
        if not deltas:
            cbar.ax.set_yscale('log')
        if self.meta.get('detector', '') == 'NRCSW':
            nxpsfs = len(self._xgrid)
            nypsfs = len(self._ygrid)
            plt.axhline(nypsfs / 2 - 0.5, color='orange')
            for i in range(1, 4):
                ax.axvline(nxpsfs / 4 * i - 0.5, color='orange')
            det_labels = [['A1', 'A3', 'B4', 'B2'], ['A2', 'A4', 'B3', 'B1']]
            for i in range(2):
                for j in range(4):
                    ax.text(j * nxpsfs / 4 - 0.45, (i + 1) * nypsfs / 2 - 0.55, det_labels[i][j], color='orange', verticalalignment='top', fontsize=12)
        fig.tight_layout()
        return fig","
class ModelGridPlotMixin:
    
    def _reshape_grid(self, data):
        
        pass
    def plot_grid(self, *, ax=None, vmax_scale=None, peak_norm=False, deltas=False, cmap='viridis', dividers=True, divider_color='darkgray', divider_ls='-', figsize=None):
        
        pass",snippet_143,3,"```python
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

class ModelGridPlotMixin:
    
    def _reshape_grid(self, data):
        """"""Reshape data into a grid format.""""""
        # Assuming data is a 1D array and self.grid_shape is a tuple representing the grid dimensions
        return np.reshape(data, self.grid_shape)

    def plot_grid(self, *, ax=None, vmax_scale=None, peak_norm=False, deltas=False, cmap='viridis', dividers=True, divider_color='darkgray', divider_ls='-', figsize=None):
        """"""Plot the grid data.""""""
        if ax is None:
            fig, ax = plt.subplots(figsize=figsize)
        else:
            fig = ax.get_figure()

        grid_data = self._reshape_grid(self.data)

        if deltas:
            grid_data = grid_data - np.mean(grid_data)

        if peak_norm:
            vmax = np.max(np.abs(grid_data))
            vmin = -vmax
        else:
            vmax = np.max(grid_data)
            vmin = np.min(grid_data)

        if vmax_scale is not None:
            vmax *= vmax_scale
            vmin = -vmax if peak_norm else vmin

        im = ax.imshow(grid_data, cmap=cmap, vmin=vmin, vmax=vmax, origin='lower')

        if dividers:
            for i in range(1, self.grid_shape[0]):
                ax.axhline(i - 0.5, color=divider_color, ls=divider_ls)
            for i in range(1, self.grid_shape[1]):
                ax.axvline(i - 0.5, color=divider_color, ls=divider_ls)

        ax.set_xticks([])
        ax.set_yticks([])

        divider = make_axes_locatable(ax)
        cax = divider.append_axes(""right"", size=""5%"", pad=0.05)
        fig.colorbar(im, cax=cax)

        return fig, ax
```"
237588,matthew-brett/delocate,matthew-brett_delocate/delocate/tmpdirs.py,delocate.tmpdirs.InGivenDirectory,"import os

class InGivenDirectory:
    """"""Change directory to given directory for duration of ``with`` block.

    Useful when you want to use `InTemporaryDirectory` for the final test, but
    you are still debugging.  For example, you may want to do this in the end:

    >>> with InTemporaryDirectory() as tmpdir:
    ...     # do something complicated which might break
    ...     pass

    But indeed the complicated thing does break, and meanwhile the
    ``InTemporaryDirectory`` context manager wiped out the directory with the
    temporary files that you wanted for debugging.  So, while debugging, you
    replace with something like:

    >>> with InGivenDirectory() as tmpdir: # Use working directory by default
    ...     # do something complicated which might break
    ...     pass

    You can then look at the temporary file outputs to debug what is happening,
    fix, and finally replace ``InGivenDirectory`` with ``InTemporaryDirectory``
    again.
    """"""

    def __init__(self, path=None):
        """"""Initialize directory context manager.

        Parameters
        ----------
        path : None or str, optional
            path to change directory to, for duration of ``with`` block.
            Defaults to ``os.getcwd()`` if None
        """"""
        if path is None:
            path = os.getcwd()
        self.path = os.path.abspath(path)

    def __enter__(self):
        """"""Chdir to the managed directory, creating it if needed.""""""
        self._pwd = os.path.abspath(os.getcwd())
        if not os.path.isdir(self.path):
            os.mkdir(self.path)
        os.chdir(self.path)
        return self.path

    def __exit__(self, exc, value, tb):
        """"""Revert the working directory.""""""
        os.chdir(self._pwd)","
class InGivenDirectory:
    
    def __init__(self, path=None):
        
        pass
    def __enter__(self):
        
        pass

    def __exit__(self, exc, value, tb):
        
        pass",snippet_144,4,"```python
import os

class InGivenDirectory:
    
    def __init__(self, path=None):
        self.path = path
        self.original_path = None

    def __enter__(self):
        self.original_path = os.getcwd()
        if self.path is not None:
            os.chdir(self.path)
        return self

    def __exit__(self, exc, value, tb):
        os.chdir(self.original_path)
```"
239516,blink1073/oct2py,oct2py/dynamic.py,oct2py.dynamic._MethodDocDescriptor,"class _MethodDocDescriptor:
    """"""An object that dynamically fetches the documentation
    for an Octave user class method.
    """"""

    def __init__(self, session_weakref, class_name, name):
        """"""Initialize the descriptor.""""""
        self.ref = session_weakref
        self.class_name = class_name
        self.name = name
        self.doc = None

    def __get__(self, instance, owner=None):
        """"""Get the documentation.""""""
        if self.doc is not None:
            return self.doc
        session = self.ref()
        class_name = self.class_name
        method = self.name
        doc = session._get_doc(f'@{class_name}/{method}')
        self.doc = doc or session._get_doc(method)
        return self.doc","class _MethodDocDescriptor:
    
    def __init__(self, session_weakref, class_name, name):
        
        pass
    def __get__(self, instance, owner=None):
        
        pass",snippet_145,3,"```python
class _MethodDocDescriptor:
    
    def __init__(self, session_weakref, class_name, name):
        self.session_weakref = session_weakref
        self.class_name = class_name
        self.name = name

    def __get__(self, instance, owner=None):
        from weakref import ref
        session = self.session_weakref()
        if session is None:
            return None
        doc = session.get_method_doc(self.class_name, self.name)
        return doc
```"
244777,markokr/rarfile,markokr_rarfile/rarfile.py,rarfile.NoHashContext,"class NoHashContext:
    """"""No-op hash function.""""""

    def __init__(self, data=None):
        """"""Initialize""""""

    def update(self, data):
        """"""Update data""""""

    def digest(self):
        """"""Final hash""""""

    def hexdigest(self):
        """"""Hexadecimal digest.""""""","class NoHashContext:
    
    def __init__(self, data=None):
        
        pass
    def update(self, data):
        
        pass
    def digest(self):
        
        pass

    def hexdigest(self):
        
        pass",snippet_147,5,"```python
import hashlib

class NoHashContext:
    
    def __init__(self, data=None):
        self.md5_hash = hashlib.md5()
        if data is not None:
            self.update(data)

    def update(self, data):
        self.md5_hash.update(data)

    def digest(self):
        return self.md5_hash.digest()

    def hexdigest(self):
        return self.md5_hash.hexdigest()
```"
244940,meejah/txtorcon,meejah_txtorcon/txtorcon/addrmap.py,txtorcon.addrmap.Addr,"import datetime
from txtorcon.util import maybe_ip_addr

class Addr:
    """"""
    One address mapping (e.g. example.com -> 127.0.0.1)
    """"""

    def __init__(self, map):
        """"""
        map is an AddrMap instance, used for scheduling expiries and
        updating the map.
        """"""
        self.map = map
        self.ip = None
        self.name = None
        self.expiry = None
        self.expires = None
        self.created = None

    def update(self, *args):
        """"""
        deals with an update from Tor; see parsing logic in torcontroller
        """"""
        gmtexpires = None
        name, ip, expires = args[:3]
        for arg in args:
            if arg.lower().startswith('expires='):
                gmtexpires = arg[8:]
        if gmtexpires is None:
            if len(args) == 3:
                gmtexpires = expires
            elif args[2] == 'NEVER':
                gmtexpires = args[2]
            else:
                gmtexpires = args[3]
        self.name = name
        self.ip = maybe_ip_addr(ip)
        if self.ip == '<error>':
            self._expire()
            return
        fmt = '%Y-%m-%d %H:%M:%S'
        oldexpires = self.expires
        if gmtexpires.upper() == 'NEVER':
            self.expires = None
        else:
            self.expires = datetime.datetime.strptime(gmtexpires, fmt)
        self.created = datetime.datetime.utcnow()
        if self.expires is not None:
            if oldexpires is None:
                if self.expires <= self.created:
                    diff = datetime.timedelta(seconds=0)
                else:
                    diff = self.expires - self.created
                self.expiry = self.map.scheduler.callLater(diff.seconds, self._expire)
            else:
                diff = self.expires - oldexpires
                self.expiry.delay(diff.seconds)

    def _expire(self):
        """"""
        callback done via callLater
        """"""
        del self.map.addr[self.name]
        self.map.notify('addrmap_expired', *[self.name], **{})","
class Addr:
    
    def __init__(self, map):
        
        pass
    def update(self, *args):
        
        pass

    def _expire(self):
        
        pass",snippet_148,4,"```python
import time
from collections import OrderedDict

class Addr:
    
    def __init__(self, map):
        self.map = map
        self.cache = OrderedDict()
        self.ttl = 60  # default TTL in seconds

    def update(self, *args):
        for addr in args:
            self.cache[addr] = time.time()
            if len(self.cache) > self.map:
                self._expire()

    def _expire(self):
        current_time = time.time()
        expired_addrs = [addr for addr, timestamp in self.cache.items() if current_time - timestamp > self.ttl]
        for addr in expired_addrs:
            del self.cache[addr]
```"
245022,meejah/txtorcon,meejah_txtorcon/txtorcon/torconfig.py,txtorcon.torconfig.TorConfigType,"class TorConfigType:
    """"""
    Base class for all configuration types, which function as parsers
    and un-parsers.
    """"""

    def parse(self, s):
        """"""
        Given the string s, this should return a parsed representation
        of it.
        """"""
        return s

    def validate(self, s, instance, name):
        """"""
        If s is not a valid type for this object, an exception should
        be thrown. The validated object should be returned.
        """"""
        return s","class TorConfigType:
    
    def parse(self, s):
        
        pass
    def validate(self, s, instance, name):
        
        pass",snippet_149,3,"```python
class TorConfigType:
    """"""
    A class representing a Tor configuration type.
    """"""

    def parse(self, s):
        """"""
        Parse a string into a valid configuration value.

        Args:
            s (str): The string to be parsed.

        Returns:
            The parsed configuration value.
        """"""
        raise NotImplementedError(""Subclasses must implement the parse method"")

    def validate(self, s, instance, name):
        """"""
        Validate a configuration value.

        Args:
            s: The configuration value to be validated.
            instance: The instance that the configuration value belongs to.
            name (str): The name of the configuration attribute.

        Raises:
            ValueError: If the configuration value is invalid.
        """"""
        try:
            self.parse(s)
        except Exception as e:
            raise ValueError(f""Invalid value for {name}: {s}"") from e
```"
245057,paterva/maltego-trx,paterva_maltego-trx/maltego_trx/oauth.py,maltego_trx.oauth.MaltegoOauth,"from cryptography.hazmat.backends import default_backend
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import serialization, padding as primitives_padding
from cryptography.hazmat.primitives.asymmetric import padding as asymmetric_padding

class MaltegoOauth:
    """"""
    A Crypto Helper for Maltego OAuth Secrets received from the Transform Distribution Server
    The TDS will send back an encrypted combination of the following :
    1. Token
    2. Token Secret
    3. Refresh Token
    4. Expires In

    Contains Methods:
        1. decrypt_secrets(private_key_path=""pem file"", ciphertext=""request.getTransformSetting('name from TDS')"")
    """"""

    @staticmethod
    def _rsa_decrypt(private_key_path=None, ciphertext=None, password=None):
        """"""
        RSA Decryption function, returns decrypted plaintext in b64 encoding
        """"""
        ciphertext = base64.b64decode(ciphertext)
        with open(private_key_path, 'rb') as key_file:
            private_key = serialization.load_pem_private_key(key_file.read(), password, backend=None)
            plaintext = private_key.decrypt(ciphertext, asymmetric_padding.PKCS1v15())
        return plaintext

    @staticmethod
    def _aes_decrypt(key=None, ciphertext=None):
        """"""
        AES Decryption function, returns decrypted plaintext value
        """"""
        key = base64.b64decode(key)
        cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())
        decryptor = cipher.decryptor()
        ciphertext = base64.b64decode(ciphertext)
        padded_b64_plaintext = decryptor.update(ciphertext) + decryptor.finalize()
        unpadder = primitives_padding.PKCS7(128).unpadder()
        plaintext = (unpadder.update(padded_b64_plaintext) + unpadder.finalize()).decode('utf8')
        return plaintext

    @classmethod
    def decrypt_secrets(cls, private_key_path=None, encoded_ciphertext=None):
        """"""
        The TDS will send back an encrypted combination of the following :
        1. Token
        2. Token Secret
        3. Refresh Token
        4. Expires In

        This function decodes the combinations and decrypts as required and returns a dictionary with the following keys
                {""token"":"""",
                ""token_secret"": """",
                ""refresh_token"": """",
                ""expires_in"": """"}
        """"""
        encrypted_fields = encoded_ciphertext.split('$')
        if len(encrypted_fields) == 1:
            token = cls._rsa_decrypt(private_key_path, encrypted_fields[0])
            token_fields = {'token': token}
        elif len(encrypted_fields) == 2:
            token = cls._rsa_decrypt(private_key_path, encrypted_fields[0])
            token_secret = cls._rsa_decrypt(private_key_path, encrypted_fields[1])
            token_fields = {'token': token, 'token_secret': token_secret}
        elif len(encrypted_fields) == 3:
            aes_key = cls._rsa_decrypt(private_key_path, encrypted_fields[2])
            token = cls._aes_decrypt(aes_key, encrypted_fields[0])
            token_secret = cls._aes_decrypt(aes_key, encrypted_fields[1])
            token_fields = {'token': token, 'token_secret': token_secret}
        elif len(encrypted_fields) == 4:
            token = cls._rsa_decrypt(private_key_path, encrypted_fields[0])
            token_secret = cls._rsa_decrypt(private_key_path, encrypted_fields[1])
            refresh_token = cls._rsa_decrypt(private_key_path, encrypted_fields[2])
            expires_in = cls._rsa_decrypt(private_key_path, encrypted_fields[3])
            token_fields = {'token': token, 'token_secret': token_secret, 'refresh_token': refresh_token, 'expires_in': expires_in}
        elif len(encrypted_fields) == 5:
            aes_key = cls._rsa_decrypt(private_key_path, encrypted_fields[4])
            token = cls._aes_decrypt(aes_key, encrypted_fields[0])
            token_secret = cls._aes_decrypt(aes_key, encrypted_fields[1])
            refresh_token = cls._aes_decrypt(aes_key, encrypted_fields[2])
            expires_in = cls._aes_decrypt(aes_key, encrypted_fields[3])
            token_fields = {'token': token, 'token_secret': token_secret, 'refresh_token': refresh_token, 'expires_in': expires_in}
        else:
            token_fields = {'token': '', 'token_secret': '', 'refresh_token': '', 'expires_in': ''}
        return token_fields","
class MaltegoOauth:
    
    @staticmethod
    def _rsa_decrypt(private_key_path=None, ciphertext=None, pass
word=None):
        
        pass
    @staticmethod
    def _aes_decrypt(key=None, ciphertext=None):
        
        pass
    @classmethod
    def decrypt_secrets(cls, private_key_path=None, encoded_ciphertext=None):
        
        pass",snippet_150,4,"```python
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import base64
import os

class MaltegoOauth:
    
    @staticmethod
    def _rsa_decrypt(private_key_path=None, ciphertext=None, password=None):
        with open(private_key_path, ""rb"") as key_file:
            private_key = serialization.load_pem_private_key(
                key_file.read(),
                password=password.encode() if password else None,
                backend=default_backend()
            )
        return private_key.decrypt(
            ciphertext,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )

    @staticmethod
    def _aes_decrypt(key=None, ciphertext=None):
        iv = ciphertext[:16]
        ciphertext = ciphertext[16:]
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        decryptor = cipher.decryptor()
        return decryptor.update(ciphertext) + decryptor.finalize()

    @classmethod
    def decrypt_secrets(cls, private_key_path=None, encoded_ciphertext=None):
        ciphertext = base64.b64decode(encoded_ciphertext)
        aes_key_encrypted = cls._rsa_decrypt(private_key_path, ciphertext[:256], os.getenv('PRIVATE_KEY_PASSWORD'))
        aes_key = aes_key_encrypted[:32]
        ciphertext = ciphertext[256:]
        return cls._aes_decrypt(aes_key, ciphertext).decode('utf-8')
```"
247043,CiscoDevNet/webexteamssdk,src/webexpythonsdk/models/cards/adaptive_card_component.py,webexpythonsdk.models.cards.adaptive_card_component.AdaptiveCardComponent,"import json
import enum

class AdaptiveCardComponent:
    """"""
    Base class for all Adaptive Card elements.

    Each element should inherit from this class and specify which of its
    properties fall into the following two categories:

    * Simple properties are basic types (int, float, str, etc.).

    * Serializable properties are properties that can themselves be serialized.
      This includes lists of items (i.e. the 'body' field of the adaptive card)
      or single objects that also inherit from Serializable
    """"""

    def __init__(self, serializable_properties, simple_properties):
        """"""
        Initialize a serializable object.

        Args:
            serializable_properties(list): List of all serializable properties
            simple_properties(list): List of all simple properties.
        """"""
        self.serializable_properties = serializable_properties
        self.simple_properties = simple_properties

    def to_dict(self):
        """"""
        Serialize the element into a Python dictionary.

        The to_dict() method recursively serializes the object's data into
        a Python dictionary.

        Returns:
            dict: Dictionary representation of this element.
        """"""
        serialized_data = {}
        for property_name in self.simple_properties:
            property_value = getattr(self, property_name, None)
            if property_value is not None:
                if isinstance(property_value, enum.Enum):
                    property_value = str(property_value)
                serialized_data[property_name] = property_value
        for property_name in self.serializable_properties:
            property_value = getattr(self, property_name, None)
            if property_value is not None:
                if isinstance(property_value, list):
                    serialized_data[property_name] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in property_value]
                else:
                    serialized_data[property_name] = property_value.to_dict()
        return serialized_data

    def to_json(self, **kwargs):
        """"""
        Serialize the element into JSON text.

        Any keyword arguments provided are passed through the Python JSON
        encoder.
        """"""
        return json.dumps(self.to_dict(), **kwargs)","
class AdaptiveCardComponent:
    
    def __init__(self, serializable_properties, simple_properties):
        
        pass
    def to_dict(self):
        
        pass

    def to_json(self, **kwargs):
        
        pass",snippet_151,4,"```python
import json

class AdaptiveCardComponent:
    
    def __init__(self, serializable_properties, simple_properties):
        self.serializable_properties = serializable_properties
        self.simple_properties = simple_properties

    def to_dict(self):
        component_dict = {}
        for key, value in self.simple_properties.items():
            component_dict[key] = value
        
        for key, value in self.serializable_properties.items():
            if hasattr(value, 'to_dict'):
                component_dict[key] = value.to_dict()
            else:
                component_dict[key] = value
        
        return component_dict

    def to_json(self, **kwargs):
        return json.dumps(self.to_dict(), **kwargs)
```"
248349,facelessuser/soupsieve,facelessuser_soupsieve/soupsieve/css_match.py,soupsieve.css_match._FakeParent,"import bs4

class _FakeParent:
    """"""
    Fake parent class.

    When we have a fragment with no `BeautifulSoup` document object,
    we can't evaluate `nth` selectors properly.  Create a temporary
    fake parent so we can traverse the root element as a child.
    """"""

    def __init__(self, element: bs4.Tag) -> None:
        """"""Initialize.""""""
        self.contents = [element]

    def __len__(self) -> int:
        """"""Length.""""""
        return len(self.contents)","
class _FakeParent:
    
    def __init__(self, element: bs4.Tag) -> None:
        
        pass
    def __len__(self) -> int:
        
        pass",snippet_152,3,"```python
import bs4

class _FakeParent:
    
    def __init__(self, element: bs4.Tag) -> None:
        self.element = element
        self.contents = list(element.contents)

    def __len__(self) -> int:
        return len(self.contents)
```"
248351,facelessuser/soupsieve,facelessuser_soupsieve/soupsieve/css_parser.py,soupsieve.css_parser.SelectorPattern,"from typing import Match, Any, Iterator, cast
import re

class SelectorPattern:
    """"""Selector pattern.""""""

    def __init__(self, name: str, pattern: str) -> None:
        """"""Initialize.""""""
        self.name = name
        self.re_pattern = re.compile(pattern, re.I | re.X | re.U)

    def get_name(self) -> str:
        """"""Get name.""""""
        return self.name

    def match(self, selector: str, index: int, flags: int) -> Match[str] | None:
        """"""Match the selector.""""""
        return self.re_pattern.match(selector, index)","
class SelectorPattern:
    
    def __init__(self, name: str, pattern: str) -> None:
        
        pass
    def get_name(self) -> str:
        
        pass

    def match(self, selector: str, index: int, flags: int) -> Match[str] | None:
        
        pass",snippet_153,4,"```python
import re
from typing import Match

class SelectorPattern:
    
    def __init__(self, name: str, pattern: str) -> None:
        self.name = name
        self.regex = re.compile(pattern)

    def get_name(self) -> str:
        return self.name

    def match(self, selector: str, index: int, flags: int = 0) -> Match[str] | None:
        return self.regex.match(selector, index, flags)
```"
250153,Unidata/siphon,src/siphon/catalog.py,siphon.catalog.CatalogRef,"from urllib.parse import urljoin, urlparse

class CatalogRef:
    """"""
    An object for holding catalog references obtained from a THREDDS Client Catalog.

    Attributes
    ----------
    name : str
        The name of the :class:`CatalogRef` element
    href : str
        url to the :class:`CatalogRef`'s THREDDS Client Catalog
    title : str
        Title of the :class:`CatalogRef` element

    """"""

    def __init__(self, base_url, element_node):
        """"""
        Initialize the catalogRef object.

        Parameters
        ----------
        base_url : str
            URL to the base catalog that owns this reference
        element_node : :class:`~xml.etree.ElementTree.Element`
            An :class:`~xml.etree.ElementTree.Element` representing a catalogRef node

        """"""
        self.title = element_node.attrib['{http://www.w3.org/1999/xlink}title']
        self.name = element_node.attrib.get('name', self.title)
        href = element_node.attrib['{http://www.w3.org/1999/xlink}href']
        self.href = urljoin(base_url, href)

    def __str__(self):
        """"""Return a string representation of the catalog reference.""""""
        return str(self.title)

    def follow(self):
        """"""Follow the catalog reference and return a new :class:`TDSCatalog`.

        Returns
        -------
        TDSCatalog
            The referenced catalog

        """"""
        return TDSCatalog(self.href)
    __repr__ = __str__","
class CatalogRef:
    
    def __init__(self, base_url, element_node):
        
        pass
    def __str__(self):
        
        pass

    def follow(self):
        
        pass",snippet_154,4,"```python
import requests
from xml.etree import ElementTree as ET

class CatalogRef:
    
    def __init__(self, base_url, element_node):
        self.base_url = base_url
        self.element_node = element_node
        self.catalog_url = self._resolve_catalog_url()

    def __str__(self):
        return f""CatalogRef: {self.catalog_url}""

    def follow(self):
        try:
            response = requests.get(self.catalog_url)
            response.raise_for_status()
            return ET.fromstring(response.content)
        except requests.exceptions.RequestException as e:
            print(f""Error following catalog reference: {e}"")
            return None

    def _resolve_catalog_url(self):
        catalog_url = self.element_node.attrib.get('href')
        if not catalog_url.startswith('http'):
            catalog_url = self.base_url + catalog_url
        return catalog_url
```"
250158,Unidata/siphon,src/siphon/catalog.py,siphon.catalog.SimpleService,"class SimpleService:
    """"""Hold information about an access service enabled on a dataset.

    Attributes
    ----------
    name : str
        The name of the service
    service_type : str
        The service type (i.e. ""OPENDAP"", ""NetcdfSubset"", ""WMS"", etc.)
    access_urls : dict[str, str]
        A dictionary of access urls whose keywords are the access service
        types defined in the catalog (for example, ""OPENDAP"", ""NetcdfSubset"",
        ""WMS"", etc.)

    """"""

    def __init__(self, service_node):
        """"""Initialize the Dataset object.

        Parameters
        ----------
        service_node : :class:`~xml.etree.ElementTree.Element`
            An :class:`~xml.etree.ElementTree.Element` representing a service node

        """"""
        self.name = service_node.attrib['name']
        self.service_type = CaseInsensitiveStr(service_node.attrib['serviceType'])
        self.base = service_node.attrib['base']
        self.access_urls = {}

    def is_resolver(self):
        """"""Return whether the service is a resolver service.""""""
        return self.service_type == 'Resolver'","class SimpleService:
    
    def __init__(self, service_node):
        
        pass
    def is_resolver(self):
        
        pass",snippet_156,3,"```python
class SimpleService:
    
    def __init__(self, service_node):
        """"""
        Initialize the SimpleService instance.

        Args:
            service_node: The node representing the service.
        """"""
        self.service_node = service_node

    def is_resolver(self):
        """"""
        Check if the service is a resolver.

        Returns:
            bool: True if the service is a resolver, False otherwise.
        """"""
        return hasattr(self.service_node, 'resolve') and callable(self.service_node.resolve)
```"
250272,incuna/django-pgcrypto-fields,incuna_django-pgcrypto-fields/pgcrypto/mixins.py,pgcrypto.mixins.HashMixin,"class HashMixin:
    """"""Keyed hash mixin.

    `HashMixin` uses 'pgcrypto' to encrypt data in a postgres database.
    """"""
    encrypt_sql = None

    def __init__(self, original=None, *args, **kwargs):
        """"""Tells the init the original attr.""""""
        self.original = original
        super(HashMixin, self).__init__(*args, **kwargs)

    def pre_save(self, model_instance, add):
        """"""Save the original_value.""""""
        if self.original:
            original_value = getattr(model_instance, self.original)
            setattr(model_instance, self.attname, original_value)
        return super(HashMixin, self).pre_save(model_instance, add)

    def get_placeholder(self, value=None, compiler=None, connection=None):
        """"""
        Tell postgres to encrypt this field with a hashing function.

        The `value` string is checked to determine if we need to hash or keep
        the current value.

        `compiler` and `connection` is ignored here as we don't need custom operators.
        """"""
        if value is None or value.startswith('\\x'):
            return '%s'
        return self.get_encrypt_sql(connection)

    def get_encrypt_sql(self, connection):
        """"""Get encrypt sql. This may be overidden by some implementations.""""""
        return self.encrypt_sql","class HashMixin:
    
    def __init__(self, original=None, *args, **kwargs):
        
        pass
    def pre_save(self, model_instance, add):
        
        pass
    def get_placeholder(self, value=None, compiler=None, connection=None):
        
        pass

    def get_encrypt_sql(self, connection):
        
        pass",snippet_157,5,"```python
import hashlib
import hmac

class HashMixin:
    
    def __init__(self, original=None, *args, **kwargs):
        if original is None:
            self.salt = kwargs.pop('salt', '')
            self.algorithm = kwargs.pop('algorithm', 'sha256')
        else:
            self.salt = original.salt
            self.algorithm = original.algorithm
        super().__init__(*args, **kwargs)

    def pre_save(self, model_instance, add):
        value = getattr(model_instance, self.attname)
        if value:
            setattr(model_instance, self.attname, self._hash_value(value))

    def get_placeholder(self, value=None, compiler=None, connection=None):
        return connection.ops.prep_for_like_query(self.get_encrypt_sql(connection)) + '(%s)'

    def get_encrypt_sql(self, connection):
        if self.algorithm == 'sha256':
            return 'SHA2'
        elif self.algorithm == 'md5':
            return 'MD5'
        else:
            raise ValueError('Unsupported algorithm')

    def _hash_value(self, value):
        if self.algorithm == 'sha256':
            return hmac.new(self.salt.encode(), value.encode(), hashlib.sha256).hexdigest()
        elif self.algorithm == 'md5':
            return hmac.new(self.salt.encode(), value.encode(), hashlib.md5).hexdigest()
        else:
            raise ValueError('Unsupported algorithm')
```"
251421,Yelp/py_zipkin,Yelp_py_zipkin/py_zipkin/encoding/_encoders.py,py_zipkin.encoding._encoders.IEncoder,"from typing import Union
from py_zipkin.encoding._helpers import Span
from typing import List

class IEncoder:
    """"""Encoder interface.""""""

    def fits(self, current_count: int, current_size: int, max_size: int, new_span: Union[str, bytes]) -> bool:
        """"""Returns whether the new span will fit in the list.

        :param current_count: number of spans already in the list.
        :type current_count: int
        :param current_size: sum of the sizes of all the spans already in the list.
        :type current_size: int
        :param max_size: max supported transport payload size.
        :type max_size: int
        :param new_span: encoded span object that we want to add the the list.
        :type new_span: str or bytes
        :return: True if the new span can be added to the list, False otherwise.
        :rtype: bool
        """"""
        raise NotImplementedError()

    def encode_span(self, span: Span) -> Union[str, bytes]:
        """"""Encodes a single span.

        :param span: Span object representing the span.
        :type span: Span
        :return: encoded span.
        :rtype: str or bytes
        """"""
        raise NotImplementedError()

    def encode_queue(self, queue: List[Union[str, bytes]]) -> Union[str, bytes]:
        """"""Encodes a list of pre-encoded spans.

        :param queue: list of encoded spans.
        :type queue: list
        :return: encoded list, type depends on the encoding.
        :rtype: str or bytes
        """"""
        raise NotImplementedError()","
class IEncoder:
    
    def fits(self, current_count: int, current_size: int, max_size: int, new_span: Union[str, bytes]) -> bool:
        
        pass
    def encode_span(self, span: Span) -> Union[str, bytes]:
        
        pass

    def encode_queue(self, queue: List[Union[str, bytes]]) -> Union[str, bytes]:
        
        pass",snippet_158,4,"```python
from typing import Union, List

class Span:
    def __init__(self, value: Union[str, bytes]):
        self.value = value

class IEncoder:
    
    def fits(self, current_count: int, current_size: int, max_size: int, new_span: Union[str, bytes]) -> bool:
        raise NotImplementedError(""Subclass must implement fits method"")

    def encode_span(self, span: Span) -> Union[str, bytes]:
        raise NotImplementedError(""Subclass must implement encode_span method"")

    def encode_queue(self, queue: List[Union[str, bytes]]) -> Union[str, bytes]:
        raise NotImplementedError(""Subclass must implement encode_queue method"")


class StringEncoder(IEncoder):
    def fits(self, current_count: int, current_size: int, max_size: int, new_span: Union[str, bytes]) -> bool:
        new_span_size = len(new_span)
        return current_size + new_span_size <= max_size

    def encode_span(self, span: Span) -> Union[str, bytes]:
        return span.value

    def encode_queue(self, queue: List[Union[str, bytes]]) -> Union[str, bytes]:
        return ''.join(queue)


class BytesEncoder(IEncoder):
    def fits(self, current_count: int, current_size: int, max_size: int, new_span: Union[str, bytes]) -> bool:
        if isinstance(new_span, str):
            new_span_size = len(new_span.encode())
        else:
            new_span_size = len(new_span)
        return current_size + new_span_size <= max_size

    def encode_span(self, span: Span) -> Union[str, bytes]:
        if isinstance(span.value, str):
            return span.value.encode()
        else:
            return span.value

    def encode_queue(self, queue: List[Union[str, bytes]]) -> Union[str, bytes]:
        result = bytearray()
        for item in queue:
            if isinstance(item, str):
                result.extend(item.encode())
            else:
                result.extend(item)
        return bytes(result)


# Example usage
if __name__ == ""__main__"":
    span1 = Span(""Hello"")
    span2 = Span(b""World"")

    string_encoder = StringEncoder()
    print(string_encoder.encode_span(span1))  # Output: Hello
    print(string_encoder.encode_queue([""Hello"", "" "", ""World""]))  # Output: Hello World

    bytes_encoder = BytesEncoder()
    print(bytes_encoder.encode_span(span2))  # Output: b'World'
    print(bytes_encoder.encode_queue([""Hello"", b"" "", ""World""]))  # Output: b'Hello World'
```"
251832,glut23/webvtt-py,glut23_webvtt-py/webvtt/models.py,webvtt.models.Style,"import typing

class Style:
    """"""Representation of a style.""""""

    def __init__(self, text: typing.Union[str, typing.List[str]]):
        """"""Initialize.

        :param: text: the style text
        """"""
        self.lines = text.splitlines() if isinstance(text, str) else text
        self.comments: typing.List[str] = []

    @property
    def text(self):
        """"""Return the text of the style.""""""
        return '\n'.join(self.lines)","
class Style:
    
    def __init__(self, text: typing.Union[str, typing.List[str]]):
        
        pass
    @property
    def text(self):
        
        pass",snippet_159,3,"```python
import typing

class Style:
    
    def __init__(self, text: typing.Union[str, typing.List[str]]):
        if isinstance(text, str):
            self._text = [text]
        elif isinstance(text, list) and all(isinstance(item, str) for item in text):
            self._text = text
        else:
            raise TypeError(""Input must be a string or a list of strings"")

    @property
    def text(self):
        return self._text
```"
251834,glut23/webvtt-py,glut23_webvtt-py/webvtt/sbv.py,webvtt.sbv.SBVCueBlock,"import typing
import re

class SBVCueBlock:
    """"""Representation of a cue timing block.""""""
    CUE_TIMINGS_PATTERN = re.compile('\\s*(\\d{1,2}:\\d{1,2}:\\d{1,2}.\\d{3}),(\\d{1,2}:\\d{1,2}:\\d{1,2}.\\d{3})')

    def __init__(self, start: str, end: str, payload: typing.Sequence[str]):
        """"""
        Initialize.

        :param start: start time
        :param end: end time
        :param payload: caption text
        """"""
        self.start = start
        self.end = end
        self.payload = payload

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        """"""
        Validate the lines for a match of a cue time block.

        :param lines: the lines to be validated
        :returns: true for a matching cue time block
        """"""
        return bool(len(lines) >= 2 and re.match(cls.CUE_TIMINGS_PATTERN, lines[0]) and lines[1].strip())

    @classmethod
    def from_lines(cls, lines: typing.Sequence[str]) -> 'SBVCueBlock':
        """"""
        Create a `SBVCueBlock` from lines of text.

        :param lines: the lines of text
        :returns: `SBVCueBlock` instance
        """"""
        match = re.match(cls.CUE_TIMINGS_PATTERN, lines[0])
        assert match is not None
        payload = lines[1:]
        return cls(match.group(1), match.group(2), payload)","
class SBVCueBlock:
    
    def __init__(self, start: str, end: str, payload: typing.Sequence[str]):
        
        pass
    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        
        pass
    @classmethod
    def from_lines(cls, lines: typing.Sequence[str]) -> 'SBVCueBlock':
        
        pass",snippet_160,4,"```python
import typing
import re

class SBVCueBlock:
    
    def __init__(self, start: str, end: str, payload: typing.Sequence[str]):
        self.start = start
        self.end = end
        self.payload = payload

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        if len(lines) < 3:
            return False
        if not re.match(r'^CUE\s+(\d{2}:\d{2}:\d{2}\.\d{2,3})$', lines[0]):
            return False
        if not re.match(r'^CUE\s+(\d{2}:\d{2}:\d{2}\.\d{2,3})$', lines[-1]):
            return False
        return True

    @classmethod
    def from_lines(cls, lines: typing.Sequence[str]) -> 'SBVCueBlock':
        start_match = re.match(r'^CUE\s+(\d{2}:\d{2}:\d{2}\.\d{2,3})$', lines[0])
        end_match = re.match(r'^CUE\s+(\d{2}:\d{2}:\d{2}\.\d{2,3})$', lines[-1])
        if start_match and end_match:
            start = start_match.group(1)
            end = end_match.group(1)
            payload = lines[1:-1]
            return cls(start, end, payload)
        else:
            raise ValueError(""Invalid SBV cue block"")
```"
251835,glut23/webvtt-py,glut23_webvtt-py/webvtt/srt.py,webvtt.srt.SRTCueBlock,"import typing
import re

class SRTCueBlock:
    """"""Representation of a cue timing block.""""""
    CUE_TIMINGS_PATTERN = re.compile('\\s*(\\d+:\\d{2}:\\d{2},\\d{3})\\s*-->\\s*(\\d+:\\d{2}:\\d{2},\\d{3})')

    def __init__(self, index: str, start: str, end: str, payload: typing.Sequence[str]):
        """"""
        Initialize.

        :param start: start time
        :param end: end time
        :param payload: caption text
        """"""
        self.index = index
        self.start = start
        self.end = end
        self.payload = payload

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        """"""
        Validate the lines for a match of a cue time block.

        :param lines: the lines to be validated
        :returns: true for a matching cue time block
        """"""
        return bool(len(lines) >= 3 and lines[0].isdigit() and re.match(cls.CUE_TIMINGS_PATTERN, lines[1]))

    @classmethod
    def from_lines(cls, lines: typing.Sequence[str]) -> 'SRTCueBlock':
        """"""
        Create a `SRTCueBlock` from lines of text.

        :param lines: the lines of text
        :returns: `SRTCueBlock` instance
        """"""
        index = lines[0]
        match = re.match(cls.CUE_TIMINGS_PATTERN, lines[1])
        assert match is not None
        payload = lines[2:]
        return cls(index, match.group(1), match.group(2), payload)","
class SRTCueBlock:
    
    def __init__(self, index: str, start: str, end: str, payload: typing.Sequence[str]):
        
        pass
    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        
        pass
    @classmethod
    def from_lines(cls, lines: typing.Sequence[str]) -> 'SRTCueBlock':
        
        pass",snippet_161,4,"```python
import typing
import re

class SRTCueBlock:
    
    def __init__(self, index: str, start: str, end: str, payload: typing.Sequence[str]):
        self.index = index
        self.start = start
        self.end = end
        self.payload = payload

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        if len(lines) < 3:
            return False
        if not re.match(r'^\d+$', lines[0]):
            return False
        timestamp_pattern = r'^\d{2}:\d{2}:\d{2},\d{3} --> \d{2}:\d{2}:\d{2},\d{3}$'
        if not re.match(timestamp_pattern, lines[1]):
            return False
        return True

    @classmethod
    def from_lines(cls, lines: typing.Sequence[str]) -> 'SRTCueBlock':
        if not cls.is_valid(lines):
            raise ValueError(""Invalid SRT cue block"")
        index = lines[0]
        start, end = lines[1].split(' --> ')
        payload = lines[2:]
        return cls(index, start, end, payload)
```"
251838,glut23/webvtt-py,glut23_webvtt-py/webvtt/vtt.py,webvtt.vtt.WebVTTCommentBlock,"import typing
import re

class WebVTTCommentBlock:
    """"""Representation of a comment block.""""""
    COMMENT_PATTERN = re.compile('NOTE\\s(.*?)\\Z', re.DOTALL)

    def __init__(self, text: str):
        """"""
        Initialize.

        :param text: comment text
        """"""
        self.text = text

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        """"""
        Validate the lines for a match of a comment block.

        :param lines: the lines to be validated
        :returns: true for a matching comment block
        """"""
        return bool(lines and lines[0].startswith('NOTE'))

    @classmethod
    def from_lines(cls, lines: typing.Iterable[str]) -> 'WebVTTCommentBlock':
        """"""
        Create a `WebVTTCommentBlock` from lines of text.

        :param lines: the lines of text
        :returns: `WebVTTCommentBlock` instance
        """"""
        match = cls.COMMENT_PATTERN.match('\n'.join(lines))
        return cls(text=match.group(1).strip() if match else '')

    @staticmethod
    def format_lines(lines: str) -> typing.List[str]:
        """"""
        Return the lines for a comment block.

        :param lines: comment lines
        :returns: list of lines for a comment block
        """"""
        list_of_lines = lines.split('\n')
        if len(list_of_lines) == 1:
            return [f'NOTE {lines}']
        return ['NOTE', *list_of_lines]","
class WebVTTCommentBlock:
    
    def __init__(self, text: str):
        
        pass
    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        
        pass
    @classmethod
    def from_lines(cls, lines: typing.Iterable[str]) -> 'WebVTTCommentBlock':
        
        pass
    @staticmethod
    def format_lines(lines: str) -> typing.List[str]:
        
        pass",snippet_162,5,"```python
import typing

class WebVTTCommentBlock:
    
    def __init__(self, text: str):
        self.text = text

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        return len(lines) > 0 and all(line.strip().startswith('NOTE') or (i > 0 and line.strip() == '') for i, line in enumerate(lines))

    @classmethod
    def from_lines(cls, lines: typing.Iterable[str]) -> 'WebVTTCommentBlock':
        text = '\n'.join(line.strip() for line in lines if line.strip() != '')
        return cls(text)

    @staticmethod
    def format_lines(lines: str) -> typing.List[str]:
        formatted_lines = ['NOTE']
        for line in lines.split('\n'):
            if line.strip() != '':
                formatted_lines.append(line.strip())
        if len(formatted_lines) == 1:
            formatted_lines.append('')
        return formatted_lines
```"
251840,glut23/webvtt-py,glut23_webvtt-py/webvtt/vtt.py,webvtt.vtt.WebVTTStyleBlock,"import re
import typing

class WebVTTStyleBlock:
    """"""Representation of a style block.""""""
    STYLE_PATTERN = re.compile('STYLE\\s(.*?)\\Z', re.DOTALL)

    def __init__(self, text: str):
        """"""
        Initialize.

        :param text: style text
        """"""
        self.text = text

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        """"""
        Validate the lines for a match of a style block.

        :param lines: the lines to be validated
        :returns: true for a matching style block
        """"""
        return len(lines) >= 2 and lines[0] == 'STYLE' and (not any((line.strip() == '' or '-->' in line for line in lines)))

    @classmethod
    def from_lines(cls, lines: typing.Iterable[str]) -> 'WebVTTStyleBlock':
        """"""
        Create a `WebVTTStyleBlock` from lines of text.

        :param lines: the lines of text
        :returns: `WebVTTStyleBlock` instance
        """"""
        match = cls.STYLE_PATTERN.match('\n'.join(lines))
        return cls(text=match.group(1).strip() if match else '')

    @staticmethod
    def format_lines(lines: typing.List[str]) -> typing.List[str]:
        """"""
        Return the lines for a style block.

        :param lines: style lines
        :returns: list of lines for a style block
        """"""
        return ['STYLE', *lines]","
class WebVTTStyleBlock:
    
    def __init__(self, text: str):
        
        pass
    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        
        pass
    @classmethod
    def from_lines(cls, lines: typing.Iterable[str]) -> 'WebVTTStyleBlock':
        
        pass
    @staticmethod
    def format_lines(lines: typing.List[str]) -> typing.List[str]:
        
        pass",snippet_163,5,"```python
import typing

class WebVTTStyleBlock:
    
    def __init__(self, text: str):
        self.text = text.strip()

    @classmethod
    def is_valid(cls, lines: typing.Sequence[str]) -> bool:
        return len(lines) > 0 and lines[0].strip().startswith('::')

    @classmethod
    def from_lines(cls, lines: typing.Iterable[str]) -> 'WebVTTStyleBlock':
        return cls('\n'.join(lines))

    @staticmethod
    def format_lines(lines: typing.List[str]) -> typing.List[str]:
        return [line.strip() for line in lines]
```"
251866,Shoobx/xmldiff,Shoobx_xmldiff/xmldiff/diff_match_patch.py,xmldiff.diff_match_patch.patch_obj,"import urllib.parse

class patch_obj:
    """"""Class representing one patch operation.""""""

    def __init__(self):
        """"""Initializes with an empty list of diffs.""""""
        self.diffs = []
        self.start1 = None
        self.start2 = None
        self.length1 = 0
        self.length2 = 0

    def __str__(self):
        """"""Emulate GNU diff's format.
        Header: @@ -382,8 +481,9 @@
        Indices are printed as 1-based, not 0-based.

        Returns:
          The GNU diff string.
        """"""
        if self.length1 == 0:
            coords1 = str(self.start1) + ',0'
        elif self.length1 == 1:
            coords1 = str(self.start1 + 1)
        else:
            coords1 = str(self.start1 + 1) + ',' + str(self.length1)
        if self.length2 == 0:
            coords2 = str(self.start2) + ',0'
        elif self.length2 == 1:
            coords2 = str(self.start2 + 1)
        else:
            coords2 = str(self.start2 + 1) + ',' + str(self.length2)
        text = ['@@ -', coords1, ' +', coords2, ' @@\n']
        for op, data in self.diffs:
            if op == diff_match_patch.DIFF_INSERT:
                text.append('+')
            elif op == diff_match_patch.DIFF_DELETE:
                text.append('-')
            elif op == diff_match_patch.DIFF_EQUAL:
                text.append(' ')
            data = data.encode('utf-8')
            text.append(urllib.parse.quote(data, ""!~*'();/?:@&=+$,# "") + '\n')
        return ''.join(text)","
class patch_obj:
    
    def __init__(self):
        
        pass
    def __str__(self):
        
        pass",snippet_164,3,"```python
class patch_obj:
    
    def __init__(self, patch_id=None, patch_name=None, patch_description=None, patch_status=None):
        self.patch_id = patch_id
        self.patch_name = patch_name
        self.patch_description = patch_description
        self.patch_status = patch_status

    def __str__(self):
        return f""Patch ID: {self.patch_id}\nPatch Name: {self.patch_name}\nPatch Description: {self.patch_description}\nPatch Status: {self.patch_status}""

# Example usage:
if __name__ == ""__main__"":
    patch = patch_obj(1, ""Security Patch"", ""This is a security patch."", ""Applied"")
    print(patch)
```"
252656,happyleavesaoc/aoc-mgz,happyleavesaoc_aoc-mgz/mgz/model/inputs.py,mgz.model.inputs.Inputs,"from mgz.model.definitions import Input
from mgz.fast import Action as ActionEnum

class Inputs:
    """"""Normalize player inputs.""""""

    def __init__(self, gaia):
        """"""Initialize.""""""
        self._gaia = gaia
        self._buildings = {}
        self._oid_cache = {}
        self.inputs = []

    def add_chat(self, chat):
        """"""Add chat input.""""""
        self.inputs.append(Input(chat.timestamp, 'Chat', None, dict(message=chat.message), chat.player, None))

    def add_action(self, action):
        """"""Add action input.""""""
        if action.type in (ActionEnum.DE_TRANSFORM, ActionEnum.POSTGAME):
            return
        name = ACTION_TRANSLATE.get(action.type, action.type.name).replace('_', ' ').title()
        param = None
        if 'object_ids' in action.payload and action.payload['object_ids']:
            self._oid_cache[action.type] = action.payload['object_ids']
        elif action.type in self._oid_cache:
            action.payload['object_ids'] = self._oid_cache[action.type]
        if action.type is ActionEnum.SPECIAL:
            name = action.payload['order']
        elif action.type is ActionEnum.GAME:
            name = action.payload['command']
            if name == 'Speed':
                param = action.payload['speed']
        elif action.type is ActionEnum.STANCE:
            name = 'Stance'
            param = action.payload['stance']
        elif action.type is ActionEnum.FORMATION:
            name = 'Formation'
            param = action.payload['formation']
        elif action.type is ActionEnum.ORDER and action.payload['target_id'] in self._gaia:
            name = 'Gather'
            param = self._gaia[action.payload['target_id']]
        elif action.type is ActionEnum.ORDER and action.position and (action.position.hash() in self._buildings):
            name = 'Target'
            param = self._buildings[action.position.hash()]
        elif action.type is ActionEnum.GATHER_POINT:
            if action.payload['target_id'] in self._gaia:
                param = self._gaia[action.payload['target_id']]
            elif action.position and action.position.hash() in self._buildings:
                if len(action.payload['object_ids']) == 1 and action.payload['object_ids'][0] == action.payload['target_id']:
                    name = 'Spawn'
                param = self._buildings[action.position.hash()]
        elif action.type in (ActionEnum.BUY, ActionEnum.SELL):
            action.payload['amount'] *= 100
        elif action.type is ActionEnum.BUILD:
            param = action.payload['building']
            if action.position.hash() in self._buildings:
                if self._buildings[action.position.hash()] == 'Farm' and action.payload['building'] == 'Farm':
                    name = 'Reseed'
            self._buildings[action.position.hash()] = action.payload['building']
        elif action.type in (ActionEnum.QUEUE, ActionEnum.DE_QUEUE):
            param = action.payload['unit']
        elif action.type is ActionEnum.RESEARCH:
            param = action.payload['technology']
        new_input = Input(action.timestamp, name, param, action.payload, action.player, action.position)
        self.inputs.append(new_input)
        return new_input","
class Inputs:
    
    def __init__(self, gaia):
        
        pass
    def add_chat(self, chat):
        
        pass

    def add_action(self, action):
        
        pass",snippet_165,4,"```python
class Inputs:
    
    def __init__(self, gaia):
        """"""
        Initialize the Inputs class.

        Args:
            gaia: The gaia object associated with the inputs.
        """"""
        self.gaia = gaia
        self.chats = []
        self.actions = []

    def add_chat(self, chat):
        """"""
        Add a chat to the list of chats.

        Args:
            chat: The chat to be added.
        """"""
        self.chats.append(chat)

    def add_action(self, action):
        """"""
        Add an action to the list of actions.

        Args:
            action: The action to be added.
        """"""
        self.actions.append(action)
```"
256858,cherrypy/cheroot,cheroot/server.py,cheroot.server.Gateway,"class Gateway:
    """"""Base class to interface HTTPServer with other systems, such as WSGI.""""""

    def __init__(self, req):
        """"""Initialize Gateway instance with request.

        Args:
            req (HTTPRequest): current HTTP request
        """"""
        self.req = req

    def respond(self):
        """"""Process the current request. Must be overridden in a subclass.""""""
        raise NotImplementedError","class Gateway:
    
    def __init__(self, req):
        
        pass
    def respond(self):
        
        pass",snippet_168,3,"```python
class Gateway:
    
    def __init__(self, req):
        """"""
        Initialize the Gateway class.

        Args:
            req (Request): The incoming request object.
        """"""
        self.req = req
        self.response = None

    def respond(self):
        """"""
        Process the incoming request and generate a response.

        Returns:
            Response: The response object.
        """"""
        # Assuming req has method and path attributes
        if self.req.method == 'GET':
            # Handle GET request
            self.response = self._handle_get(self.req.path)
        elif self.req.method == 'POST':
            # Handle POST request
            self.response = self._handle_post(self.req.path, self.req.data)
        else:
            # Handle unsupported methods
            self.response = self._handle_error(405, 'Method Not Allowed')
        
        return self.response

    def _handle_get(self, path):
        # Implement GET request handling logic here
        # For demonstration purposes, assume a simple response
        return Response(200, 'OK', {'Content-Type': 'text/plain'}, f'GET request received for {path}')

    def _handle_post(self, path, data):
        # Implement POST request handling logic here
        # For demonstration purposes, assume a simple response
        return Response(201, 'Created', {'Content-Type': 'text/plain'}, f'POST request received for {path} with data: {data}')

    def _handle_error(self, status_code, message):
        # Implement error handling logic here
        # For demonstration purposes, assume a simple error response
        return Response(status_code, message, {'Content-Type': 'text/plain'}, message)


class Request:
    def __init__(self, method, path, data=None):
        self.method = method
        self.path = path
        self.data = data


class Response:
    def __init__(self, status_code, status_message, headers, body):
        self.status_code = status_code
        self.status_message = status_message
        self.headers = headers
        self.body = body

    def __repr__(self):
        return f'Response(status_code={self.status_code}, status_message={self.status_message}, headers={self.headers}, body={self.body})'


# Example usage
if __name__ == '__main__':
    req = Request('GET', '/example')
    gateway = Gateway(req)
    response = gateway.respond()
    print(response)

    req_post = Request('POST', '/example', 'Hello, World!')
    gateway_post = Gateway(req_post)
    response_post = gateway_post.respond()
    print(response_post)
```"
258632,chovanecm/sacredboard,chovanecm_sacredboard/sacredboard/app/data/datastorage.py,sacredboard.app.data.datastorage.Cursor,"class Cursor:
    """"""Interface that abstracts the cursor object returned from databases.""""""

    def __init__(self):
        """"""Declare a new cursor to iterate over runs.""""""
        pass

    def count(self):
        """"""Return the number of items in this cursor.""""""
        raise NotImplementedError()

    def __iter__(self):
        """"""Iterate over elements.""""""
        raise NotImplementedError()","class Cursor:
    
    def __init__(self):
        
        pass
    def count(self):
        
        pass
    def __iter__(self):
        
        pass",snippet_169,4,"```python
class Cursor:
    
    def __init__(self, data=None):
        self.data = data if data is not None else []
        self.index = 0

    def count(self):
        return len(self.data)

    def __iter__(self):
        self.index = 0
        return self

    def __next__(self):
        if self.index < len(self.data):
            result = self.data[self.index]
            self.index += 1
            return result
        raise StopIteration
```"
258643,chovanecm/sacredboard,chovanecm_sacredboard/sacredboard/app/data/metricsdao.py,sacredboard.app.data.metricsdao.MetricsDAO,"class MetricsDAO:
    """"""
    Interface for accessing Sacred metrics.

    Issue: https://github.com/chovanecm/sacredboard/issues/58

    Extended because of: https://github.com/chovanecm/sacredboard/issues/66
    """"""

    def get(self, run_id, metric_id):
        """"""
        Read a metric of the given id and run.

        The returned object has the following format (timestamps are datetime
         objects).

        .. code::

            {""steps"": [0,1,20,40,...],
            ""timestamps"": [timestamp1,timestamp2,timestamp3,...],
            ""values"": [0,1 2,3,4,5,6,...],
            ""name"": ""name of the metric"",
            ""metric_id"": ""metric_id"",
            ""run_id"": ""run_id""}

        :param run_id: ID of the Run that the metric belongs to.
        :param metric_id: The ID fo the metric.
        :return: The whole metric as specified.

        :raise NotFoundError
        """"""
        raise NotImplementedError('The MetricsDAO class is abstract.')

    def delete(self, run_id):
        """"""
        Delete all metrics belonging to the given run.

        :param run_id: ID of the Run that the metric belongs to.
        """"""
        raise NotImplementedError('The MetricsDAO class is abstract.')","class MetricsDAO:
    
    def get(self, run_id, metric_id):
        
        pass
    def delete(self, run_id):
        
        pass",snippet_170,3,"```python
class MetricsDAO:
    def __init__(self, db_connection):
        """"""
        Initialize the MetricsDAO class.

        Args:
        db_connection: A database connection object.
        """"""
        self.db_connection = db_connection

    def get(self, run_id, metric_id):
        """"""
        Retrieve a metric from the database.

        Args:
        run_id (int): The ID of the run.
        metric_id (int): The ID of the metric.

        Returns:
        The metric data if found, otherwise None.
        """"""
        query = ""SELECT * FROM metrics WHERE run_id = %s AND metric_id = %s""
        cursor = self.db_connection.cursor()
        cursor.execute(query, (run_id, metric_id))
        result = cursor.fetchone()
        cursor.close()
        return result

    def delete(self, run_id):
        """"""
        Delete all metrics associated with a run from the database.

        Args:
        run_id (int): The ID of the run.

        Returns:
        The number of rows deleted.
        """"""
        query = ""DELETE FROM metrics WHERE run_id = %s""
        cursor = self.db_connection.cursor()
        cursor.execute(query, (run_id,))
        self.db_connection.commit()
        rows_deleted = cursor.rowcount
        cursor.close()
        return rows_deleted
```"
258651,chovanecm/sacredboard,chovanecm_sacredboard/sacredboard/app/data/rundao.py,sacredboard.app.data.rundao.RunDAO,"class RunDAO:
    """"""
    Interface for accessing Runs.

    Issue: https://github.com/chovanecm/sacredboard/issues/69
    """"""

    def get(self, run_id):
        """"""
        Return the run associated with the id.

        :raise NotFoundError when not found
        """"""
        raise NotImplementedError('RunDAO is abstract.')

    def get_runs(self, sort_by=None, sort_direction=None, start=0, limit=None, query={'type': 'and', 'filters': []}):
        """"""Return all runs that match the query.""""""
        raise NotImplementedError('RunDAO is abstract.')

    def delete(self, run_id):
        """"""
        Delete run with the given id from the backend.

        :param run_id: Id of the run to delete.
        :raise NotImplementedError If not supported by the backend.
        :raise DataSourceError General data source error.
        :raise NotFoundError The run was not found. (Some backends may succeed
        even if the run does not exist.
        """"""
        raise NotImplementedError('This database data source does not currently support this operation.')","class RunDAO:
    
    def get(self, run_id):
        
        pass
    def get_runs(self, sort_by=None, sort_direction=None, start=0, limit=None, query={'type': 'and', 'filters': []}):
        
        pass
    def delete(self, run_id):
        
        pass",snippet_171,4,"```python
from typing import Dict, List, Optional

class RunDAO:
    def __init__(self, db_connection):
        """"""
        Initialize the RunDAO class.

        Args:
        db_connection: A database connection object.
        """"""
        self.db_connection = db_connection

    def get(self, run_id: int) -> Optional[Dict]:
        """"""
        Retrieve a run by its ID.

        Args:
        run_id (int): The ID of the run to retrieve.

        Returns:
        Optional[Dict]: A dictionary representing the run, or None if not found.
        """"""
        query = ""SELECT * FROM runs WHERE id = %s""
        cursor = self.db_connection.cursor(dictionary=True)
        cursor.execute(query, (run_id,))
        return cursor.fetchone()

    def get_runs(self, sort_by: Optional[str] = None, sort_direction: Optional[str] = None, start: int = 0, limit: Optional[int] = None, query: Dict = {'type': 'and', 'filters': []}) -> List[Dict]:
        """"""
        Retrieve a list of runs based on the provided query and pagination parameters.

        Args:
        sort_by (Optional[str]): The column to sort by. Defaults to None.
        sort_direction (Optional[str]): The direction to sort in. Defaults to None.
        start (int): The starting index for pagination. Defaults to 0.
        limit (Optional[int]): The maximum number of results to return. Defaults to None.
        query (Dict): A dictionary representing the query filters. Defaults to {'type': 'and', 'filters': []}.

        Returns:
        List[Dict]: A list of dictionaries representing the runs.
        """"""
        query_str = ""SELECT * FROM runs""
        conditions = []
        params = []

        if query['type'] == 'and':
            for filter in query['filters']:
                conditions.append(f""{filter['column']} {filter['operator']} %s"")
                params.append(filter['value'])
        elif query['type'] == 'or':
            or_conditions = []
            for filter in query['filters']:
                or_conditions.append(f""{filter['column']} {filter['operator']} %s"")
                params.append(filter['value'])
            conditions.append(f""({' OR '.join(or_conditions)})"")

        if conditions:
            query_str += "" WHERE "" + "" AND "".join(conditions)

        if sort_by and sort_direction:
            query_str += f"" ORDER BY {sort_by} {sort_direction.upper()}""

        query_str += "" LIMIT %s, %s"" if limit else "" LIMIT %s, 18446744073709551615""  # Using max uint64 for ""unlimited"" offset
        params.extend([start, limit]) if limit else params.append(start)

        cursor = self.db_connection.cursor(dictionary=True)
        cursor.execute(query_str, params)
        return cursor.fetchall()

    def delete(self, run_id: int) -> bool:
        """"""
        Delete a run by its ID.

        Args:
        run_id (int): The ID of the run to delete.

        Returns:
        bool: True if the run was deleted, False otherwise.
        """"""
        query = ""DELETE FROM runs WHERE id = %s""
        cursor = self.db_connection.cursor()
        cursor.execute(query, (run_id,))
        self.db_connection.commit()
        return cursor.rowcount > 0
```"
259541,mozilla-iot/webthing-python,mozilla-iot_webthing-python/webthing/server.py,webthing.server.MultipleThings,"class MultipleThings:
    """"""A container for multiple things.""""""

    def __init__(self, things, name):
        """"""
        Initialize the container.

        things -- the things to store
        name -- the mDNS server name
        """"""
        self.things = things
        self.name = name

    def get_thing(self, idx):
        """"""
        Get the thing at the given index.

        idx -- the index
        """"""
        try:
            idx = int(idx)
        except ValueError:
            return None
        if idx < 0 or idx >= len(self.things):
            return None
        return self.things[idx]

    def get_things(self):
        """"""Get the list of things.""""""
        return self.things

    def get_name(self):
        """"""Get the mDNS server name.""""""
        return self.name","class MultipleThings:
    
    def __init__(self, things, name):
        
        pass
    def get_thing(self, idx):
        
        pass
    def get_things(self):
        
        pass

    def get_name(self):
        
        pass",snippet_172,5,"```python
class MultipleThings:
    
    def __init__(self, things, name):
        """"""
        Initialize the MultipleThings class.

        Args:
            things (list): A list of things.
            name (str): The name associated with the things.
        """"""
        self.things = things
        self.name = name

    def get_thing(self, idx):
        """"""
        Get a specific thing by its index.

        Args:
            idx (int): The index of the thing to retrieve.

        Returns:
            The thing at the specified index if it exists, otherwise None.
        """"""
        if idx < len(self.things):
            return self.things[idx]
        else:
            return None

    def get_things(self):
        """"""
        Get all the things.

        Returns:
            list: A list of all the things.
        """"""
        return self.things

    def get_name(self):
        """"""
        Get the name associated with the things.

        Returns:
            str: The name associated with the things.
        """"""
        return self.name


# Example usage:
def main():
    things = [1, 2, 3, 4, 5]
    name = ""Numbers""
    multiple_things = MultipleThings(things, name)

    print(multiple_things.get_name())  # Output: Numbers
    print(multiple_things.get_things())  # Output: [1, 2, 3, 4, 5]
    print(multiple_things.get_thing(2))  # Output: 3
    print(multiple_things.get_thing(10))  # Output: None

if __name__ == ""__main__"":
    main()
```"
259544,mozilla-iot/webthing-python,mozilla-iot_webthing-python/webthing/server.py,webthing.server.SingleThing,"class SingleThing:
    """"""A container for a single thing.""""""

    def __init__(self, thing):
        """"""
        Initialize the container.

        thing -- the thing to store
        """"""
        self.thing = thing

    def get_thing(self, _=None):
        """"""Get the thing at the given index.""""""
        return self.thing

    def get_things(self):
        """"""Get the list of things.""""""
        return [self.thing]

    def get_name(self):
        """"""Get the mDNS server name.""""""
        return self.thing.title","class SingleThing:
    
    def __init__(self, thing):
        
        pass
    def get_thing(self, _=None):
        
        pass
    def get_things(self):
        
        pass

    def get_name(self):
        
        pass",snippet_173,5,"```python
class SingleThing:
    
    def __init__(self, thing):
        self.thing = thing

    def get_thing(self, _=None):
        return self.thing

    def get_things(self):
        return [self.thing]

    def get_name(self):
        return self.thing.__class__.__name__
```"
259548,mozilla-iot/webthing-python,mozilla-iot_webthing-python/webthing/subscriber.py,webthing.subscriber.Subscriber,"class Subscriber:
    """"""Abstract Subscriber class.""""""

    def update_property(self, property_):
        """"""
        Send an update about a Property.

        :param property_: Property
        """"""
        raise NotImplementedError

    def update_action(self, action):
        """"""
        Send an update about an Action.

        :param action: Action
        """"""
        raise NotImplementedError

    def update_event(self, event):
        """"""
        Send an update about an Event.

        :param event: Event
        """"""
        raise NotImplementedError","class Subscriber:
    
    def update_property(self, property_):
        
        pass
    def update_action(self, action):
        
        pass
    def update_event(self, event):
        
        pass",snippet_174,4,"```python
class Subscriber:
    """"""
    A class representing a subscriber that can be notified about updates to properties, actions, and events.
    """"""

    def __init__(self):
        """"""
        Initializes a new instance of the Subscriber class.
        """"""
        self.properties = {}
        self.actions = []
        self.events = []

    def update_property(self, property_):
        """"""
        Updates a property.

        Args:
            property_ (dict): A dictionary containing the property name and its new value.
        """"""
        if 'name' in property_ and 'value' in property_:
            self.properties[property_['name']] = property_['value']
        else:
            raise ValueError(""Property update must contain 'name' and 'value'"")

    def update_action(self, action):
        """"""
        Updates an action.

        Args:
            action (dict): A dictionary containing the action details.
        """"""
        if isinstance(action, dict):
            self.actions.append(action)
        else:
            raise ValueError(""Action must be a dictionary"")

    def update_event(self, event):
        """"""
        Updates an event.

        Args:
            event (dict): A dictionary containing the event details.
        """"""
        if isinstance(event, dict):
            self.events.append(event)
        else:
            raise ValueError(""Event must be a dictionary"")


# Example usage:
if __name__ == ""__main__"":
    subscriber = Subscriber()

    property_update = {'name': 'temperature', 'value': 25}
    subscriber.update_property(property_update)
    print(subscriber.properties)

    action = {'type': 'start', 'target': 'engine'}
    subscriber.update_action(action)
    print(subscriber.actions)

    event = {'type': 'alarm', 'message': 'System failure'}
    subscriber.update_event(event)
    print(subscriber.events)
```"
261819,user-cont/conu,user-cont_conu/conu/apidefs/image.py,conu.apidefs.image.S2Image,"class S2Image:
    """"""
    Additional functionality related to s2i-enabled container images
    """"""

    def extend(self, source, new_image_name, s2i_args=None):
        """"""
        extend this s2i-enabled image using provided source, raises ConuException if
        `s2i build` fails

        :param source: str, source used to extend the image, can be path or url
        :param new_image_name: str, name of the new, extended image
        :param s2i_args: list of str, additional options and arguments provided to `s2i build`
        :return: S2Image instance
        """"""
        raise NotImplementedError('extend method is not implemented')

    def usage(self):
        """"""
        Provide output of `s2i usage`

        :return: str
        """"""
        raise NotImplementedError('usage method is not implemented')","class S2Image:
    
    def extend(self, source, new_image_name, s2i_args=None):
        
        pass
    def usage(self):
        
        pass",snippet_175,3,"```python
import subprocess
import os

class S2Image:
    def __init__(self, s2i_binary='s2i'):
        """"""
        Initialize the S2Image class.

        :param s2i_binary: The path to the s2i binary. Defaults to 's2i'.
        """"""
        self.s2i_binary = s2i_binary

    def extend(self, source, new_image_name, s2i_args=None):
        """"""
        Extend an existing image using s2i.

        :param source: The source directory or archive.
        :param new_image_name: The name of the new image.
        :param s2i_args: Additional arguments to pass to s2i. Defaults to None.
        """"""
        command = [self.s2i_binary, 'build', source, new_image_name]
        if s2i_args:
            command.extend(s2i_args)
        try:
            subprocess.check_call(command)
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f""s2i build failed with return code {e.returncode}"")

    def usage(self):
        """"""
        Print the usage of the s2i command.
        """"""
        try:
            subprocess.check_call([self.s2i_binary, '--help'])
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f""s2i --help failed with return code {e.returncode}"")
        except FileNotFoundError:
            print(""s2i binary not found. Please ensure it is installed and in your PATH."")

# Example usage:
if __name__ == ""__main__"":
    s2_image = S2Image()
    s2_image.usage()
    # s2_image.extend('/path/to/source', 'new-image-name')
```"
264367,materialsproject/custodian,materialsproject_custodian/src/custodian/ansible/interpreter.py,custodian.ansible.interpreter.Modder,"from custodian.ansible.actions import DictActions
import re

class Modder:
    """"""
    Class to modify a dict/file/any object using a mongo-like language.
    Keywords are mostly adopted from mongo's syntax, but instead of $, an
    underscore precedes action keywords. This is so that the modification can
    be inserted into a mongo db easily.

    Allowable actions are supplied as a list of classes as an argument. Refer
    to the action classes on what the actions do. Action classes are in
    pymatpro.ansible.actions.

    Examples:
    >>> modder = Modder()
    >>> dct = {""Hello"": ""World""}
    >>> mod = {'_set': {'Hello':'Universe', 'Bye': 'World'}}
    >>> modder.modify(mod, dct)
    >>> dct['Bye']
    'World'
    >>> dct['Hello']
    'Universe'
    """"""

    def __init__(self, actions=None, strict=True, directory='./') -> None:
        """"""Initialize a Modder from a list of supported actions.

        Args:
            actions ([Action]): A sequence of supported actions. See
                :mod:`custodian.ansible.actions`. Default is None,
                which means only DictActions are supported.
            strict (bool): Indicating whether to use strict mode. In non-strict
                mode, unsupported actions are simply ignored without any
                errors raised. In strict mode, if an unsupported action is
                supplied, a ValueError is raised. Defaults to True.
            directory (str): The directory containing the files to be modified.
                Defaults to ""./"".
        """"""
        self.supported_actions = {}
        actions = actions if actions is not None else [DictActions]
        for action in actions:
            for attr in dir(action):
                if not re.match('__\\w+__', attr) and callable(getattr(action, attr)):
                    self.supported_actions[f'_{attr}'] = getattr(action, attr)
        self.strict = strict
        self.directory = directory

    def modify(self, modification, obj) -> None:
        """"""
        Note that modify makes actual in-place modifications. It does not
        return a copy.

        Args:
            modification (dict): Modification must be {action_keyword :
                settings}. E.g., {'_set': {'Hello':'Universe', 'Bye': 'World'}}
            obj (dict/str/object): Object to modify depending on actions. For
                example, for DictActions, obj will be a dict to be modified.
                For FileActions, obj will be a string with a full pathname to a
                file.
        """"""
        for action, settings in modification.items():
            if action in self.supported_actions:
                self.supported_actions[action](obj, settings, directory=self.directory)
            elif self.strict:
                raise ValueError(f'{action} is not a supported action!')

    def modify_object(self, modification, obj):
        """"""
        Modify an object that supports pymatgen's as_dict() and from_dict API.

        Args:
            modification (dict): Modification must be {action_keyword :
                settings}. E.g., {'_set': {'Hello':'Universe', 'Bye': 'World'}}
            obj (object): Object to modify
        """"""
        dct = obj.as_dict()
        self.modify(modification, dct)
        return obj.from_dict(dct)","
class Modder:
    '''
    Class to modify a dict/file/any object using a mongo-like language.
    Keywords are mostly adopted from mongo's syntax, but instead of $, an
    underscore precedes action keywords. This is so that the modification can
    be inserted into a mongo db easily.
    Allowable actions are supplied as a list of classes as an argument. Refer
    to the action classes on what the actions do. Action classes are in
    pymatpro.ansible.actions.
    Examples:
    >>> modder = Modder()
    >>> dct = {""Hello"": ""World""}
    >>> mod = {'_set': {'Hello':'Universe', 'Bye': 'World'}}
    >>> modder.modify(mod, dct)
    >>> dct['Bye']
    'World'
    >>> dct['Hello']
    'Universe'
    '''
    def __init__(self, actions=None, strict=True, directory='./') -> None:
        
        pass

    def modify(self, modification, obj) -> None:
        
        pass

    def modify_object(self, modification, obj):
        
        pass",snippet_176,4,"```python
import os
import json
from importlib import import_module

class Modder:
    '''
    Class to modify a dict/file/any object using a mongo-like language.
    Keywords are mostly adopted from mongo's syntax, but instead of $, an
    underscore precedes action keywords. This is so that the modification can
    be inserted into a mongo db easily.
    Allowable actions are supplied as a list of classes as an argument. Refer
    to the action classes on what the actions do. Action classes are in
    pymatpro.ansible.actions.
    Examples:
    >>> modder = Modder()
    >>> dct = {""Hello"": ""World""}
    >>> mod = {'_set': {'Hello':'Universe', 'Bye': 'World'}}
    >>> modder.modify(mod, dct)
    >>> dct['Bye']
    'World'
    >>> dct['Hello']
    'Universe'
    '''
    def __init__(self, actions=None, strict=True, directory='./') -> None:
        self.directory = directory
        self.strict = strict
        if actions is None:
            actions = []
            for file in os.listdir(os.path.join(os.path.dirname(__file__), 'actions')):
                if file.endswith('.py') and file != '__init__.py':
                    module_name = file[:-3]
                    module = import_module(f'pymatpro.ansible.actions.{module_name}')
                    for cls_name in dir(module):
                        cls = getattr(module, cls_name)
                        if isinstance(cls, type) and cls.__name__.startswith('Mod'):
                            actions.append(cls)
        self.actions = {action.__name__[3:]: action for action in actions}

    def modify(self, modification, obj) -> None:
        if isinstance(obj, dict):
            self.modify_object(modification, obj)
        elif isinstance(obj, str) and os.path.exists(obj):
            with open(obj, 'r') as f:
                dct = json.load(f)
            self.modify_object(modification, dct)
            with open(obj, 'w') as f:
                json.dump(dct, f)
        else:
            raise ValueError(""obj must be a dict or a valid filename"")

    def modify_object(self, modification, obj):
        for action, value in modification.items():
            if action.startswith('_'):
                action = action[1:]
            if action in self.actions:
                self.actions[action](self, obj, value).operate()
            elif self.strict:
                raise ValueError(f""Invalid action: {action}"")
```"
264406,materialsproject/custodian,materialsproject_custodian/src/custodian/utils.py,custodian.utils.tracked_lru_cache,"import functools
from typing import ClassVar

class tracked_lru_cache:
    """"""
    Decorator wrapping the functools.lru_cache adding a tracking of the
    functions that have been wrapped.

    Exposes a method to clear the cache of all the wrapped functions.

    Used to cache the parsed outputs in handlers/validators, to avoid
    multiple parsing of the same file.
    Allows Custodian to clear the cache after all the checks have been performed.
    """"""
    cached_functions: ClassVar = set()

    def __init__(self, func) -> None:
        """"""
        Args:
            func: function to be decorated.
        """"""
        self.func = functools.lru_cache(func)
        functools.update_wrapper(self, func)
        self.cache_info = self.func.cache_info
        self.cache_clear = self.func.cache_clear

    def __call__(self, *args, **kwargs):
        """"""Call the decorated function.""""""
        result = self.func(*args, **kwargs)
        self.cached_functions.add(self.func)
        return result

    @classmethod
    def tracked_cache_clear(cls) -> None:
        """"""Clear the cache of all the decorated functions.""""""
        while cls.cached_functions:
            f = cls.cached_functions.pop()
            f.cache_clear()","
class tracked_lru_cache:
    
    def __init__(self, func) -> None:
        
        pass
    def __call__(self, *args, **kwargs):
        
        pass
    @classmethod
    def tracked_cache_clear(cls) -> None:
        
        pass",snippet_177,4,"```python
from functools import wraps, lru_cache

class tracked_lru_cache:
    """"""
    A decorator class that tracks the number of cache hits and misses.
    It uses the functools.lru_cache decorator internally.
    """"""
    
    def __init__(self, func) -> None:
        self.func = func
        self.cache_info = None
        self.cache_clear = self.tracked_cache_clear
        self.decorated_func = lru_cache(maxsize=None)(self._tracked_func)

    def _tracked_func(self, *args, **kwargs):
        return self.func(*args, **kwargs)

    def __call__(self, *args, **kwargs):
        result = self.decorated_func(*args, **kwargs)
        self.cache_info = self.decorated_func.cache_info()
        return result

    @classmethod
    def tracked_cache_clear(cls) -> None:
        # This method is not directly usable as it's a class method.
        # Instead, it's meant to be used as an attribute of an instance.
        # To make it work, we need to keep track of all instances.
        # For simplicity, we'll assume it's used as an instance attribute.
        raise AttributeError(""tracked_cache_clear should be used as an instance attribute"")

# Example usage:
@tracked_lru_cache
def add(a, b):
    return a + b

print(add(1, 2))  # Cache miss
print(add(1, 2))  # Cache hit
print(add.cache_info())  # Cache info
add.cache_clear()  # Clear cache
print(add.cache_info())  # Cache info after clearing
```"
265199,Anaconda-Platform/anaconda-client,Anaconda-Platform_anaconda-client/binstar_client/utils/tables.py,binstar_client.utils.tables.TableCell,"import typing

class TableCell:
    """"""
    General definition of a table cell.

    :param kind: Kind of the cell (used for styling purposes, see :class:`~TableDesign`).
    :param value: Exact content of the cell.
    :param alignment: How text should be aligned in the cell.
    """"""
    __slots__ = ('alignment', 'kind', 'value')

    def __init__(self, kind: str, value: typing.Any, *, alignment: 'Alignment'='<') -> None:
        """"""Initialize new :class:`~TableCell` instance.""""""
        if value is None:
            value = ''
        self.alignment: 'Alignment' = alignment
        self.kind: str = kind
        self.value: str = str(value)

    def __repr__(self) -> str:
        """"""Prepare a string representation of the instance.""""""
        return f'{type(self).__name__}(kind={self.kind!r}, value={self.value!r}, alignment={self.alignment!r})'

    def __str__(self) -> str:
        """"""Prepare a string representation of the instance.""""""
        return self.value","
class TableCell:
    
    def __init__(self, kind: str, value: typing.Any, *, alignment: 'Alignment'='<') -> None:
        
        pass
    def __repr__(self) -> str:
        
        pass

    def __str__(self) -> str:
        
        pass",snippet_178,4,"```python
import typing
from dataclasses import dataclass
from enum import Enum

@dataclass(frozen=True)
class Alignment(Enum):
    LEFT = '<'
    CENTER = '^'
    RIGHT = '>'

class TableCell:
    
    def __init__(self, kind: str, value: typing.Any, *, alignment: Alignment = Alignment.LEFT) -> None:
        self.kind = kind
        self.value = value
        self.alignment = alignment

    def __repr__(self) -> str:
        return f'TableCell(kind={self.kind!r}, value={self.value!r}, alignment={self.alignment})'

    def __str__(self) -> str:
        return str(self.value)
```"
266878,facelessuser/wcmatch,facelessuser_wcmatch/wcmatch/util.py,wcmatch.util.Immutable,"from typing import Any, Callable, AnyStr, Match, Pattern

class Immutable:
    """"""Immutable.""""""
    __slots__: tuple[Any, ...] = ()

    def __init__(self, **kwargs: Any) -> None:
        """"""Initialize.""""""
        for k, v in kwargs.items():
            super(Immutable, self).__setattr__(k, v)

    def __setattr__(self, name: str, value: Any) -> None:
        """"""Prevent mutability.""""""
        raise AttributeError('Class is immutable!')","
class Immutable:
    
    def __init__(self, **kwargs: Any) -> None:
        
        pass
    def __setattr__(self, name: str, value: Any) -> None:
        
        pass",snippet_180,3,"```python
from typing import Any

class Immutable:
    
    def __init__(self, **kwargs: Any) -> None:
        for key, value in kwargs.items():
            super().__setattr__(key, value)
    
    def __setattr__(self, name: str, value: Any) -> None:
        if hasattr(self, name):
            raise AttributeError(""can't modify immutable instance"")
        super().__setattr__(name, value)
```"
269275,CLARIAH/grlc,CLARIAH_grlc/src/fileLoaders.py,src.fileLoaders.BaseLoader,"from grlc.queryTypes import qType, guessQueryType
import json

class BaseLoader:
    """"""Base class for File Loaders""""""

    def getTextForName(self, query_name):
        """"""Return the query text and query type for the given query name.
        Note that file extention is not part of the query name. For example,
        for `query_name='query1'` would return the content of file `query1.rq`
        from the loader's source (assuming such file exists).""""""
        candidateNames = [query_name + '.rq', query_name + '.sparql', query_name + '.tpf', query_name + '.json']
        candidates = [(name, guessQueryType(name)) for name in candidateNames]
        for queryFullName, queryType in candidates:
            queryText = self._getText(queryFullName)
            if queryText:
                if queryType == qType['JSON']:
                    queryText = json.loads(queryText)
                    if 'proto' not in queryText and '@graph' not in queryText:
                        continue
                return (queryText, queryType)
        return ('', None)

    def _getText(self, queryFullName):
        """"""To be implemented by sub-classes.
        Returns None if the file does not exist.""""""
        raise NotImplementedError('Subclasses must override _getText()!')

    def fetchFiles(self):
        """"""To be implemented by sub-classes""""""
        raise NotImplementedError('Subclasses must override fetchFiles()!')","
class BaseLoader:
    
    def getTextForName(self, query_name):
        
        pass
    def _getText(self, queryFullName):
        
        pass

    def fetchFiles(self):
        
        pass",snippet_181,4,"```python
import os

class BaseLoader:
    def __init__(self, root_dir):
        """"""
        Initialize the BaseLoader with a root directory.

        :param root_dir: The root directory to load files from.
        """"""
        self.root_dir = root_dir

    def getTextForName(self, query_name):
        """"""
        Get the text for a given query name.

        :param query_name: The name to query for.
        :return: The text associated with the query name.
        """"""
        query_full_name = os.path.join(self.root_dir, query_name)
        return self._getText(query_full_name)

    def _getText(self, queryFullName):
        """"""
        Get the text from a file.

        :param queryFullName: The full path to the file.
        :return: The text in the file.
        """"""
        try:
            with open(queryFullName, 'r') as file:
                return file.read()
        except FileNotFoundError:
            return None

    def fetchFiles(self):
        """"""
        Fetch a list of files in the root directory.

        :return: A list of file names in the root directory.
        """"""
        return [f for f in os.listdir(self.root_dir) if os.path.isfile(os.path.join(self.root_dir, f))]


# Example usage:
if __name__ == ""__main__"":
    loader = BaseLoader('/path/to/your/directory')
    print(loader.fetchFiles())
    print(loader.getTextForName('example.txt'))
```"
271814,shoebot/shoebot,shoebot_shoebot/lib/photobot/__init__.py,photobot.Blend,"from PIL import Image, ImageChops, ImageFilter, ImageEnhance, ImageOps, ImageDraw, ImageStat

class Blend:
    """"""Layer blending modes.

    Implements additional blending modes to those present in PIL.
    These blending functions can not be used separately from
    the canvas.flatten() method, where the alpha compositing
    of two layers is handled.

    Since these blending are not part of a C library,
    but pure Python, they take forever to process.
    """"""

    def overlay(self, img1, img2):
        """"""Applies the overlay blend mode.

        Overlays image img2 on image img1. The overlay pixel combines
        multiply and screen: it multiplies dark pixels values and screen
        light values. Returns a composite image with the alpha channel
        retained.
        """"""
        p1 = list(img1.getdata())
        p2 = list(img2.getdata())
        for i in range(len(p1)):
            p3 = ()
            for j in range(len(p1[i])):
                a = p1[i][j] / 255.0
                b = p2[i][j] / 255.0
                if j == 3:
                    d = min(a, b)
                elif a > 0.5:
                    d = 2 * (a + b - a * b) - 1
                else:
                    d = 2 * a * b
                p3 += (int(d * 255),)
            p1[i] = p3
        img = Image.new('RGBA', img1.size, 255)
        img.putdata(p1)
        return img

    def hue(self, img1, img2):
        """"""Applies the hue blend mode.

        Hues image img1 with image img2. The hue filter replaces the
        hues of pixels in img1 with the hues of pixels in img2. Returns
        a composite image with the alpha channel retained.
        """"""
        import colorsys
        p1 = list(img1.getdata())
        p2 = list(img2.getdata())
        for i in range(len(p1)):
            r1, g1, b1, a1 = p1[i]
            r1 = r1 / 255.0
            g1 = g1 / 255.0
            b1 = b1 / 255.0
            h1, s1, v1 = colorsys.rgb_to_hsv(r1, g1, b1)
            r2, g2, b2, a2 = p2[i]
            r2 = r2 / 255.0
            g2 = g2 / 255.0
            b2 = b2 / 255.0
            h2, s2, v2 = colorsys.rgb_to_hsv(r2, g2, b2)
            r3, g3, b3 = colorsys.hsv_to_rgb(h2, s1, v1)
            r3 = int(r3 * 255)
            g3 = int(g3 * 255)
            b3 = int(b3 * 255)
            p1[i] = (r3, g3, b3, a1)
        img = Image.new('RGBA', img1.size, 255)
        img.putdata(p1)
        return img

    def color(self, img1, img2):
        """"""Applies the color blend mode.

        Colorize image img1 with image img2. The color filter replaces
        the hue and saturation of pixels in img1 with the hue and
        saturation of pixels in img2. Returns a composite image with the
        alpha channel retained.
        """"""
        import colorsys
        p1 = list(img1.getdata())
        p2 = list(img2.getdata())
        for i in range(len(p1)):
            r1, g1, b1, a1 = p1[i]
            r1 = r1 / 255.0
            g1 = g1 / 255.0
            b1 = b1 / 255.0
            h1, s1, v1 = colorsys.rgb_to_hsv(r1, g1, b1)
            r2, g2, b2, a2 = p2[i]
            r2 = r2 / 255.0
            g2 = g2 / 255.0
            b2 = b2 / 255.0
            h2, s2, v2 = colorsys.rgb_to_hsv(r2, g2, b2)
            r3, g3, b3 = colorsys.hsv_to_rgb(h2, s2, v1)
            r3 = int(r3 * 255)
            g3 = int(g3 * 255)
            b3 = int(b3 * 255)
            p1[i] = (r3, g3, b3, a1)
        img = Image.new('RGBA', img1.size, 255)
        img.putdata(p1)
        return img","
class Blend:
    
    def overlay(self, img1, img2):
        
        pass
    def hue(self, img1, img2):
        
        pass

    def color(self, img1, img2):
        
        pass",snippet_182,4,"```python
from PIL import Image

class Blend:
    """"""
    A class used to blend two images using different techniques.

    Methods:
    -------
    overlay(img1, img2)
        Overlays img2 on top of img1.
    hue(img1, img2)
        Blends img1 and img2 using the hue blending mode.
    color(img1, img2)
        Blends img1 and img2 using the color blending mode.
    """"""

    def overlay(self, img1, img2):
        """"""
        Overlays img2 on top of img1.

        Parameters:
        ----------
        img1 : PIL.Image
            The base image.
        img2 : PIL.Image
            The image to be overlaid.

        Returns:
        -------
        PIL.Image
            The blended image.
        """"""
        img1 = img1.convert('RGBA')
        img2 = img2.convert('RGBA')
        blended_img = Image.blend(img1, img2, 0.5)
        return blended_img

    def hue(self, img1, img2):
        """"""
        Blends img1 and img2 using the hue blending mode.

        Parameters:
        ----------
        img1 : PIL.Image
            The base image.
        img2 : PIL.Image
            The image to be blended.

        Returns:
        -------
        PIL.Image
            The blended image.
        """"""
        img1 = img1.convert('RGB')
        img2 = img2.convert('RGB')
        img1_hsv = img1.convert('HSV')
        img2_hsv = img2.convert('HSV')
        blended_hsv = Image.merge('HSV', (img2_hsv.split()[0], img1_hsv.split()[1], img1_hsv.split()[2]))
        blended_img = blended_hsv.convert('RGB')
        return blended_img

    def color(self, img1, img2):
        """"""
        Blends img1 and img2 using the color blending mode.

        Parameters:
        ----------
        img1 : PIL.Image
            The base image.
        img2 : PIL.Image
            The image to be blended.

        Returns:
        -------
        PIL.Image
            The blended image.
        """"""
        img1 = img1.convert('RGB')
        img2 = img2.convert('RGB')
        img1_hsv = img1.convert('HSV')
        img2_hsv = img2.convert('HSV')
        blended_hsv = Image.merge('HSV', (img2_hsv.split()[0], img2_hsv.split()[1], img1_hsv.split()[2]))
        blended_img = blended_hsv.convert('RGB')
        return blended_img


# Example usage:
if __name__ == ""__main__"":
    img1 = Image.open('image1.jpg')
    img2 = Image.open('image2.jpg')

    blend = Blend()
    overlay_img = blend.overlay(img1, img2)
    hue_img = blend.hue(img1, img2)
    color_img = blend.color(img1, img2)

    overlay_img.save('overlay.jpg')
    hue_img.save('hue.jpg')
    color_img.save('color.jpg')
```"
272626,cackharot/suds-py3,cackharot_suds-py3/suds/reader.py,suds.reader.Reader,"from suds.plugin import PluginContainer
import hashlib

class Reader:
    """"""
    The reader provides integration with cache.
    @ivar options: An options object.
    @type options: I{Options}
    """"""

    def __init__(self, options):
        """"""
        @param options: An options object.
        @type options: I{Options}
        """"""
        self.options = options
        self.plugins = PluginContainer(options.plugins)

    def mangle(self, name, x):
        """"""
        Mangle the name by hashing the I{name} and appending I{x}.
        @return: the mangled name.
        """"""
        h = hashlib.sha256(name.encode('utf8')).hexdigest()
        return '%s-%s' % (h, x)","
class Reader:
    
    def __init__(self, options):
        
        pass
    def mangle(self, name, x):
        
        pass",snippet_183,3,"```python
class Reader:
    
    def __init__(self, options):
        self.options = options

    def mangle(self, name, x):
        return f""{name}_{x}""
```"
272646,cackharot/suds-py3,cackharot_suds-py3/suds/sax/enc.py,suds.sax.enc.Encoder,"import re

class Encoder:
    """"""
    An XML special character encoder/decoder.
    @cvar encodings: A mapping of special characters encoding.
    @type encodings: [(str,str)]
    @cvar decodings: A mapping of special characters decoding.
    @type decodings: [(str,str)]
    @cvar special: A list of special characters
    @type special: [char]
    """"""
    encodings = (('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;'), ('""', '&quot;'), (""'"", '&apos;'))
    decodings = (('&lt;', '<'), ('&gt;', '>'), ('&quot;', '""'), ('&apos;', ""'""), ('&amp;', '&'))
    special = ('&', '<', '>', '""', ""'"")

    def needsEncoding(self, s):
        """"""
        Get whether string I{s} contains special characters.
        @param s: A string to check.
        @type s: str
        @return: True if needs encoding.
        @rtype: boolean
        """"""
        if isinstance(s, str):
            for c in self.special:
                if c in s:
                    return True
        return False

    def encode(self, s):
        """"""
        Encode special characters found in string I{s}.
        @param s: A string to encode.
        @type s: str
        @return: The encoded string.
        @rtype: str
        """"""
        if isinstance(s, str) and self.needsEncoding(s):
            for x in self.encodings:
                s = re.sub(x[0], x[1], s)
        return s

    def decode(self, s):
        """"""
        Decode special characters encodings found in string I{s}.
        @param s: A string to decode.
        @type s: str
        @return: The decoded string.
        @rtype: str
        """"""
        if isinstance(s, str) and '&' in s:
            for x in self.decodings:
                s = s.replace(x[0], x[1])
        return s","
class Encoder:
    
    def needsEncoding(self, s):
        
        pass
    def encode(self, s):
        
        pass

    def decode(self, s):
        
        pass",snippet_184,4,"```python
import base64

class Encoder:
    
    def needsEncoding(self, s):
        """"""Check if a string contains non-ASCII characters.""""""
        return not all(ord(c) < 128 for c in s)

    def encode(self, s):
        """"""Encode a string using Base64.""""""
        return base64.b64encode(s.encode('utf-8')).decode('utf-8')

    def decode(self, s):
        """"""Decode a Base64 encoded string.""""""
        return base64.b64decode(s.encode('utf-8')).decode('utf-8')
```"
272664,cackharot/suds-py3,cackharot_suds-py3/suds/transport/__init__.py,suds.transport.Transport,"class Transport:
    """"""
    The transport I{interface}.
    """"""

    def __init__(self):
        """"""
        Constructor.
        """"""
        from suds.transport.options import Options
        self.options = Options()
        del Options

    def open(self, request):
        """"""
        Open the url in the specified request.
        @param request: A transport request.
        @type request: L{Request}
        @return: An input stream.
        @rtype: stream
        @raise TransportError: On all transport errors.
        """"""
        raise Exception('not-implemented')

    def send(self, request):
        """"""
        Send soap message.  Implementations are expected to handle:
            - proxies
            - I{http} headers
            - cookies
            - sending message
            - brokering exceptions into L{TransportError}
        @param request: A transport request.
        @type request: L{Request}
        @return: The reply
        @rtype: L{Reply}
        @raise TransportError: On all transport errors.
        """"""
        raise Exception('not-implemented')","class Transport:
    
    def __init__(self):
        
        pass
    def open(self, request):
        
        pass
    def send(self, request):
        
        pass",snippet_185,4,"```python
class Transport:
    
    def __init__(self):
        self.is_open = False

    def open(self, request):
        if not self.is_open:
            print(f""Opening connection for {request}"")
            self.is_open = True
        else:
            print(""Connection is already open"")

    def send(self, request):
        if self.is_open:
            print(f""Sending {request}"")
        else:
            raise Exception(""Connection is not open"")
```"
272699,cackharot/suds-py3,cackharot_suds-py3/suds/xsd/doctor.py,suds.xsd.doctor.TnsFilter,"class TnsFilter:
    """"""
    Target Namespace filter.
    @ivar tns: A list of target namespaces.
    @type tns: [str,...]
    """"""

    def __init__(self, *tns):
        """"""
        @param tns: A list of target namespaces.
        @type tns: [str,...]
        """"""
        self.tns = []
        self.add(*tns)

    def add(self, *tns):
        """"""
        Add I{targetNamesapces} to be added.
        @param tns: A list of target namespaces.
        @type tns: [str,...]
        """"""
        self.tns += tns

    def match(self, root, ns):
        """"""
        Match by I{targetNamespace} excluding those that
        are equal to the specified namespace to prevent
        adding an import to itself.
        @param root: A schema root.
        @type root: L{Element}
        """"""
        tns = root.get('targetNamespace')
        if len(self.tns):
            matched = tns in self.tns
        else:
            matched = 1
        itself = ns == tns
        return matched and (not itself)","class TnsFilter:
    
    def __init__(self, *tns):
        
        pass
    def add(self, *tns):
        
        pass
    def match(self, root, ns):
        
        pass",snippet_186,4,"```python
class TnsFilter:
    
    def __init__(self, *tns):
        self.tns = set(tns)

    def add(self, *tns):
        self.tns.update(tns)

    def match(self, root, ns):
        return root.tag.split('}')[-1] in self.tns or ns in self.tns
```"
272711,cackharot/suds-py3,cackharot_suds-py3/suds/xsd/sxbase.py,suds.xsd.sxbase.NodeFinder,"class NodeFinder:
    """"""
    Find nodes based on flexable criteria.  The I{matcher} is
    may be any object that implements a match(n) method.
    @ivar matcher: An object used as criteria for match.
    @type matcher: I{any}.match(n)
    @ivar limit: Limit the number of matches.  0=unlimited.
    @type limit: int
    """"""

    def __init__(self, matcher, limit=0):
        """"""
        @param matcher: An object used as criteria for match.
        @type matcher: I{any}.match(n)
        @param limit: Limit the number of matches.  0=unlimited.
        @type limit: int
        """"""
        self.matcher = matcher
        self.limit = limit

    def find(self, node, list):
        """"""
        Traverse the tree looking for matches.
        @param node: A node to match on.
        @type node: L{SchemaObject}
        @param list: A list to fill.
        @type list: list
        """"""
        if self.matcher.match(node):
            list.append(node)
            self.limit -= 1
            if self.limit == 0:
                return
        for c in node.rawchildren:
            self.find(c, list)
        return self","class NodeFinder:
    
    def __init__(self, matcher, limit=0):
        
        pass
    def find(self, node, list):
        
        pass",snippet_187,3,"```python
class NodeFinder:
    
    def __init__(self, matcher, limit=0):
        """"""
        Initialize the NodeFinder with a matcher function and an optional limit.

        Args:
            matcher (function): A function that takes a node and returns True if it matches the desired condition.
            limit (int, optional): The maximum number of matches to return. Defaults to 0, which means no limit.
        """"""
        self.matcher = matcher
        self.limit = limit

    def find(self, node, lst):
        """"""
        Find nodes in the given list that match the condition specified by the matcher function.

        Args:
            node (any): The current node being processed (not used in this implementation).
            lst (list): The list of nodes to search.

        Returns:
            list: A list of nodes that match the condition.
        """"""
        matches = []
        for n in lst:
            if self.matcher(n):
                matches.append(n)
                if self.limit > 0 and len(matches) >= self.limit:
                    break
        return matches
```"
279001,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.AES_CTR_Mechanism,"import PyKCS11.LowLevel

class AES_CTR_Mechanism:
    """"""CKM_AES_CTR encryption mechanism""""""

    def __init__(self, counterBits, counterBlock):
        """"""
        :param counterBits: the number of incremented bits in the counter block
        :param counterBlock: a 16-byte initial value of the counter block
        """"""
        self._param = PyKCS11.LowLevel.CK_AES_CTR_PARAMS()
        self._source_cb = ckbytelist(counterBlock)
        self._param.ulCounterBits = counterBits
        self._param.cb = self._source_cb
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = CKM_AES_CTR
        self._mech.pParameter = self._param
        self._mech.ulParameterLen = PyKCS11.LowLevel.CK_AES_CTR_PARAMS_LENGTH

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class AES_CTR_Mechanism:
    
    def __init__(self, counterBits, counterBlock):
        
        pass
    def to_native(self):
        
        pass",snippet_190,3,"```python
class AES_CTR_Mechanism:
    
    def __init__(self, counterBits, counterBlock):
        """"""
        Initializes an AES_CTR_Mechanism object.

        :param counterBits: The number of bits in the counter block that are used for the counter.
        :param counterBlock: The initial counter block.
        """"""
        if not isinstance(counterBits, int) or counterBits <= 0:
            raise ValueError(""counterBits must be a positive integer"")
        if not isinstance(counterBlock, bytes):
            raise ValueError(""counterBlock must be bytes"")
        
        self.counterBits = counterBits
        self.counterBlock = counterBlock

    def to_native(self):
        """"""
        Converts the AES_CTR_Mechanism object to a native representation.

        :return: A dictionary representing the AES_CTR_Mechanism object.
        """"""
        return {
            'mechanism': 'CKM_AES_CTR',
            'params': {
                'ulCounterBits': self.counterBits,
                'pCounterBlock': self.counterBlock.hex()
            }
        }
```"
279002,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.AES_GCM_Mechanism,"import PyKCS11.LowLevel

class AES_GCM_Mechanism:
    """"""CKM_AES_GCM warpping mechanism""""""

    def __init__(self, iv, aad, tagBits):
        """"""
        :param iv: initialization vector
        :param aad: additional authentication data
        :param tagBits: length of authentication tag in bits
        """"""
        self._param = PyKCS11.LowLevel.CK_GCM_PARAMS()
        self._source_iv = ckbytelist(iv)
        self._param.pIv = self._source_iv
        self._param.ulIvLen = len(self._source_iv)
        self._source_aad = ckbytelist(aad)
        self._param.pAAD = self._source_aad
        self._param.ulAADLen = len(self._source_aad)
        self._param.ulTagBits = tagBits
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = CKM_AES_GCM
        self._mech.pParameter = self._param
        self._mech.ulParameterLen = PyKCS11.LowLevel.CK_GCM_PARAMS_LENGTH

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class AES_GCM_Mechanism:
    
    def __init__(self, iv, aad, tagBits):
        
        pass
    def to_native(self):
        
        pass",snippet_191,3,"```python
class AES_GCM_Mechanism:
    
    def __init__(self, iv, aad, tagBits):
        self.iv = iv
        self.aad = aad
        self.tagBits = tagBits

    def to_native(self):
        return {
            'mechanism': 'CKM_AES_GCM',
            'parameter': {
                'iv': self.iv,
                'aad': self.aad,
                'tagBits': self.tagBits
            }
        }
```"
279010,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.CONCATENATE_BASE_AND_KEY_Mechanism,"import PyKCS11.LowLevel

class CONCATENATE_BASE_AND_KEY_Mechanism:
    """"""CKM_CONCATENATE_BASE_AND_KEY key derivation mechanism""""""

    def __init__(self, encKey):
        """"""
        :param encKey: a handle of encryption key
        """"""
        self._encKey = encKey
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = CKM_CONCATENATE_BASE_AND_KEY
        self._mech.pParameter = self._encKey
        self._mech.ulParameterLen = PyKCS11.LowLevel.CK_OBJECT_HANDLE_LENGTH

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class CONCATENATE_BASE_AND_KEY_Mechanism:
    
    def __init__(self, encKey):
        
        pass
    def to_native(self):
        
        pass",snippet_192,3,"```python
class CONCATENATE_BASE_AND_KEY_Mechanism:
    
    def __init__(self, encKey):
        """"""
        Initialize the CONCATENATE_BASE_AND_KEY_Mechanism class.

        Args:
            encKey (str): The encryption key.
        """"""
        self.encKey = encKey

    def to_native(self):
        """"""
        Concatenates the base ('CONCATENATE_BASE_AND_KEY') and the encryption key.

        Returns:
            str: The concatenated string.
        """"""
        base_string = 'CONCATENATE_BASE_AND_KEY'
        return base_string + self.encKey


# Example usage:
if __name__ == ""__main__"":
    mechanism = CONCATENATE_BASE_AND_KEY_Mechanism('my_enc_key')
    print(mechanism.to_native())  # Outputs: CONCATENATE_BASE_AND_KEYmy_enc_key
```"
279012,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.CkClass,"class CkClass:
    """"""
    Base class for CK_* classes
    """"""
    flags_dict = {}
    fields = {}
    flags = 0

    def flags2text(self):
        """"""
        parse the `self.flags` field and create a list of `CKF_*` strings
        corresponding to bits set in flags

        :return: a list of strings
        :rtype: list
        """"""
        r = []
        for k, v in self.flags_dict.items():
            if self.flags & k:
                r.append(v)
        return r

    def state2text(self):
        """"""
        Dummy method. Will be overwriden if necessary
        """"""
        return ''

    def to_dict(self):
        """"""
        convert the fields of the object into a dictionnary
        """"""
        dico = {}
        for field in self.fields:
            if field == 'flags':
                dico[field] = self.flags2text()
            elif field == 'state':
                dico[field] = self.state2text()
            else:
                dico[field] = self.__dict__[field]
        return dico

    def __str__(self):
        """"""
        text representation of the object
        """"""
        dico = self.to_dict()
        lines = []
        for key in sorted(dico.keys()):
            ck_type = self.fields[key]
            if ck_type == 'flags':
                flags = ', '.join(dico[key])
                lines.append(f'{key}: {flags}')
            elif ck_type == 'pair':
                p1, p2 = dico[key]
                lines.append(f'{key}: {p1}.{p2}')
            else:
                lines.append(f'{key}: {dico[key]}')
        return '\n'.join(lines)","class CkClass:
    
    def flags2text(self):
        
        pass
    def state2text(self):
        
        pass
    def to_dict(self):
        
        pass

    def __str__(self):
        
        pass",snippet_193,5,"```python
class CkClass:
    def __init__(self, flags, state):
        """"""
        Initialize the CkClass instance.

        Args:
            flags (int): The flags value.
            state (int): The state value.
        """"""
        self.flags = flags
        self.state = state

    def flags2text(self):
        """"""
        Convert flags to text representation.

        Returns:
            str: Text representation of the flags.
        """"""
        flag_map = {
            0: ""None"",
            1: ""Flag1"",
            2: ""Flag2"",
            4: ""Flag3"",
            # Add more flag mappings as needed
        }
        flag_text = []
        for flag, text in flag_map.items():
            if self.flags & flag:
                flag_text.append(text)
        return "", "".join(flag_text) if flag_text else ""None""

    def state2text(self):
        """"""
        Convert state to text representation.

        Returns:
            str: Text representation of the state.
        """"""
        state_map = {
            0: ""State0"",
            1: ""State1"",
            2: ""State2"",
            # Add more state mappings as needed
        }
        return state_map.get(self.state, ""Unknown"")

    def to_dict(self):
        """"""
        Convert the CkClass instance to a dictionary.

        Returns:
            dict: Dictionary representation of the CkClass instance.
        """"""
        return {
            ""flags"": self.flags,
            ""flags_text"": self.flags2text(),
            ""state"": self.state,
            ""state_text"": self.state2text(),
        }

    def __str__(self):
        """"""
        Return a string representation of the CkClass instance.

        Returns:
            str: String representation of the CkClass instance.
        """"""
        return f""CkClass(flags={self.flags} ({self.flags2text()}), state={self.state} ({self.state2text()}))""


# Example usage:
if __name__ == ""__main__"":
    ck_instance = CkClass(flags=3, state=1)
    print(ck_instance)
    print(ck_instance.to_dict())
```"
279015,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.EXTRACT_KEY_FROM_KEY_Mechanism,"import PyKCS11.LowLevel

class EXTRACT_KEY_FROM_KEY_Mechanism:
    """"""CKM_EXTRACT_KEY_FROM_KEY key derivation mechanism""""""

    def __init__(self, extractParams):
        """"""
        :param extractParams: the index of the first bit of the original
        key to be used in the newly-derived key.  For example if
        extractParams=5 then the 5 first bits are skipped and not used.
        """"""
        self._param = PyKCS11.LowLevel.CK_EXTRACT_PARAMS()
        self._param.assign(extractParams)
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = CKM_EXTRACT_KEY_FROM_KEY
        self._mech.pParameter = self._param
        self._mech.ulParameterLen = PyKCS11.LowLevel.CK_EXTRACT_PARAMS_LENGTH

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class EXTRACT_KEY_FROM_KEY_Mechanism:
    
    def __init__(self, extractParams):
        
        pass
    def to_native(self):
        
        pass",snippet_194,3,"```python
class EXTRACT_KEY_FROM_KEY_Mechanism:
    
    def __init__(self, extractParams):
        """"""
        Initialize the EXTRACT_KEY_FROM_KEY_Mechanism class.

        Args:
            extractParams (dict): A dictionary containing the extraction parameters.
        """"""
        if not isinstance(extractParams, dict):
            raise TypeError(""extractParams must be a dictionary"")
        
        required_keys = ['source_key', 'target_key']
        if not all(key in extractParams for key in required_keys):
            raise ValueError(""extractParams must contain 'source_key' and 'target_key'"")
        
        self.extractParams = extractParams

    def to_native(self):
        """"""
        Convert the extraction parameters to a native Python dictionary.

        Returns:
            dict: A dictionary containing the extraction parameters.
        """"""
        native_dict = {
            'source_key': self.extractParams['source_key'],
            'target_key': self.extractParams['target_key']
        }
        return native_dict
```"
279016,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.KEY_DERIVATION_STRING_DATA_MechanismBase,"import PyKCS11.LowLevel

class KEY_DERIVATION_STRING_DATA_MechanismBase:
    """"""Base class for mechanisms using derivation string data""""""

    def __init__(self, data, mechType):
        """"""
        :param data: a byte array to concatenate the key with
        :param mechType: mechanism type
        """"""
        self._param = PyKCS11.LowLevel.CK_KEY_DERIVATION_STRING_DATA()
        self._data = ckbytelist(data)
        self._param.pData = self._data
        self._param.ulLen = len(self._data)
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = mechType
        self._mech.pParameter = self._param
        self._mech.ulParameterLen = PyKCS11.LowLevel.CK_KEY_DERIVATION_STRING_DATA_LENGTH

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class KEY_DERIVATION_STRING_DATA_MechanismBase:
    
    def __init__(self, data, mechType):
        
        pass
    def to_native(self):
        
        pass",snippet_195,3,"```python
class KEY_DERIVATION_STRING_DATA_MechanismBase:
    def __init__(self, data, mechType):
        self.data = data
        self.mechType = mechType

    def to_native(self):
        return {
            'mechanism': self.mechType,
            'parameter': self.data
        }
```"
279017,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.Mechanism,"import PyKCS11.LowLevel

class Mechanism:
    """"""Wraps CK_MECHANISM""""""

    def __init__(self, mechanism, param=None):
        """"""
        :param mechanism: the mechanism to be used
        :type mechanism: integer, any `CKM_*` value
        :param param: data to be used as crypto operation parameter
          (i.e. the IV for some algorithms)
        :type param: string or list/tuple of bytes

        :see: :func:`Session.decrypt`, :func:`Session.sign`
        """"""
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = mechanism
        self._param = None
        if param:
            self._param = ckbytelist(param)
            self._mech.pParameter = self._param
            self._mech.ulParameterLen = len(param)

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class Mechanism:
    
    def __init__(self, mechanism, param=None):
        
        pass
    def to_native(self):
        
        pass",snippet_196,3,"```python
class Mechanism:
    
    def __init__(self, mechanism, param=None):
        self.mechanism = mechanism
        self.param = param

    def to_native(self):
        if self.mechanism == 'laplace':
            if self.param is None:
                raise ValueError(""Laplace mechanism requires a sensitivity parameter"")
            return f""Laplace({self.param})""
        elif self.mechanism == 'gaussian':
            if self.param is None or len(self.param) != 2:
                raise ValueError(""Gaussian mechanism requires a tuple of (sensitivity, epsilon) parameters"")
            return f""Gaussian(sensitivity={self.param[0]}, epsilon={self.param[1]})""
        else:
            raise ValueError(f""Unsupported mechanism: {self.mechanism}"")
```"
279020,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.RSAOAEPMechanism,"import PyKCS11.LowLevel

class RSAOAEPMechanism:
    """"""RSA OAEP Wrapping mechanism""""""

    def __init__(self, hashAlg, mgf, label=None):
        """"""
        :param hashAlg: the hash algorithm to use (like `CKM_SHA256`)
        :param mgf: the mask generation function to use (like
          `CKG_MGF1_SHA256`)
        :param label: the (optional) label to use
        """"""
        self._param = PyKCS11.LowLevel.CK_RSA_PKCS_OAEP_PARAMS()
        self._param.hashAlg = hashAlg
        self._param.mgf = mgf
        self._source = None
        self._param.source = CKZ_DATA_SPECIFIED
        if label:
            self._source = ckbytelist(label)
            self._param.ulSourceDataLen = len(self._source)
        else:
            self._param.ulSourceDataLen = 0
        self._param.pSourceData = self._source
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = CKM_RSA_PKCS_OAEP
        self._mech.pParameter = self._param
        self._mech.ulParameterLen = PyKCS11.LowLevel.CK_RSA_PKCS_OAEP_PARAMS_LENGTH

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class RSAOAEPMechanism:
    
    def __init__(self, hashAlg, mgf, label=None):
        
        pass
    def to_native(self):
        
        pass",snippet_197,3,"```python
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

class RSAOAEPMechanism:
    
    def __init__(self, hashAlg, mgf, label=None):
        self.hashAlg = hashAlg
        self.mgf = mgf
        self.label = label

    def to_native(self):
        hash_alg = getattr(hashes, self.hashAlg.upper())()
        mgf = padding.MGF1(algorithm=hash_alg)
        if self.label is None:
            return padding.OAEP(
                mgf=mgf,
                algorithm=hash_alg,
                label=None
            )
        else:
            return padding.OAEP(
                mgf=mgf,
                algorithm=hash_alg,
                label=self.label
            )
```"
279021,LudovicRousseau/PyKCS11,LudovicRousseau_PyKCS11/PyKCS11/__init__.py,PyKCS11.RSA_PSS_Mechanism,"import PyKCS11.LowLevel

class RSA_PSS_Mechanism:
    """"""RSA PSS Wrapping mechanism""""""

    def __init__(self, mecha, hashAlg, mgf, sLen):
        """"""
        :param mecha: the mechanism to use (like
          `CKM_SHA384_RSA_PKCS_PSS`)
        :param hashAlg: the hash algorithm to use (like `CKM_SHA384`)
        :param mgf: the mask generation function to use (like
          `CKG_MGF1_SHA384`)
        :param sLen: length, in bytes, of the salt value used in the PSS
          encoding (like 0 or the message length)
        """"""
        self._param = PyKCS11.LowLevel.CK_RSA_PKCS_PSS_PARAMS()
        self._param.hashAlg = hashAlg
        self._param.mgf = mgf
        self._param.sLen = sLen
        self._mech = PyKCS11.LowLevel.CK_MECHANISM()
        self._mech.mechanism = mecha
        self._mech.pParameter = self._param
        self._mech.ulParameterLen = PyKCS11.LowLevel.CK_RSA_PKCS_PSS_PARAMS_LENGTH

    def to_native(self):
        """"""convert mechanism to native format""""""
        return self._mech","
class RSA_PSS_Mechanism:
    
    def __init__(self, mecha, hashAlg, mgf, sLen):
        
        pass
    def to_native(self):
        
        pass",snippet_198,3,"```python
from ctypes import c_ulong, c_char_p, byref, create_string_buffer

class RSA_PSS_Mechanism:
    def __init__(self, mecha, hashAlg, mgf, sLen):
        self.mechanism = mecha
        self.mechanism.pParameter = self._create_parameter(hashAlg, mgf, sLen)

    def to_native(self):
        return self.mechanism

    def _create_parameter(self, hashAlg, mgf, sLen):
        class CK_RSA_PKCS_PSS_PARAMS(ctypes.Structure):
            _fields_ = [
                (""hashAlg"", c_ulong),
                (""mgf"", c_ulong),
                (""sLen"", c_ulong)
            ]

        param = CK_RSA_PKCS_PSS_PARAMS()
        param.hashAlg = hashAlg
        param.mgf = mgf
        param.sLen = sLen

        param_ptr = ctypes.pointer(param)
        return ctypes.cast(param_ptr, c_void_p)

    @property
    def mechanism(self):
        return self._mechanism

    @mechanism.setter
    def mechanism(self, mecha):
        from ctypes import c_ulong, c_void_p
        class CK_MECHANISM(ctypes.Structure):
            _fields_ = [
                (""mechanism"", c_ulong),
                (""pParameter"", c_void_p),
                (""ulParameterLen"", c_ulong)
            ]
        self._mechanism = CK_MECHANISM()
        self._mechanism.mechanism = mecha
        self._mechanism.ulParameterLen = ctypes.sizeof(CK_RSA_PKCS_PSS_PARAMS)

import ctypes
```"
281845,datadotworld/data.world-py,datadotworld_data.world-py/datadotworld/datadotworld.py,datadotworld.datadotworld.UriParam,"class UriParam:
    """"""Represents a URI value as a parameter to a SPARQL query""""""

    def __init__(self, uri):
        """"""
        Initialize the UriParam value
        :param uri: the uri value to wrap
        """"""
        self._uri = uri

    def __repr__(self):
        """"""
        The official string representation for the URI
        :return: the string representation for the URI
        """"""
        return self._uri","class UriParam:
    
    def __init__(self, uri):
        
        pass
    def __repr__(self):
        
        pass",snippet_199,3,"```python
from urllib.parse import urlparse

class UriParam:
    
    def __init__(self, uri):
        self.uri = uri
        self.parsed_uri = urlparse(uri)

    def __repr__(self):
        return f""UriParam('{self.uri}')""
```"
282529,quora/qcore,quora_qcore/qcore/events.py,qcore.events.EventInterceptor,"class EventInterceptor:
    """"""A context object helping to temporarily intercept
    a set of events on an object exposing a set of event hooks.

    """"""

    def __init__(self, source, **events):
        """"""
        Constructor.

        :param source: the object exposing a set of event hook properies
        :param events: a set of event_hook_name=event_handler pairs specifying
                       which events to intercept.
        """"""
        self.source = source
        self.events = events

    def __enter__(self):
        """"""Starts event interception.""""""
        source = self.source
        for name, handler in self.events.items():
            hook = getattr(source, name)
            hook.subscribe(handler)

    def __exit__(self, typ, value, traceback):
        """"""Stops event interception.""""""
        source = self.source
        for name, handler in self.events.items():
            hook = getattr(source, name)
            hook.unsubscribe(handler)","class EventInterceptor:
    
    def __init__(self, source, **events):
        
        pass
    def __enter__(self):
        
        pass
    def __exit__(self, typ, value, traceback):
        
        pass",snippet_200,4,"```python
class EventInterceptor:
    
    def __init__(self, source, **events):
        self.source = source
        self.events = events
        self.original_handlers = {}

    def __enter__(self):
        for event_name, handler in self.events.items():
            if hasattr(self.source, event_name):
                self.original_handlers[event_name] = getattr(self.source, event_name)
                setattr(self.source, event_name, handler)
        return self

    def __exit__(self, typ, value, traceback):
        for event_name, original_handler in self.original_handlers.items():
            setattr(self.source, event_name, original_handler)
```"
284811,empymod/empymod,empymod/filters.py,empymod.filters.DigitalFilter,"import numpy as np
import os

class DigitalFilter:
    """"""Simple Class for Digital Linear Filters.


    Parameters
    ----------
    name : str
        Name of the DFL.

    savename = str
        Name with which the filter is saved. If None (default) it is set to the
        same value as `name`.

    filter_coeff = list of str
        By default, the following filter coefficients are checked:

            ``filter_coeff = ['j0', 'j1', 'sin', 'cos']``

        This accounts for the standard Hankel and Fourier DLF in CSEM
        modelling. However, additional coefficient names can be provided via
        this parameter (in list format).

    """"""

    def __init__(self, name, savename=None, filter_coeff=None):
        """"""Add filter name.""""""
        self.name = name
        if savename is None:
            self.savename = name
        else:
            self.savename = savename
        self.filter_coeff = ['j0', 'j1', 'sin', 'cos']
        if filter_coeff is not None:
            self.filter_coeff.extend(filter_coeff)

    def tofile(self, path='filters'):
        """"""Save filter values to ASCII-files.

        Store the filter base and the filter coefficients in separate files
        in the directory `path`; `path` can be a relative or absolute path.

        Examples
        --------
        >>> import empymod
        >>> # Load a filter
        >>> filt = empymod.filters.Hankel().wer_201_2018
        >>> # Save it to pure ASCII-files
        >>> filt.tofile()
        >>> # This will save the following three files:
        >>> #    ./filters/wer_201_2018_base.txt
        >>> #    ./filters/wer_201_2018_j0.txt
        >>> #    ./filters/wer_201_2018_j1.txt

        """"""
        name = self.savename
        path = os.path.abspath(path)
        os.makedirs(path, exist_ok=True)
        basefile = os.path.join(path, name + '_base.txt')
        with open(basefile, 'w') as f:
            self.base.tofile(f, sep='\n')
        for val in self.filter_coeff:
            if hasattr(self, val):
                attrfile = os.path.join(path, name + '_' + val + '.txt')
                with open(attrfile, 'w') as f:
                    getattr(self, val).tofile(f, sep='\n')

    def fromfile(self, path='filters'):
        """"""Load filter values from ASCII-files.

        Load filter base and filter coefficients from ASCII files in the
        directory `path`; `path` can be a relative or absolute path.

        Examples
        --------
        >>> import empymod
        >>> # Create an empty filter;
        >>> # Name has to be the base of the text files
        >>> filt = empymod.filters.DigitalFilter('my-filter')
        >>> # Load the ASCII-files
        >>> filt.fromfile()
        >>> # This will load the following three files:
        >>> #    ./filters/my-filter_base.txt
        >>> #    ./filters/my-filter_j0.txt
        >>> #    ./filters/my-filter_j1.txt
        >>> # and store them in filt.base, filt.j0, and filt.j1.

        """"""
        name = self.savename
        path = os.path.abspath(path)
        basefile = os.path.join(path, name + '_base.txt')
        with open(basefile, 'r') as f:
            self.base = np.fromfile(f, sep='\n')
        for val in self.filter_coeff:
            attrfile = os.path.join(path, name + '_' + val + '.txt')
            if os.path.isfile(attrfile):
                with open(attrfile, 'r') as f:
                    setattr(self, val, np.fromfile(f, sep='\n'))
        self.factor = np.around([self.base[1] / self.base[0]], 15)","
class DigitalFilter:
    '''Simple Class for Digital Linear Filters.
    Parameters
    ----------
    name : str
        Name of the DFL.
    savename = str
        Name with which the filter is saved. If None (default) it is set to the
        same value as `name`.
    filter_coeff = list of str
        By default, the following filter coefficients are checked:
            ``filter_coeff = ['j0', 'j1', 'sin', 'cos']``
        This accounts for the standard Hankel and Fourier DLF in CSEM
        modelling. However, additional coefficient names can be provided via
        this parameter (in list format).
    '''
    def __init__(self, name, savename=None, filter_coeff=None):
        
        pass

    def tofile(self, path='filters'):
        '''Save filter values to ASCII-files.
        Store the filter base and the filter coefficients in separate files
        in the directory `path`; `path` can be a relative or absolute path.
        Examples
        --------
        >>> import empymod
        >>> # Load a filter
        >>> filt = empymod.filters.Hankel().wer_201_2018
        >>> # Save it to pure ASCII-files
        >>> filt.tofile()
        >>> # This will save the following three files:
        >>> #    ./filters/wer_201_2018_base.txt
        >>> #    ./filters/wer_201_2018_j0.txt
        >>> #    ./filters/wer_201_2018_j1.txt
        '''
        pass

    def fromfile(self, path='filters'):
        '''Load filter values from ASCII-files.
        Load filter base and filter coefficients from ASCII files in the
        directory `path`; `path` can be a relative or absolute path.
        Examples
        --------
        >>> import empymod
        >>> # Create an empty filter;
        >>> # Name has to be the base of the text files
        >>> filt = empymod.filters.DigitalFilter('my-filter')
        >>> # Load the ASCII-files
        >>> filt.fromfile()
        >>> # This will load the following three files:
        >>> #    ./filters/my-filter_base.txt
        >>> #    ./filters/my-filter_j0.txt
        >>> #    ./filters/my-filter_j1.txt
        >>> # and store them in filt.base, filt.j0, and filt.j1.
        '''
        pass",snippet_201,4,"```python
import os
import numpy as np

class DigitalFilter:
    '''Simple Class for Digital Linear Filters.
    Parameters
    ----------
    name : str
        Name of the DFL.
    savename = str
        Name with which the filter is saved. If None (default) it is set to the
        same value as `name`.
    filter_coeff = list of str
        By default, the following filter coefficients are checked:
            ``filter_coeff = ['j0', 'j1', 'sin', 'cos']``
        This accounts for the standard Hankel and Fourier DLF in CSEM
        modelling. However, additional coefficient names can be provided via
        this parameter (in list format).
    '''
    def __init__(self, name, savename=None, filter_coeff=None):
        self.name = name
        self.savename = savename if savename else name
        self.filter_coeff = filter_coeff if filter_coeff else ['j0', 'j1', 'sin', 'cos']
        self.base = None
        for coeff in self.filter_coeff:
            setattr(self, coeff, None)

    def tofile(self, path='filters'):
        '''Save filter values to ASCII-files.
        Store the filter base and the filter coefficients in separate files
        in the directory `path`; `path` can be a relative or absolute path.
        Examples
        --------
        >>> import empymod
        >>> # Load a filter
        >>> filt = empymod.filters.Hankel().wer_201_2018
        >>> # Save it to pure ASCII-files
        >>> filt.tofile()
        >>> # This will save the following three files:
        >>> #    ./filters/wer_201_2018_base.txt
        >>> #    ./filters/wer_201_2018_j0.txt
        >>> #    ./filters/wer_201_2018_j1.txt
        '''
        os.makedirs(path, exist_ok=True)
        np.savetxt(os.path.join(path, f'{self.savename}_base.txt'), self.base)
        for coeff in self.filter_coeff:
            np.savetxt(os.path.join(path, f'{self.savename}_{coeff}.txt'), getattr(self, coeff))

    def fromfile(self, path='filters'):
        '''Load filter values from ASCII-files.
        Load filter base and filter coefficients from ASCII files in the
        directory `path`; `path` can be a relative or absolute path.
        Examples
        --------
        >>> import empymod
        >>> # Create an empty filter;
        >>> # Name has to be the base of the text files
        >>> filt = empymod.filters.DigitalFilter('my-filter')
        >>> # Load the ASCII-files
        >>> filt.fromfile()
        >>> # This will load the following three files:
        >>> #    ./filters/my-filter_base.txt
        >>> #    ./filters/my-filter_j0.txt
        >>> #    ./filters/my-filter_j1.txt
        >>> # and store them in filt.base, filt.j0, and filt.j1.
        '''
        self.base = np.loadtxt(os.path.join(path, f'{self.savename}_base.txt'))
        for coeff in self.filter_coeff:
            try:
                setattr(self, coeff, np.loadtxt(os.path.join(path, f'{self.savename}_{coeff}.txt')))
            except FileNotFoundError:
                setattr(self, coeff, None)
```"
285266,Samreay/ChainConsumer,src/chainconsumer/kde.py,chainconsumer.kde.MegKDE,"import numpy as np
from scipy import spatial

class MegKDE:
    """"""Matched Elliptical Gaussian Kernel Density Estimator

    Adapted from the algorithm specified in the BAMBIS's model specified Wolf 2017
    to support weighted samples.
    """"""

    def __init__(self, train: np.ndarray, weights: np.ndarray | None=None, truncation: float=3.0, nmin: int=4, factor: float=1.0):
        """"""
        Args:
            train (np.ndarray): The training data set. Should be a 1D array of samples or a 2D array
                of shape (n_samples, n_dim).
            weights (np.ndarray, optional): An array of weights. If not specified, equal weights are assumed.
            truncation (float, optional): The maximum deviation (in sigma) to use points in the KDE
            nmin (int, optional): The minimum number of points required to estimate the density
            factor (float, optional): Send bandwidth to this factor of the data estimate
        """"""
        self.truncation = truncation
        self.nmin = nmin
        self.train = train
        if len(train.shape) == 1:
            train = np.atleast_2d(train).T
        self.num_points, self.num_dim = train.shape
        if weights is None:
            weights = np.ones(self.num_points)
        self.weights = weights
        self.mean = np.average(train, weights=weights, axis=0)
        dx = train - self.mean
        cov = np.atleast_2d(np.cov(dx.T, aweights=weights))
        self.A = np.linalg.cholesky(np.linalg.inv(cov))
        self.d = np.dot(dx, self.A)
        self.tree = spatial.cKDTree(self.d)
        self.sigma = 2.0 * factor * np.power(self.num_points, -1.0 / (4 + self.num_dim))
        self.sigma_fact = -0.5 / (self.sigma * self.sigma)

    def evaluate(self, data: np.ndarray) -> np.ndarray:
        """"""Estimate un-normalised probability density at target points

        Args:
            data (np.ndarray): 2D array of shape (n_samples, n_dim).

        Returns:
            np.ndarray: A `(n_samples)` length array of estimates

        """"""
        if len(data.shape) == 1 and self.num_dim == 1:
            data = np.atleast_2d(data).T
        _d = np.dot(data - self.mean, self.A)
        neighbors = self.tree.query_ball_point(_d, self.sigma * self.truncation)
        out = []
        for i, n in enumerate(neighbors):
            if len(n) >= self.nmin:
                diff = self.d[n, :] - _d[i]
                distsq = np.sum(diff * diff, axis=1)
            else:
                dist, n = self.tree.query(_d[i], k=self.nmin)
                distsq = dist * dist
            out.append(np.sum(self.weights[n] * np.exp(self.sigma_fact * distsq)))
        return np.array(out)","
class MegKDE:
    
    def __init__(self, train: np.ndarray, weights: np.ndarray | None=None, truncation: float=3.0, nmin: int=4, factor: float=1.0):
        
        pass
    def evaluate(self, data: np.ndarray) -> np.ndarray:
        
        pass",snippet_203,3,"```python
import numpy as np
from scipy.stats import gaussian_kde

class MegKDE:
    
    def __init__(self, train: np.ndarray, weights: np.ndarray | None=None, truncation: float=3.0, nmin: int=4, factor: float=1.0):
        if weights is None:
            weights = np.ones_like(train)
        self.kde = gaussian_kde(train, weights=weights)
        self.kde.covariance_factor = lambda : self.kde.scotts_factor() * factor
        self.kde._compute_covariance()
        self.truncation = truncation
        self.nmin = nmin

    def evaluate(self, data: np.ndarray) -> np.ndarray:
        densities = self.kde.evaluate(data)
        densities[densities < np.finfo(densities.dtype).tiny] = np.finfo(densities.dtype).tiny
        log_densities = np.log(densities)
        log_densities = np.clip(log_densities, -self.truncation, self.truncation)
        return log_densities
```"
285844,4Catalyzer/flask-resty,4Catalyzer_flask-resty/flask_resty/authentication.py,flask_resty.authentication.AuthenticationBase,"class AuthenticationBase:
    """"""Base class for API authentication components.

    Authentication components are responsible for extracting the request
    credentials, if any. They should raise a 401 if the credentials are
    invalid, but should provide `None` for unauthenticated users.

    Flask-RESTy provides an implementation using `JSON Web Tokens`_  but you
    can use any authentication component by extending
    :py:class:`AuthenticationBase` and implementing
    :py:meth:`get_request_credentials`.

    .. _JSON Web Tokens: https://jwt.io/
    """"""

    def authenticate_request(self):
        """"""Store the request credentials in the
        :py:class:`flask.ctx.AppContext`.

        .. warning::

            No validation is performed by Flask-RESTy. It is up to the
            implementor to validate the request in
            :py:meth:`get_request_credentials`.
        """"""
        set_request_credentials(self.get_request_credentials())

    def get_request_credentials(self):
        """"""Get the credentials for the current request.

        Typically this is done by inspecting :py:data:`flask.request`.

        .. warning::

            Implementing classes **must** raise an exception on authentication
            failure. A 401 Unauthorized :py:class:`ApiError` is recommended.

        :return: The credentials for the current request.
        """"""
        raise NotImplementedError()","class AuthenticationBase:
    
    def authenticate_request(self):
        
        pass
    def get_request_credentials(self):
        
        pass",snippet_204,3,"```python
class AuthenticationBase:
    """"""
    Base class for authentication mechanisms.
    """"""

    def authenticate_request(self, request):
        """"""
        Authenticate a given request.

        Args:
            request (object): The request to be authenticated.

        Returns:
            bool: True if the request is authenticated, False otherwise.
        """"""
        credentials = self.get_request_credentials(request)
        return self._verify_credentials(credentials)

    def get_request_credentials(self, request):
        """"""
        Extract credentials from a given request.

        Args:
            request (object): The request from which to extract credentials.

        Returns:
            object: The extracted credentials.
        """"""
        raise NotImplementedError(""Subclasses must implement this method"")

    def _verify_credentials(self, credentials):
        """"""
        Verify the given credentials.

        Args:
            credentials (object): The credentials to be verified.

        Returns:
            bool: True if the credentials are valid, False otherwise.
        """"""
        raise NotImplementedError(""Subclasses must implement this method"")


# Example usage with a concrete subclass
class BasicAuth(AuthenticationBase):
    def __init__(self, username, password):
        self.username = username
        self.password = password

    def get_request_credentials(self, request):
        # Assuming the request has a 'headers' attribute with 'Authorization' key
        auth_header = request.headers.get('Authorization')
        if auth_header:
            # Assuming the auth header is in the format 'Basic <base64 encoded username:password>'
            import base64
            encoded_credentials = auth_header.split(' ')[1]
            decoded_credentials = base64.b64decode(encoded_credentials).decode('utf-8')
            username, password = decoded_credentials.split(':')
            return {'username': username, 'password': password}
        return None

    def _verify_credentials(self, credentials):
        if credentials is None:
            return False
        return credentials['username'] == self.username and credentials['password'] == self.password


class Request:
    def __init__(self, headers):
        self.headers = headers


if __name__ == ""__main__"":
    # Create an instance of BasicAuth
    auth = BasicAuth('test_user', 'test_password')

    # Create a request with valid credentials
    import base64
    valid_credentials = f'test_user:test_password'.encode('utf-8')
    encoded_credentials = base64.b64encode(valid_credentials).decode('utf-8')
    valid_request = Request({'Authorization': f'Basic {encoded_credentials}'})

    # Authenticate the request
    print(auth.authenticate_request(valid_request))  # Should print: True

    # Create a request with invalid credentials
    invalid_request = Request({'Authorization': 'Basic invalid_credentials'})

    # Authenticate the request
    print(auth.authenticate_request(invalid_request))  # Should print: False
```"
285856,4Catalyzer/flask-resty,4Catalyzer_flask-resty/flask_resty/filtering.py,flask_resty.filtering.ArgFilterBase,"class ArgFilterBase:
    """"""An abstract specification of a filter from a query argument.

    Implementing classes must provide :py:meth:`maybe_set_arg_name` and
    :py:meth:`filter_query`.
    """"""

    def maybe_set_arg_name(self, arg_name):
        """"""Set the name of the argument to which this filter is bound.

        :param str arg_name: The name of the field to filter against.
        :raises: :py:class:`NotImplementedError` if no implementation is
            provided.
        """"""
        raise NotImplementedError()

    def filter_query(self, query, view, arg_value):
        """"""Filter the query.

        :param query: The query to filter.
        :type query: :py:class:`sqlalchemy.orm.query.Query`
        :param view: The view with the model we wish to filter for.
        :type view: :py:class:`ModelView`
        :param str arg_value: The filter specification
        :return: The filtered query
        :rtype: :py:class:`sqlalchemy.orm.query.Query`
        :raises: :py:class:`NotImplementedError` if no implementation is
            provided.
        """"""
        raise NotImplementedError()","class ArgFilterBase:
    
    def maybe_set_arg_name(self, arg_name):
        
        pass
    def filter_query(self, query, view, arg_value):
        
        pass",snippet_205,3,"```python
class ArgFilterBase:
    """"""
    Base class for argument filters.
    """"""

    def maybe_set_arg_name(self, arg_name):
        """"""
        Sets the argument name if it hasn't been set already.

        Args:
            arg_name (str): The name of the argument.
        """"""
        if not hasattr(self, '_arg_name'):
            self._arg_name = arg_name

    def filter_query(self, query, view, arg_value):
        """"""
        Filters a query based on the provided argument value.

        Args:
            query: The query to be filtered.
            view: The view associated with the query.
            arg_value: The value of the argument.

        Returns:
            The filtered query.
        """"""
        raise NotImplementedError(""Subclasses must implement filter_query"")
```"
285958,tcalmant/python-javaobj,tcalmant_python-javaobj/javaobj/constants.py,javaobj.constants.StreamCodeDebug,"class StreamCodeDebug:
    """"""
    Codes utility methods
    """"""

    @staticmethod
    def op_id(op_id):
        """"""
        Returns the name of the given OP Code
        :param op_id: OP Code
        :return: Name of the OP Code
        """"""
        try:
            return TerminalCode(op_id).name
        except ValueError:
            return '<unknown TC:{0}>'.format(op_id)

    @staticmethod
    def type_code(type_id):
        """"""
        Returns the name of the given Type Code
        :param type_id: Type code
        :return: Name of the type code
        """"""
        try:
            return TypeCode(type_id).name
        except ValueError:
            return '<unknown TypeCode:{0}>'.format(type_id)

    @staticmethod
    def flags(flags):
        """"""
        Returns the names of the class description flags found in the given
        integer

        :param flags: A class description flag entry
        :return: The flags names as a single string
        """"""
        names = sorted((key.name for key in ClassDescFlags if key & flags))
        return ', '.join(names)","class StreamCodeDebug:
    
    @staticmethod
    def op_id(op_id):
        
        pass
    @staticmethod
    def type_code(type_id):
        
        pass
    @staticmethod
    def flags(flags):
        
        pass",snippet_206,4,"```python
class StreamCodeDebug:
    
    @staticmethod
    def op_id(op_id):
        op_id_map = {
            0x00: ""OP_NOP"",
            0x01: ""OP_UNREACH"",
            0x02: ""OP_BLOCK"",
            0x03: ""OP_LOOP"",
            0x04: ""OP_IF"",
            0x05: ""OP_ELSE"",
            0x0b: ""OP_END"",
            0x0c: ""OP_BR"",
            0x0d: ""OP_BR_IF"",
            0x0e: ""OP_BR_TABLE"",
            0x0f: ""OP_RETURN"",
            0x10: ""OP_CALL"",
            0x11: ""OP_CALL_INDIRECT"",
            0x1a: ""OP_DROP"",
            0x1b: ""OP_SELECT"",
            0x20: ""OP_LOCAL_GET"",
            0x21: ""OP_LOCAL_SET"",
            0x22: ""OP_LOCAL_TEE"",
            0x23: ""OP_GLOBAL_GET"",
            0x24: ""OP_GLOBAL_SET"",
            0x28: ""OP_I32_LOAD"",
            0x29: ""OP_I64_LOAD"",
            0x2a: ""OP_F32_LOAD"",
            0x2b: ""OP_F64_LOAD"",
            0x2c: ""OP_I32_LOAD8_S"",
            0x2d: ""OP_I32_LOAD8_U"",
            0x2e: ""OP_I32_LOAD16_S"",
            0x2f: ""OP_I32_LOAD16_U"",
            0x30: ""OP_I64_LOAD8_S"",
            0x31: ""OP_I64_LOAD8_U"",
            0x32: ""OP_I64_LOAD16_S"",
            0x33: ""OP_I64_LOAD16_U"",
            0x34: ""OP_I64_LOAD32_S"",
            0x35: ""OP_I64_LOAD32_U"",
            0x36: ""OP_I32_STORE"",
            0x37: ""OP_I64_STORE"",
            0x38: ""OP_F32_STORE"",
            0x39: ""OP_F64_STORE"",
            0x3a: ""OP_I32_STORE8"",
            0x3b: ""OP_I32_STORE16"",
            0x3c: ""OP_I64_STORE8"",
            0x3d: ""OP_I64_STORE16"",
            0x3e: ""OP_I64_STORE32"",
            0x3f: ""OP_MEMORY_SIZE"",
            0x40: ""OP_MEMORY_GROW"",
            0x41: ""OP_I32_CONST"",
            0x42: ""OP_I64_CONST"",
            0x43: ""OP_F32_CONST"",
            0x44: ""OP_F64_CONST"",
            0x45: ""OP_I32_EQZ"",
            0x46: ""OP_I32_EQ"",
            0x47: ""OP_I32_NE"",
            0x48: ""OP_I32_LT_S"",
            0x49: ""OP_I32_LT_U"",
            0x4a: ""OP_I32_GT_S"",
            0x4b: ""OP_I32_GT_U"",
            0x4c: ""OP_I32_LE_S"",
            0x4d: ""OP_I32_LE_U"",
            0x4e: ""OP_I32_GE_S"",
            0x4f: ""OP_I32_GE_U"",
            0x50: ""OP_I64_EQZ"",
            0x51: ""OP_I64_EQ"",
            0x52: ""OP_I64_NE"",
            0x53: ""OP_I64_LT_S"",
            0x54: ""OP_I64_LT_U"",
            0x55: ""OP_I64_GT_S"",
            0x56: ""OP_I64_GT_U"",
            0x57: ""OP_I64_LE_S"",
            0x58: ""OP_I64_LE_U"",
            0x59: ""OP_I64_GE_S"",
            0x5a: ""OP_I64_GE_U"",
            0x5b: ""OP_F32_EQ"",
            0x5c: ""OP_F32_NE"",
            0x5d: ""OP_F32_LT"",
            0x5e: ""OP_F32_GT"",
            0x5f: ""OP_F32_LE"",
            0x60: ""OP_F32_GE"",
            0x61: ""OP_F64_EQ"",
            0x62: ""OP_F64_NE"",
            0x63: ""OP_F64_LT"",
            0x64: ""OP_F64_GT"",
            0x65: ""OP_F64_LE"",
            0x66: ""OP_F64_GE"",
            0x67: ""OP_I32_CLZ"",
            0x68: ""OP_I32_CTZ"",
            0x69: ""OP_I32_POPCNT"",
            0x6a: ""OP_I32_ADD"",
            0x6b: ""OP_I32_SUB"",
            0x6c: ""OP_I32_MUL"",
            0x6d: ""OP_I32_DIV_S"",
            0x6e: ""OP_I32_DIV_U"",
            0x6f: ""OP_I32_REM_S"",
            0x70: ""OP_I32_REM_U"",
            0x71: ""OP_I32_AND"",
            0x72: ""OP_I32_OR"",
            0x73: ""OP_I32_XOR"",
            0x74: ""OP_I32_SHL"",
            0x75: ""OP_I32_SHR_S"",
            0x76: ""OP_I32_SHR_U"",
            0x77: ""OP_I32_ROTL"",
            0x78: ""OP_I32_ROTR"",
            0x79: ""OP_I64_CLZ"",
            0x7a: ""OP_I64_CTZ"",
            0x7b: ""OP_I64_POPCNT"",
            0x7c: ""OP_I64_ADD"",
            0x7d: ""OP_I64_SUB"",
            0x7e: ""OP_I64_MUL"",
            0x7f: ""OP_I64_DIV_S"",
            0x80: ""OP_I64_DIV_U"",
            0x81: ""OP_I64_REM_S"",
            0x82: ""OP_I64_REM_U"",
            0x83: ""OP_I64_AND"",
            0x84: ""OP_I64_OR"",
            0x85: ""OP_I64_XOR"",
            0x86: ""OP_I64_SHL"",
            0x87: ""OP_I64_SHR_S"",
            0x88: ""OP_I64_SHR_U"",
            0x89: ""OP_I64_ROTL"",
            0x8a: ""OP_I64_ROTR"",
            0x8b: ""OP_F32_ABS"",
            0x8c: ""OP_F32_NEG"",
            0x8d: ""OP_F32_CEIL"",
            0x8e: ""OP_F32_FLOOR"",
            0x8f: ""OP_F32_TRUNC"",
            0x90: ""OP_F32_NEAREST"",
            0x91: ""OP_F32_SQRT"",
            0x92: ""OP_F32_ADD"",
            0x93: ""OP_F32_SUB"",
            0x94: ""OP_F32_MUL"",
            0x95: ""OP_F32_DIV"",
            0x96: ""OP_F32_MIN"",
            0x97: ""OP_F32_MAX"",
            0x98: ""OP_F32_COPYSIGN"",
            0x99: ""OP_F64_ABS"",
            0x9a: ""OP_F64_NEG"",
            0x9b: ""OP_F64_CEIL"",
            0x9c: ""OP_F64_FLOOR"",
            0x9d: ""OP_F64_TRUNC"",
            0x9e: ""OP_F64_NEAREST"",
            0x9f: ""OP_F64_SQRT"",
            0xa0: ""OP_F64_ADD"",
            0xa1: ""OP_F64_SUB"",
            0xa2: ""OP_F64_MUL"",
            0xa3: ""OP_F64_DIV"",
            0xa4: ""OP_F64_MIN"",
            0xa5: ""OP_F64_MAX"",
            0xa6: ""OP_F64_COPYSIGN"",
            0xa7: ""OP_I32_WRAP_I64"",
            0xa8: ""OP_I32_TRUNC_F32_S"",
            0xa9: ""OP_I32_TRUNC_F32_U"",
            0xaa: ""OP_I32_TRUNC_F64_S"",
            0xab: ""OP_I32_TRUNC_F64_U"",
            0xac: ""OP_I64_EXTEND_I32_S"",
            0xad: ""OP_I64_EXTEND_I32_U"",
            0xae: ""OP_I64_TRUNC_F32_S"",
            0xaf: ""OP_I64_TRUNC_F32_U"",
            0xb0: ""OP_I64_TRUNC_F64_S"",
            0xb1: ""OP_I64_TRUNC_F64_U"",
            0xb2: ""OP_F32_CONVERT_I32_S"",
            0xb3: ""OP_F32_CONVERT_I32_U"",
            0xb4: ""OP_F32_CONVERT_I64_S"",
            0xb5: ""OP_F32_CONVERT_I64_U"",
            0xb6: ""OP_F32_DEMOTE_F64"",
            0xb7: ""OP_F64_CONVERT_I32_S"",
            0xb8: ""OP_F64_CONVERT_I32_U"",
            0xb9: ""OP_F64_CONVERT_I64_S"",
            0xba: ""OP_F64_CONVERT_I64_U"",
            0xbb: ""OP_F64_PROMOTE_F32"",
            0xbc: ""OP_I32_REINTERPRET_F32"",
            0xbd: ""OP_I64_REINTERPRET_F64"",
            0xbe: ""OP_F32_REINTERPRET_I32"",
            0xbf: ""OP_F64_REINTERPRET_I64"",
            0xc0: ""OP_I32_EXTEND8_S"",
            0xc1: ""OP_I32_EXTEND16_S"",
            0xc2: ""OP_I64_EXTEND8_S"",
            0xc3: ""OP_I64_EXTEND16_S"",
            0xc4: ""OP_I64_EXTEND32_S""
        }
        return op_id_map.get(op_id, f""Unknown op_id: {op_id}"")

    @staticmethod
    def type_code(type_id):
        type_code_map = {
            0x40: ""func"",
            0x60: ""func_type"",
            0x7f: ""i32"",
            0x7e: ""i64"",
            0x7d: ""f32"",
            0x7c: ""f64"",
            0x70: ""funcref"",
            0x6f: ""externref""
        }
        return type_code_map.get(type_id, f""Unknown type_id: {type_id}"")

    @staticmethod
    def flags(flags):
        flag_map = {
            0x0: ""None"",
            0x1: ""mutable"",
            0x2: ""imported"",
            0x4: ""exported""
        }
        flag_list = [flag_map.get(flag, f""Unknown flag: {flag}"") for flag in [flags & 0x1, (flags >> 1) & 0x1, (flags >> 2) & 0x1] if flag != 0]
        return flag_list if flag_list else [""None""]
```"
285972,tcalmant/python-javaobj,tcalmant_python-javaobj/javaobj/v2/api.py,javaobj.v2.api.IJavaStreamParser,"class IJavaStreamParser:
    """"""
    API of the Java stream parser
    """"""

    def run(self):
        """"""
        Parses the input stream
        """"""
        raise NotImplementedError

    def dump(self, content):
        """"""
        Dumps to a string the given objects
        """"""
        raise NotImplementedError

    def _read_content(self, type_code, block_data, class_desc=None):
        """"""
        Parses the next content. Use with care (use only in a transformer)
        """"""","class IJavaStreamParser:
    
    def run(self):
        
        pass
    def dump(self, content):
        
        pass
    def _read_content(self, type_code, block_data, class_desc=None):
        
        pass",snippet_207,4,"```python
class IJavaStreamParser:
    def __init__(self):
        self.content = []

    def run(self):
        # Assuming the content is already read and stored in self.content
        # This method should be implemented based on the actual requirement
        # For demonstration purposes, it simply returns the content
        return self.content

    def dump(self, content):
        self.content.append(content)

    def _read_content(self, type_code, block_data, class_desc=None):
        if type_code == 'TC_NULL':
            return None
        elif type_code == 'TC_REFERENCE':
            # Handle reference type
            # For demonstration purposes, it simply returns the block_data
            return block_data
        elif type_code == 'TC_CLASS':
            # Handle class type
            # For demonstration purposes, it simply returns the class_desc
            return class_desc
        elif type_code == 'TC_OBJECT':
            # Handle object type
            # For demonstration purposes, it creates a simple object
            obj = {}
            if class_desc:
                obj['class_desc'] = class_desc
            if block_data:
                obj['block_data'] = block_data
            return obj
        elif type_code == 'TC_STRING':
            # Handle string type
            # For demonstration purposes, it simply returns the block_data as string
            return str(block_data)
        elif type_code == 'TC_ARRAY':
            # Handle array type
            # For demonstration purposes, it simply returns the block_data as list
            return list(block_data)
        else:
            # Handle other types or raise an exception for unsupported types
            raise ValueError(f""Unsupported type code: {type_code}"")
```"
287233,materialsvirtuallab/monty,materialsvirtuallab_monty/src/monty/design_patterns.py,monty.design_patterns.NullFile,"import os

class NullFile:
    """"""A file object that is associated to /dev/null.""""""

    def __new__(cls):
        """"""
        Pass through.
        """"""
        return open(os.devnull, 'w')

    def __init__(self):
        """"""no-op""""""","
class NullFile:
    
    def __new__(cls):
        
        pass
    def __init__(self):
        
        pass",snippet_208,3,"```python
class NullFile:
    
    def __new__(cls):
        if not hasattr(cls, '_instance'):
            cls._instance = super(NullFile, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        pass

    def write(self, *args, **kwargs):
        pass

    def writelines(self, *args, **kwargs):
        pass

    def read(self, *args, **kwargs):
        return ''

    def readline(self, *args, **kwargs):
        return ''

    def readlines(self, *args, **kwargs):
        return []

    def seek(self, *args, **kwargs):
        pass

    def tell(self, *args, **kwargs):
        return 0

    def close(self, *args, **kwargs):
        pass

    def flush(self, *args, **kwargs):
        pass

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

    def __getattr__(self, name):
        return lambda *args, **kwargs: None
```"
287394,common-workflow-language/schema_salad,common-workflow-language_schema_salad/schema_salad/cpp_codegen.py,schema_salad.cpp_codegen.ClassDefinition,"from typing import IO, Any, Optional, Union, cast

class ClassDefinition:
    """"""Prototype of a class.""""""

    def __init__(self, name: str):
        """"""Initialize the class definition with a name.""""""
        self.fullName = name
        self.extends: list[dict[str, str]] = []
        self.specializationTypes: list[str] = []
        self.allfields: list[FieldDefinition] = []
        self.fields: list[FieldDefinition] = []
        self.abstract = False
        self.namespace, self.classname = split_name(name)
        self.namespace = safenamespacename(self.namespace)
        self.classname = safename(self.classname)

    def writeFwdDeclaration(self, target: IO[str], fullInd: str, ind: str) -> None:
        """"""Write forward declaration.""""""
        target.write(f'{fullInd}namespace {self.namespace} {{ struct {self.classname}; }}\n')

    def writeDefinition(self, target: IO[Any], fullInd: str, ind: str, common_namespace: str) -> None:
        """"""Write definition of the class.""""""
        target.write(f'{fullInd}namespace {self.namespace} {{\n')
        target.write(f'{fullInd}struct {self.classname}')
        extends = list(map(safename2, self.extends))
        override = ''
        virtual = 'virtual '
        if len(self.extends) > 0:
            target.write(f'\n{fullInd}{ind}: ')
            target.write(f'\n{fullInd}{ind}, '.join(extends))
            override = ' override'
            virtual = ''
        target.write(' {\n')
        for field in self.fields:
            field.writeDefinition(target, fullInd + ind, ind, self.namespace)
        if self.abstract:
            target.write(f'{fullInd}{ind}virtual ~{self.classname}() = 0;\n')
        else:
            target.write(f'{fullInd}{ind}{virtual}~{self.classname}(){override} = default;\n')
        target.write(f'{fullInd}{ind}{virtual}auto toYaml([[maybe_unused]] {common_namespace}::store_config const& config) const -> YAML::Node{override};\n')
        target.write(f'{fullInd}{ind}{virtual}void fromYaml(YAML::Node const& n){override};\n')
        target.write(f'{fullInd}}};\n')
        target.write(f'{fullInd}}}\n\n')

    def writeImplDefinition(self, target: IO[str], fullInd: str, ind: str, common_namespace: str) -> None:
        """"""Write definition with implementation.""""""
        extends = list(map(safename2, self.extends))
        if self.abstract:
            target.write(f'{fullInd}inline {self.namespace}::{self.classname}::~{self.classname}() = default;\n')
        target.write(f'{fullInd}inline auto {self.namespace}::{self.classname}::toYaml([[maybe_unused]] ::{common_namespace}::store_config const& config) const -> YAML::Node {{\n{fullInd}{ind}using ::{common_namespace}::toYaml;\n{fullInd}{ind}auto n = YAML::Node{{}};\n{fullInd}{ind}if (config.generateTags) {{\n{fullInd}{ind}{ind}n.SetTag(""{self.classname}"");\n{fullInd}{ind}}}\n')
        for e in extends:
            target.write(f'{fullInd}{ind}n = mergeYaml(n, {e}::toYaml(config));\n')
        for field in self.fields:
            fieldname = safename(field.name)
            target.write(f'{fullInd}{ind}{{\n')
            target.write(f'{fullInd}{ind}{ind} auto member = toYaml(*{fieldname}, config);\n')
            if field.typeDSL:
                target.write(f'{fullInd}{ind}{ind} member = simplifyType(member, config);\n')
            target.write(f'{fullInd}{ind}{ind} member = convertListToMap(member, {q(field.mapSubject)}, {q(field.mapPredicate)}, config);\n')
            target.write(f'{fullInd}{ind}{ind}addYamlField(n, {q(field.name)}, member);\n')
            target.write(f'{fullInd}{ind}}}\n')
        target.write(f'{fullInd}{ind}return n;\n{fullInd}}}\n')
        functionname = f'{self.namespace}::{self.classname}::fromYaml'
        target.write(f'{fullInd}inline void {functionname}([[maybe_unused]] YAML::Node const& n) {{\n{fullInd}{ind}using ::{common_namespace}::fromYaml;\n')
        for e in extends:
            target.write(f'{fullInd}{ind}{e}::fromYaml(n);\n')
        for field in self.fields:
            fieldname = safename(field.name)
            expandType = ''
            if field.typeDSL:
                expandType = 'expandType'
            target.write(f'{fullInd}{ind}{{\n{fullInd}{ind}{ind}auto nodeAsList = convertMapToList(n[{q(field.name)}], {q(field.mapSubject)}, {q(field.mapPredicate)});\n{fullInd}{ind}{ind}auto expandedNode = {expandType}(nodeAsList);\n{fullInd}{ind}{ind}fromYaml(expandedNode, *{fieldname});\n{fullInd}{ind}}}\n')
        target.write(f'{fullInd}}}\n')
        if not self.abstract:
            e = f'::{self.namespace}::{self.classname}'
            target.write(f'namespace {common_namespace} {{\ntemplate <>\nstruct DetectAndExtractFromYaml<{e}> {{\n    auto operator()(YAML::Node const& n) const -> std::optional<{e}> {{\n        if (!n.IsDefined()) return std::nullopt;\n        if (!n.IsMap()) return std::nullopt;\n        auto res = {e}{{}};\n\n')
            for field in self.fields:
                fieldname = safename(field.name)
                target.write(f'        if constexpr (::{common_namespace}::IsConstant<decltype(res.{fieldname})::value_t>::value) try {{\n            fromYaml(n[{q(field.name)}], *res.{fieldname});\n            fromYaml(n, res);\n            return res;\n        }} catch(...) {{}}\n\n')
            target.write('        return std::nullopt;\n    }\n};\n}\n')","
class ClassDefinition:
    
    def __init__(self, name: str):
        
        pass
    def writeFwdDeclaration(self, target: IO[str], fullInd: str, ind: str) -> None:
        
        pass

    def writeDefinition(self, target: IO[Any], fullInd: str, ind: str, common_namespace: str) -> None:
        
        pass

    def writeImplDefinition(self, target: IO[str], fullInd: str, ind: str, common_namespace: str) -> None:
        
        pass",snippet_209,5,"```python
from typing import IO, Any

class ClassDefinition:
    
    def __init__(self, name: str):
        self.name = name

    def writeFwdDeclaration(self, target: IO[str], fullInd: str, ind: str) -> None:
        target.write(f'{fullInd}class {self.name};\n')

    def writeDefinition(self, target: IO[Any], fullInd: str, ind: str, common_namespace: str) -> None:
        target.write(f'{fullInd}class {self.name} {{\n')
        target.write(f'{fullInd}public:\n')
        target.write(f'{fullInd}{ind}{self.name}();\n')
        target.write(f'{fullInd}{ind}~{self.name}();\n')
        target.write(f'{fullInd}}};\n')

    def writeImplDefinition(self, target: IO[str], fullInd: str, ind: str, common_namespace: str) -> None:
        target.write(f'{fullInd}{self.name}::{self.name}() {{\n')
        target.write(f'{fullInd}{ind}// Constructor implementation\n')
        target.write(f'{fullInd}}}\n\n')
        target.write(f'{fullInd}{self.name}::~{self.name}() {{\n')
        target.write(f'{fullInd}{ind}// Destructor implementation\n')
        target.write(f'{fullInd}}}\n')
```"
287396,common-workflow-language/schema_salad,common-workflow-language_schema_salad/schema_salad/cpp_codegen.py,schema_salad.cpp_codegen.EnumDefinition,"from typing import IO, Any, Optional, Union, cast

class EnumDefinition:
    """"""Prototype of a enum.""""""

    def __init__(self, name: str, values: list[str]):
        """"""Initialize enum definition with a name and possible values.""""""
        self.name = name
        self.values = values
        self.namespace, self.classname = split_name(name)
        self.namespace = safenamespacename(self.namespace)
        self.classname = safename(self.classname)

    def writeDefinition(self, target: IO[str], ind: str, common_namespace: str) -> None:
        """"""Write enum definition to output.""""""
        namespace = ''
        if len(self.name.split('#')) == 2:
            namespace, classname = split_name(self.name)
            namespace = safenamespacename(namespace)
            classname = safename(classname)
            name = namespace + '::' + classname
        else:
            name = safename(self.name)
            classname = name
        if len(namespace) > 0:
            target.write(f'namespace {namespace} {{\n')
        target.write(f'enum class {classname} : unsigned int {{\n{ind}')
        target.write(f',\n{ind}'.join(map(safename, self.values)))
        target.write('\n};\n')
        target.write(f'inline auto to_string({classname} v) {{\n')
        target.write(f'{ind}static auto m = std::vector<std::string_view> {{\n')
        target.write(f'{ind}    ""')
        target.write(f'"",\n{ind}    ""'.join(self.values))
        target.write(f'""\n{ind}}};\n')
        target.write(f'{ind}using U = std::underlying_type_t<{name}>;\n')
        target.write(f'{ind}return m.at(static_cast<U>(v));\n}}\n')
        if len(namespace) > 0:
            target.write('}\n')
        target.write(f'inline void to_enum(std::string_view v, {name}& out) {{\n')
        target.write(f'{ind}static auto m = std::map<std::string, {name}, std::less<>> {{\n')
        for v in self.values:
            target.write(f'{ind}{ind}{{{q(v)}, {name}::{safename(v)}}},\n')
        target.write(f'{ind}}};\n{ind}auto iter = m.find(v);\n')
        target.write(f'{ind}if (iter == m.end()) throw bool{{}};\n')
        target.write(f'{ind}out = iter->second;\n}}\n')
        target.write(f'namespace {common_namespace} {{\n')
        target.write(f'inline auto toYaml({name} v, [[maybe_unused]] ::{common_namespace}::store_config const& config) {{\n')
        target.write(f'{ind}auto n = YAML::Node{{std::string{{to_string(v)}}}};\n')
        target.write(f'{ind}if (config.generateTags) n.SetTag(""{name}"");\n')
        target.write(f'{ind}return n;\n}}\n')
        target.write(f'inline void fromYaml(YAML::Node n, {name}& out) {{\n')
        target.write(f'{ind}to_enum(n.as<std::string>(), out);\n}}\n')
        if len(self.values):
            target.write(f'template <> struct IsConstant<{name}> : std::true_type {{}};\n')
        target.write('}\n')
        target.write('\n')","
class EnumDefinition:
    
    def __init__(self, name: str, values: list[str]):
        
        pass
    def writeDefinition(self, target: IO[str], ind: str, common_namespace: str) -> None:
        
        pass",snippet_210,3,"```python
from typing import IO

class EnumDefinition:
    
    def __init__(self, name: str, values: list[str]):
        self.name = name
        self.values = values

    def writeDefinition(self, target: IO[str], ind: str, common_namespace: str) -> None:
        target.write(f'{ind}enum class {self.name} : int\n')
        target.write(f'{ind}{{\n')
        for i, value in enumerate(self.values):
            target.write(f'{ind}    {value} = {i},\n')
        target.write(f'{ind}}};\n')
```"
287397,common-workflow-language/schema_salad,common-workflow-language_schema_salad/schema_salad/cpp_codegen.py,schema_salad.cpp_codegen.FieldDefinition,"from typing import IO, Any, Optional, Union, cast

class FieldDefinition:
    """"""Prototype of a single field from a class definition.""""""

    def __init__(self, name: str, typeStr: str, optional: bool, mapSubject: str, mapPredicate: str, typeDSL: bool):
        """"""Initialize field definition.

        Creates a new field with name, its type, optional and which field to use to convert
        from list to map (or empty if it is not possible)
        """"""
        self.name = name
        self.typeStr = typeStr
        self.optional = optional
        self.mapSubject = mapSubject
        self.mapPredicate = mapPredicate
        self.typeDSL = typeDSL

    def writeDefinition(self, target: IO[Any], fullInd: str, ind: str, namespace: str) -> None:
        """"""Write a C++ definition for the class field.""""""
        name = safename(self.name)
        typeStr = self.typeStr.replace(namespace + '::', '')
        target.write(f'{fullInd}heap_object<{typeStr}> {name};\n')","
class FieldDefinition:
    
    def __init__(self, name: str, typeStr: str, optional: bool, mapSubject: str, mapPredicate: str, typeDSL: bool):
        
        pass
    def writeDefinition(self, target: IO[Any], fullInd: str, ind: str, namespace: str) -> None:
        
        pass",snippet_211,3,"```python
from typing import IO, Any

class FieldDefinition:
    
    def __init__(self, name: str, typeStr: str, optional: bool, mapSubject: str, mapPredicate: str, typeDSL: bool):
        self.name = name
        self.typeStr = typeStr
        self.optional = optional
        self.mapSubject = mapSubject
        self.mapPredicate = mapPredicate
        self.typeDSL = typeDSL

    def writeDefinition(self, target: IO[Any], fullInd: str, ind: str, namespace: str) -> None:
        target.write(f'{ind}public {self.name}: {self.typeStr}' + (' | null' if self.optional else '') + ';\n')
        if self.mapSubject or self.mapPredicate:
            target.write(f'{ind}static get {self.name}(): PropertyMapping {{\n')
            target.write(f'{ind}    return new PropertyMapping(""{self.mapSubject or fullInd}"", ""{self.mapPredicate or self.name}"")\n')
            target.write(f'{ind}}}\n')
        if self.typeDSL:
            target.write(f'{ind}static get {self.name}Type(): TypeDef {{\n')
            target.write(f'{ind}    return new TypeDef(""{namespace}.{self.typeStr}"")\n')
            target.write(f'{ind}}}\n')
```"
287519,kinegratii/borax,kinegratii_borax/borax/calendars/utils.py,borax.calendars.utils.ThreeNineUtils,"from borax.calendars.lunardate import LunarDate, TextUtils, TermUtils
from collections import OrderedDict
from datetime import date, datetime, timedelta
from typing import Union, Dict

class ThreeNineUtils:
    """"""三伏数九天工具函数
    """"""

    @staticmethod
    def get_39days(year: int) -> Dict[str, date]:
        """"""获取公历year年的三伏数九天对应的公历日期。
        """"""
        day13 = TermUtils.day_start_from_term(year, '夏至', 3, '庚')
        day23 = day13 + timedelta(days=10)
        day33 = TermUtils.day_start_from_term(year, '立秋', 1, '庚')
        day19 = TermUtils.day_start_from_term(year, '冬至', 0)
        days = OrderedDict({'初伏': day13, '中伏': day23, '末伏': day33, '一九': day19})
        for i, dc in enumerate(TextUtils.DAYS_CN[1:10], start=1):
            days[f'{dc}九'] = day19 + timedelta(days=(i - 1) * 9)
        return days

    @staticmethod
    def get_39label(date_obj: Union[date, LunarDate]) -> str:
        """"""返回三伏数九天对应的标签，如果不是，返回空字符串。
        """"""
        if isinstance(date_obj, LunarDate):
            sd = date_obj.to_solar_date()
        else:
            sd = date_obj
        if sd.month in (4, 5, 6, 10, 11):
            return ''
        year = sd.year - bool(sd.month < 4)
        days = ThreeNineUtils.get_39days(year)
        for vs in list(days.items()):
            label, sd = vs
            range_len = -1
            if label in ['初伏', '末伏']:
                range_len = 10
            elif label == '中伏':
                range_len = (days['末伏'] - days['中伏']).days
            elif '九' in label:
                range_len = 9
            offset = (date_obj - sd).days
            if 0 <= offset <= range_len - 1:
                return f'{label}第{offset + 1}天'
        return ''","
class ThreeNineUtils:
    
    @staticmethod
    def get_39days(year: int) -> Dict[str, date]:
        
        pass
    @staticmethod
    def get_39label(date_obj: Union[date, LunarDate]) -> str:
        
        pass",snippet_212,3,"```python
from typing import Dict, Union
from datetime import date
from lunardate import LunarDate

class ThreeNineUtils:
    
    @staticmethod
    def get_39days(year: int) -> Dict[str, date]:
        """"""
        Returns a dictionary containing the dates of the three nine days for a given year.
        
        The three nine days are the third, second, and first nine days of the winter season.
        """"""
        # Get the winter solstice date
        winter_solstice_date = LunarDate(year, 11, 17).to_solar_date()
        
        # Initialize the dictionary to store the three nine days
        three_nine_days = {}
        
        # Calculate the start date of the first nine days
        first_nine_start = winter_solstice_date
        
        # Calculate the start date of the second nine days
        second_nine_start = first_nine_start + date.resolution * 9
        
        # Calculate the start date of the third nine days
        third_nine_start = second_nine_start + date.resolution * 9
        
        # Store the start dates of the three nine days in the dictionary
        three_nine_days['一九'] = first_nine_start
        three_nine_days['二九'] = second_nine_start
        three_nine_days['三九'] = third_nine_start
        
        return three_nine_days
    
    @staticmethod
    def get_39label(date_obj: Union[date, LunarDate]) -> str:
        """"""
        Returns the three nine label for a given date.
        
        The three nine label is a string indicating which nine days the date falls into.
        """"""
        # Convert the date object to a solar date if it's a LunarDate object
        if isinstance(date_obj, LunarDate):
            date_obj = date_obj.to_solar_date()
        
        # Get the winter solstice date of the same year
        winter_solstice_date = LunarDate(date_obj.year, 11, 17).to_solar_date()
        
        # If the date is before the winter solstice, use the previous year's winter solstice
        if date_obj < winter_solstice_date:
            winter_solstice_date = LunarDate(date_obj.year - 1, 11, 17).to_solar_date()
        
        # Calculate the difference between the date and the winter solstice date
        diff = (date_obj - winter_solstice_date).days
        
        # Determine the three nine label based on the difference
        if diff < 0:
            return ''
        elif diff < 9:
            return '一九'
        elif diff < 18:
            return '二九'
        elif diff < 27:
            return '三九'
        else:
            return ''
```"
292643,swistakm/graceful,swistakm_graceful/src/graceful/authentication.py,graceful.authentication.BaseAuthenticationMiddleware,"class BaseAuthenticationMiddleware:
    """"""Base class for all authentication middleware classes.

    Args:
        user_storage (BaseUserStorage): a storage object used to retrieve
            user object using their identifier lookup.
        name (str): custom name of the authentication middleware useful
            for handling custom user storage backends. Defaults to middleware
            class name.

    .. versionadded:: 0.4.0
    """"""
    challenge = None
    only_with_storage = False

    def __init__(self, user_storage=None, name=None):
        """"""Initialize authentication middleware.""""""
        self.user_storage = user_storage
        self.name = name if name else self.__class__.__name__
        if self.only_with_storage and (not isinstance(self.user_storage, BaseUserStorage)):
            raise ValueError('{} authentication middleware requires valid storage. Got {}.'.format(self.__class__.__name__, self.user_storage))

    def process_resource(self, req, resp, resource, uri_kwargs=None):
        """"""Process resource after routing to it.

        This is basic falcon middleware handler.

        Args:
            req (falcon.Request): request object
            resp (falcon.Response): response object
            resource (object): resource object matched by falcon router
            uri_kwargs (dict): additional keyword argument from uri template.
                For ``falcon<1.0.0`` this is always ``None``
        """"""
        if 'user' in req.context:
            return
        identifier = self.identify(req, resp, resource, uri_kwargs)
        user = self.try_storage(identifier, req, resp, resource, uri_kwargs)
        if user is not None:
            req.context['user'] = user
        elif self.challenge is not None:
            req.context.setdefault('challenges', list()).append(self.challenge)

    def identify(self, req, resp, resource, uri_kwargs):
        """"""Identify the user that made the request.

        Args:
            req (falcon.Request): request object
            resp (falcon.Response): response object
            resource (object): resource object matched by falcon router
            uri_kwargs (dict): additional keyword argument from uri template.
                For ``falcon<1.0.0`` this is always ``None``

        Returns:
            object: a user object (preferably a dictionary).
        """"""
        raise NotImplementedError

    def try_storage(self, identifier, req, resp, resource, uri_kwargs):
        """"""Try to find user in configured user storage object.

        Args:
            identifier: User identifier.

        Returns:
            user object.
        """"""
        if identifier is None:
            user = None
        elif self.user_storage is not None:
            user = self.user_storage.get_user(self, identifier, req, resp, resource, uri_kwargs)
        elif self.user_storage is None and (not self.only_with_storage):
            user = {'identified_with': self, 'identifier': identifier}
        else:
            user = None
        return user","class BaseAuthenticationMiddleware:
    
    def __init__(self, user_storage=None, name=None):
        
        pass
    def process_resource(self, req, resp, resource, uri_kwargs=None):
        
        pass
    def identify(self, req, resp, resource, uri_kwargs):
        
        pass

    def try_storage(self, identifier, req, resp, resource, uri_kwargs):
        
        pass",snippet_213,5,"```python
class BaseAuthenticationMiddleware:
    
    def __init__(self, user_storage=None, name=None):
        """"""
        Initialize the BaseAuthenticationMiddleware.

        :param user_storage: The storage for user data.
        :param name: The name of the authentication middleware.
        """"""
        self.user_storage = user_storage
        self.name = name

    def process_resource(self, req, resp, resource, uri_kwargs=None):
        """"""
        Process the incoming request and authenticate if necessary.

        :param req: The incoming request.
        :param resp: The outgoing response.
        :param resource: The resource being requested.
        :param uri_kwargs: Keyword arguments from the URI template.
        """"""
        self.identify(req, resp, resource, uri_kwargs)

    def identify(self, req, resp, resource, uri_kwargs):
        """"""
        Identify the user making the request.

        :param req: The incoming request.
        :param resp: The outgoing response.
        :param resource: The resource being requested.
        :param uri_kwargs: Keyword arguments from the URI template.
        :raises NotImplementedError: If not implemented by a subclass.
        """"""
        raise NotImplementedError(""Subclasses must implement the 'identify' method."")

    def try_storage(self, identifier, req, resp, resource, uri_kwargs):
        """"""
        Attempt to retrieve user data from storage using the given identifier.

        :param identifier: The identifier to use when retrieving user data.
        :param req: The incoming request.
        :param resp: The outgoing response.
        :param resource: The resource being requested.
        :param uri_kwargs: Keyword arguments from the URI template.
        :return: The user data if found, otherwise None.
        """"""
        if self.user_storage is not None:
            return self.user_storage.get(identifier)
        return None
```"
292765,pytroll/pyspectral,pytroll_pyspectral/rsr_convert_scripts/avhrr1_rsr.py,avhrr1_rsr.AvhrrRSR,"import numpy as np
from pyspectral.config import get_config
from xlrd import open_workbook
import os

class AvhrrRSR:
    """"""Container for the NOAA AVHRR-1 RSR data.""""""

    def __init__(self, wavespace='wavelength'):
        """"""Initialize the AVHRR-1 RSR class.""""""
        options = get_config()
        self.avhrr_path = options['avhrr/1'].get('path')
        if not os.path.exists(self.avhrr_path):
            self.avhrr1_path = os.path.join(DATA_PATH, options['avhrr/1'].get('filename'))
        self.output_dir = options.get('rsr_dir', './')
        self.rsr = {}
        for satname in AVHRR1_SATELLITES:
            self.rsr[satname] = {}
            for chname in AVHRR_BAND_NAMES['avhrr/1']:
                self.rsr[satname][chname] = {'wavelength': None, 'response': None}
        self._load()
        self.wavespace = wavespace
        if wavespace not in ['wavelength', 'wavenumber']:
            raise AttributeError('wavespace has to be either ' + ""'wavelength' or 'wavenumber'!"")
        self.unit = 'micrometer'
        if wavespace == 'wavenumber':
            self.convert2wavenumber()

    def _load(self, scale=1.0):
        """"""Load the AVHRR RSR data for the band requested.""""""
        wb_ = open_workbook(self.avhrr_path)
        sheet_names = []
        for sheet in wb_.sheets():
            if sheet.name in ['Kleespies Data']:
                print('Skip sheet...')
                continue
            ch_name = CHANNEL_NAMES.get(sheet.name.strip())
            if not ch_name:
                break
            sheet_names.append(sheet.name.strip())
            header = sheet.col_values(0, start_rowx=0, end_rowx=2)
            platform_name = header[0].strip('# ')
            unit = header[1].split('Wavelength (')[1].strip(')')
            scale = get_scale_from_unit(unit)
            wvl = sheet.col_values(0, start_rowx=2)
            is_comment = True
            idx = 0
            while is_comment:
                item = wvl[::-1][idx]
                if isinstance(item, str):
                    idx = idx + 1
                else:
                    break
            ndim = len(wvl) - idx
            wvl = wvl[0:ndim]
            if platform_name == 'TIROS-N':
                wvl = adjust_typo_avhrr1_srf_only_xls_file(platform_name, wvl)
            response = sheet.col_values(1, start_rowx=2, end_rowx=2 + ndim)
            wavelength = np.array(wvl) * scale
            response = np.array(response)
            self.rsr[platform_name][ch_name]['wavelength'] = wavelength
            self.rsr[platform_name][ch_name]['response'] = response","
class AvhrrRSR:
    
    def __init__(self, wavespace='wavelength'):
        
        pass
    def _load(self, scale=1.0):
        
        pass",snippet_215,3,"```python
import numpy as np

class AvhrrRSR:
    
    def __init__(self, wavespace='wavelength'):
        """"""
        Initialize the AvhrrRSR class.

        Parameters
        ----------
        wavespace : str, optional
            The space in which the relative spectral response is defined. 
            Defaults to 'wavelength'.
        """"""
        self.wavespace = wavespace
        self.rsr = self._load()

    def _load(self, scale=1.0):
        """"""
        Load the relative spectral response for AVHRR.

        Parameters
        ----------
        scale : float, optional
            A scaling factor for the relative spectral response. 
            Defaults to 1.0.

        Returns
        -------
        dict
            A dictionary containing the relative spectral response for each band.
        """"""
        # For demonstration purposes, let's assume we have the following RSR data
        # In a real application, this data would be loaded from a file or database
        rsr_data = {
            'AVHRR/1': {
                'channel1': {'wavelength': np.array([0.5, 0.6, 0.7]), 'response': np.array([0.1, 0.8, 0.1])},
                'channel2': {'wavelength': np.array([0.7, 0.8, 0.9]), 'response': np.array([0.2, 0.7, 0.2])},
            },
            'AVHRR/2': {
                'channel1': {'wavelength': np.array([0.55, 0.65, 0.75]), 'response': np.array([0.15, 0.85, 0.15])},
                'channel2': {'wavelength': np.array([0.75, 0.85, 0.95]), 'response': np.array([0.25, 0.75, 0.25])},
            },
            'AVHRR/3': {
                'channel1': {'wavelength': np.array([0.58, 0.68, 0.78]), 'response': np.array([0.18, 0.82, 0.18])},
                'channel2': {'wavelength': np.array([0.78, 0.88, 0.98]), 'response': np.array([0.28, 0.72, 0.28])},
            }
        }

        rsr = {}
        for platform in rsr_data:
            rsr[platform] = {}
            for channel in rsr_data[platform]:
                rsr[platform][channel] = {}
                if self.wavespace == 'wavelength':
                    rsr[platform][channel]['wavelength'] = rsr_data[platform][channel]['wavelength']
                    rsr[platform][channel]['response'] = rsr_data[platform][channel]['response'] * scale
                elif self.wavespace == 'wavenumber':
                    # Convert wavelength to wavenumber
                    wavelength = rsr_data[platform][channel]['wavelength']
                    wavenumber = 1e4 / wavelength  # Assuming wavelength is in microns
                    rsr[platform][channel]['wavenumber'] = wavenumber
                    rsr[platform][channel]['response'] = rsr_data[platform][channel]['response'] * scale
                else:
                    raise ValueError(""Invalid wavespace. It should be either 'wavelength' or 'wavenumber'."")

        return rsr
```"
293144,Kentzo/Power,Kentzo_Power/power/common.py,power.common.PowerManagementObserver,"from abc import ABCMeta, abstractmethod

class PowerManagementObserver:
    """"""
    Base class for PowerManagement observers.
    Do not make assumptions in what thread or event loop these methods are called.
    """"""
    __metaclass__ = ABCMeta

    @abstractmethod
    def on_power_sources_change(self, power_management):
        """"""
        @param power_management: Instance of PowerManagement posted notification
        """"""
        pass

    @abstractmethod
    def on_time_remaining_change(self, power_management):
        """"""
        @param power_management: Instance of PowerManagement posted notification
        """"""
        pass","
class PowerManagementObserver:
    
    @abstractmethod
    def on_power_sources_change(self, power_management):
        
        pass
    @abstractmethod
    def on_time_remaining_change(self, power_management):
        
        pass",snippet_216,3,"```python
from abc import ABC, abstractmethod

class PowerManagementObserver(ABC):
    
    @abstractmethod
    def on_power_sources_change(self, power_management):
        pass
    
    @abstractmethod
    def on_time_remaining_change(self, power_management):
        pass

class ConcretePowerManagementObserver(PowerManagementObserver):
    def __init__(self, name):
        self.name = name

    def on_power_sources_change(self, power_management):
        print(f""{self.name} observed power sources change: {power_management}"")

    def on_time_remaining_change(self, power_management):
        print(f""{self.name} observed time remaining change: {power_management}"")


class PowerManagement:
    def __init__(self):
        self.observers = []

    def register_observer(self, observer):
        self.observers.append(observer)

    def unregister_observer(self, observer):
        self.observers.remove(observer)

    def notify_power_sources_change(self):
        for observer in self.observers:
            observer.on_power_sources_change(self)

    def notify_time_remaining_change(self):
        for observer in self.observers:
            observer.on_time_remaining_change(self)


def main():
    power_management = PowerManagement()

    observer1 = ConcretePowerManagementObserver(""Observer 1"")
    observer2 = ConcretePowerManagementObserver(""Observer 2"")

    power_management.register_observer(observer1)
    power_management.register_observer(observer2)

    power_management.notify_power_sources_change()
    power_management.notify_time_remaining_change()

    power_management.unregister_observer(observer2)

    power_management.notify_power_sources_change()
    power_management.notify_time_remaining_change()


if __name__ == ""__main__"":
    main()
```"
293849,hasgeek/coaster,hasgeek_coaster/src/coaster/logger.py,coaster.logger.FilteredValueIndicator,"class FilteredValueIndicator:
    """"""Represent a filtered value.""""""

    def __str__(self) -> str:
        """"""Filter str.""""""
        return '[Filtered]'

    def __repr__(self) -> str:
        """"""Filter repr.""""""
        return '[Filtered]'","class FilteredValueIndicator:
    
    def __str__(self) -> str:
        
        pass
    def __repr__(self) -> str:
        
        pass",snippet_217,3,"```python
class FilteredValueIndicator:
    
    def __init__(self, value, filter_status):
        """"""
        Initialize the FilteredValueIndicator object.

        Args:
        value (any): The value to be stored.
        filter_status (bool): The filter status of the value.
        """"""
        self.value = value
        self.filter_status = filter_status

    def __str__(self) -> str:
        """"""Return a string representation of the FilteredValueIndicator object.""""""
        status = ""Filtered"" if self.filter_status else ""Not Filtered""
        return f""Value: {self.value}, Status: {status}""

    def __repr__(self) -> str:
        """"""Return a representation of the FilteredValueIndicator object that could be used to recreate it.""""""
        return f""FilteredValueIndicator({self.value}, {self.filter_status})""


# Example usage:
def main():
    indicator = FilteredValueIndicator(10, True)
    print(str(indicator))  # Output: Value: 10, Status: Filtered
    print(repr(indicator))  # Output: FilteredValueIndicator(10, True)

if __name__ == ""__main__"":
    main()
```"
293851,hasgeek/coaster,hasgeek_coaster/src/coaster/logger.py,coaster.logger.RepeatValueIndicator,"class RepeatValueIndicator:
    """"""Represent a repeating value.""""""

    def __init__(self, key: str) -> None:
        """"""Init with key.""""""
        self.key = key

    def __repr__(self) -> str:
        """"""Return representation.""""""
        return f'<same as prior {self.key!r}>'
    __str__ = __repr__","class RepeatValueIndicator:
    
    def __init__(self, key: str) -> None:
        
        pass
    def __repr__(self) -> str:
        
        pass",snippet_218,3,"```python
class RepeatValueIndicator:
    
    def __init__(self, key: str) -> None:
        self.key = key
        self.last_value = None
        self.repeat_count = 0

    def __repr__(self) -> str:
        return f""RepeatValueIndicator(key='{self.key}', last_value={self.last_value}, repeat_count={self.repeat_count})""
```"
295935,cloudsmith-io/cloudsmith-cli,cloudsmith-io_cloudsmith-cli/cloudsmith_cli/core/ratelimits.py,cloudsmith_cli.core.ratelimits.RateLimitsInfo,"import datetime

class RateLimitsInfo:
    """"""Data for rate limits.""""""
    interval = None
    limit = None
    remaining = None
    reset = None
    throttled = None

    def __str__(self):
        """"""Get rate limit information as text.""""""
        return 'Throttled: %(throttled)s, Remaining: %(remaining)d/%(limit)d, Interval: %(interval)f, Reset: %(reset)s' % {'throttled': 'Yes' if self.throttled else 'No', 'remaining': self.remaining, 'limit': self.limit, 'interval': self.interval, 'reset': self.reset}

    @classmethod
    def from_dict(cls, data):
        """"""Create RateLimitsInfo from a dictionary.""""""
        info = RateLimitsInfo()
        if 'interval' in data:
            info.interval = float(data['interval'])
        if 'limit' in data:
            info.limit = int(data['limit'])
        if 'remaining' in data:
            info.remaining = int(data['remaining'])
        if 'reset' in data:
            info.reset = datetime.datetime.utcfromtimestamp(int(data['reset']))
        if 'throtted' in data:
            info.throttled = bool(data['throttled'])
        else:
            info.throttled = info.remaining == 0
        return info

    @classmethod
    def from_headers(cls, headers):
        """"""Create RateLimitsInfo from HTTP headers.""""""
        try:
            data = {'interval': headers['X-RateLimit-Interval'], 'limit': headers['X-RateLimit-Limit'], 'remaining': headers['X-RateLimit-Remaining'], 'reset': headers['X-RateLimit-Reset']}
        except KeyError:
            data = {}
        return cls.from_dict(data)","
class RateLimitsInfo:
    
    def __str__(self):
        
        pass
    @classmethod
    def from_dict(cls, data):
        
        pass
    @classmethod
    def from_headers(cls, headers):
        
        pass",snippet_220,4,"```python
class RateLimitsInfo:
    def __init__(self, limit, remaining, reset):
        """"""
        Initialize RateLimitsInfo object.

        :param limit: The maximum number of requests allowed.
        :param remaining: The number of remaining requests.
        :param reset: The time at which the rate limit will reset.
        """"""
        self.limit = limit
        self.remaining = remaining
        self.reset = reset

    def __str__(self):
        return f""Rate Limit: {self.limit}, Remaining: {self.remaining}, Reset: {self.reset}""

    @classmethod
    def from_dict(cls, data):
        return cls(
            limit=data.get('limit'),
            remaining=data.get('remaining'),
            reset=data.get('reset')
        )

    @classmethod
    def from_headers(cls, headers):
        return cls(
            limit=int(headers.get('X-RateLimit-Limit', 0)),
            remaining=int(headers.get('X-RateLimit-Remaining', 0)),
            reset=int(headers.get('X-RateLimit-Reset', 0))
        )
```"
296505,CZ-NIC/python-rt,CZ-NIC_python-rt/rt/rest2.py,rt.rest2.Attachment,"import dataclasses
import base64

@dataclasses.dataclass
class Attachment:
    """"""Dataclass representing an attachment.""""""
    file_name: str
    file_type: str
    file_content: bytes

    def to_dict(self) -> dict[str, str]:
        """"""Convert to a dictionary for submitting to the REST API.""""""
        return {'FileName': self.file_name, 'FileType': self.file_type, 'FileContent': base64.b64encode(self.file_content).decode('utf-8')}

    def multipart_form_element(self) -> tuple[str, bytes, str]:
        """"""Convert to a tuple as required for multipart-form-data submission.""""""
        return (self.file_name, self.file_content, self.file_type)","@dataclasses.dataclass
class Attachment:
    
    def to_dict(self) -> dict[str, str]:
        
        pass
    def multipart_form_element(self) -> tuple[str, bytes, str]:
        
        pass",snippet_221,3,"```python
import dataclasses
import mimetypes
from pathlib import Path

@dataclasses.dataclass
class Attachment:
    filename: str
    data: bytes

    def to_dict(self) -> dict[str, str]:
        return {""filename"": self.filename}

    def multipart_form_element(self) -> tuple[str, bytes, str]:
        mime_type, _ = mimetypes.guess_type(self.filename)
        return (self.filename, self.data, mime_type or ""application/octet-stream"")
```"
297960,theolind/pymysensors,theolind_pymysensors/mysensors/transport.py,mysensors.transport.Transport,"class Transport:
    """"""Handle gateway transport.

    I/O is allowed in this class. This class should host methods that
    are related to the gateway transport type.
    """"""

    def __init__(self, gateway, connect, timeout=1.0, reconnect_timeout=10.0, **kwargs):
        """"""Set up transport.""""""
        self._connect = connect
        self.can_log = False
        self.connect_task = None
        self.gateway = gateway
        self.protocol = None
        self.reconnect_timeout = reconnect_timeout
        self.timeout = timeout

    def disconnect(self):
        """"""Disconnect from the transport.""""""
        if not self.protocol or not self.protocol.transport:
            self.protocol = None
            return
        _LOGGER.info('Disconnecting from gateway')
        self.protocol.transport.close()
        self.protocol = None

    def send(self, message):
        """"""Write a message to the gateway.""""""
        if not message or not self.protocol or (not self.protocol.transport):
            return
        if not self.can_log:
            _LOGGER.debug('Sending %s', message.strip())
        try:
            self.protocol.transport.write(message.encode())
        except OSError as exc:
            _LOGGER.error('Failed writing to transport %s: %s', self.protocol.transport, exc)
            self.protocol.transport.close()
            self.protocol.conn_lost_callback()","class Transport:
    
    def __init__(self, gateway, connect, timeout=1.0, reconnect_timeout=10.0, **kwargs):
        
        pass
    def disconnect(self):
        
        pass
    def send(self, message):
        
        pass",snippet_222,4,"```python
import time
import logging

class Transport:
    
    def __init__(self, gateway, connect, timeout=1.0, reconnect_timeout=10.0, **kwargs):
        self.gateway = gateway
        self.connect = connect
        self.timeout = timeout
        self.reconnect_timeout = reconnect_timeout
        self.is_connected = False
        self.connection = None
        self.last_reconnect_attempt = time.time()
        self.logger = logging.getLogger(__name__)

        try:
            self.connect_to_gateway()
        except Exception as e:
            self.logger.error(f""Failed to connect to gateway: {e}"")

    def connect_to_gateway(self):
        if not self.is_connected:
            try:
                self.connection = self.connect(self.gateway, self.timeout)
                self.is_connected = True
                self.logger.info(""Connected to gateway"")
            except Exception as e:
                self.logger.error(f""Failed to connect to gateway: {e}"")
                self.is_connected = False

    def disconnect(self):
        if self.is_connected:
            try:
                if hasattr(self.connection, 'close'):
                    self.connection.close()
                self.is_connected = False
                self.logger.info(""Disconnected from gateway"")
            except Exception as e:
                self.logger.error(f""Failed to disconnect from gateway: {e}"")

    def send(self, message):
        if not self.is_connected:
            current_time = time.time()
            if current_time - self.last_reconnect_attempt >= self.reconnect_timeout:
                self.last_reconnect_attempt = current_time
                self.connect_to_gateway()
            else:
                self.logger.warning(""Not connected to gateway. Message not sent."")
                return

        try:
            if hasattr(self.connection, 'send'):
                self.connection.send(message)
            else:
                self.logger.error(""Connection object does not have a 'send' method."")
        except Exception as e:
            self.logger.error(f""Failed to send message: {e}"")
            self.is_connected = False
```"
298148,edx/event-tracking,edx_event-tracking/eventtracking/backends/logger.py,eventtracking.backends.logger.LoggerBackend,"import logging
import json

class LoggerBackend:
    """"""
    Event tracker backend that uses a python logger.

    Events are logged to the INFO level as JSON strings.
    """"""

    def __init__(self, **kwargs):
        """"""
        Event tracker backend that uses a python logger.

        `name` is an identifier for the logger, which should have
            been configured using the default python mechanisms.
        """"""
        name = kwargs.get('name', None)
        self.max_event_size = kwargs.get('max_event_size', MAX_EVENT_SIZE)
        self.event_logger = logging.getLogger(name)
        level = kwargs.get('level', 'info')
        self.log = getattr(self.event_logger, level.lower())

    def send(self, event):
        """"""Send the event to the standard python logger""""""
        event_str = json.dumps(event, cls=DateTimeJSONEncoder)
        if self.max_event_size is None or len(event_str) <= self.max_event_size:
            self.log(event_str)","
class LoggerBackend:
    
    def __init__(self, **kwargs):
        
        pass
    def send(self, event):
        
        pass",snippet_223,3,"```python
class LoggerBackend:
    
    def __init__(self, **kwargs):
        self.config = kwargs

    def send(self, event):
        raise NotImplementedError(""Subclasses must implement the 'send' method"")
```"
303020,UpCloudLtd/upcloud-python-api,UpCloudLtd_upcloud-python-api/upcloud_api/cloud_manager/host_mixin.py,upcloud_api.cloud_manager.host_mixin.HostManager,"from upcloud_api.api import API
from upcloud_api.host import Host

class HostManager:
    """"""
    Functions for managing hosts. Intended to be used as a mixin for CloudManager.
    """"""
    api: API

    def get_hosts(self):
        """"""
        Returns a list of available hosts, along with basic statistics of them when available.
        """"""
        url = '/host'
        res = self.api.get_request(url)
        return [Host(**host) for host in res['hosts']['host']]

    def get_host(self, id: str) -> Host:
        """"""
        Returns detailed information about a specific host.
        """"""
        url = f'/host/{id}'
        res = self.api.get_request(url)
        return Host(**res['host'])

    def modify_host(self, host: str, description: str) -> Host:
        """"""
        Modifies description of a specific host.
        """"""
        url = f'/host/{host}'
        body = {'host': {'description': description}}
        res = self.api.patch_request(url, body)
        return Host(**res['host'])","
class HostManager:
    
    def get_hosts(self):
        
        pass
    def get_hosts(self):
        
        pass

    def modify_host(self, host: str, description: str) -> Host:
        
        pass",snippet_224,4,"```python
class Host:
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description

    def __repr__(self):
        return f""Host('{self.name}', '{self.description}')""


class HostManager:
    def __init__(self):
        self.hosts = {}

    def get_hosts(self) -> dict:
        return self.hosts

    def get_host(self, host: str) -> Host:
        return self.hosts.get(host)

    def modify_host(self, host: str, description: str) -> Host:
        if host in self.hosts:
            self.hosts[host].description = description
        else:
            self.hosts[host] = Host(host, description)
        return self.hosts[host]


# Example usage:
if __name__ == ""__main__"":
    manager = HostManager()
    manager.modify_host(""localhost"", ""Local Host"")
    print(manager.get_host(""localhost""))  # Output: Host('localhost', 'Local Host')
    print(manager.get_hosts())  # Output: {'localhost': Host('localhost', 'Local Host')}
```"
304970,threeML/astromodels,threeML_astromodels/astromodels/functions/template_model.py,astromodels.functions.template_model.TemplateFile,"import numpy as np
import h5py
from dataclasses import dataclass
import collections
from typing import Dict, List, Optional, Union

@dataclass
class TemplateFile:
    """"""
    simple container to read and write
    the data to an hdf5 file

    """"""
    name: str
    description: str
    grid: np.ndarray
    parameters: Dict[str, np.ndarray]
    parameter_order: List[str]
    energies: np.ndarray
    interpolation_degree: int
    spline_smoothing_factor: float

    def save(self, file_name: str):
        """"""
        serialize the contents to a file

        :param file_name:
        :type file_name: str
        :returns:

        """"""
        with h5py.File(file_name, 'w') as f:
            f.attrs['name'] = self.name
            f.attrs['description'] = self.description
            f.attrs['interpolation_degree'] = self.interpolation_degree
            f.attrs['spline_smoothing_factor'] = self.spline_smoothing_factor
            f.create_dataset('energies', data=self.energies, compression='gzip')
            f.create_dataset('grid', data=self.grid, compression='gzip')
            dt = h5py.special_dtype(vlen=str)
            po = np.array(self.parameter_order, dtype=dt)
            f.create_dataset('parameter_order', data=po)
            par_group = f.create_group('parameters')
            for k in self.parameter_order:
                par_group.create_dataset(k, data=self.parameters[k], compression='gzip')

    @classmethod
    def from_file(cls, file_name: str):
        """"""
        read contents from a file

        :param cls:
        :type cls:
        :param file_name:
        :type file_name: str
        :returns:

        """"""
        with h5py.File(file_name, 'r') as f:
            name = f.attrs['name']
            description = f.attrs['description']
            interpolation_degree = f.attrs['interpolation_degree']
            spline_smoothing_factor = f.attrs['spline_smoothing_factor']
            energies = f['energies'][()]
            parameter_order = f['parameter_order'][()]
            grid = f['grid'][()]
            parameters = collections.OrderedDict()
            for k in parameter_order:
                parameters[k] = f['parameters'][k][()]
        return cls(name=name, description=description, interpolation_degree=interpolation_degree, spline_smoothing_factor=spline_smoothing_factor, energies=energies, parameter_order=parameter_order, parameters=parameters, grid=grid)","@dataclass
class TemplateFile:
    
    def save(self, file_name: str):
        
        pass
    @classmethod
    def from_file(cls, file_name: str):
        
        pass",snippet_227,3,"```python
from dataclasses import dataclass
import yaml

@dataclass
class TemplateFile:
    template: str
    params: dict

    def save(self, file_name: str):
        data = {
            'template': self.template,
            'params': self.params
        }
        with open(file_name, 'w') as file:
            yaml.dump(data, file)

    @classmethod
    def from_file(cls, file_name: str):
        try:
            with open(file_name, 'r') as file:
                data = yaml.safe_load(file)
                if data is None:
                    raise FileNotFoundError(f""File {file_name} is empty"")
                return cls(**data)
        except FileNotFoundError:
            raise FileNotFoundError(f""File {file_name} not found"")
        except yaml.YAMLError as e:
            raise ValueError(f""Failed to parse YAML in file {file_name}: {e}"")
        except TypeError as e:
            raise ValueError(f""Invalid data in file {file_name}: {e}"")
```"
305605,NASA-AMMOS/AIT-Core,ait/core/tlm.py,core.tlm.PacketContext,"class PacketContext:
    """"""PacketContext

    A PacketContext provides a simple wrapper around a Packet so that
    field accesses of the form:

        packet.fieldname

    may also be specified as:

        packet[fieldname]

    This latter syntax allows a PacketContext to be used as a symbol
    table when evaluating PacketExpressions.
    """"""
    __slots__ = ['_packet']

    def __init__(self, packet):
        """"""Creates a new PacketContext for the given Packet.""""""
        self._packet = packet

    def __getitem__(self, name):
        """"""Returns packet[name]""""""
        result = None
        if self._packet._hasattr(name):
            result = self._packet._getattr(name)
        else:
            msg = ""Packet '%s' has no field '%s'""
            values = (self._packet._defn.name, name)
            raise KeyError(msg % values)
        return result","class PacketContext:
    
    def __init__(self, packet):
        
        pass
    def __getitem__(self, name):
        
        pass",snippet_229,3,"```python
class PacketContext:
    
    def __init__(self, packet):
        self.packet = packet

    def __getitem__(self, name):
        return getattr(self.packet, name)
```"
305610,NASA-AMMOS/AIT-Core,ait/core/tlm.py,core.tlm.RawPacket,"class RawPacket:
    """"""RawPacket

    Wraps a packet such that:

        packet.raw.fieldname

    returns the value of fieldname as a raw value with no enumeration
    substitutions or DN to EU conversions applied.
    """"""
    __slots__ = ['_packet']

    def __init__(self, packet):
        """"""Creates a new RawPacket based on the given Packet.""""""
        self._packet = packet

    def __getattr__(self, fieldname):
        """"""Returns the value of the given packet fieldname as a raw
        value with no DN to EU conversion applied.
        """"""
        return self._packet._getattr(fieldname, raw=True)","class RawPacket:
    
    def __init__(self, packet):
        
        pass
    def __getattr__(self, fieldname):
        
        pass",snippet_230,3,"```python
class RawPacket:
    
    def __init__(self, packet):
        self.__dict__['_packet'] = packet

    def __getattr__(self, fieldname):
        return self._packet.get(fieldname)
```"
305613,NASA-AMMOS/AIT-Core,ait/core/tlm.py,core.tlm.WordArray,"class WordArray:
    """"""WordArrays are somewhat analogous to Python bytearrays, but
    currently much more limited in functionality.  They provide a
    readonly view of a bytearray addressable and iterable as a sequence
    of 16-bit words.  This is convenient for telemetry processing as
    packets are often more naturally addressable on word, as opposed to
    byte, boundaries.
    """"""
    __slots__ = ['_bytes']

    def __init__(self, bytes):
        """"""Creates a new wordarray from the given bytearray.

        The given bytearray should contain an even number of bytes.  If
        odd, the last byte is ignored.
        """"""
        self._bytes = bytes

    def __getitem__(self, key):
        """"""Returns the words in this wordarray at the given Python slice
        or word at the given integer index.""""""
        length = len(self)
        if isinstance(key, slice):
            return [self[n] for n in range(*key.indices(length))]
        elif isinstance(key, int):
            if key < 0:
                key += length
            if key >= length:
                msg = 'wordarray index (%d) is out of range [0 %d].'
                raise IndexError(msg % (key, length - 1))
            index = 2 * key
            return self._bytes[index] << 8 | self._bytes[index + 1]
        else:
            raise TypeError('wordarray indices must be integers.')

    def __len__(self):
        """"""Returns the number of words in this wordarray.""""""
        return len(self._bytes) / 2","class WordArray:
    
    def __init__(self, bytes):
        
        pass
    def __getitem__(self, key):
        
        pass
    def __len__(self):
        
        pass",snippet_231,4,"```python
class WordArray:
    
    def __init__(self, bytes):
        self.bytes = bytes

    def __getitem__(self, key):
        if isinstance(key, int):
            if key < 0 or key >= len(self.bytes) // 4:
                raise IndexError(""Index out of range"")
            return int.from_bytes(self.bytes[key*4:(key+1)*4], 'big')
        elif isinstance(key, slice):
            start, stop, step = key.indices(len(self.bytes) // 4)
            return [int.from_bytes(self.bytes[i*4:(i+1)*4], 'big') for i in range(start, stop, step)]
        else:
            raise TypeError(""Invalid key type"")

    def __len__(self):
        return len(self.bytes) // 4
```"
306020,ihmeuw/vivarium,ihmeuw_vivarium/src/vivarium/framework/lookup/interpolation.py,vivarium.framework.lookup.interpolation.Order0Interp,"import numpy as np
import pandas as pd
from collections.abc import Hashable, Sequence

class Order0Interp:
    """"""A callable that returns the result of order 0 interpolation over input data.

    Attributes
    ----------
    data
        The data from which to build the interpolation.
    value_columns
        Columns to be interpolated.
    extrapolate
        Whether or not to extrapolate beyond the edge of supplied bins.
    parameter_bins
        A dictionary where they keys are a tuple of the form
        (column name used in call, column name for left bin edge, column name for right bin edge)
        and the values are dictionaries of the form {""bins"": [ordered left edges of bins],
        ""max"": max right edge (used when extrapolation not allowed)}.

    """"""

    def __init__(self, data: pd.DataFrame, continuous_parameters: Sequence[Sequence[str]], value_columns: list[str], extrapolate: bool, validate: bool):
        """"""
        Parameters
        ----------
        data
            Data frame used to build interpolation.
        continuous_parameters
            Parameter columns. Should be of form (column name used in call,
            column name for left bin edge, column name for right bin edge)
            or column name. Assumes left bin edges are inclusive and
            right exclusive.
        value_columns
            Columns to be interpolated.
        extrapolate
            Whether or not to extrapolate beyond the edge of supplied bins.
        validate
            Whether or not to validate the data.
        """"""
        if validate:
            check_data_complete(data, continuous_parameters)
        self.data = data.copy()
        self.value_columns = value_columns
        self.extrapolate = extrapolate
        self.parameter_bins = {}
        for p in continuous_parameters:
            left_edge = self.data[p[1]].drop_duplicates().sort_values()
            max_right = self.data[p[2]].drop_duplicates().max()
            self.parameter_bins[tuple(p)] = {'bins': left_edge.reset_index(drop=True), 'max': max_right}

    def __call__(self, interpolants: pd.DataFrame) -> pd.DataFrame:
        """"""Find the bins for each parameter for each interpolant in interpolants
        and return the values from data there.

        Parameters
        ----------
        interpolants
            Data frame containing the parameters to interpolate..

        Returns
        -------
            A table with the interpolated values for the given interpolants.
        """"""
        interpolant_bins = pd.DataFrame(index=interpolants.index)
        merge_cols = []
        for cols, d in self.parameter_bins.items():
            bins = d['bins']
            max_right = d['max']
            merge_cols.append(cols[1])
            interpolant_col = interpolants[cols[0]]
            if not self.extrapolate and (interpolant_col.min() < bins[0] or interpolant_col.max() >= max_right):
                raise ValueError(f'Extrapolation outside of bins used to set up interpolation is only allowed when explicitly set in creation of Interpolation. Extrapolation is currently off for this interpolation, and parameter {cols[0]} includes data outside of original bins.')
            bin_indices = np.digitize(interpolant_col, bins.tolist())
            bin_indices[bin_indices > 0] -= 1
            interpolant_bins[cols[1]] = bins.loc[bin_indices].values
        index = interpolant_bins.index
        interp_vals = interpolant_bins.merge(self.data, how='left', on=merge_cols).set_index(index)
        return interp_vals[self.value_columns]","
class Order0Interp:
    
    def __init__(self, data: pd.DataFrame, continuous_parameters: Sequence[Sequence[str]], value_columns: list[str], extrapolate: bool, validate: bool):
        
        pass
    def __call__(self, interpolants: pd.DataFrame) -> pd.DataFrame:
        
        pass",snippet_232,3,"```python
import pandas as pd
from typing import Sequence

class Order0Interp:
    
    def __init__(self, data: pd.DataFrame, continuous_parameters: Sequence[Sequence[str]], value_columns: list[str], extrapolate: bool, validate: bool):
        self.data = data
        self.continuous_parameters = continuous_parameters
        self.value_columns = value_columns
        self.extrapolate = extrapolate
        self.validate = validate
        
        # Validate input data
        if validate:
            self._validate_input()
        
        # Create a MultiIndex for efficient lookup
        self.data_multi_index = self.data.set_index([param for params in continuous_parameters for param in params])
        
    def __call__(self, interpolants: pd.DataFrame) -> pd.DataFrame:
        # Set index for interpolants DataFrame
        interpolants_multi_index = interpolants.set_index([param for params in self.continuous_parameters for param in params])
        
        # Perform interpolation
        interpolated_values = self._interpolate(interpolants_multi_index)
        
        return interpolated_values.reset_index()
    
    def _validate_input(self):
        # Check if all value columns exist in data
        for col in self.value_columns:
            if col not in self.data.columns:
                raise ValueError(f""Value column '{col}' not found in data"")
        
        # Check if all continuous parameters exist in data
        for params in self.continuous_parameters:
            for param in params:
                if param not in self.data.columns:
                    raise ValueError(f""Continuous parameter '{param}' not found in data"")
        
        # Check if interpolants DataFrame has the same continuous parameters
        # This check is performed in __call__ method
    
    def _interpolate(self, interpolants_multi_index: pd.DataFrame):
        interpolated_values = []
        
        for index, row in interpolants_multi_index.iterrows():
            try:
                # Find the nearest point in the data
                nearest_point = self._find_nearest_point(index)
                interpolated_row = self.data_multi_index.loc[nearest_point, self.value_columns]
                interpolated_values.append(interpolated_row.values)
            except KeyError:
                if self.extrapolate:
                    # If extrapolation is allowed, use the nearest point
                    nearest_point = self._find_nearest_point(index, extrapolate=True)
                    interpolated_row = self.data_multi_index.loc[nearest_point, self.value_columns]
                    interpolated_values.append(interpolated_row.values)
                else:
                    # If extrapolation is not allowed, raise an error or return NaN
                    interpolated_values.append([float('nan')] * len(self.value_columns))
        
        interpolated_df = pd.DataFrame(interpolated_values, index=interpolants_multi_index.index, columns=self.value_columns)
        
        return interpolated_df
    
    def _find_nearest_point(self, point, extrapolate=False):
        # Find the nearest point in the data
        idx = self.data_multi_index.index.get_indexer([point], method='nearest')
        
        if not extrapolate and idx[0] == -1:
            raise KeyError(f""No nearest point found for {point}"")
        
        nearest_point = self.data_multi_index.index[idx[0]]
        
        return nearest_point
```"
306151,lago-project/lago,lago-project_lago/lago/templates.py,lago.templates.Template,"class Template:
    """"""
    Disk image template class

    Attributes:
        name (str): Name of this template
        _versions (dict(str:TemplateVersion)): versions for this template
    """"""

    def __init__(self, name, versions):
        """"""
        Args:
            name (str): Name of the template
            versions (dict(str:TemplateVersion)): dictionary with the
                version_name: :class:`TemplateVersion` pairs for this template
        """"""
        self.name = name
        self._versions = versions

    def get_version(self, ver_name=None):
        """"""
        Get the given version for this template, or the latest

        Args:
            ver_name (str or None): Version to retieve, None for the latest

        Returns:
            TemplateVersion: The version matching the given name or the latest
                one
        """"""
        if ver_name is None:
            return self.get_latest_version()
        return self._versions[ver_name]

    def get_latest_version(self):
        """"""
        Retrieves the latest version for this template, the latest being the
        one with the newest timestamp

        Returns:
            TemplateVersion
        """"""
        return max(self._versions.values(), key=lambda x: x.timestamp())","class Template:
    
    def __init__(self, name, versions):
        
        pass
    def get_version(self, ver_name=None):
        
        pass
    def get_latest_version(self):
        
        pass",snippet_233,4,"```python
class Template:
    
    def __init__(self, name, versions):
        """"""
        Initialize a Template object.

        Args:
            name (str): The name of the template.
            versions (dict): A dictionary where keys are version names and values are version details.
        """"""
        self.name = name
        self.versions = versions

    def get_version(self, ver_name=None):
        """"""
        Get a specific version of the template.

        Args:
            ver_name (str, optional): The name of the version to retrieve. Defaults to None.

        Returns:
            The version details if ver_name is provided, otherwise returns all versions.
        """"""
        if ver_name is None:
            return self.versions
        return self.versions.get(ver_name)

    def get_latest_version(self):
        """"""
        Get the latest version of the template.

        Returns:
            The latest version details.
        """"""
        if not self.versions:
            return None
        return max(self.versions.items(), key=lambda x: x[0])[1]


# Example usage:
if __name__ == ""__main__"":
    template = Template(""example_template"", {
        ""v1"": ""Version 1 details"",
        ""v2"": ""Version 2 details"",
        ""v3"": ""Version 3 details""
    })

    print(template.get_version(""v2""))  # Output: Version 2 details
    print(template.get_version())  # Output: {'v1': 'Version 1 details', 'v2': 'Version 2 details', 'v3': 'Version 3 details'}
    print(template.get_latest_version())  # Output: Version 3 details
```"
311056,geronimp/graftM,geronimp_graftM/graftm/deduplicator.py,graftm.deduplicator.Deduplicator,"class Deduplicator:
    """"""Deduplicates sequences""""""

    def deduplicate(self, aligned_sequence_objects):
        """"""Sort the given aligned_sequence objects into an array of arrays,
        where input sequences are grouped iff they have the same sequence

        Parameters
        ----------
        aligned_sequence_objects: array of Sequence objects
            input sequences

        Returns
        -------
        Array of arrays of Sequence objects""""""
        sequence_to_groups = {}
        for s in aligned_sequence_objects:
            try:
                sequence_to_groups[s.seq].append(s)
            except KeyError:
                sequence_to_groups[s.seq] = [s]
        return list(sequence_to_groups.values())

    def lca_taxonomy(self, deduplicated_sequences, taxonomy_hash):
        """"""Given a set of deduplicated sequences and a taxonomy hash,
        return the respective LCAs of taxonomy

        Parameters
        ----------
        deduplicated_sequences: Array of arrays of Sequence objects
            as output from deduplicate()
        taxonomy_hash: dictionary 
            of sequence names to taxonomy array (i.e. array of str)

        Returns
        -------
        Array of taxonomy LCAs""""""
        to_return = []
        for dup_group in deduplicated_sequences:
            lca = taxonomy_hash[dup_group[0].name]
            for s in dup_group[1:]:
                for i, tax in enumerate(taxonomy_hash[s.name]):
                    if i >= len(lca) or tax != lca[i]:
                        lca = lca[:i]
                        break
                if len(lca) > len(taxonomy_hash[s.name]):
                    lca = lca[:len(taxonomy_hash[s.name])]
            to_return.append(lca)
        return to_return","class Deduplicator:
    
    def deduplicate(self, aligned_sequence_objects):
        
        pass
    def lca_taxonomy(self, deduplicated_sequences, taxonomy_hash):
        
        pass",snippet_235,3,"```python
class Deduplicator:
    
    def deduplicate(self, aligned_sequence_objects):
        """"""
        Removes duplicate sequences from the given list of aligned sequence objects.

        Args:
            aligned_sequence_objects (list): A list of aligned sequence objects.

        Returns:
            list: A list of deduplicated sequence objects.
        """"""
        seen = set()
        deduplicated_sequences = []
        for sequence in aligned_sequence_objects:
            sequence_str = str(sequence)
            if sequence_str not in seen:
                seen.add(sequence_str)
                deduplicated_sequences.append(sequence)
        return deduplicated_sequences

    def lca_taxonomy(self, deduplicated_sequences, taxonomy_hash):
        """"""
        Assigns the lowest common ancestor (LCA) taxonomy to the given deduplicated sequences.

        Args:
            deduplicated_sequences (list): A list of deduplicated sequence objects.
            taxonomy_hash (dict): A dictionary mapping sequence IDs to their corresponding taxonomies.

        Returns:
            dict: A dictionary mapping deduplicated sequence IDs to their corresponding LCA taxonomies.
        """"""
        lca_taxonomies = {}
        for sequence in deduplicated_sequences:
            sequence_id = sequence.id  # Assuming sequence objects have an 'id' attribute
            taxonomy = taxonomy_hash.get(sequence_id)
            if taxonomy:
                lca_taxonomies[sequence_id] = taxonomy
        return lca_taxonomies
```"
311087,geronimp/graftM,geronimp_graftM/graftm/search_table.py,graftm.search_table.SearchTableWriter,"import logging
from graftm.sequence_search_results import SequenceSearchResult

class SearchTableWriter:
    """"""
    Class for writing the search output OTU table. Basically a summary
    of hits to the HMM/Diamond searched in the following format:

             #ID    Metagenome_1    Metagenome_2    ...
            HMM1    50              6
            HMM2    195             41
            HMM3    2               20120
            ...

    You just need to specify a series of SequenceSearchResult objects, and an
    output path.
    """"""

    def _interpret_hits(self, results_list, base_list):
        """"""Sort reads that hit multiple HMMs to the databases to which they had
        the highest bit score. Return a dictionary containing HMMs as keys, and
        number of hits as the values.

        This function is set up so that the read names could easily be returned
        instead of numbers, for future development of GraftM

        Parameters
        ----------
        results_list: list
            Iterable if SequenceSearchResult objects. e.g.
                [SequenceSearchResult_1, SequenceSearchResult_2, ...]

        base_list: list
            Iterable of the basenames for each sequence file provided to graftM
            e.g.
                [sample_1, sample_2, ...]

        Returns
        -------
        dictionary:
            Contains samples as entries. The value for each sample is another
            dictionary with HMM as the key, and number of hits as values:
                {""sample_1"":{HMM_1: 12
                             HMM_2: 35
                             HMM_3: 1258
                             ...}
                 ...
                }

        """"""
        logging.debug('Sorting reads into HMMs by bit score')
        run_results = {}
        for base, results in zip(base_list, results_list):
            search_results = {}
            for search in results():
                search_list = list(search.each([SequenceSearchResult.QUERY_ID_FIELD, SequenceSearchResult.ALIGNMENT_BIT_SCORE, SequenceSearchResult.HMM_NAME_FIELD]))
                for hit in search_list:
                    if hit[0] in search_results:
                        if float(hit[1]) > search_results[hit[0]][0]:
                            search_results[hit[0]] = [float(hit[1]), hit[2]]
                    else:
                        search_results[hit[0]] = [float(hit[1]), hit[2]]
            run_results[base] = search_results
        db_count = {}
        for run in run_results.keys():
            run_count = {}
            for entry in list(run_results[run].values()):
                key = entry[1]
                if key in run_count:
                    run_count[key] += 1
                else:
                    run_count[key] = 1
            db_count[run] = run_count
        return db_count

    def _write_results(self, db_count, output_path):
        """"""Write the table to the output_path directory

        db_count: dict
            Contains samples as entries. The value for each sample is another
            dictionary with HMM as the key, and number of hits as values:
                {""sample_1"":{HMM_1: 12
                             HMM_2: 35
                             HMM_3: 1258
                             ...}
                 ...
                }

        output_path: str
            Path to output file to which the resultant output file will be
            written to.
        """"""
        logging.debug('Writing search otu table to file: %s' % output_path)
        output_dict = {}
        for idx, value_dict in enumerate(db_count.values()):
            for database, count in value_dict.items():
                if database in output_dict:
                    output_dict[database].append(str(count))
                else:
                    output_dict[database] = ['0'] * idx + [str(count)]
            for key, item in output_dict.items():
                if len(item) == idx:
                    output_dict[key].append('0')
        with open(output_path, 'w') as out:
            out.write('\t'.join(['#ID'] + list(db_count.keys())) + '\n')
            for key, item in output_dict.items():
                out.write('%s\t%s' % (key, '\t'.join(item)) + '\n')

    def build_search_otu_table(self, search_results_list, base_list, output_path):
        """"""
        Build an OTU from SequenceSearchResult objects

        Parameters
        ----------
        search_results_list: list
            Iterable if SequenceSearchResult objects. e.g.
                [SequenceSearchResult_1, SequenceSearchResult_2, ...]
        base_list: list
            Iterable of the basenames for each sequence file provided to graftM
            e.g.
                [sample_1, sample_2, ...]
        output_path: str
            Path to output file to which the resultant output file will be
            written to.
        """"""
        db_count = self._interpret_hits(search_results_list, base_list)
        self._write_results(db_count, output_path)","
class SearchTableWriter:
    
    def _interpret_hits(self, results_list, base_list):
        
        pass
    def _write_results(self, db_count, output_path):
        
        pass

    def build_search_otu_table(self, search_results_list, base_list, output_path):
        
        pass",snippet_236,4,"```python
import pandas as pd

class SearchTableWriter:
    
    def _interpret_hits(self, results_list, base_list):
        """"""Interpret search results and create a dictionary with the results.""""""
        results_dict = {}
        for i, result in enumerate(results_list):
            base_name = base_list[i]
            results_dict[base_name] = {}
            for hit in result:
                results_dict[base_name][hit['id']] = hit['count']
        return results_dict

    def _write_results(self, db_count, output_path):
        """"""Write the search results to a tab-delimited file.""""""
        db_count.to_csv(output_path, sep='\t', index=True)

    def build_search_otu_table(self, search_results_list, base_list, output_path):
        """"""Build a search OTU table from search results.""""""
        results_dict = self._interpret_hits(search_results_list, base_list)
        db_count = pd.DataFrame(results_dict).fillna(0).astype(int)
        self._write_results(db_count, output_path)
```"
311100,geronimp/graftM,geronimp_graftM/graftm/tree_decorator.py,graftm.tree_decorator.TreeDecorator,"from graftm.greengenes_taxonomy import GreenGenesTaxonomy, MalformedGreenGenesTaxonomyException
from graftm.getaxnseq import Getaxnseq
import logging
from graftm.taxonomy_cleaner import TaxonomyCleaner

class TreeDecorator:
    """"""
    A class that conservatively decorates trees with taxonomy, or any other
    hierarchical annotation. If all tips descending from a node within the
    provided tree have consistent taxonomy, it will be decorated with that
    taxonomy (or annotation of any type).
    """"""

    def __init__(self, tree, taxonomy, seqinfo=None):
        """"""
        Parameters
        ----------
        tree        : dendropy.Tree

            dendropy.Tree object
        taxonomy    : string
            Path to a file containing taxonomy information about the tree,
            either in Greengenes or taxtastic format (seqinfo file must also
            be provided if taxonomy is in taxtastic format).
        seqinfo     : string
            Path to a seqinfo file. This is a .csv file with the first column
            denoting the sequence name, and the second column, its most resolved
            taxonomic rank.
        """"""
        self.encountered_nodes = {}
        self.encountered_taxonomies = set()
        self.tree = tree
        logging.info('Reading in taxonomy')
        if seqinfo:
            logging.info('Importing taxtastic taxonomy from files: %s and %s' % (taxonomy, seqinfo))
            gtns = Getaxnseq()
            self.taxonomy = gtns.read_taxtastic_taxonomy_and_seqinfo(open(taxonomy), open(seqinfo))
        else:
            try:
                logging.info('Reading Greengenes style taxonomy')
                self.taxonomy = GreenGenesTaxonomy.read_file(taxonomy).taxonomy
            except MalformedGreenGenesTaxonomyException:
                raise Exception('Failed to read taxonomy as a Greengenes                                  formatted file. Was a taxtastic style                                  taxonomy provided with no seqinfo file?')

    def _write_consensus_strings(self, output):
        """"""
        Writes the taxonomy of each leaf to a file. If the leaf has no
        taxonomy, a taxonomy string will be created using the annotations
        provided to the ancestor nodes of that leaf (meaning, it will be
        decorated).

        Parameters
        ----------
        output    : string
            File to which the taxonomy strings for each leaf in the tree will
            be written in Greengenes format, e.g.
                637960147    mcrA; Euryarchaeota_mcrA; Methanomicrobia
                637699780    mcrA; Euryarchaeota_mcrA; Methanomicrobia
        """"""
        logging.info('Writing decorated taxonomy to file: %s' % output)
        with open(output, 'w') as out:
            for tip in self.tree.leaf_nodes():
                tax_name = tip.taxon.label.replace(' ', '_')
                if tip.taxon.label in self.taxonomy:
                    tax_string = '; '.join(self.taxonomy[tax_name])
                else:
                    ancestor_list = []
                    for ancestor in tip.ancestor_iter():
                        if ancestor.label:
                            split_node_name = ancestor.label.split(':')
                            if len(split_node_name) == 2:
                                ancestor_list += list(reversed(split_node_name[1].split('; ')))
                            elif len(split_node_name) == 1:
                                try:
                                    float(split_node_name[0])
                                except ValueError:
                                    ancestor_list += list(reversed(split_node_name[0].split('; ')))
                            else:
                                raise Exception('Malformed node name: %s' % ancestor.label)
                    tax_list = list(reversed(ancestor_list))
                    if len(tax_list) < 1:
                        logging.warning('No taxonomy found for species %s!' % tax_name)
                        tax_string = 'Unknown'
                    else:
                        tax_string = '; '.join(tax_list)
                output_line = '%s\t%s\n' % (tax_name, tax_string)
                out.write(output_line)

    def _rename(self, node, name):
        """"""
        Rename an internal node of the tree. If an annotation is already
        present, append the new annotation to the end of it. If a bootstrap
        value is present, add annotations are added after a "":"" as per standard
        newick format.

        Parameters
        ----------
        node: dendropy.Node
            dendropy.Node object
        name    : string
            Annotation to rename the node with.
        """"""
        if node.label:
            try:
                float(node.label)
                new_label = '%s:%s' % (node.label, name)
            except ValueError:
                new_label = '%s; %s' % (node.label, name)
            node.label = new_label
        else:
            node.label = name

    def decorate(self, output_tree, output_tax, unique_names):
        """"""
        Decorate a tree with taxonomy. This code does not allow inconsistent
        taxonomy within a clade. If one sequence in a clade has a different
        annotation to the rest, it will split the clade. Paraphyletic group
        names are distinguished if unique_names = True using a simple tally of
        each group (see unique_names below).

        Parameters
        ----------
        output_tree        : string
            File to which the decorated tree will be written.
        output_tax         : string
            File to which the taxonomy strings for each tip in the tree will be
            written.
        unique_names       : boolean
            True indicating that a unique number will be appended to the end of
            a taxonomic rank if it is found more than once in the tree
            (i.e. it is paraphyletic in the tree). If false, multiple clades
            may be assigned with the same name.
        """"""
        logging.info('Decorating tree')
        encountered_taxonomies = {}
        tc = TaxonomyCleaner()
        for node in self.tree.preorder_internal_node_iter(exclude_seed_node=True):
            max_tax_string_length = 0
            for tip in node.leaf_nodes():
                tip_label = tip.taxon.label.replace(' ', '_')
                if tip_label in self.taxonomy:
                    tax_string_length = len(self.taxonomy[tip.taxon.label.replace(' ', '_')])
                    if tax_string_length > max_tax_string_length:
                        max_tax_string_length = tax_string_length
            logging.debug('Number of ranks found for node: %i' % max_tax_string_length)
            tax_string_array = []
            for rank in range(max_tax_string_length):
                rank_tax = []
                for tip in node.leaf_nodes():
                    tip_label = tip.taxon.label.replace(' ', '_')
                    if tip_label in self.taxonomy:
                        tip_tax = self.taxonomy[tip_label]
                        if len(tip_tax) > rank:
                            tip_rank = tip_tax[rank]
                            if tip_rank not in rank_tax:
                                rank_tax.append(tip_rank)
                consistent_taxonomy = len(rank_tax) == 1
                if consistent_taxonomy:
                    tax = rank_tax.pop()
                    logging.debug('Consistent taxonomy found for node: %s' % tax)
                    if tax not in tc.meaningless_taxonomic_names:
                        if unique_names:
                            if tax in encountered_taxonomies:
                                encountered_taxonomies[tax] += 0
                                tax = '%s_%i' % (tax, encountered_taxonomies[tax])
                            else:
                                encountered_taxonomies[tax] = 0
                        tax_string_array.append(tax)
            if any(tax_string_array):
                index = 0
                for anc in node.ancestor_iter():
                    try:
                        index += anc.tax
                    except:
                        continue
                tax_string_array = tax_string_array[index:]
                if any(tax_string_array):
                    self._rename(node, '; '.join(tax_string_array))
                node.tax = len(tax_string_array)
        logging.info('Writing decorated tree to file: %s' % output_tree)
        if output_tree:
            self.tree.write(path=output_tree, schema='newick')
        if output_tax:
            self._write_consensus_strings(output_tax)","
class TreeDecorator:
    
    def __init__(self, tree, taxonomy, seqinfo=None):
        
        pass
    def _write_consensus_strings(self, output):
        
        pass

    def _rename(self, node, name):
        
        pass

    def decorate(self, output_tree, output_tax, unique_names):
        '''
        Decorate a tree with taxonomy. This code does not allow inconsistent
        taxonomy within a clade. If one sequence in a clade has a different
        annotation to the rest, it will split the clade. Paraphyletic group
        names are distinguished if unique_names = True using a simple tally of
        each group (see unique_names below).
        Parameters
        ----------
        output_tree        : string
            File to which the decorated tree will be written.
        output_tax         : string
            File to which the taxonomy strings for each tip in the tree will be
            written.
        unique_names       : boolean
            True indicating that a unique number will be appended to the end of
            a taxonomic rank if it is found more than once in the tree
            (i.e. it is paraphyletic in the tree). If false, multiple clades
            may be assigned with the same name.
        '''
        pass",snippet_237,5,"```python
from collections import defaultdict
from Bio import Phylo

class TreeDecorator:
    
    def __init__(self, tree, taxonomy, seqinfo=None):
        self.tree = Phylo.read(tree, 'newick')
        self.taxonomy = self._read_taxonomy(taxonomy)
        self.seqinfo = self._read_seqinfo(seqinfo)

    def _read_taxonomy(self, taxonomy):
        tax_dict = {}
        with open(taxonomy, 'r') as f:
            for line in f:
                line = line.strip().split('\t')
                tax_dict[line[0]] = line[1].split(';')
        return tax_dict

    def _read_seqinfo(self, seqinfo):
        if seqinfo is None:
            return None
        seqinfo_dict = {}
        with open(seqinfo, 'r') as f:
            for line in f:
                line = line.strip().split('\t')
                seqinfo_dict[line[0]] = line[1:]
        return seqinfo_dict

    def _write_consensus_strings(self, output):
        with open(output, 'w') as f:
            for tip in self.tree.get_terminals():
                name = tip.name
                if name in self.taxonomy:
                    f.write(f'{name}\t{"";"".join(self.taxonomy[name])}\n')

    def _rename(self, node, name):
        node.name = name

    def _get_unique_label(self, label, count_dict):
        if label not in count_dict:
            count_dict[label] = 1
            return label
        else:
            count_dict[label] += 1
            return f'{label}_{count_dict[label]}'

    def decorate(self, output_tree, output_tax, unique_names):
        count_dict = defaultdict(int)
        for node in self.tree.get_nonterminals(order='postorder'):
            children = node.clades
            tax_strings = [self.taxonomy.get(child.name, []) for child in children if child.is_terminal()]
            if len(tax_strings) == 0:
                continue
            consensus_tax = self._get_consensus_tax(tax_strings)
            if unique_names:
                label = self._get_unique_label(';'.join(consensus_tax), count_dict)
            else:
                label = ';'.join(consensus_tax)
            self._rename(node, label)
        Phylo.write(self.tree, output_tree, 'newick')
        self._write_consensus_strings(output_tax)

    def _get_consensus_tax(self, tax_strings):
        if len(tax_strings) == 0:
            return []
        consensus_tax = []
        for i in range(len(tax_strings[0])):
            tax_level = [tax[i] for tax in tax_strings if len(tax) > i]
            if len(set(tax_level)) == 1:
                consensus_tax.append(tax_level[0])
            else:
                break
        return consensus_tax
```"
311642,abhishek-ram/pyas2-lib,abhishek-ram_pyas2-lib/pyas2lib/as2.py,pyas2lib.as2.Partner,"from oscrypto import asymmetric
from pyas2lib.exceptions import AS2Exception, DuplicateDocument, ImproperlyConfigured, InsufficientSecurityError, IntegrityError, MDNNotFound, PartnerNotFound
from pyas2lib.utils import canonicalize, extract_first_part, make_mime_boundary, mime_to_bytes, pem_to_der, quote_as2name, split_pem, unquote_as2name, verify_certificate_chain
from pyas2lib.constants import AS2_VERSION, ASYNCHRONOUS_MDN, DIGEST_ALGORITHMS, EDIINT_FEATURES, ENCRYPTION_ALGORITHMS, KEY_ENCRYPTION_ALGORITHMS, MDN_CONFIRM_TEXT, MDN_FAILED_TEXT, MDN_MODES, SIGNATUR_ALGORITHMS, SYNCHRONOUS_MDN
from dataclasses import dataclass

@dataclass
class Partner:
    """"""
    Class represents an AS2 partner and defines the certificates and
    settings to be used when sending and receiving messages.

    :param as2_name: The unique AS2 name for this partner.

    :param verify_cert: A byte string of the certificate to be used for
        verifying signatures of inbound messages and MDNs.

    :param verify_cert_ca: A byte string of the ca certificate if any of
        the verification cert

    :param encrypt_cert: A byte string of the certificate to be used for
        encrypting outbound message.

    :param encrypt_cert_ca: A byte string of the ca certificate if any of
        the encryption cert

    :param validate_certs: Set this flag to `False` to disable validations of
        the encryption and verification certificates. (default `True`)

    :param compress: Set this flag to `True` to compress outgoing
        messages. (default `False`)

    :param sign: Set this flag to `True` to sign outgoing
        messages. (default `False`)

    :param digest_alg: The digest algorithm to be used for generating the
        signature. (default ""sha256"")

    :param encrypt: Set this flag to `True` to encrypt outgoing
        messages. (default `False`)

    :param enc_alg:
        The encryption algorithm to be used. (default `""tripledes_192_cbc""`)

    :param mdn_mode: The mode to be used for receiving the MDN.
        Set to `None` for no MDN, `'SYNC'` for synchronous and `'ASYNC'`
        for asynchronous. (default `None`)

    :param mdn_digest_alg: The digest algorithm to be used by the receiver
        for signing the MDN. Use `None` for unsigned MDN. (default `None`)

    :param mdn_confirm_text: The text to be used in the MDN for successfully
        processed messages received from this partner.

    :param canonicalize_as_binary: force binary canonicalization for this partner

    :param sign_alg: The signing algorithm to be used for generating the
        signature. (default `rsassa_pkcs1v15`)

    :param key_enc_alg: The key encryption algorithm to be used.
        (default `rsaes_pkcs1v15`)

    """"""
    as2_name: str
    verify_cert: bytes = None
    verify_cert_ca: bytes = None
    encrypt_cert: bytes = None
    encrypt_cert_ca: bytes = None
    validate_certs: bool = True
    compress: bool = False
    encrypt: bool = False
    enc_alg: str = 'tripledes_192_cbc'
    sign: bool = False
    digest_alg: str = 'sha256'
    mdn_mode: str = None
    mdn_digest_alg: str = None
    mdn_confirm_text: str = MDN_CONFIRM_TEXT
    ignore_self_signed: bool = True
    canonicalize_as_binary: bool = False
    sign_alg: str = 'rsassa_pkcs1v15'
    key_enc_alg: str = 'rsaes_pkcs1v15'

    def __post_init__(self):
        """"""Run the post initialisation checks for this class.""""""
        if self.digest_alg and self.digest_alg not in DIGEST_ALGORITHMS:
            raise ImproperlyConfigured(f'Unsupported Digest Algorithm {self.digest_alg}, must be one of {DIGEST_ALGORITHMS}')
        if self.enc_alg and self.enc_alg not in ENCRYPTION_ALGORITHMS:
            raise ImproperlyConfigured(f'Unsupported Encryption Algorithm {self.enc_alg}, must be one of {ENCRYPTION_ALGORITHMS}')
        if self.mdn_mode and self.mdn_mode not in MDN_MODES:
            raise ImproperlyConfigured(f'Unsupported MDN Mode {self.mdn_mode}, must be one of {MDN_MODES}')
        if self.mdn_digest_alg and self.mdn_digest_alg not in DIGEST_ALGORITHMS:
            raise ImproperlyConfigured(f'Unsupported MDN Digest Algorithm {self.mdn_digest_alg}, must be one of {DIGEST_ALGORITHMS}')
        if self.sign_alg and self.sign_alg not in SIGNATUR_ALGORITHMS:
            raise ImproperlyConfigured(f'Unsupported Signature Algorithm {self.sign_alg}, must be one of {SIGNATUR_ALGORITHMS}')
        if self.key_enc_alg and self.key_enc_alg not in KEY_ENCRYPTION_ALGORITHMS:
            raise ImproperlyConfigured(f'Unsupported Key Encryption Algorithm {self.key_enc_alg}, must be one of {KEY_ENCRYPTION_ALGORITHMS}')

    def load_verify_cert(self):
        """"""Load the verification certificate of the partner and returned the parsed cert.""""""
        if self.validate_certs:
            cert = pem_to_der(self.verify_cert, return_multiple=False)
            if self.verify_cert_ca:
                trust_roots = pem_to_der(self.verify_cert_ca)
            else:
                trust_roots = []
            verify_certificate_chain(cert, trust_roots, ignore_self_signed=self.ignore_self_signed)
        return asymmetric.load_certificate(self.verify_cert)

    def load_encrypt_cert(self):
        """"""Load the encryption certificate of the partner and returned the parsed cert.""""""
        if self.validate_certs:
            cert = pem_to_der(self.encrypt_cert, return_multiple=False)
            if self.encrypt_cert_ca:
                trust_roots = pem_to_der(self.encrypt_cert_ca)
            else:
                trust_roots = []
            verify_certificate_chain(cert, trust_roots, ignore_self_signed=self.ignore_self_signed)
        return asymmetric.load_certificate(self.encrypt_cert)","@dataclass
class Partner:
    
    def __post_init__(self):
        
        pass
    def load_verify_cert(self):
        
        pass

    def load_encrypt_cert(self):
        
        pass",snippet_239,4,"```python
from dataclasses import dataclass
import os
from cryptography import x509
from cryptography.hazmat.backends import default_backend

@dataclass
class Partner:
    name: str
    verify_cert_path: str
    encrypt_cert_path: str
    verify_cert: x509.Certificate = None
    encrypt_cert: x509.Certificate = None

    def __post_init__(self):
        self.load_verify_cert()
        self.load_encrypt_cert()

    def load_verify_cert(self):
        if not os.path.exists(self.verify_cert_path):
            raise FileNotFoundError(f""Verify certificate file not found: {self.verify_cert_path}"")
        
        with open(self.verify_cert_path, 'rb') as f:
            self.verify_cert = x509.load_pem_x509_certificate(f.read(), default_backend())

    def load_encrypt_cert(self):
        if not os.path.exists(self.encrypt_cert_path):
            raise FileNotFoundError(f""Encrypt certificate file not found: {self.encrypt_cert_path}"")
        
        with open(self.encrypt_cert_path, 'rb') as f:
            self.encrypt_cert = x509.load_pem_x509_certificate(f.read(), default_backend())
```"
311862,reportportal/client-Python,reportportal_client-Python/reportportal_client/core/rp_issues.py,reportportal_client.core.rp_issues.ExternalIssue,"class ExternalIssue:
    """"""This class represents external(BTS) system issue.""""""

    def __init__(self, bts_url=None, bts_project=None, submit_date=None, ticket_id=None, url=None):
        """"""Initialize instance attributes.

        :param bts_url:     Bug tracker system URL
        :param bts_project: Bug tracker system project
        :param submit_date: Bug submission date
        :param ticket_id:   Unique ID of the ticket at the BTS
        :param url:         URL to the ticket(bug)
        """"""
        self.bts_url = bts_url
        self.bts_project = bts_project
        self.submit_date = submit_date
        self.ticket_id = ticket_id
        self.url = url

    @property
    def payload(self):
        """"""Form the correct dictionary for the BTS issue.""""""
        return {'btsUrl': self.bts_url, 'btsProject': self.bts_project, 'submitDate': self.submit_date, 'ticketId': self.ticket_id, 'url': self.url}","class ExternalIssue:
    
    def __init__(self, bts_url=None, bts_project=None, submit_date=None, ticket_id=None, url=None):
        
        pass
    @property
    def payload(self):
        
        pass",snippet_240,3,"```python
class ExternalIssue:
    
    def __init__(self, bts_url=None, bts_project=None, submit_date=None, ticket_id=None, url=None):
        self.bts_url = bts_url
        self.bts_project = bts_project
        self.submit_date = submit_date
        self.ticket_id = ticket_id
        self.url = url

    @property
    def payload(self):
        return {
            'bts_url': self.bts_url,
            'bts_project': self.bts_project,
            'submit_date': self.submit_date,
            'ticket_id': self.ticket_id,
            'url': self.url
        }
```"
311863,reportportal/client-Python,reportportal_client-Python/reportportal_client/core/rp_issues.py,reportportal_client.core.rp_issues.Issue,"class Issue:
    """"""This class represents an issue that can be attached to test result.""""""

    def __init__(self, issue_type, comment=None, auto_analyzed=False, ignore_analyzer=True):
        """"""Initialize instance attributes.

        :param issue_type:      Issue type locator. Allowable values: ""pb***"",
                                ""ab***"", ""si***"", ""ti***"", ""nd001"". Where ***
                                is locator id.
        :param comment:         Issue comments
        :param auto_analyzed:   Indicator that the issue has been marked with
                                the RP auto analyzer
        :param ignore_analyzer: Flag that forces RP analyzer to ignore this
                                issue
        """"""
        self._external_issues = []
        self.auto_analyzed = auto_analyzed
        self.comment = comment
        self.ignore_analyzer = ignore_analyzer
        self.issue_type = issue_type

    def external_issue_add(self, issue):
        """"""Add external system issue to the issue.""""""
        self._external_issues.append(issue.payload)

    @property
    def payload(self):
        """"""Form the correct dictionary for the issue.""""""
        return {'autoAnalyzed': self.auto_analyzed, 'comment': self.comment, 'externalSystemIssues': self._external_issues, 'ignoreAnalyzer': self.ignore_analyzer, 'issueType': self.issue_type}","class Issue:
    
    def __init__(self, issue_type, comment=None, auto_analyzed=False, ignore_analyzer=True):
        
        pass
    def external_issue_add(self, issue):
        
        pass
    @property
    def payload(self):
        
        pass",snippet_241,4,"```python
class Issue:
    
    def __init__(self, issue_type, comment=None, auto_analyzed=False, ignore_analyzer=True):
        self.issue_type = issue_type
        self.comment = comment
        self.auto_analyzed = auto_analyzed
        self.ignore_analyzer = ignore_analyzer
        self.external_issues = []

    def external_issue_add(self, issue):
        self.external_issues.append(issue)

    @property
    def payload(self):
        return {
            'type': self.issue_type,
            'comment': self.comment,
            'autoAnalyzed': self.auto_analyzed,
            'ignoreAnalyzer': self.ignore_analyzer,
            'externalIssues': self.external_issues
        }
```"
312030,SuperCowPowers/workbench,aws_setup/aws_identity_check.py,aws_identity_check.AWSIdentityCheck,"from workbench.core.cloud_platform.aws.aws_account_clamp import AWSAccountClamp
from workbench.utils.config_manager import ConfigManager
import sys
import logging

class AWSIdentityCheck:
    """"""Just a Utility Script that allows people to check which AWS Identity is active""""""

    def __init__(self):
        """"""AWSIdentityCheck Initialization""""""
        self.log = logging.getLogger('workbench')
        self.aws_clamp = AWSAccountClamp()

    def check(self):
        """"""Check the AWS Identity""""""
        cm = ConfigManager()
        active_profile = cm.get_config('AWS_PROFILE')
        if active_profile:
            self.log.info(f'Workbench AWS_PROFILE: {active_profile}')
        else:
            self.log.info('No AWS_PROFILE set')
            sys.exit(0)
        self.log.info('\n\n*** Caller/Base Identity Check ***')
        self.aws_clamp.check_aws_identity()
        self.log.info('Caller/Base Identity Check Success...')
        self.log.info('\n\n*** AWS Assumed Role Check ***')
        self.aws_clamp.check_assumed_role()
        self.log.info('Assumed Role Check Success...')","
class AWSIdentityCheck:
    
    def __init__(self):
        
        pass
    def check(self):
        
        pass",snippet_242,3,"```python
import boto3
from botocore.exceptions import ClientError, NoCredentialsError

class AWSIdentityCheck:
    
    def __init__(self):
        self.sts = boto3.client('sts')

    def check(self):
        try:
            response = self.sts.get_caller_identity()
            return {
                'success': True,
                'user_id': response['UserId'],
                'account': response['Account'],
                'arn': response['Arn']
            }
        except NoCredentialsError:
            return {
                'success': False,
                'error': 'No AWS credentials found'
            }
        except ClientError as e:
            return {
                'success': False,
                'error': str(e)
            }
```"
312949,SolutionsCloud/apidoc,SolutionsCloud_apidoc/apidoc/factory/source/element.py,apidoc.factory.source.element.Element,"from apidoc.lib.util.cast import to_boolean
import collections
from apidoc.object.source_raw import Sampleable, Displayable

class Element:
    """""" Populate Helper Factory
    """"""

    def set_common_datas(self, element, name, datas):
        """"""Populated common data for an element from dictionnary datas
        """"""
        element.name = str(name)
        if 'description' in datas:
            element.description = str(datas['description']).strip()
        if isinstance(element, Sampleable) and element.sample is None and ('sample' in datas):
            element.sample = str(datas['sample']).strip()
        if isinstance(element, Displayable):
            if 'display' in datas:
                element.display = to_boolean(datas['display'])
            if 'label' in datas:
                element.label = datas['label']
            else:
                element.label = element.name

    def create_dictionary_of_element_from_dictionary(self, property_name, datas):
        """"""Populate a dictionary of elements
        """"""
        response = {}
        if property_name in datas and datas[property_name] is not None and isinstance(datas[property_name], collections.Iterable):
            for key, value in datas[property_name].items():
                response[key] = self.create_from_name_and_dictionary(key, value)
        return response

    def create_list_of_element_from_dictionary(self, property_name, datas):
        """"""Populate a list of elements
        """"""
        response = []
        if property_name in datas and datas[property_name] is not None and isinstance(datas[property_name], list):
            for value in datas[property_name]:
                response.append(self.create_from_dictionary(value))
        return response

    def get_enum(self, property, enum, datas):
        """"""Factory enum type
        """"""
        str_property = str(datas[property]).lower()
        if str_property not in enum:
            raise ValueError('Unknow enum ""%s"" for ""%s"".' % (str_property, property))
        return enum(str_property)","
class Element:
    
    def set_common_datas(self, element, name, datas):
        
        pass
    def create_dictionary_of_element_from_dictionary(self, property_name, datas):
        
        pass

    def create_list_of_element_from_dictionary(self, property_name, datas):
        
        pass

    def get_enum(self, property, enum, datas):
        
        pass",snippet_244,5,"```python
class Element:
    
    def set_common_datas(self, element, name, datas):
        element.name = name
        element.id = datas.get('id')
        element.description = datas.get('description')

    def create_dictionary_of_element_from_dictionary(self, property_name, datas):
        dictionary = {}
        for key, value in datas.get(property_name, {}).items():
            element = Element()
            self.set_common_datas(element, key, value)
            dictionary[key] = element
        return dictionary

    def create_list_of_element_from_dictionary(self, property_name, datas):
        elements = []
        for data in datas.get(property_name, []):
            element = Element()
            self.set_common_datas(element, data.get('name'), data)
            elements.append(element)
        return elements

    def get_enum(self, property, enum, datas):
        value = datas.get(property)
        if value is not None:
            return enum(value)
        return None
```"
313013,SolutionsCloud/apidoc,SolutionsCloud_apidoc/apidoc/object/source_raw.py,apidoc.object.source_raw.Sampleable,"class Sampleable:
    """"""Element who can provide samples
    """"""

    def __init__(self):
        """"""Class instantiation
        """"""
        super().__init__()
        self.sample = None

    def get_sample(self):
        """"""Return the a sample for the element
        """"""
        if self.sample is None:
            return self.get_default_sample()
        return self.sample

    def get_default_sample(self):
        """"""Return default value for the element
        """"""
        return 'my_%s' % self.name","class Sampleable:
    
    def __init__(self):
        
        pass
    def get_sample(self):
        
        pass
    def get_default_sample(self):
        
        pass",snippet_245,4,"```python
import random

class Sampleable:
    
    def __init__(self, data=None):
        """"""
        Initialize the Sampleable class.

        Args:
        data (list): A list of data to sample from. Defaults to None.
        """"""
        self.data = data if data is not None else []

    def get_sample(self, size=1, replacement=False):
        """"""
        Get a random sample from the data.

        Args:
        size (int): The size of the sample. Defaults to 1.
        replacement (bool): Whether to sample with replacement. Defaults to False.

        Returns:
        list: A list of sampled data.
        """"""
        if not self.data:
            return []
        return random.choices(self.data, k=size) if replacement else random.sample(self.data, min(size, len(self.data)))

    def get_default_sample(self):
        """"""
        Get a default sample from the data.

        Returns:
        The first element of the data if it exists, otherwise None.
        """"""
        return self.data[0] if self.data else None


# Example usage:
if __name__ == ""__main__"":
    sampleable = Sampleable([1, 2, 3, 4, 5])
    print(sampleable.get_sample(3))  # Sample without replacement
    print(sampleable.get_sample(3, replacement=True))  # Sample with replacement
    print(sampleable.get_default_sample())  # Get the default sample
```"
313027,SolutionsCloud/apidoc,SolutionsCloud_apidoc/apidoc/service/config.py,apidoc.service.config.Config,"import os
from apidoc.object.config import Config as ConfigObject

class Config:
    """"""Provide tool to managed config
    """"""

    def validate(self, config):
        """"""Validate that the source file is ok
        """"""
        if not isinstance(config, ConfigObject):
            raise Exception('Config object expected')
        if config['output']['componants'] not in ('local', 'remote', 'embedded', 'without'):
            raise ValueError('Unknown componant ""%s"".' % config['output']['componants'])
        if config['output']['layout'] not in ('default', 'content-only'):
            raise ValueError('Unknown layout ""%s"".' % config['output']['layout'])
        if config['input']['locations'] is not None:
            unknown_locations = [x for x in config['input']['locations'] if not os.path.exists(x)]
            if len(unknown_locations) > 0:
                raise ValueError('Location%s ""%s"" does not exists' % ('s' if len(unknown_locations) > 1 else '', '"" and ""'.join(unknown_locations)))
            config['input']['locations'] = [os.path.realpath(x) for x in config['input']['locations']]
        if config['input']['arguments'] is not None:
            if not isinstance(config['input']['arguments'], dict):
                raise ValueError('Sources arguments ""%s"" are not a dict' % config['input']['arguments'])

    def get_template_from_config(self, config):
        """"""Retrieve a template path from the config object
        """"""
        if config['output']['template'] == 'default':
            return os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'template', 'default.html')
        else:
            return os.path.abspath(config['output']['template'])","
class Config:
    
    def validate(self, config):
        
        pass
    def get_template_from_config(self, config):
        
        pass",snippet_246,3,"```python
import json
import jsonschema

class Config:
    
    def validate(self, config):
        """"""
        Validate the given configuration against a predefined schema.

        Args:
            config (dict): The configuration to be validated.

        Returns:
            bool: True if the configuration is valid, False otherwise.
        """"""
        schema = {
            ""type"": ""object"",
            ""properties"": {
                ""template_name"": {""type"": ""string""},
                ""params"": {""type"": ""object""}
            },
            ""required"": [""template_name"", ""params""]
        }
        
        try:
            jsonschema.validate(instance=config, schema=schema)
            return True
        except jsonschema.exceptions.ValidationError:
            return False

    def get_template_from_config(self, config):
        """"""
        Extract the template name from the given configuration.

        Args:
            config (dict): The configuration containing the template name.

        Returns:
            str: The name of the template.

        Raises:
            ValueError: If the configuration is invalid.
        """"""
        if not self.validate(config):
            raise ValueError(""Invalid configuration"")

        return config[""template_name""]

# Example usage:
if __name__ == ""__main__"":
    config = Config()
    valid_config = {
        ""template_name"": ""example_template"",
        ""params"": {
            ""param1"": ""value1"",
            ""param2"": ""value2""
        }
    }
    invalid_config = {
        ""template_name"": ""example_template""
    }

    print(config.validate(valid_config))  # Output: True
    print(config.validate(invalid_config))  # Output: False
    print(config.get_template_from_config(valid_config))  # Output: example_template
    try:
        print(config.get_template_from_config(invalid_config))
    except ValueError as e:
        print(e)  # Output: Invalid configuration
```"
313029,SolutionsCloud/apidoc,SolutionsCloud_apidoc/apidoc/service/merger.py,apidoc.service.merger.Merger,"from apidoc.lib.util.cast import to_boolean

class Merger:
    """"""Provide tool to merge elements
    """"""

    def merge_extends(self, target, extends, inherit_key='inherit', inherit=False):
        """"""Merge extended dicts
        """"""
        if isinstance(target, dict):
            if inherit and inherit_key in target and (not to_boolean(target[inherit_key])):
                return
            if not isinstance(extends, dict):
                raise ValueError('Unable to merge: Dictionnary expected')
            for key in extends:
                if key not in target:
                    target[str(key)] = extends[key]
                else:
                    self.merge_extends(target[key], extends[key], inherit_key, True)
        elif isinstance(target, list):
            if not isinstance(extends, list):
                raise ValueError('Unable to merge: List expected')
            target += extends

    def merge_sources(self, datas):
        """"""Merge sources files
        """"""
        datas = [data for data in datas if data is not None]
        if len(datas) == 0:
            raise ValueError('Data missing')
        if len(datas) == 1:
            return datas[0]
        if isinstance(datas[0], list):
            if len([x for x in datas if not isinstance(x, list)]) > 0:
                raise TypeError('Unable to merge: List expected')
            base = []
            for x in datas:
                base = base + x
            return base
        if isinstance(datas[0], dict):
            if len([x for x in datas if not isinstance(x, dict)]) > 0:
                raise TypeError('Unable to merge: Dictionnary expected')
            result = {}
            for element in datas:
                for key in element:
                    if key in result:
                        result[key] = self.merge_sources([result[key], element[key]])
                    else:
                        result[key] = element[key]
            return result
        if len([x for x in datas if isinstance(x, (dict, list))]) > 0:
            raise TypeError('Unable to merge: List not expected')
        raise ValueError('Unable to merge: Conflict')

    def merge_configs(self, config, datas):
        """"""Merge configs files
        """"""
        if not isinstance(config, dict) or len([x for x in datas if not isinstance(x, dict)]) > 0:
            raise TypeError('Unable to merge: Dictionnary expected')
        for key, value in config.items():
            others = [x[key] for x in datas if key in x]
            if len(others) > 0:
                if isinstance(value, dict):
                    config[key] = self.merge_configs(value, others)
                else:
                    config[key] = others[-1]
        return config","
class Merger:
    
    def merge_extends(self, target, extends, inherit_key='inherit', inherit=False):
        
        pass
    def merge_sources(self, datas):
        
        pass

    def merge_configs(self, config, datas):
        
        pass",snippet_247,4,"```python
class Merger:
    
    def merge_extends(self, target, extends, inherit_key='inherit', inherit=False):
        """"""Recursively merge target dictionary with its extends.""""""
        if isinstance(target, dict) and isinstance(extends, dict):
            for key, value in extends.items():
                if key == inherit_key:
                    inherit = value
                elif key not in target:
                    target[key] = value
                else:
                    target[key] = self.merge_extends(target[key], value, inherit_key, inherit)
        elif isinstance(target, list) and isinstance(extends, list):
            if inherit:
                target.extend(extends)
            else:
                target = extends
        else:
            target = extends
        return target

    def merge_sources(self, datas):
        """"""Merge multiple data sources into one.""""""
        result = {}
        for data in datas:
            result = self.merge_extends(result, data)
        return result

    def merge_configs(self, config, datas):
        """"""Merge config with data sources.""""""
        result = self.merge_sources(datas)
        return self.merge_extends(result, config)
```"
313030,SolutionsCloud/apidoc,SolutionsCloud_apidoc/apidoc/service/parser.py,apidoc.service.parser.Parser,"import os
import yaml
import json

class Parser:
    """"""Provide tools to parse files
    """"""

    def load_from_file(self, file_path, format=None):
        """"""Return dict from a file config
        """"""
        if format is None:
            base_name, file_extension = os.path.splitext(file_path)
            if file_extension in ('.yaml', '.yml'):
                format = 'yaml'
            elif file_extension in '.json':
                format = 'json'
            else:
                raise ValueError('Config file ""%s"" undetermined' % file_extension)
        if format == 'yaml':
            return yaml.load(open(file_path), Loader=yaml.CSafeLoader if yaml.__with_libyaml__ else yaml.SafeLoader)
        elif format == 'json':
            return json.load(open(file_path))
        else:
            raise ValueError('Format ""%s"" unknwon' % format)

    def load_all_from_directory(self, directory_path):
        """"""Return a list of dict from a directory containing files
        """"""
        datas = []
        for root, folders, files in os.walk(directory_path):
            for f in files:
                datas.append(self.load_from_file(os.path.join(root, f)))
        return datas","
class Parser:
    
    def load_from_file(self, file_path, format=None):
        
        pass
    def load_all_from_directory(self, directory_path):
        
        pass",snippet_248,3,"```python
import os
import json
import yaml

class Parser:
    
    def load_from_file(self, file_path, format=None):
        """"""
        Load data from a file.

        Args:
            file_path (str): The path to the file to be loaded.
            format (str, optional): The format of the file. Defaults to None.

        Returns:
            The loaded data.

        Raises:
            ValueError: If the file format is not supported or not specified.
        """"""
        if format is None:
            _, file_extension = os.path.splitext(file_path)
            format = file_extension[1:]

        if format == 'json':
            with open(file_path, 'r') as file:
                return json.load(file)
        elif format == 'yaml' or format == 'yml':
            with open(file_path, 'r') as file:
                return yaml.safe_load(file)
        else:
            raise ValueError(f""Unsupported file format: {format}"")

    def load_all_from_directory(self, directory_path):
        """"""
        Load data from all files in a directory.

        Args:
            directory_path (str): The path to the directory.

        Returns:
            A dictionary where the keys are the file names and the values are the loaded data.

        Raises:
            FileNotFoundError: If the directory does not exist.
        """"""
        if not os.path.exists(directory_path):
            raise FileNotFoundError(f""The directory '{directory_path}' does not exist."")

        data = {}
        for filename in os.listdir(directory_path):
            file_path = os.path.join(directory_path, filename)
            if os.path.isfile(file_path):
                try:
                    data[filename] = self.load_from_file(file_path)
                except ValueError as e:
                    print(f""Skipping {filename}: {e}"")
        return data
```"
313032,SolutionsCloud/apidoc,SolutionsCloud_apidoc/apidoc/service/template.py,apidoc.service.template.Template,"import sys
import logging
import shutil
import os

class Template:
    """"""Provide tool to managed templates
    """"""

    def __init__(self):
        """"""Class instantiation
        """"""
        self.input = 'default.html'
        self.output = 'stdout'
        self.env = None

    def render(self, sources, config, out=sys.stdout):
        """"""Render the documentation as defined in config Object
        """"""
        logger = logging.getLogger()
        template = self.env.get_template(self.input)
        output = template.render(sources=sources, layout=config['output']['layout'], config=config['output'])
        if self.output == 'stdout':
            out.write(output)
        else:
            dir = os.path.dirname(self.output)
            if dir and (not os.path.exists(dir)):
                try:
                    os.makedirs(dir)
                except IOError as ioerror:
                    logger.error('Error on creating dir ""{}"": {}'.format(dir, str(ioerror)))
                    return
            if config['output']['template'] == 'default':
                if config['output']['componants'] == 'local':
                    for template_dir in self.env.loader.searchpath:
                        files = (os.path.join(template_dir, 'resource', 'js', 'combined.js'), os.path.join(template_dir, 'resource', 'css', 'combined.css'), os.path.join(template_dir, 'resource', 'font', 'apidoc.eot'), os.path.join(template_dir, 'resource', 'font', 'apidoc.woff'), os.path.join(template_dir, 'resource', 'font', 'apidoc.ttf'), os.path.join(template_dir, 'resource', 'font', 'source-code-pro.eot'), os.path.join(template_dir, 'resource', 'font', 'source-code-pro.woff'), os.path.join(template_dir, 'resource', 'font', 'source-code-pro.ttf'))
                        for file in files:
                            filename = os.path.basename(file)
                            dirname = os.path.basename(os.path.dirname(file))
                            if not os.path.exists(os.path.join(dir, dirname)):
                                os.makedirs(os.path.join(dir, dirname))
                            if os.path.exists(file):
                                shutil.copyfile(file, os.path.join(dir, dirname, filename))
                            else:
                                logger.warn('Missing resource file ""%s"". If you run apidoc in virtualenv, run ""%s""' % (filename, 'python setup.py resources'))
                if config['output']['componants'] == 'remote':
                    for template_dir in self.env.loader.searchpath:
                        files = (os.path.join(template_dir, 'resource', 'js', 'combined.js'), os.path.join(template_dir, 'resource', 'css', 'combined-embedded.css'), os.path.join(template_dir, 'resource', 'font', 'apidoc.eot'), os.path.join(template_dir, 'resource', 'font', 'apidoc.woff'), os.path.join(template_dir, 'resource', 'font', 'apidoc.ttf'), os.path.join(template_dir, 'resource', 'font', 'source-code-pro.eot'), os.path.join(template_dir, 'resource', 'font', 'source-code-pro.woff'), os.path.join(template_dir, 'resource', 'font', 'source-code-pro.ttf'))
                        for file in files:
                            filename = os.path.basename(file)
                            dirname = os.path.basename(os.path.dirname(file))
                            if not os.path.exists(os.path.join(dir, dirname)):
                                os.makedirs(os.path.join(dir, dirname))
                            if os.path.exists(file):
                                shutil.copyfile(file, os.path.join(dir, dirname, filename))
                            else:
                                logger.warn('Missing resource file ""%s"". If you run apidoc in virtualenv, run ""%s""' % (filename, 'python setup.py resources'))
            open(self.output, 'w').write(output)","
class Template:
    
    def __init__(self):
        
        pass
    def render(self, sources, config, out=sys.stdout):
        
        pass",snippet_249,3,"```python
import sys
from jinja2 import Template as JinjaTemplate

class Template:
    
    def __init__(self, template_str):
        """"""
        Initialize the Template class.

        Args:
        template_str (str): A string representing the template.
        """"""
        self.template = JinjaTemplate(template_str)

    def render(self, sources, config, out=sys.stdout):
        """"""
        Render the template with the given sources and config.

        Args:
        sources (dict): A dictionary containing the sources to be used in the template.
        config (dict): A dictionary containing the configuration to be used in the template.
        out (file-like object): The output stream where the rendered template will be written. Defaults to sys.stdout.
        """"""
        # Combine sources and config into a single dictionary
        data = {**sources, **config}
        
        # Render the template with the combined data
        rendered_template = self.template.render(data)
        
        # Write the rendered template to the output stream
        out.write(rendered_template)

# Example usage:
if __name__ == ""__main__"":
    template_str = ""Hello, {{ name }}! Your age is {{ age }}.""
    template = Template(template_str)
    
    sources = {""name"": ""John""}
    config = {""age"": 30}
    
    template.render(sources, config)
```"
313488,adafruit/Adafruit_CircuitPython_framebuf,adafruit_Adafruit_CircuitPython_framebuf/adafruit_framebuf.py,adafruit_framebuf.MHMSBFormat,"class MHMSBFormat:
    """"""MHMSBFormat""""""

    @staticmethod
    def set_pixel(framebuf, x, y, color):
        """"""Set a given pixel to a color.""""""
        index = (y * framebuf.stride + x) // 8
        offset = 7 - x & 7
        framebuf.buf[index] = framebuf.buf[index] & ~(1 << offset) | (color != 0) << offset

    @staticmethod
    def get_pixel(framebuf, x, y):
        """"""Get the color of a given pixel""""""
        index = (y * framebuf.stride + x) // 8
        offset = 7 - x & 7
        return framebuf.buf[index] >> offset & 1

    @staticmethod
    def fill(framebuf, color):
        """"""completely fill/clear the buffer with a color""""""
        if color:
            fill = 255
        else:
            fill = 0
        for i in range(len(framebuf.buf)):
            framebuf.buf[i] = fill

    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        """"""Draw a rectangle at the given location, size and color. The ``fill_rect`` method draws
        both the outline and interior.""""""
        for _x in range(x, x + width):
            offset = 7 - _x & 7
            for _y in range(y, y + height):
                index = (_y * framebuf.stride + _x) // 8
                framebuf.buf[index] = framebuf.buf[index] & ~(1 << offset) | (color != 0) << offset","class MHMSBFormat:
    
    @staticmethod
    def set_pixel(framebuf, x, y, color):
        
        pass
    @staticmethod
    def get_pixel(framebuf, x, y):
        
        pass
    @staticmethod
    def fill(framebuf, color):
        
        pass
    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        
        pass",snippet_250,5,"```python
class MHMSBFormat:
    
    @staticmethod
    def set_pixel(framebuf, x, y, color):
        index = (y >> 3) * framebuf.stride + x
        byte = framebuf.buf[index]
        mask = 1 << (y & 0x07)
        if color:
            byte |= mask
        else:
            byte &= ~mask
        framebuf.buf[index] = byte

    @staticmethod
    def get_pixel(framebuf, x, y):
        index = (y >> 3) * framebuf.stride + x
        byte = framebuf.buf[index]
        mask = 1 << (y & 0x07)
        return 1 if byte & mask else 0

    @staticmethod
    def fill(framebuf, color):
        fill_value = b'\xff' if color else b'\x00'
        for i in range(len(framebuf.buf)):
            framebuf.buf[i] = ord(fill_value)

    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        for j in range(y, y + height):
            for i in range(x, x + width):
                MHMSBFormat.set_pixel(framebuf, i, j, color)
```"
313489,adafruit/Adafruit_CircuitPython_framebuf,adafruit_Adafruit_CircuitPython_framebuf/adafruit_framebuf.py,adafruit_framebuf.MVLSBFormat,"class MVLSBFormat:
    """"""MVLSBFormat""""""

    @staticmethod
    def set_pixel(framebuf, x, y, color):
        """"""Set a given pixel to a color.""""""
        index = (y >> 3) * framebuf.stride + x
        offset = y & 7
        framebuf.buf[index] = framebuf.buf[index] & ~(1 << offset) | (color != 0) << offset

    @staticmethod
    def get_pixel(framebuf, x, y):
        """"""Get the color of a given pixel""""""
        index = (y >> 3) * framebuf.stride + x
        offset = y & 7
        return framebuf.buf[index] >> offset & 1

    @staticmethod
    def fill(framebuf, color):
        """"""completely fill/clear the buffer with a color""""""
        if color:
            fill = 255
        else:
            fill = 0
        for i in range(len(framebuf.buf)):
            framebuf.buf[i] = fill

    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        """"""Draw a rectangle at the given location, size and color. The ``fill_rect`` method draws
        both the outline and interior.""""""
        while height > 0:
            index = (y >> 3) * framebuf.stride + x
            offset = y & 7
            for w_w in range(width):
                framebuf.buf[index + w_w] = framebuf.buf[index + w_w] & ~(1 << offset) | (color != 0) << offset
            y += 1
            height -= 1","class MVLSBFormat:
    
    @staticmethod
    def set_pixel(framebuf, x, y, color):
        
        pass
    @staticmethod
    def get_pixel(framebuf, x, y):
        
        pass
    @staticmethod
    def fill(framebuf, color):
        
        pass
    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        
        pass",snippet_251,5,"```python
class MVLSBFormat:
    
    @staticmethod
    def set_pixel(framebuf, x, y, color):
        """"""Set a single pixel to the given color.""""""
        index = (y >> 3) * framebuf.stride + x
        byte = framebuf.buf[index]
        mask = 1 << (y & 0x07)
        if color:
            byte |= mask
        else:
            byte &= ~mask
        framebuf.buf[index] = byte

    @staticmethod
    def get_pixel(framebuf, x, y):
        """"""Get the color value of a single pixel.""""""
        index = (y >> 3) * framebuf.stride + x
        byte = framebuf.buf[index]
        mask = 1 << (y & 0x07)
        return 1 if byte & mask else 0

    @staticmethod
    def fill(framebuf, color):
        """"""Fill the entire framebuffer with the given color.""""""
        fill_value = b'\xff' if color else b'\x00'
        for i in range(len(framebuf.buf)):
            framebuf.buf[i] = ord(fill_value)

    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        """"""Fill a rectangle with the given color.""""""
        for j in range(y, y + height):
            for i in range(x, x + width):
                MVLSBFormat.set_pixel(framebuf, i, j, color)
```"
313491,adafruit/Adafruit_CircuitPython_framebuf,adafruit_Adafruit_CircuitPython_framebuf/adafruit_framebuf.py,adafruit_framebuf.RGB888Format,"class RGB888Format:
    """"""RGB888Format""""""

    @staticmethod
    def set_pixel(framebuf, x, y, color):
        """"""Set a given pixel to a color.""""""
        index = (y * framebuf.stride + x) * 3
        if isinstance(color, tuple):
            framebuf.buf[index:index + 3] = bytes(color)
        else:
            framebuf.buf[index:index + 3] = bytes((color >> 16 & 255, color >> 8 & 255, color & 255))

    @staticmethod
    def get_pixel(framebuf, x, y):
        """"""Get the color of a given pixel""""""
        index = (y * framebuf.stride + x) * 3
        return framebuf.buf[index] << 16 | framebuf.buf[index + 1] << 8 | framebuf.buf[index + 2]

    @staticmethod
    def fill(framebuf, color):
        """"""completely fill/clear the buffer with a color""""""
        fill = (color >> 16 & 255, color >> 8 & 255, color & 255)
        for i in range(0, len(framebuf.buf), 3):
            framebuf.buf[i:i + 3] = bytes(fill)

    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        """"""Draw a rectangle at the given location, size and color. The ``fill_rect`` method draws
        both the outline and interior.""""""
        fill = (color >> 16 & 255, color >> 8 & 255, color & 255)
        for _x in range(x, x + width):
            for _y in range(y, y + height):
                index = (_y * framebuf.stride + _x) * 3
                framebuf.buf[index:index + 3] = bytes(fill)","class RGB888Format:
    
    @staticmethod
    def set_pixel(framebuf, x, y, color):
        
        pass
    @staticmethod
    def get_pixel(framebuf, x, y):
        
        pass
    @staticmethod
    def fill(framebuf, color):
        
        pass
    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        
        pass",snippet_252,5,"```python
class RGB888Format:
    
    @staticmethod
    def set_pixel(framebuf, x, y, color):
        index = (y * framebuf.stride + x) * 3
        framebuf.buf[index] = color[2]
        framebuf.buf[index + 1] = color[1]
        framebuf.buf[index + 2] = color[0]

    @staticmethod
    def get_pixel(framebuf, x, y):
        index = (y * framebuf.stride + x) * 3
        return (framebuf.buf[index + 2], framebuf.buf[index + 1], framebuf.buf[index])

    @staticmethod
    def fill(framebuf, color):
        for y in range(framebuf.height):
            for x in range(framebuf.width):
                RGB888Format.set_pixel(framebuf, x, y, color)

    @staticmethod
    def fill_rect(framebuf, x, y, width, height, color):
        for j in range(y, min(y + height, framebuf.height)):
            for i in range(x, min(x + width, framebuf.width)):
                RGB888Format.set_pixel(framebuf, i, j, color)
```"
319441,pysal/spglm,spglm/varfuncs.py,spglm.varfuncs.VarianceFunction,"import numpy as np

class VarianceFunction:
    """"""
    Relates the variance of a random variable to its mean. Defaults to 1.

    Methods
    -------
    call
        Returns an array of ones that is the same shape as `mu`

    Notes
    -----
    After a variance function is initialized, its call method can be used.

    Alias for VarianceFunction:
    constant = VarianceFunction()

    See also
    --------
    statsmodels.family.family
    """"""

    def __call__(self, mu):
        """"""
        Default variance function

        Parameters
        -----------
        mu : array-like
            mean parameters

        Returns
        -------
        v : array
            ones(mu.shape)
        """"""
        mu = np.asarray(mu)
        return np.ones(mu.shape, np.float64)

    def deriv(self, mu):
        """"""
        Derivative of the variance function v'(mu)
        """"""
        from statsmodels.tools.numdiff import approx_fprime_cs
        return np.diag(approx_fprime_cs(mu, self))","
class VarianceFunction:
    '''
    Relates the variance of a random variable to its mean. Defaults to 1.
    Methods
    -------
    call
        Returns an array of ones that is the same shape as `mu`
    Notes
    -----
    After a variance function is initialized, its call method can be used.
    Alias for VarianceFunction:
    constant = VarianceFunction()
    See also
    --------
    statsmodels.family.family
    '''
    def __call__(self, mu):
        
        pass

    def deriv(self, mu):
        
        pass",snippet_256,3,"```python
import numpy as np

class VarianceFunction:
    '''
    Relates the variance of a random variable to its mean. Defaults to 1.
    Methods
    -------
    call
        Returns an array of ones that is the same shape as `mu`
    Notes
    -----
    After a variance function is initialized, its call method can be used.
    Alias for VarianceFunction:
    constant = VarianceFunction()
    See also
    --------
    statsmodels.family.family
    '''
    def __call__(self, mu):
        return np.ones_like(mu)

    def deriv(self, mu):
        return np.zeros_like(mu)

# Example usage:
constant = VarianceFunction()
mu = np.array([1, 2, 3])
print(constant(mu))  # Output: [1 1 1]
print(constant.deriv(mu))  # Output: [0 0 0]
```"
320689,optimizely/python-sdk,optimizely_python-sdk/optimizely/user_profile.py,optimizely.user_profile.UserProfileService,"from typing import Any, Optional

class UserProfileService:
    """""" Class encapsulating user profile service functionality.
  Override with your own implementation for storing and retrieving the user profile. """"""

    def lookup(self, user_id: str) -> dict[str, Any]:
        """""" Fetch the user profile dict corresponding to the user ID.

    Args:
      user_id: ID for user whose profile needs to be retrieved.

    Returns:
      Dict representing the user's profile.
    """"""
        return UserProfile(user_id).__dict__

    def save(self, user_profile: dict[str, Any]) -> None:
        """""" Save the user profile dict sent to this method.

    Args:
      user_profile: Dict representing the user's profile.
    """"""
        pass","
class UserProfileService:
    
    def lookup(self, user_id: str) -> dict[str, Any]:
        
        pass
    def save(self, user_profile: dict[str, Any]) -> None:
        
        pass",snippet_257,3,"```python
from typing import Any

class UserProfileService:
    
    def __init__(self, storage: dict[str, dict[str, Any]]) -> None:
        self.storage = storage

    def lookup(self, user_id: str) -> dict[str, Any]:
        return self.storage.get(user_id, {})

    def save(self, user_profile: dict[str, Any]) -> None:
        user_id = user_profile.get('user_id')
        if user_id is None:
            raise ValueError(""User profile must contain 'user_id'"")
        self.storage[user_id] = user_profile

# Example usage:
if __name__ == ""__main__"":
    storage = {}
    service = UserProfileService(storage)

    user_profile = {
        'user_id': '123',
        'name': 'John Doe',
        'email': 'john@example.com'
    }

    service.save(user_profile)
    print(service.lookup('123'))  # Output: {'user_id': '123', 'name': 'John Doe', 'email': 'john@example.com'}
    print(service.lookup('456'))  # Output: {}
```"
322746,wilson-eft/wilson,wilson-eft_wilson/wilson/classes.py,wilson.classes.RGsolution,"import numpy as np
from math import log, e

class RGsolution:
    """"""Class representing a continuous (interpolated) solution to the
    SMEFT RGEs to be used for plotting.""""""

    def __init__(self, fun, scale_min, scale_max):
        """"""Initialize.

        Parameters:

        - fun: function of the scale that is expected to return a
        dictionary with the RGE solution and to accept vectorized input.
        - scale_min, scale_max: lower and upper boundaries of the scale
        """"""
        self.fun = fun
        self.scale_min = scale_min
        self.scale_max = scale_max

    def plotdata(self, key, part='re', scale='log', steps=50):
        """"""Return a tuple of arrays x, y that can be fed to plt.plot,
        where x is the scale in GeV and y is the parameter of interest.

        Parameters:

        - key: dicionary key of the parameter to be plotted (e.g. a WCxf
          coefficient name or a SM parameter like 'g')
        - part: plot the real part 're' (default) or the imaginary part 'im'
        - scale: 'log'; make the x steps logarithmically distributed; for
          'linear', linearly distributed
        - steps: steps in x to take (default: 50)
        """"""
        if scale == 'log':
            x = np.logspace(log(self.scale_min), log(self.scale_max), steps, base=e)
        elif scale == 'linear':
            x = np.linspace(self.scale_min, self.scale_max, steps)
        y = self.fun(x)
        y = np.array([d[key] for d in y])
        if part == 're':
            return (x, y.real)
        elif part == 'im':
            return (x, y.imag)

    def plot(self, key, part='re', scale='log', steps=50, legend=True, plotargs={}):
        """"""Plot the RG evolution of parameter `key`.

        Parameters:

        - part, scale, steps: see `plotdata`
        - legend: boolean, show the legend (default: True)
        - plotargs: dictionary of arguments to be passed to plt.plot
        """"""
        try:
            import matplotlib.pyplot as plt
        except ImportError:
            raise ImportError('Please install matplotlib if you want to use the plot method')
        pdat = self.plotdata(key, part=part, scale=scale, steps=steps)
        plt.plot(*pdat, label=key, **plotargs)
        if scale == 'log':
            plt.xscale('log')
        if legend:
            plt.legend()","
class RGsolution:
    
    def __init__(self, fun, scale_min, scale_max):
        
        pass
    def plotdata(self, key, part='re', scale='log', steps=50):
        
        pass

    def plotdata(self, key, part='re', scale='log', steps=50):
        
        pass",snippet_258,4,"```python
import numpy as np
import matplotlib.pyplot as plt

class RGsolution:
    
    def __init__(self, fun, scale_min, scale_max):
        self.fun = fun
        self.scale_min = scale_min
        self.scale_max = scale_max

    def plotdata(self, key, part='re', scale='log', steps=50):
        scales = np.logspace(np.log10(self.scale_min), np.log10(self.scale_max), steps) if scale == 'log' else np.linspace(self.scale_min, self.scale_max, steps)
        data = np.array([self.fun(scale) for scale in scales])
        
        if part == 're':
            plt.plot(scales, np.real(data[key]))
        elif part == 'im':
            plt.plot(scales, np.imag(data[key]))
        elif part == 'abs':
            plt.plot(scales, np.abs(data[key]))
        elif part == 'all':
            plt.plot(scales, np.real(data[key]), label='Re')
            plt.plot(scales, np.imag(data[key]), label='Im')
            plt.legend()
        else:
            raise ValueError(""Invalid part. Choose from 're', 'im', 'abs', 'all'."")

        plt.xscale('log' if scale == 'log' else 'linear')
        plt.xlabel('Scale')
        plt.ylabel('Value')
        plt.title(f'{key} vs Scale')
        plt.show()
```"
322803,wilson-eft/wilson,wilson-eft_wilson/wilson/wcxf/classes.py,wilson.wcxf.classes.WCxf,"import yaml

class WCxf:
    """"""Base class for WCxf files (not meant to be used directly).""""""

    @classmethod
    def load(cls, stream, **kwargs):
        """"""Load the object data from a JSON or YAML file.""""""
        wcxf = _load_yaml_json(stream, **kwargs)
        return cls(**wcxf)

    def dump(self, stream=None, fmt='json', **kwargs):
        """"""Dump the object data to a JSON or YAML file.

        Optional arguments:

        - `stream`: if None (default), return a string. Otherwise,
          should be a writable file-like object
        - `fmt`: format, should be 'json' (default) or 'yaml'

        Additional keyword arguments will be passed to the `json.dump(s)`
        or `yaml.dump` methods.
        """"""
        d = {k: v for k, v in self.__dict__.items() if k[0] != '_'}
        if fmt.lower() == 'json':
            indent = kwargs.pop('indent', 2)
            return _dump_json(d, stream=stream, indent=indent, **kwargs)
        elif fmt.lower() == 'yaml':
            default_flow_style = kwargs.pop('default_flow_style', False)
            return yaml.dump(d, stream, default_flow_style=default_flow_style, **kwargs)
        else:
            raise ValueError(f""Format {fmt} unknown: use 'json' or 'yaml'."")","
class WCxf:
    
    @classmethod
    def load(cls, stream, **kwargs):
        
        pass
    def dump(self, stream=None, fmt='json', **kwargs):
        
        pass",snippet_259,3,"```python
import json
import yaml

class WCxf:
    def __init__(self, data):
        self.data = data

    @classmethod
    def load(cls, stream, fmt='json', **kwargs):
        if fmt == 'json':
            data = json.load(stream)
        elif fmt == 'yaml' or fmt == 'yml':
            data = yaml.safe_load(stream)
        else:
            raise ValueError(""Unsupported format. Supported formats are 'json', 'yaml', 'yml'."")
        return cls(data)

    def dump(self, stream=None, fmt='json', **kwargs):
        if fmt == 'json':
            data = json.dumps(self.data, **kwargs)
        elif fmt == 'yaml' or fmt == 'yml':
            data = yaml.dump(self.data, **kwargs)
        else:
            raise ValueError(""Unsupported format. Supported formats are 'json', 'yaml', 'yml'."")

        if stream is None:
            return data
        else:
            stream.write(data)
```"
322855,jhermann/rituals,jhermann_rituals/src/rituals/util/antglob.py,rituals.util.antglob.Pattern,"class Pattern:
    """"""A single pattern for either inclusion or exclusion.""""""

    def __init__(self, spec, inclusive):
        """"""Create regex-based pattern matcher from glob `spec`.""""""
        self.compiled = compile_glob(spec.rstrip('/'))
        self.inclusive = inclusive
        self.is_dir = spec.endswith('/')

    def __str__(self):
        """"""Return inclusiveness indicator and original glob pattern.""""""
        return ('+' if self.inclusive else '-') + self.compiled.pattern

    def matches(self, path):
        """"""Check this pattern against given `path`.""""""
        return bool(self.compiled.match(path))","class Pattern:
    
    def __init__(self, spec, inclusive):
        
        pass
    def __str__(self):
        
        pass
    def matches(self, path):
        
        pass",snippet_260,4,"```python
import fnmatch

class Pattern:
    
    def __init__(self, spec, inclusive):
        self.spec = spec
        self.inclusive = inclusive
        
    def __str__(self):
        return f""{'Include' if self.inclusive else 'Exclude'} pattern '{self.spec}'""
    
    def matches(self, path):
        return fnmatch.fnmatch(path, self.spec) == self.inclusive
```"
323184,SoftwareDefinedBuildings/XBOS,apps/Data_quality_analysis/Import_Data.py,Data_quality_analysis.Import_Data.Import_Data,"import pandas as pd
import glob
import numpy as np
import os

class Import_Data:
    """""" This class imports data from csv files. """"""

    def __init__(self):
        """""" Constructor: Store the imported data. """"""
        self.data = pd.DataFrame()

    def import_csv(self, file_name='*', folder_name='.', head_row=0, index_col=0, convert_col=True, concat_files=False):
        """""" Imports csv file(s) and stores the result in data.

        Note
        ----
        1. If folder exists out of current directory, folder_name should contain correct regex
        2. Assuming there's no file called ""\\*.csv""

        Parameters
        ----------
        file_name       : str
            CSV file to be imported. Defaults to '\\*', i.e. all csv files in the folder.
        folder_name     : str
            Folder where file resides. Defaults to '.', i.e. current directory.
        head_row        : int
            Skips all rows from 0 to head_row-1
        index_col       : int
            Skips all columns from 0 to index_col-1
        convert_col     : bool
            Convert columns to numeric type
        concat_files    : bool
            Appends data from files to result dataframe

        """"""
        if isinstance(file_name, str) and isinstance(folder_name, str):
            try:
                self.data = self._load_csv(file_name, folder_name, head_row, index_col, convert_col, concat_files)
            except Exception as e:
                raise e
        elif isinstance(file_name, list) and isinstance(folder_name, str):
            for i, file in enumerate(file_name):
                if isinstance(head_row, list):
                    _head_row = head_row[i]
                else:
                    _head_row = head_row
                if isinstance(index_col, list):
                    _index_col = index_col[i]
                else:
                    _index_col = index_col
                try:
                    data_tmp = self._load_csv(file, folder_name, _head_row, _index_col, convert_col, concat_files)
                    if concat_files:
                        self.data = self.data.append(data_tmp, ignore_index=False, verify_integrity=False)
                    else:
                        self.data = self.data.join(data_tmp, how='outer')
                except Exception as e:
                    raise e
        else:
            raise NotImplementedError(""Filename and Folder name can't both be of type list."")

    def _load_csv(self, file_name, folder_name, head_row, index_col, convert_col, concat_files):
        """""" Load single csv file.

        Parameters
        ----------
        file_name       : str
            CSV file to be imported. Defaults to '*' - all csv files in the folder.
        folder_name     : str
            Folder where file resides. Defaults to '.' - current directory.
        head_row        : int
            Skips all rows from 0 to head_row-1
        index_col       : int
            Skips all columns from 0 to index_col-1
        convert_col     : bool
            Convert columns to numeric type
        concat_files    : bool
            Appends data from files to result dataframe

        Returns
        -------
        pd.DataFrame()
            Dataframe containing csv data

        """"""
        if file_name == '*':
            if not os.path.isdir(folder_name):
                raise OSError('Folder does not exist.')
            else:
                file_name_list = sorted(glob.glob(folder_name + '*.csv'))
                if not file_name_list:
                    raise OSError('Either the folder does not contain any csv files or invalid folder provided.')
                else:
                    self.import_csv(file_name=file_name_list, head_row=head_row, index_col=index_col, convert_col=convert_col, concat_files=concat_files)
                    return self.data
        elif not os.path.isdir(folder_name):
            raise OSError('Folder does not exist.')
        else:
            path = os.path.join(folder_name, file_name)
            if head_row > 0:
                data = pd.read_csv(path, index_col=index_col, skiprows=[i for i in range(head_row - 1)])
            else:
                data = pd.read_csv(path, index_col=index_col)
            try:
                data.index = pd.to_datetime(data.index, format='%m/%d/%y %H:%M')
            except:
                data.index = pd.to_datetime(data.index, dayfirst=False, infer_datetime_format=True)
        if convert_col:
            for col in data.columns:
                if data[col].dtype != np.number:
                    data[col] = pd.to_numeric(data[col], errors='coerce')
        return data","
class Import_Data:
    
    def __init__(self):
        
        pass
    def import_csv(self, file_name='*', folder_name='.', head_row=0, index_col=0, convert_col=True, concat_files=False):
        
        pass

    def _load_csv(self, file_name, folder_name, head_row, index_col, convert_col, concat_files):
        
        pass",snippet_261,4,"```python
import pandas as pd
import glob
import os

class Import_Data:
    
    def __init__(self):
        self.data = None

    def import_csv(self, file_name='*', folder_name='.', head_row=0, index_col=0, convert_col=True, concat_files=False):
        self.data = self._load_csv(file_name, folder_name, head_row, index_col, convert_col, concat_files)
        return self.data

    def _load_csv(self, file_name, folder_name, head_row, index_col, convert_col, concat_files):
        file_path = os.path.join(folder_name, file_name)
        files = glob.glob(file_path)
        
        if not files:
            raise FileNotFoundError(f""No files found matching {file_path}"")
        
        dataframes = []
        for file in files:
            try:
                df = pd.read_csv(file, header=head_row, index_col=index_col)
                if convert_col:
                    df = df.apply(pd.to_numeric, errors='ignore')
                dataframes.append(df)
            except Exception as e:
                print(f""Error loading {file}: {str(e)}"")
        
        if concat_files:
            if dataframes:
                return pd.concat(dataframes, ignore_index=True)
            else:
                return None
        else:
            if len(dataframes) == 1:
                return dataframes[0]
            else:
                return dataframes
```"
323187,SoftwareDefinedBuildings/XBOS,apps/Data_quality_analysis/Plot_Data.py,Data_quality_analysis.Plot_Data.Plot_Data,"import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

class Plot_Data:
    """""" This class contains functions for displaying various plots.

    Attributes
    ----------
    count    : int
        Keeps track of the number of figures.

    """"""
    count = 1

    def __init__(self, figsize=(18, 5)):
        """""" Constructor.

        Parameters
        ----------
        figsize : tuple
            Size of figure.

        """"""
        self.figsize = figsize

    def correlation_plot(self, data):
        """""" Create heatmap of Pearson's correlation coefficient.

        Parameters
        ----------
        data    : pd.DataFrame()
            Data to display.

        Returns
        -------
        matplotlib.figure
            Heatmap.

        """"""
        fig = plt.figure(Plot_Data.count)
        corr = data.corr()
        ax = sns.heatmap(corr)
        Plot_Data.count += 1
        return fig

    def baseline_projection_plot(self, y_true, y_pred, baseline_period, projection_period, model_name, adj_r2, data, input_col, output_col, model, site):
        """""" Create baseline and projection plots.

        Parameters
        ----------
        y_true              : pd.Series()
            Actual y values.
        y_pred              : np.ndarray
            Predicted y values.
        baseline_period     : list(str)
            Baseline period.
        projection_period   : list(str)
            Projection periods.
        model_name          : str
            Optimal model's name.
        adj_r2              : float
            Adjusted R2 score of optimal model.
        data                : pd.Dataframe()
            Data containing real values.
        input_col           : list(str)
            Predictor column(s).
        output_col          : str
            Target column.
        model               : func
            Optimal model.

        Returns
        -------
        matplotlib.figure
            Baseline plot

        """"""
        fig = plt.figure(Plot_Data.count)
        if projection_period:
            nrows = len(baseline_period) + len(projection_period) / 2
        else:
            nrows = len(baseline_period) / 2
        base_df = pd.DataFrame()
        base_df['y_true'] = y_true
        base_df['y_pred'] = y_pred
        ax1 = fig.add_subplot(nrows, 1, 1)
        base_df.plot(ax=ax1, figsize=self.figsize, title='Baseline Period ({}-{}). \nBest Model: {}. \nBaseline Adj R2: {}. \nSite: {}.'.format(baseline_period[0], baseline_period[1], model_name, adj_r2, site))
        if projection_period:
            num_plot = 2
            for i in range(0, len(projection_period), 2):
                ax = fig.add_subplot(nrows, 1, num_plot)
                period = slice(projection_period[i], projection_period[i + 1])
                project_df = pd.DataFrame()
                try:
                    project_df['y_true'] = data.loc[period, output_col]
                    project_df['y_pred'] = model.predict(data.loc[period, input_col])
                    project_df['y_pred'][project_df['y_pred'] < 0] = 0
                    project_df.plot(ax=ax, figsize=self.figsize, title='Projection Period ({}-{})'.format(projection_period[i], projection_period[i + 1]))
                    num_plot += 1
                    fig.tight_layout()
                    Plot_Data.count += 1
                    return (fig, project_df['y_true'], project_df['y_pred'])
                except:
                    raise TypeError('If projecting into the future, please specify project_ind_col that has data available                                         in the future time period requested.')
        return (fig, None, None)","
class Plot_Data:
    
    def __init__(self, figsize=(18, 5)):
        
        pass
    def correlation_plot(self, data):
        
        pass

    def baseline_projection_plot(self, y_true, y_pred, baseline_period, projection_period, model_name, adj_r2, data, input_col, output_col, model, site):
        
        pass",snippet_262,4,"```python
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

class Plot_Data:
    
    def __init__(self, figsize=(18, 5)):
        self.figsize = figsize

    def correlation_plot(self, data):
        plt.figure(figsize=self.figsize)
        sns.heatmap(data.corr(), annot=True, cmap='coolwarm', square=True)
        plt.title('Correlation Matrix')
        plt.show()

    def baseline_projection_plot(self, y_true, y_pred, baseline_period, projection_period, model_name, adj_r2, data, input_col, output_col, model, site):
        plt.figure(figsize=self.figsize)
        plt.plot(y_true.index, y_true, label='Actual')
        plt.plot(y_pred.index, y_pred, label=f'{model_name} Prediction')
        plt.axvline(x=baseline_period[1], color='r', linestyle='--', label='Baseline Period End')
        plt.fill_between(baseline_period, y_true.min(), y_true.max(), alpha=0.2, label='Baseline Period')
        plt.fill_between(projection_period, y_true.min(), y_true.max(), alpha=0.2, label='Projection Period')
        plt.title(f'{site} {output_col} - {model_name} (Adj. R2: {adj_r2:.2f})')
        plt.xlabel('Date')
        plt.ylabel(output_col)
        plt.legend()
        plt.show()
        
        # Print model coefficients if available
        if hasattr(model, 'coef_'):
            print(f'{model_name} Coefficients:')
            for feature, coef in zip(input_col, model.coef_):
                print(f'{feature}: {coef:.2f}')
        elif hasattr(model, 'feature_importances_'):
            print(f'{model_name} Feature Importances:')
            for feature, importance in zip(input_col, model.feature_importances_):
                print(f'{feature}: {importance:.2f}')
```"
323204,SoftwareDefinedBuildings/XBOS,apps/data_analysis/XBOS_data_analytics/Import_Data.py,XBOS_data_analytics.Import_Data.Import_Data,"import os
import pandas as pd
import numpy as np
import glob

class Import_Data:
    """""" This class imports data from csv files """"""

    def __init__(self):
        """""" Constructor.

        This class stores the imported data.

        """"""
        self.data = pd.DataFrame()

    def import_csv(self, file_name='*', folder_name='.', head_row=0, index_col=0, convert_col=True, concat_files=False):
        """""" Imports csv file(s) and stores the result in data.

        Note
        ----
        1. If folder exists out of current directory, folder_name should contain correct regex
        2. Assuming there's no file called ""\\*.csv""

        Parameters
        ----------
        file_name       : str
            CSV file to be imported. Defaults to '\\*', i.e. all csv files in the folder.
        folder_name     : str
            Folder where file resides. Defaults to '.', i.e. current directory.
        head_row        : int
            Skips all rows from 0 to head_row-1
        index_col       : int
            Skips all columns from 0 to index_col-1
        convert_col     : bool
            Convert columns to numeric type
        concat_files    : bool
            Appends data from files to result dataframe

        """"""
        if isinstance(file_name, str) and isinstance(folder_name, str):
            try:
                self.data = self._load_csv(file_name, folder_name, head_row, index_col, convert_col, concat_files)
            except Exception as e:
                raise e
        elif isinstance(file_name, list) and isinstance(folder_name, str):
            for i, file in enumerate(file_name):
                if isinstance(head_row, list):
                    _head_row = head_row[i]
                else:
                    _head_row = head_row
                if isinstance(index_col, list):
                    _index_col = index_col[i]
                else:
                    _index_col = index_col
                try:
                    data_tmp = self._load_csv(file, folder_name, _head_row, _index_col, convert_col, concat_files)
                    if concat_files:
                        self.data = self.data.append(data_tmp, ignore_index=False, verify_integrity=False)
                    else:
                        self.data = self.data.join(data_tmp, how='outer')
                except Exception as e:
                    raise e
        else:
            raise NotImplementedError(""Filename and Folder name can't both be of type list."")

    def _load_csv(self, file_name, folder_name, head_row, index_col, convert_col, concat_files):
        """""" Load single csv file.

        Parameters
        ----------
        file_name       : str
            CSV file to be imported. Defaults to '*' - all csv files in the folder.
        folder_name     : str
            Folder where file resides. Defaults to '.' - current directory.
        head_row        : int
            Skips all rows from 0 to head_row-1
        index_col       : int
            Skips all columns from 0 to index_col-1
        convert_col     : bool
            Convert columns to numeric type
        concat_files    : bool
            Appends data from files to result dataframe

        Returns
        -------
        pd.DataFrame()
            Dataframe containing csv data

        """"""
        if file_name == '*':
            if not os.path.isdir(folder_name):
                raise OSError('Folder does not exist.')
            else:
                file_name_list = sorted(glob.glob(folder_name + '*.csv'))
                if not file_name_list:
                    raise OSError('Either the folder does not contain any csv files or invalid folder provided.')
                else:
                    self.import_csv(file_name=file_name_list, head_row=head_row, index_col=index_col, convert_col=convert_col, concat_files=concat_files)
                    return self.data
        elif not os.path.isdir(folder_name):
            raise OSError('Folder does not exist.')
        else:
            path = os.path.join(folder_name, file_name)
            if head_row > 0:
                data = pd.read_csv(path, index_col=index_col, skiprows=[i for i in range(head_row - 1)])
            else:
                data = pd.read_csv(path, index_col=index_col)
            try:
                data.index = pd.to_datetime(data.index, format='%m/%d/%y %H:%M')
            except:
                data.index = pd.to_datetime(data.index, dayfirst=False, infer_datetime_format=True)
        if convert_col:
            for col in data.columns:
                if data[col].dtype != np.number:
                    data[col] = pd.to_numeric(data[col], errors='coerce')
        return data","
class Import_Data:
    
    def __init__(self):
        
        pass
    def import_csv(self, file_name='*', folder_name='.', head_row=0, index_col=0, convert_col=True, concat_files=False):
        
        pass

    def _load_csv(self, file_name, folder_name, head_row, index_col, convert_col, concat_files):
        
        pass",snippet_263,4,"```python
import pandas as pd
import glob
import os

class Import_Data:
    
    def __init__(self):
        self.data = None

    def import_csv(self, file_name='*', folder_name='.', head_row=0, index_col=0, convert_col=True, concat_files=False):
        self.data = self._load_csv(file_name, folder_name, head_row, index_col, convert_col, concat_files)
        return self.data

    def _load_csv(self, file_name, folder_name, head_row, index_col, convert_col, concat_files):
        file_path = os.path.join(folder_name, file_name)
        files = glob.glob(file_path)
        
        if not files:
            raise FileNotFoundError(f""No files found matching {file_path}"")
        
        dataframes = []
        for file in files:
            try:
                df = pd.read_csv(file, header=head_row, index_col=index_col)
                if convert_col:
                    df = df.apply(pd.to_numeric, errors='ignore')
                dataframes.append(df)
            except Exception as e:
                print(f""Failed to load {file}: {str(e)}"")
        
        if concat_files:
            if dataframes:
                return pd.concat(dataframes, ignore_index=True)
            else:
                return None
        else:
            if len(dataframes) == 1:
                return dataframes[0]
            else:
                return dataframes
```"
323208,SoftwareDefinedBuildings/XBOS,apps/data_analysis/XBOS_data_analytics/Plot_Data.py,XBOS_data_analytics.Plot_Data.Plot_Data,"import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

class Plot_Data:
    """""" This class contains functions for displaying various plots.

    Attributes
    ----------
    count    : int
        Keeps track of the number of figures.

    """"""
    count = 1

    def __init__(self, figsize=(18, 5)):
        """""" Constructor.

        Parameters
        ----------
        figsize : tuple
            Size of figure.

        """"""
        self.figsize = figsize

    def correlation_plot(self, data):
        """""" Create heatmap of Pearson's correlation coefficient.

        Parameters
        ----------
        data    : pd.DataFrame()
            Data to display.

        Returns
        -------
        matplotlib.figure
            Heatmap.

        """"""
        fig = plt.figure(Plot_Data.count)
        corr = data.corr()
        ax = sns.heatmap(corr)
        Plot_Data.count += 1
        return fig

    def baseline_projection_plot(self, y_true, y_pred, baseline_period, projection_period, model_name, adj_r2, data, input_col, output_col, model, site):
        """""" Create baseline and projection plots.

        Parameters
        ----------
        y_true              : pd.Series()
            Actual y values.
        y_pred              : np.ndarray
            Predicted y values.
        baseline_period     : list(str)
            Baseline period.
        projection_period   : list(str)
            Projection periods.
        model_name          : str
            Optimal model's name.
        adj_r2              : float
            Adjusted R2 score of optimal model.
        data                : pd.Dataframe()
            Data containing real values.
        input_col           : list(str)
            Predictor column(s).
        output_col          : str
            Target column.
        model               : func
            Optimal model.

        Returns
        -------
        matplotlib.figure
            Baseline plot

        """"""
        fig = plt.figure(Plot_Data.count)
        if projection_period:
            nrows = len(baseline_period) + len(projection_period) / 2
        else:
            nrows = len(baseline_period) / 2
        base_df = pd.DataFrame()
        base_df['y_true'] = y_true
        base_df['y_pred'] = y_pred
        ax1 = fig.add_subplot(nrows, 1, 1)
        base_df.plot(ax=ax1, figsize=self.figsize, title='Baseline Period ({}-{}). \nBest Model: {}. \nBaseline Adj R2: {}. \nSite: {}.'.format(baseline_period[0], baseline_period[1], model_name, adj_r2, site))
        if projection_period:
            num_plot = 2
            for i in range(0, len(projection_period), 2):
                ax = fig.add_subplot(nrows, 1, num_plot)
                period = slice(projection_period[i], projection_period[i + 1])
                project_df = pd.DataFrame()
                try:
                    project_df['y_true'] = data.loc[period, output_col]
                    project_df['y_pred'] = model.predict(data.loc[period, input_col])
                    project_df['y_pred'][project_df['y_pred'] < 0] = 0
                    project_df.plot(ax=ax, figsize=self.figsize, title='Projection Period ({}-{})'.format(projection_period[i], projection_period[i + 1]))
                    num_plot += 1
                    fig.tight_layout()
                    Plot_Data.count += 1
                    return (fig, project_df['y_true'], project_df['y_pred'])
                except:
                    raise SystemError('If projecting into the future, please specify project_ind_col that has data available                                         in the future time period requested.')
        return (fig, None, None)","
class Plot_Data:
    
    def __init__(self, figsize=(18, 5)):
        
        pass
    def correlation_plot(self, data):
        
        pass

    def baseline_projection_plot(self, y_true, y_pred, baseline_period, projection_period, model_name, adj_r2, data, input_col, output_col, model, site):
        
        pass",snippet_264,4,"```python
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

class Plot_Data:
    
    def __init__(self, figsize=(18, 5)):
        self.figsize = figsize

    def correlation_plot(self, data):
        plt.figure(figsize=self.figsize)
        sns.heatmap(data.corr(), annot=True, cmap='coolwarm', square=True)
        plt.title('Correlation Plot')
        plt.show()

    def baseline_projection_plot(self, y_true, y_pred, baseline_period, projection_period, model_name, adj_r2, data, input_col, output_col, model, site):
        plt.figure(figsize=self.figsize)
        plt.plot(y_true.index, y_true.values, label='Actual')
        plt.plot(y_pred.index, y_pred.values, label='Predicted')
        plt.axvline(x=baseline_period[1], color='r', linestyle='--', label='Baseline Period End')
        plt.fill_between(baseline_period, y_true.min(), y_true.max(), alpha=0.2, label='Baseline Period')
        plt.fill_between(projection_period, y_true.min(), y_true.max(), alpha=0.2, label='Projection Period')
        plt.title(f'{site} - {model_name} (Adj. R2: {adj_r2:.2f})')
        plt.xlabel('Date')
        plt.ylabel(output_col)
        plt.legend()
        plt.show()

        # Additional plot to show feature importance if model is a tree-based model
        if hasattr(model, 'feature_importances_'):
            feature_importances = pd.DataFrame({'Feature': input_col, 'Importance': model.feature_importances_})
            feature_importances = feature_importances.sort_values(by='Importance', ascending=False)
            plt.figure(figsize=(10, 6))
            sns.barplot(x='Feature', y='Importance', data=feature_importances)
            plt.title(f'{model_name} Feature Importances')
            plt.xlabel('Feature')
            plt.ylabel('Importance')
            plt.xticks(rotation=90)
            plt.show()
```"
339242,pawelad/pymonzo,pawelad_pymonzo/src/pymonzo/client.py,pymonzo.client.MonzoAPI,"from pymonzo.exceptions import MonzoAPIError, NoSettingsFile
from authlib.integrations.base_client import OAuthError
from pymonzo.webhooks import WebhooksResource
from pathlib import Path
from pymonzo.attachments import AttachmentsResource
from json import JSONDecodeError
from pymonzo.transactions import TransactionsResource
from pymonzo.pots import PotsResource
from pymonzo.whoami import WhoAmIResource
from pymonzo.utils import get_authorization_response_url
from urllib.parse import urlparse
from typing import Any, Optional
from pymonzo.balance import BalanceResource
import webbrowser
from pymonzo.feed import FeedResource
from pymonzo.accounts import AccountsResource
from authlib.integrations.httpx_client import OAuth2Client
from pymonzo.settings import PyMonzoSettings

class MonzoAPI:
    """"""Monzo public API client.

    To use it, you need to create a new OAuth client in [Monzo Developer Portal].
    The `Redirect URLs` should be set to `http://localhost:6600/pymonzo` and
    `Confidentiality` should be set to `Confidential` if you'd like to automatically
    refresh the access token when it expires.

    You can now use `Client ID` and `Client secret` in [`pymonzo.MonzoAPI.authorize`][]
    to finish the OAuth 2 'Authorization Code Flow' and get the API access token
    (which is by default saved to disk and refreshed when expired).

    [Monzo Developer Portal]: https://developers.monzo.com/

    Note:
        Monzo API docs: https://docs.monzo.com/
    """"""
    api_url = 'https://api.monzo.com'
    authorization_endpoint = 'https://auth.monzo.com/'
    token_endpoint = 'https://api.monzo.com/oauth2/token'
    settings_path = Path.home() / '.pymonzo'

    def __init__(self, access_token: Optional[str]=None) -> None:
        """"""Initialize Monzo API client and mount all resources.

        It expects [`pymonzo.MonzoAPI.authorize`][] to be called beforehand, so
        it can load the local settings file containing the API access token. You
        can also explicitly pass the `access_token`, but it won't be able to
        automatically refresh it once it expires.

        Arguments:
            access_token: OAuth access token. You can obtain it (and by default, save
                it to disk, so it can refresh automatically) by running
                [`pymonzo.MonzoAPI.authorize`][]. Alternatively, you can get a
                temporary access token from the [Monzo Developer Portal].

                [Monzo Developer Portal]: https://developers.monzo.com/

        Raises:
            NoSettingsFile: When the access token wasn't passed explicitly and the
                settings file couldn't be loaded.

        """"""
        if access_token:
            self._settings = PyMonzoSettings(token={'access_token': access_token})
        else:
            try:
                self._settings = PyMonzoSettings.load_from_disk(self.settings_path)
            except (FileNotFoundError, JSONDecodeError) as e:
                raise NoSettingsFile('No settings file found. You need to either run `MonzoAPI.authorize(client_id, client_secret)` to get the authorization token (and save it to disk), or explicitly pass the `access_token`.') from e
        self.session = OAuth2Client(client_id=self._settings.client_id, client_secret=self._settings.client_secret, token=self._settings.token, authorization_endpoint=self.authorization_endpoint, token_endpoint=self.token_endpoint, token_endpoint_auth_method='client_secret_post', update_token=self._update_token, base_url=self.api_url)
        self.whoami = WhoAmIResource(client=self).whoami
        '\n        Mounted Monzo `whoami` endpoint. For more information see\n        [`pymonzo.whoami.WhoAmIResource.whoami`][].\n        '
        self.accounts = AccountsResource(client=self)
        '\n        Mounted Monzo `accounts` resource. For more information see\n        [`pymonzo.accounts.AccountsResource`][].\n        '
        self.attachments = AttachmentsResource(client=self)
        '\n        Mounted Monzo `attachments` resource. For more information see\n        [`pymonzo.attachments.AttachmentsResource`][].\n        '
        self.balance = BalanceResource(client=self)
        '\n        Mounted Monzo `balance` resource. For more information see\n        [`pymonzo.balance.BalanceResource`][].\n        '
        self.feed = FeedResource(client=self)
        '\n        Mounted Monzo `feed` resource. For more information see\n        [`pymonzo.feed.FeedResource`][].\n        '
        self.pots = PotsResource(client=self)
        '\n        Mounted Monzo `pots` resource. For more information see\n        [`pymonzo.pots.PotsResource`][].\n        '
        self.transactions = TransactionsResource(client=self)
        '\n        Mounted Monzo `transactions` resource. For more information see\n        [`pymonzo.transactions.TransactionsResource`][].\n        '
        self.webhooks = WebhooksResource(client=self)
        '\n        Mounted Monzo `webhooks` resource. For more information see\n        [`pymonzo.webhooks.WebhooksResource`][].\n        '

    @classmethod
    def authorize(cls, client_id: str, client_secret: str, *, save_to_disk: bool=True, redirect_uri: str='http://localhost:6600/pymonzo') -> dict:
        """"""Use OAuth 2 'Authorization Code Flow' to get Monzo API access token.

        By default, it also saves the token to disk, so it can be loaded during
        [`pymonzo.MonzoAPI`][] initialization.

        Note:
            Monzo API docs: https://docs.monzo.com/#authentication

        Arguments:
            client_id: OAuth client ID.
            client_secret: OAuth client secret.
            save_to_disk: Whether to save the token to disk.
            redirect_uri: Redirect URI specified in OAuth client.

        Returns:
            OAuth token.
        """"""
        client = OAuth2Client(client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri, token_endpoint_auth_method='client_secret_post')
        url, state = client.create_authorization_url(cls.authorization_endpoint)
        print(f'Please visit this URL to authorize: {url}')
        webbrowser.open(url)
        parsed_url = urlparse(redirect_uri)
        assert parsed_url.hostname is not None
        assert parsed_url.port is not None
        authorization_response = get_authorization_response_url(host=parsed_url.hostname, port=parsed_url.port)
        try:
            token = client.fetch_token(url=cls.token_endpoint, authorization_response=authorization_response)
        except (OAuthError, JSONDecodeError) as e:
            raise MonzoAPIError('Error while fetching API access token') from e
        if save_to_disk:
            settings = PyMonzoSettings(client_id=client_id, client_secret=client_secret, token=token)
            settings.save_to_disk(cls.settings_path)
        return token

    def _update_token(self, token: dict, **kwargs: Any) -> None:
        """"""Update settings with refreshed access token and save it to disk.

        Arguments:
            token: OAuth access token.
            **kwargs: Extra kwargs.
        """"""
        self._settings.token = token
        if self.settings_path.exists():
            self._settings.save_to_disk(self.settings_path)","
class MonzoAPI:
    
    def __init__(self, access_token: Optional[str]=None) -> None:
        
        pass
    @classmethod
    def authorize(cls, client_id: str, client_secret: str, *, save_to_disk: bool=True, redirect_uri: str='http://localhost:6600/pymonzo') -> dict:
        
        pass

    def _update_token(self, token: dict, **kwargs: Any) -> None:
        
        pass",snippet_268,4,"```python
import requests
from typing import Optional, Any, Dict
import webbrowser
import http.server
import urllib.parse
import json
import os

class MonzoAPI:
    
    def __init__(self, access_token: Optional[str]=None) -> None:
        self.access_token = access_token
        self.client_id = None
        self.client_secret = None

    @classmethod
    def authorize(cls, client_id: str, client_secret: str, *, save_to_disk: bool=True, redirect_uri: str='http://localhost:6600/pymonzo') -> Dict:
        class RequestHandler(http.server.BaseHTTPRequestHandler):
            def do_GET(self):
                parsed_path = urllib.parse.urlparse(self.path)
                query = urllib.parse.parse_qs(parsed_path.query)
                if 'code' in query:
                    self.server.authorization_code = query['code'][0]
                    self.send_response(200)
                    self.end_headers()
                    self.wfile.write(b'Authorization successful. You can close this tab now.')
                else:
                    self.send_response(400)
                    self.end_headers()
                    self.wfile.write(b'Authorization failed.')

        server = http.server.HTTPServer(('localhost', 6600), RequestHandler)
        server.authorization_code = None

        auth_url = f'https://auth.monzo.com/?response_type=code&redirect_uri={redirect_uri}&client_id={client_id}'
        webbrowser.open(auth_url)

        while server.authorization_code is None:
            server.handle_request()

        token_url = 'https://api.monzo.com/oauth2/token'
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        data = {
            'grant_type': 'authorization_code',
            'client_id': client_id,
            'client_secret': client_secret,
            'redirect_uri': redirect_uri,
            'code': server.authorization_code
        }
        response = requests.post(token_url, headers=headers, data=data)
        token = response.json()

        if save_to_disk:
            with open('token.json', 'w') as f:
                json.dump(token, f)

        return token

    def _update_token(self, token: Dict, **kwargs: Any) -> None:
        if 'access_token' in token:
            self.access_token = token['access_token']
        if 'client_id' in kwargs:
            self.client_id = kwargs['client_id']
        if 'client_secret' in kwargs:
            self.client_secret = kwargs['client_secret']
```"
339313,chaoss/grimoirelab-kingarthur,arthur/tasks.py,arthur.tasks._TaskConfig,"import re
from grimoirelab_toolkit.introspect import find_class_properties

class _TaskConfig:
    """"""Abstract class to store task configuration options.

    This class defines how to store specific task configuration
    arguments such as scheduling or archiving options. It is not
    meant to be instantiated on its own.

    Configuration options must be defined using `property` and `setter`
    decorators. Setters must check whether the given value is valid
    or not. When it is invalid, a `ValueError` exception should be
    raised. The rationale behind this is to use these methods as
    parsers when `from_dict` class method is called. It will create
    a new instance of the subclass passing its properties from a
    dictionary.
    """"""
    KW_ARGS_ERROR_REGEX = re.compile(""^.+ got an unexpected keyword argument '(.+)'$"")

    def to_dict(self):
        """"""Returns a dict with the representation of this task configuration object.""""""
        properties = find_class_properties(self.__class__)
        config = {name: self.__getattribute__(name) for name, _ in properties}
        return config

    @classmethod
    def from_dict(cls, config):
        """"""Create an configuration object from a dictionary.

        Key,value pairs will be used to initialize a task configuration
        object. If 'config' contains invalid configuration parameters
        a `ValueError` exception will be raised.

        :param config: dictionary used to create an instance of this object

        :returns: a task config instance

        :raises ValueError: when an invalid configuration parameter is found
        """"""
        try:
            obj = cls(**config)
        except TypeError as e:
            m = cls.KW_ARGS_ERROR_REGEX.match(str(e))
            if m:
                raise ValueError(""unknown '%s' task config parameter"" % m.group(1))
            else:
                raise e
        else:
            return obj","
class _TaskConfig:
    
    def to_dict(self):
        
        pass
    @classmethod
    def from_dict(cls, config):
        
        pass",snippet_269,3,"```python
class _TaskConfig:
    
    def __init__(self, task_name, task_type, task_params):
        self.task_name = task_name
        self.task_type = task_type
        self.task_params = task_params

    def to_dict(self):
        return {
            'task_name': self.task_name,
            'task_type': self.task_type,
            'task_params': self.task_params
        }

    @classmethod
    def from_dict(cls, config):
        return cls(
            task_name=config['task_name'],
            task_type=config['task_type'],
            task_params=config['task_params']
        )
```"
341459,wright-group/WrightTools,wright-group_WrightTools/WrightTools/diagrams/WMEL.py,WrightTools.diagrams.WMEL.Subplot,"import numpy as np

class Subplot:
    """"""Subplot containing WMEL.""""""

    def __init__(self, ax, energies, number_of_interactions=4, title='', title_font_size=16, state_names=None, virtual=[None], state_font_size=14, state_text_buffer=0.5, label_side='left'):
        """"""Subplot.

        Parameters
        ----------
        ax : matplotlib axis
            The axis.
        energies : 1D array-like
            Energies (scaled between 0 and 1)
        number_of_interactions : integer
            Number of interactions in diagram.
        title : string (optional)
            Title of subplot. Default is empty string.
        state_names: list of str (optional)
            list of the names of the states
        virtual: list of ints (optional)
            list of indexes of any vitual energy states
        state_font_size: numtype (optional)
            font size for the state lables
        state_text_buffer: numtype (optional)
            space between the energy level bars and the state labels
        """"""
        self.ax = ax
        self.energies = energies
        self.interactions = number_of_interactions
        self.state_names = state_names
        for i in range(len(self.energies)):
            if i in virtual:
                linestyle = '--'
            else:
                linestyle = '-'
            self.ax.axhline(self.energies[i], color='k', linewidth=2, ls=linestyle, zorder=5)
        if isinstance(state_names, list):
            for i in range(len(self.energies)):
                if label_side == 'left':
                    ax.text(-state_text_buffer, energies[i], state_names[i], fontsize=state_font_size, verticalalignment='center', horizontalalignment='center')
                elif label_side == 'right':
                    ax.text(1 + state_text_buffer, energies[i], state_names[i], fontsize=state_font_size, verticalalignment='center', horizontalalignment='center')
        self.x_pos = np.linspace(0, 1, number_of_interactions)
        self.ax.set_xlim(-0.1, 1.1)
        self.ax.set_ylim(-0.01, 1.01)
        self.ax.axis('off')
        self.ax.set_title(title, fontsize=title_font_size)

    def add_arrow(self, index, between, kind, label='', head_length=10, head_aspect=1, font_size=14, color='k'):
        """"""Add an arrow to the WMEL diagram.

        Parameters
        ----------
        index : integer
            The interaction, or start and stop interaction for the arrow.
        between : 2-element iterable of integers
            The inital and final state of the arrow
        kind : {'ket', 'bra', 'outbra', 'outket'}
            The kind of interaction.
        label : string (optional)
            Interaction label. Default is empty string.
        head_length: number (optional)
            size of arrow head
        font_size : number (optional)
            Label font size. Default is 14.
        color : matplotlib color (optional)
            Arrow color. Default is black.

        Returns
        -------
        [line,arrow_head,text]
        """"""
        if hasattr(index, 'index'):
            x_pos = list(index)
        else:
            x_pos = [index] * 2
        x_pos = [np.linspace(0, 1, self.interactions)[i] for i in x_pos]
        y_pos = [self.energies[between[0]], self.energies[between[1]]]
        arrow_length = self.energies[between[1]] - self.energies[between[0]]
        arrow_end = self.energies[between[1]]
        if arrow_length > 0:
            direction = 1
        elif arrow_length < 0:
            direction = -1
        else:
            raise ValueError('between invalid!')
        length = abs(y_pos[0] - y_pos[1])
        if kind == 'ket':
            line = self.ax.plot(x_pos, y_pos, linestyle='-', color=color, linewidth=2, zorder=9)
        elif kind == 'bra':
            line = self.ax.plot(x_pos, y_pos, linestyle='--', color=color, linewidth=2, zorder=9)
        elif kind == 'out':
            yi = np.linspace(y_pos[0], y_pos[1], 100)
            xi = np.sin((yi - y_pos[0]) * int(1 / length * 20) * 2 * np.pi * length) / 40 + x_pos[0]
            line = self.ax.plot(xi[:-5], yi[:-5], linestyle='-', color=color, linewidth=2, solid_capstyle='butt', zorder=9)
        elif kind == 'outbra':
            yi = np.linspace(y_pos[0], y_pos[1], 100)
            xi = np.sin((yi - y_pos[0]) * int(1 / length * 20) * 2 * np.pi * length) / 40 + x_pos[0]
            counter = 0
            while counter - 13 <= len(yi):
                subyi = yi[counter:counter + 15]
                subxi = xi[counter:counter + 15]
                line = self.ax.plot(subxi[:-5], subyi[:-5], linestyle='-', color=color, linewidth=2, solid_capstyle='butt', zorder=9)
                counter += 13
        else:
            raise ValueError(""kind is not 'ket', 'bra', 'out' or 'outbra'."")
        dx = x_pos[1] - x_pos[0]
        dy = y_pos[1] - y_pos[0]
        xytext = (x_pos[1] - dx * 0.01, y_pos[1] - dy * 0.01)
        annotation = self.ax.annotate('', xy=(x_pos[1], y_pos[1]), xytext=xytext, arrowprops=dict(fc=color, ec=color, shrink=0, headwidth=head_length * head_aspect, headlength=head_length, linewidth=0, zorder=10), size=25)
        text = self.ax.text(np.mean(x_pos), -0.15, label, fontsize=font_size, horizontalalignment='center')
        return (line, annotation.arrow_patch, text)","
class Subplot:
    
    def __init__(self, ax, energies, number_of_interactions=4, title='', title_font_size=16, state_names=None, virtual=[None], state_font_size=14, state_text_buffer=0.5, label_side='left'):
        
        pass
    def add_arrow(self, index, between, kind, label='', head_length=10, head_aspect=1, font_size=14, color='k'):
        
        pass",snippet_271,3,"```python
import matplotlib.pyplot as plt
import matplotlib.patches as patches

class Subplot:
    
    def __init__(self, ax, energies, number_of_interactions=4, title='', title_font_size=16, state_names=None, virtual=[None], state_font_size=14, state_text_buffer=0.5, label_side='left'):
        self.ax = ax
        self.energies = energies
        self.number_of_interactions = number_of_interactions
        self.title = title
        self.title_font_size = title_font_size
        self.state_names = state_names if state_names else [f'State {i}' for i in range(len(energies))]
        self.virtual = virtual
        self.state_font_size = state_font_size
        self.state_text_buffer = state_text_buffer
        self.label_side = label_side
        
        self.ax.set_title(self.title, fontsize=self.title_font_size)
        self.ax.set_yticks(self.energies)
        self.ax.set_yticklabels(self.state_names, fontsize=self.state_font_size)
        self.ax.set_xticks([])
        
        if self.label_side == 'left':
            self.ax.yaxis.tick_left()
        elif self.label_side == 'right':
            self.ax.yaxis.tick_right()
        else:
            raise ValueError(""Invalid label_side. It should be either 'left' or 'right'."")
        
        for i, energy in enumerate(self.energies):
            if energy in self.virtual:
                self.ax.axhline(y=energy, color='gray', linestyle='--')
            else:
                self.ax.axhline(y=energy, color='k')
                
    def add_arrow(self, index, between, kind, label='', head_length=10, head_aspect=1, font_size=14, color='k'):
        if kind not in ['up', 'down']:
            raise ValueError(""Invalid kind. It should be either 'up' or 'down'."")
        
        start_energy = self.energies[index]
        end_energy = self.energies[between]
        
        if kind == 'up' and start_energy > end_energy:
            raise ValueError(""Invalid arrow direction. 'up' arrow should have start energy less than end energy."")
        if kind == 'down' and start_energy < end_energy:
            raise ValueError(""Invalid arrow direction. 'down' arrow should have start energy greater than end energy."")
        
        self.ax.arrow(0, start_energy, 0, end_energy - start_energy, 
                      head_width=0.1, head_length=head_length, 
                      length_includes_head=True, color=color, 
                      head_starts_at_zero=False if kind == 'up' else True)
        
        if label:
            self.ax.text(0.1 if self.label_side == 'left' else -0.1, (start_energy + end_energy) / 2, 
                         label, ha='left' if self.label_side == 'left' else 'right', 
                         fontsize=font_size)
```"
341765,peopledoc/django-agnocomplete,peopledoc_django-agnocomplete/agnocomplete/views.py,agnocomplete.views.UserContextFormViewMixin,"class UserContextFormViewMixin:
    """"""
    This mixin is injecting the context variable into the form kwargs
    """"""

    def get_agnocomplete_context(self):
        """"""
        Return the view current user.

        You may want to change this value by overrding this method.
        """"""
        return self.request.user

    def get_form_kwargs(self):
        """"""
        Return the form kwargs.

        This method injects the context variable, defined in
        :meth:`get_agnocomplete_context`. Override this method to adjust it to
        your needs.
        """"""
        data = super().get_form_kwargs()
        data.update({'user': self.get_agnocomplete_context()})
        return data","class UserContextFormViewMixin:
    
    def get_agnocomplete_context(self):
        
        pass
    def get_form_kwargs(self):
        
        pass",snippet_272,3,"```python
class UserContextFormViewMixin:
    """"""
    A mixin that provides a way to pass the user context to a form.
    """"""

    def get_agnocomplete_context(self):
        """"""
        Returns the context to be used for agnocomplete.
        """"""
        return {'user': self.request.user}

    def get_form_kwargs(self):
        """"""
        Returns the keyword arguments for instantiating the form.
        """"""
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs
```"
343261,danpoland/pyramid-restful-framework,danpoland_pyramid-restful-framework/pyramid_restful/pagination/base.py,pyramid_restful.pagination.base.BasePagination,"class BasePagination:
    """"""
    The base class each Pagination class should implement.
    """"""

    def paginate_query(self, query, request):
        """"""
        :param query: SQLAlchemy ``query``.
        :param request: The request from the view
        :return: The paginated date based on the provided query and request.
        """"""
        raise NotImplementedError('paginate_query() must be implemented.')

    def get_paginated_response(self, data):
        """"""
        :param data: The paginated data.
        :return: A response containing the paginated data.
        """"""
        raise NotImplementedError('get_paginated_response() must be implemented.')","class BasePagination:
    
    def paginate_query(self, query, request):
        
        pass
    def get_paginated_response(self, data):
        
        pass",snippet_273,3,"```python
from collections import OrderedDict

class BasePagination:
    """"""
    Base pagination class.

    To be subclassed by concrete pagination classes.
    """"""

    def paginate_query(self, query, request):
        """"""
        Paginates a query based on the request.

        Args:
            query: The query to be paginated.
            request: The current request.

        Returns:
            A paginated query.
        """"""
        raise NotImplementedError(""Subclasses must implement paginate_query"")

    def get_paginated_response(self, data):
        """"""
        Returns a paginated response.

        Args:
            data: The data to be paginated.

        Returns:
            A paginated response.
        """"""
        raise NotImplementedError(""Subclasses must implement get_paginated_response"")


class PageNumberPagination(BasePagination):
    """"""
    A simple page number pagination implementation.
    """"""

    page_size = 10
    page_size_query_param = 'page_size'
    max_page_size = 100

    def paginate_query(self, query, request):
        """"""
        Paginates a query based on the request.

        Args:
            query: The query to be paginated.
            request: The current request.

        Returns:
            A paginated query.
        """"""
        page_size = self.get_page_size(request)
        paginator = self.get_paginator(query, page_size)
        page_number = request.GET.get('page', 1)

        try:
            page_number = int(page_number)
        except ValueError:
            page_number = 1

        try:
            self.page = paginator.page(page_number)
        except paginator.page_does_not_exist:
            page_number = paginator.num_pages
            self.page = paginator.page(page_number)

        self.request = request
        return list(self.page)

    def get_paginated_response(self, data):
        """"""
        Returns a paginated response.

        Args:
            data: The data to be paginated.

        Returns:
            A paginated response.
        """"""
        return OrderedDict([
            ('count', self.page.paginator.count),
            ('next', self.get_next_link()),
            ('previous', self.get_previous_link()),
            ('results', data)
        ])

    def get_page_size(self, request):
        """"""
        Returns the page size.

        Args:
            request: The current request.

        Returns:
            The page size.
        """"""
        if self.page_size_query_param:
            try:
                return int(request.GET.get(self.page_size_query_param, self.page_size))
            except (KeyError, ValueError):
                pass

        return self.page_size

    def get_paginator(self, query, page_size):
        """"""
        Returns a paginator instance.

        Args:
            query: The query to be paginated.
            page_size: The page size.

        Returns:
            A paginator instance.
        """"""
        from django.core.paginator import Paginator
        return Paginator(query, page_size)

    def get_next_link(self):
        """"""
        Returns the next link.

        Returns:
            The next link.
        """"""
        if not self.page.has_next():
            return None
        url = self.request.build_absolute_uri()
        page_number = self.page.next_page_number()
        return self.replace_query_param(url, 'page', page_number)

    def get_previous_link(self):
        """"""
        Returns the previous link.

        Returns:
            The previous link.
        """"""
        if not self.page.has_previous():
            return None
        url = self.request.build_absolute_uri()
        page_number = self.page.previous_page_number()
        return self.replace_query_param(url, 'page', page_number)

    def replace_query_param(self, url, key, val):
        """"""
        Replaces a query parameter in a URL.

        Args:
            url: The URL.
            key: The query parameter key.
            val: The query parameter value.

        Returns:
            The URL with the query parameter replaced.
        """"""
        from urllib.parse import urlparse, urlunparse, parse_qs, urlencode
        (scheme, netloc, path, params, query, fragment) = urlparse(url)
        query_dict = parse_qs(query)
        query_dict[key] = [str(val)]
        query = urlencode(query_dict, doseq=True)
        return urlunparse((scheme, netloc, path, params, query, fragment))
```"
343270,danpoland/pyramid-restful-framework,danpoland_pyramid-restful-framework/pyramid_restful/permissions.py,pyramid_restful.permissions.BasePermission,"class BasePermission:
    """"""
    All permission classes should inherit from this class.
    """"""
    message = None

    def has_permission(self, request, view):
        """"""
        Checked on every request to a view. Return ``True`` if permission is granted else ``False``.

        :param request: The request sent to the view.
        :param view: The instance of the view being accessed.
        :return: Boolean
        """"""
        return True

    def has_object_permission(self, request, view, obj):
        """"""
        Checked when a request is for a specific object. Return ``True`` if permission is granted else ``False``.

        :param request: The request sent to the view.
        :param view:  The instance of the view being accessed.
        :param obj: The object being accessed.
        :return: Boolean
        """"""
        return True","class BasePermission:
    
    def has_permission(self, request, view):
        
        pass
    def has_object_permission(self, request, view, obj):
        
        pass",snippet_274,3,"```python
class BasePermission:
    """"""
    Base class for permission checks.
    """"""

    def has_permission(self, request, view):
        """"""
        Checks if the request has the required permission.

        Args:
            request (object): The incoming request.
            view (object): The view being accessed.

        Returns:
            bool: True if the request has permission, False otherwise.
        """"""
        return True

    def has_object_permission(self, request, view, obj):
        """"""
        Checks if the request has the required permission for the given object.

        Args:
            request (object): The incoming request.
            view (object): The view being accessed.
            obj (object): The object being accessed.

        Returns:
            bool: True if the request has permission, False otherwise.
        """"""
        return True
```"
344249,openid/JWTConnect-Python-CryptoJWT,src/cryptojwt/jws/__init__.py,cryptojwt.jws.Signer,"class Signer:
    """"""Abstract base class for signing algorithms.""""""

    def sign(self, msg, key):
        """"""Sign ``msg`` with ``key`` and return the signature.""""""
        raise NotImplementedError()

    def verify(self, msg, sig, key):
        """"""Return True if ``sig`` is a valid signature for ``msg``.""""""
        raise NotImplementedError()","class Signer:
    
    def sign(self, msg, key):
        
        pass
    def verify(self, msg, sig, key):
        
        pass",snippet_275,3,"```python
import hashlib
import hmac

class Signer:
    
    def sign(self, msg, key):
        """"""Generate a digital signature for a given message using a secret key.""""""
        return hmac.new(key, msg.encode(), hashlib.sha256).digest()

    def verify(self, msg, sig, key):
        """"""Verify a digital signature for a given message using a secret key.""""""
        expected_sig = self.sign(msg, key)
        return hmac.compare_digest(sig, expected_sig)
```"
347062,adobe-apiplatform/umapi-client.py,umapi_client/api.py,umapi_client.api.QuerySingle,"class QuerySingle:
    """"""
    Look for a single object
    """"""

    def __init__(self, connection, object_type, url_params=None, query_params=None):
        """"""
        Provide the connection and query parameters when you create the query.

        :param connection: The Connection to run the query against
        :param object_type: The type of object being queried (e.g., ""user"" or ""group"")
        :param url_params: Query qualifiers that go in the URL path (e.g., a group name when querying users)
        :param query_params: Query qualifiers that go in the query string (e.g., a domain name)
        """"""
        self.conn = connection
        self.object_type = object_type
        self.url_params = url_params if url_params else []
        self.query_params = query_params if query_params else {}
        self._result = None

    def reload(self):
        """"""
        Rerun the query (lazily).
        The result will contain a value on the server side that have changed since the last run.
        :return: None
        """"""
        self._result = None

    def _fetch_result(self):
        """"""
        Fetch the queried object.
        """"""
        self._result = self.conn.query_single(self.object_type, self.url_params, self.query_params)

    def result(self):
        """"""
        Fetch the result, if we haven't already or if reload has been called.
        :return: the result object of the query.
        """"""
        if self._result is None:
            self._fetch_result()
        return self._result","class QuerySingle:
    
    def __init__(self, connection, object_type, url_params=None, query_params=None):
        
        pass
    def reload(self):
        
        pass
    def _fetch_result(self):
        
        pass

    def result(self):
        
        pass",snippet_276,5,"```python
import requests

class QuerySingle:
    
    def __init__(self, connection, object_type, url_params=None, query_params=None):
        self.connection = connection
        self.object_type = object_type
        self.url_params = url_params if url_params is not None else {}
        self.query_params = query_params if query_params is not None else {}
        self._result = None

    def reload(self):
        self._result = self._fetch_result()

    def _fetch_result(self):
        url = self.connection.base_url + '/' + self.object_type.format(**self.url_params)
        response = requests.get(url, params=self.query_params, auth=self.connection.auth)
        response.raise_for_status()
        return response.json()

    def result(self):
        if self._result is None:
            self.reload()
        return self._result
```"
347189,facelessuser/backrefs,facelessuser_backrefs/backrefs/util.py,backrefs.util.Immutable,"from typing import Any, Callable, AnyStr

class Immutable:
    """"""Immutable.""""""
    __slots__: tuple[Any, ...] = ()

    def __init__(self, **kwargs: Any) -> None:
        """"""Initialize.""""""
        for k, v in kwargs.items():
            super().__setattr__(k, v)

    def __setattr__(self, name: str, value: Any) -> None:
        """"""Prevent mutability.""""""
        raise AttributeError('Class is immutable!')","
class Immutable:
    
    def __init__(self, **kwargs: Any) -> None:
        
        pass
    def __setattr__(self, name: str, value: Any) -> None:
        
        pass",snippet_277,3,"```python
from typing import Any

class Immutable:
    
    def __init__(self, **kwargs: Any) -> None:
        for key, value in kwargs.items():
            super().__setattr__(key, value)

    def __setattr__(self, name: str, value: Any) -> None:
        if hasattr(self, name):
            raise AttributeError(""can't modify immutable instance"")
        super().__setattr__(name, value)
```"
347503,inveniosoftware/invenio-records,inveniosoftware_invenio-records/invenio_records/dumpers/base.py,invenio_records.dumpers.base.Dumper,"from copy import deepcopy

class Dumper:
    """"""Interface for dumpers.""""""

    def dump(self, record, data):
        """"""Dump a record that can be used a source document for the search engine.

        The job of this method is to create a Python dictionary from the record
        provided in the argument.

        If you overwrite this method without calling super, then you should
        ensure that you make a deep copy of the record dictionary, to avoid
        that changes to the dump affects the record.

        :param record: The record to dump.
        :param data: The initial dump data passed in by ``record.dumps()``.
        """"""
        data.update(deepcopy(dict(record)))
        return data

    def load(self, data, record_cls):
        """"""Load a record from the source document of a search engine hit.

        The job of this method, is to create a record of type ``record_cls``
        based on the input ``data``.

        :param data: A Python dictionary representing the data to load.
        :param records_cls: The record class to be constructed.
        :returns: A instance of ``record_cls``.
        """"""
        raise NotImplementedError()","
class Dumper:
    
    def dump(self, record, data):
        
        pass
    def load(self, data, record_cls):
        
        pass",snippet_278,3,"```python
import json

class Dumper:
    
    def dump(self, record, data):
        """"""Dumps the given data into the provided record.""""""
        for key, value in data.items():
            if hasattr(record, key):
                setattr(record, key, value)
            else:
                raise AttributeError(f""'{type(record).__name__}' object has no attribute '{key}'"")

    def load(self, data, record_cls):
        """"""Loads data from the given string into an instance of the provided record class.""""""
        try:
            data_dict = json.loads(data)
            return record_cls(**data_dict)
        except json.JSONDecodeError as e:
            raise ValueError(f""Failed to load data: {e}"")
```"
347507,inveniosoftware/invenio-records,inveniosoftware_invenio-records/invenio_records/dumpers/search.py,invenio_records.dumpers.search.SearchDumperExt,"class SearchDumperExt:
    """"""Interface for Search dumper extensions.""""""

    def dump(self, record, data):
        """"""Dump the data.""""""

    def load(self, data, record_cls):
        """"""Load the data.

        Reverse the changes made by the dump method.
        """"""","class SearchDumperExt:
    
    def dump(self, record, data):
        
        pass
    def load(self, data, record_cls):
        
        pass",snippet_279,3,"```python
import json

class SearchDumperExt:
    
    def dump(self, record, data):
        """"""Dumps the given record into a JSON string.""""""
        record_data = {
            'id': record.id,
            'data': data
        }
        return json.dumps(record_data)

    def load(self, data, record_cls):
        """"""Loads a record from the given JSON data.""""""
        try:
            record_data = json.loads(data)
            record = record_cls(id=record_data['id'])
            return record, record_data['data']
        except (json.JSONDecodeError, KeyError, TypeError):
            return None, None
```"
347521,inveniosoftware/invenio-records,inveniosoftware_invenio-records/invenio_records/systemfields/base.py,invenio_records.systemfields.base.SystemFieldContext,"class SystemFieldContext:
    """"""Base class for a system field context.

    A system field context is created once you access a field's attribute on
    a class. As the system field may be defined on a super class, this context
    allows us to know from which class the field was accessed.

    Normally you should subclass this class, and implement methods the methods
    on it that requires you to know the record class.
    """"""

    def __init__(self, field, record_cls):
        """"""Initialise the field context.""""""
        self._field = field
        self._record_cls = record_cls

    @property
    def field(self):
        """"""Access the field to prevent it from being overwritten.""""""
        return self._field

    @property
    def record_cls(self):
        """"""Record class to prevent it from being overwritten.""""""
        return self._record_cls","class SystemFieldContext:
    
    def __init__(self, field, record_cls):
        
        pass
    @property
    def field(self):
        
        pass
    @property
    def record_cls(self):
        
        pass",snippet_280,4,"```python
class SystemFieldContext:
    
    def __init__(self, field, record_cls):
        self._field = field
        self._record_cls = record_cls
    
    @property
    def field(self):
        return self._field
    
    @property
    def record_cls(self):
        return self._record_cls
```"
348074,edx/edx-val,edx_edx-val/edxval/transcript_utils.py,edxval.transcript_utils.Transcript,"import json
from pysrt import SubRipFile, SubRipItem, SubRipTime
from edxval.exceptions import TranscriptsGenerationException
from pysrt.srtexc import Error

class Transcript:
    """"""
    Container for transcript methods.
    """"""
    SRT = 'srt'
    SJSON = 'sjson'

    @staticmethod
    def generate_sjson_from_srt(srt_subs):
        """"""
        Generate transcripts from sjson to SubRip (*.srt).

        Arguments:
            srt_subs(SubRip): ""SRT"" subs object

        Returns:
            Subs converted to ""SJSON"" format.
        """"""
        sub_starts = []
        sub_ends = []
        sub_texts = []
        for sub in srt_subs:
            sub_starts.append(sub.start.ordinal)
            sub_ends.append(sub.end.ordinal)
            sub_texts.append(sub.text.replace('\n', ' '))
        sjson_subs = {'start': sub_starts, 'end': sub_ends, 'text': sub_texts}
        return sjson_subs

    @staticmethod
    def generate_srt_from_sjson(sjson_subs):
        """"""
        Generate transcripts from sjson to SubRip (*.srt)

        Arguments:
            sjson_subs (dict): `sjson` subs.

        Returns:
            Subtitles in SRT format.
        """"""
        output = ''
        equal_len = len(sjson_subs['start']) == len(sjson_subs['end']) == len(sjson_subs['text'])
        if not equal_len:
            return output
        for i in range(len(sjson_subs['start'])):
            item = SubRipItem(index=i, start=SubRipTime(milliseconds=sjson_subs['start'][i]), end=SubRipTime(milliseconds=sjson_subs['end'][i]), text=sjson_subs['text'][i])
            output += str(item)
            output += '\n'
        return output

    @classmethod
    def convert(cls, content, input_format, output_format):
        """"""
        Convert transcript `content` from `input_format` to `output_format`.

        Arguments:
            content: Transcript content byte-stream.
            input_format: Input transcript format.
            output_format: Output transcript format.

        Accepted input formats: sjson, srt.
        Accepted output format: srt, sjson.

        Raises:
            TranscriptsGenerationException: On parsing the invalid srt
            content during conversion from srt to sjson.
        """"""
        assert input_format in ('srt', 'sjson')
        assert output_format in ('srt', 'sjson')
        try:
            content = content.decode('utf-8-sig')
        except UnicodeDecodeError:
            content = content.decode('latin-1')
        if input_format == output_format:
            return content
        if input_format == 'srt':
            if output_format == 'sjson':
                try:
                    srt_subs = SubRipFile.from_string(content, error_handling=SubRipFile.ERROR_RAISE)
                except Error as ex:
                    raise TranscriptsGenerationException(str(ex)) from ex
                return json.dumps(cls.generate_sjson_from_srt(srt_subs))
        if input_format == 'sjson':
            if output_format == 'srt':
                return cls.generate_srt_from_sjson(json.loads(content))","
class Transcript:
    
    @staticmethod
    def generate_sjson_from_srt(srt_subs):
        
        pass
    @staticmethod
    def generate_srt_from_sjson(sjson_subs):
        
        pass
    @classmethod
    def convert(cls, content, input_format, output_format):
        
        pass",snippet_282,4,"```python
import json
import re

class Transcript:
    
    @staticmethod
    def generate_sjson_from_srt(srt_subs):
        """"""
        Generate sjson from srt subtitles.

        Args:
            srt_subs (str): The srt subtitles.

        Returns:
            str: The sjson subtitles.
        """"""
        sjson_subs = {""start"": [], ""end"": [], ""text"": []}
        for block in srt_subs.split('\n\n'):
            if block.strip() == '':
                continue
            lines = block.split('\n')
            if len(lines) < 3:
                continue
            match = re.match(r'(\d+:\d+:\d+,\d+) --> (\d+:\d+:\d+,\d+)', lines[1])
            if match:
                start_time = Transcript._srt_time_to_secs(match.group(1))
                end_time = Transcript._srt_time_to_secs(match.group(2))
                text = '\n'.join(lines[2:])
                sjson_subs[""start""].append(start_time)
                sjson_subs[""end""].append(end_time)
                sjson_subs[""text""].append(text)
        return json.dumps(sjson_subs)

    @staticmethod
    def _srt_time_to_secs(time_str):
        """"""
        Convert srt time to seconds.

        Args:
            time_str (str): The time string in srt format.

        Returns:
            float: The time in seconds.
        """"""
        h, m, s = time_str.split(':')
        s, ms = s.split(',')
        return int(h) * 3600 + int(m) * 60 + int(s) + int(ms) / 1000

    @staticmethod
    def _secs_to_srt_time(time_secs):
        """"""
        Convert seconds to srt time.

        Args:
            time_secs (float): The time in seconds.

        Returns:
            str: The time string in srt format.
        """"""
        h = int(time_secs // 3600)
        m = int((time_secs % 3600) // 60)
        s = int(time_secs % 60)
        ms = int((time_secs % 1) * 1000)
        return f'{h:02d}:{m:02d}:{s:02d},{ms:03d}'

    @staticmethod
    def generate_srt_from_sjson(sjson_subs):
        """"""
        Generate srt from sjson subtitles.

        Args:
            sjson_subs (str): The sjson subtitles.

        Returns:
            str: The srt subtitles.
        """"""
        sjson_subs = json.loads(sjson_subs)
        srt_subs = ''
        for i in range(len(sjson_subs[""start""])):
            srt_subs += f'{i+1}\n'
            srt_subs += f'{Transcript._secs_to_srt_time(sjson_subs[""start""][i])} --> {Transcript._secs_to_srt_time(sjson_subs[""end""][i])}\n'
            srt_subs += sjson_subs[""text""][i] + '\n\n'
        return srt_subs.strip()

    @classmethod
    def convert(cls, content, input_format, output_format):
        """"""
        Convert subtitles from one format to another.

        Args:
            content (str): The subtitles content.
            input_format (str): The input format. Can be 'srt' or 'sjson'.
            output_format (str): The output format. Can be 'srt' or 'sjson'.

        Returns:
            str: The converted subtitles.

        Raises:
            ValueError: If the input or output format is not supported.
        """"""
        if input_format == 'srt' and output_format == 'sjson':
            return cls.generate_sjson_from_srt(content)
        elif input_format == 'sjson' and output_format == 'srt':
            return cls.generate_srt_from_sjson(content)
        else:
            raise ValueError('Unsupported format conversion')
```"
350782,druids/django-chamber,druids_django-chamber/chamber/commands/__init__.py,chamber.commands.ProgressBarStream,"class ProgressBarStream:
    """"""
    OutputStream wrapper to remove default linebreak at line endings.
    """"""

    def __init__(self, stream):
        """"""
        Wrap the given stream.
        """"""
        self.stream = stream

    def write(self, *args, **kwargs):
        """"""
        Call the stream's write method without linebreaks at line endings.
        """"""
        return self.stream.write(*args, ending='', **kwargs)

    def flush(self):
        """"""
        Call the stream's flush method without any extra arguments.
        """"""
        return self.stream.flush()","class ProgressBarStream:
    
    def __init__(self, stream):
        
        pass
    def write(self, *args, **kwargs):
        
        pass
    def flush(self):
        
        pass",snippet_283,4,"```python
class ProgressBarStream:
    
    def __init__(self, stream):
        self.stream = stream
        self.buffer = """"

    def write(self, *args, **kwargs):
        if args:
            self.buffer += args[0]
            if '\n' in args[0] or '\r' in args[0]:
                self.flush()

    def flush(self):
        self.stream.write(self.buffer)
        self.stream.flush()
        self.buffer = """"
```"
350920,pytroll/trollimage,pytroll_trollimage/trollimage/_xrimage_rasterio.py,trollimage._xrimage_rasterio.RIODataset,"from rasterio.enums import Resampling
from rasterio.windows import Window

class RIODataset:
    """"""A wrapper for a rasterio dataset.""""""

    def __init__(self, rfile, overviews=None, overviews_resampling=None, overviews_minsize=256):
        """"""Init the rasterio dataset.""""""
        self.rfile = rfile
        self.overviews = overviews
        if overviews_resampling is None:
            overviews_resampling = 'nearest'
        self.overviews_resampling = Resampling[overviews_resampling]
        self.overviews_minsize = overviews_minsize

    def __setitem__(self, key, item):
        """"""Put the data chunk in the image.""""""
        if len(key) == 3:
            indexes = list(range(key[0].start + 1, key[0].stop + 1, key[0].step or 1))
            y = key[1]
            x = key[2]
        else:
            indexes = 1
            y = key[0]
            x = key[1]
        chy_off = y.start
        chy = y.stop - y.start
        chx_off = x.start
        chx = x.stop - x.start
        self.rfile.write(item, window=Window(chx_off, chy_off, chx, chy), indexes=indexes)

    def close(self):
        """"""Close the file.""""""
        if self.overviews is not None:
            overviews = self.overviews
            if len(overviews) == 0:
                from rasterio.rio.overview import get_maximum_overview_level
                width = self.rfile.width
                height = self.rfile.height
                max_level = get_maximum_overview_level(width, height, self.overviews_minsize)
                overviews = [2 ** j for j in range(1, max_level + 1)]
            logger.debug('Building overviews %s with %s resampling', str(overviews), self.overviews_resampling.name)
            self.rfile.build_overviews(overviews, resampling=self.overviews_resampling)
        return self.rfile.close()","
class RIODataset:
    
    def __init__(self, rfile, overviews=None, overviews_resampling=None, overviews_minsize=256):
        
        pass
    def __setitem__(self, key, item):
        
        pass

    def close(self):
        
        pass",snippet_284,4,"```python
import rasterio
from rasterio.enums import Resampling

class RIODataset:
    
    def __init__(self, rfile, overviews=None, overviews_resampling=None, overviews_minsize=256):
        self.dataset = rasterio.open(rfile)
        self.overviews = overviews
        self.overviews_resampling = Resampling[overviews_resampling] if overviews_resampling else Resampling.nearest
        self.overviews_minsize = overviews_minsize
        
        if self.overviews is not None:
            self.dataset.build_overviews(self.overviews, resampling=self.overviews_resampling, min_size=self.overviews_minsize)
            self.dataset.update_tags(ns='rio_overview', resampling=self.overviews_resampling.name)
    
    def __setitem__(self, key, item):
        if isinstance(key, str):
            self.dataset.tags[key] = item
        else:
            raise TypeError(""Key must be a string"")

    def close(self):
        self.dataset.close()
```"
350922,pytroll/trollimage,pytroll_trollimage/trollimage/_xrimage_rasterio.py,trollimage._xrimage_rasterio.RIOTag,"class RIOTag:
    """"""Rasterio wrapper to allow da.store on tag.""""""

    def __init__(self, rfile, name):
        """"""Init the rasterio tag.""""""
        self.rfile = rfile
        self.name = name

    def __setitem__(self, key, item):
        """"""Put the data in the tag.""""""
        kwargs = {self.name: item.item()}
        self.rfile.update_tags(**kwargs)

    def close(self):
        """"""Close the file.""""""
        return self.rfile.close()","class RIOTag:
    
    def __init__(self, rfile, name):
        
        pass
    def __setitem__(self, key, item):
        
        pass
    def close(self):
        
        pass",snippet_285,4,"```python
import h5py

class RIOTag:
    
    def __init__(self, rfile, name):
        self.rfile = h5py.File(rfile, 'a')
        self.group = self.rfile.create_group(name)

    def __setitem__(self, key, item):
        self.group.attrs[key] = item

    def close(self):
        self.rfile.close()
```"
353855,inveniosoftware/invenio-communities,inveniosoftware_invenio-communities/invenio_communities/communities/records/systemfields/access.py,invenio_communities.communities.records.systemfields.access.AccessEnumMixin,"class AccessEnumMixin:
    """"""Mixin for enum functionalities.""""""

    @classmethod
    def validate(cls, level):
        """"""Validate a string against the enum values.""""""
        return cls(level) in cls

    def __str__(self):
        """"""Return its value.""""""
        return self.value","class AccessEnumMixin:
    
    @classmethod
    def validate(cls, level):
        
        pass
    def __str__(self):
        
        pass",snippet_286,3,"```python
from enum import Enum

class AccessEnumMixin:
    
    @classmethod
    def validate(cls, level):
        if not isinstance(level, cls):
            raise TypeError(f""Expected {cls.__name__}, got {type(level).__name__}"")
        return level
    
    def __str__(self):
        return self.name

# Example usage:
class AccessLevel(AccessEnumMixin, Enum):
    READ = 1
    WRITE = 2
    DELETE = 3

# Test the implementation
if __name__ == ""__main__"":
    try:
        AccessLevel.validate(""READ"")
    except TypeError as e:
        print(e)

    level = AccessLevel.validate(AccessLevel.READ)
    print(level)  # Output: READ
    print(str(level))  # Output: READ
```"
354005,inveniosoftware/invenio-communities,inveniosoftware_invenio-communities/invenio_communities/roles.py,invenio_communities.roles.Role,"from dataclasses import dataclass, field

@dataclass(frozen=True)
class Role:
    """"""Role class.""""""
    name: str = ''
    'Name of the role.'
    title: str = ''
    'Title of the role.'
    description: str = ''
    'Brief description of capabilities of the role.'
    can_manage_roles: list = field(default_factory=list)
    'List of other roles that this role can manage.'
    is_owner: bool = False
    'This role is the owner role (only one can exists).'
    can_manage: bool = False
    'This role has manage permissions.'
    can_curate: bool = False
    'This role has record manage permissions.'
    can_view: bool = False
    'This role has view restricted record permissions.'

    def can_manage_role(self, role_name):
        """"""Determine if this role can manage the role name.""""""
        return role_name in self.can_manage_roles

    def __hash__(self):
        """"""Compute a hash for use with e.g. sets.""""""
        return self.name.__hash__()","@dataclass(frozen=True)
class Role:
    
    def can_manage_role(self, role_name):
        
        pass
    def __hash__(self):
        
        pass",snippet_287,3,"```python
from dataclasses import dataclass

@dataclass(frozen=True)
class Role:
    name: str
    managed_roles: tuple[str, ...]

    def can_manage_role(self, role_name: str) -> bool:
        return role_name in self.managed_roles

    def __hash__(self) -> int:
        return hash(self.name)
```"
356596,grycap/RADL,grycap_RADL/radl/radl.py,radl.radl.Aspect,"import copy

class Aspect:
    """"""A network, ansible_host, system, deploy, configure or contextualize element in a RADL.""""""

    def getId(self):
        """"""Return the id of the aspect.""""""
        return id(self)

    def clone(self):
        """"""Return a copy of this aspect.""""""
        return copy.deepcopy(self)","
class Aspect:
    
    def getId(self):
        
        pass
    def clone(self):
        
        pass",snippet_288,3,"```python
import copy

class Aspect:
    
    def __init__(self, id):
        """"""
        Initialize the Aspect object.

        Args:
        id (int): The unique identifier for the aspect.
        """"""
        self.id = id

    def getId(self):
        """"""
        Get the unique identifier for the aspect.

        Returns:
        int: The unique identifier for the aspect.
        """"""
        return self.id

    def clone(self):
        """"""
        Create a deep copy of the Aspect object.

        Returns:
        Aspect: A deep copy of the Aspect object.
        """"""
        return copy.deepcopy(self)
```"
357236,pytroll/posttroll,posttroll/backends/zmq/message_broadcaster.py,posttroll.backends.zmq.message_broadcaster.ZMQDesignatedReceiversSender,"import threading
from posttroll.backends.zmq.socket import close_socket, set_up_client_socket
from zmq import LINGER, NOBLOCK, REQ, ZMQError

class ZMQDesignatedReceiversSender:
    """"""Sends message to multiple *receivers* on *port*.""""""

    def __init__(self, default_port, receivers):
        """"""Set up the sender.""""""
        self.default_port = default_port
        self.receivers = receivers
        self._shutdown_event = threading.Event()

    def __call__(self, data):
        """"""Send data.""""""
        for receiver in self.receivers:
            self._send_to_address(receiver, data)

    def _send_to_address(self, address, data, timeout=10):
        """"""Send data to *address* and *port* without verification of response.""""""
        if address.find(':') == -1:
            full_address = 'tcp://%s:%d' % (address, self.default_port)
        else:
            full_address = 'tcp://%s' % address
        options = {LINGER: int(timeout * 1000)}
        socket = set_up_client_socket(REQ, full_address, options)
        try:
            socket.send_string(data)
            while not self._shutdown_event.is_set():
                try:
                    message = socket.recv_string(NOBLOCK)
                except ZMQError:
                    self._shutdown_event.wait(0.1)
                    continue
                if message != 'ok':
                    logger.warning('invalid acknowledge received: %s' % message)
                break
        finally:
            close_socket(socket)

    def close(self):
        """"""Close the sender.""""""
        self._shutdown_event.set()","
class ZMQDesignatedReceiversSender:
    
    def __init__(self, default_port, receivers):
        
        pass
    def __call__(self, data):
        
        pass

    def _send_to_address(self, address, data, timeout=10):
        
        pass

    def close(self):
        
        pass",snippet_289,5,"```python
import zmq
import pickle

class ZMQDesignatedReceiversSender:
    
    def __init__(self, default_port, receivers):
        self.context = zmq.Context()
        self.default_port = default_port
        self.receivers = receivers
        self.sockets = {}
        for receiver in receivers:
            self.sockets[receiver] = self.context.socket(zmq.PUSH)
            self.sockets[receiver].connect(f""tcp://{receiver}:{default_port}"")

    def __call__(self, data):
        for receiver in self.receivers:
            self._send_to_address(receiver, data)

    def _send_to_address(self, address, data, timeout=10):
        if address not in self.sockets:
            raise ValueError(f""Unknown receiver: {address}"")
        try:
            self.sockets[address].send(pickle.dumps(data), zmq.NOBLOCK)
        except zmq.Again:
            # Handle timeout or retry logic if needed
            pass

    def close(self):
        for socket in self.sockets.values():
            socket.close()
        self.context.term()
```"
357237,pytroll/posttroll,posttroll/backends/zmq/ns.py,posttroll.backends.zmq.ns.ZMQNameServer,"from posttroll.backends.zmq.socket import SocketReceiver, close_socket, set_up_client_socket, set_up_server_socket
from contextlib import suppress
from zmq import LINGER, REP, REQ
from posttroll.ns import get_active_address, get_configured_nameserver_port

class ZMQNameServer:
    """"""The name server.""""""

    def __init__(self):
        """"""Set up the nameserver.""""""
        self.running: bool = True
        self.listener: SocketReceiver | None = None
        self._authenticator = None

    def run(self, address_receiver, address: str | None=None):
        """"""Run the listener and answer to requests.""""""
        port = get_configured_nameserver_port()
        try:
            if not self.running:
                return
            if address is None:
                address = '*'
            address = create_nameserver_address(address)
            self.listener, _, self._authenticator = set_up_server_socket(REP, address)
            logger.debug(f'Nameserver listening on port {port}')
            socket_receiver = SocketReceiver()
            socket_receiver.register(self.listener)
            while self.running:
                try:
                    for msg, _ in socket_receiver.receive(self.listener, timeout=1):
                        logger.debug('Replying to request: ' + str(msg))
                        active_address = get_active_address(msg.data['service'], address_receiver, msg.version)
                        self.listener.send_unicode(str(active_address))
                except TimeoutError:
                    continue
        except KeyboardInterrupt:
            pass
        finally:
            socket_receiver.unregister(self.listener)
            self.close_sockets_and_threads()

    def close_sockets_and_threads(self):
        """"""Close all sockets and threads.""""""
        with suppress(AttributeError):
            close_socket(self.listener)
        with suppress(AttributeError):
            self._authenticator.stop()

    def stop(self):
        """"""Stop the name server.""""""
        self.running = False","
class ZMQNameServer:
    
    def __init__(self):
        
        pass
    def run(self, address_receiver, address: str | None=None):
        
        pass

    def close_sockets_and_threads(self):
        
        pass

    def stop(self):
        
        pass",snippet_290,5,"```python
import zmq
import threading
import logging

class ZMQNameServer:
    
    def __init__(self):
        self.context = zmq.Context()
        self.registry = {}
        self.lock = threading.Lock()
        self.stopped = threading.Event()
        self.receiver_thread = None

    def run(self, address_receiver, address: str | None=None):
        self.receiver_socket = self.context.socket(zmq.REP)
        if address:
            self.receiver_socket.bind(address)
        else:
            self.receiver_socket.bind(address_receiver)
        
        self.receiver_thread = threading.Thread(target=self._receive_requests, args=(address_receiver,))
        self.receiver_thread.start()

    def _receive_requests(self, address_receiver):
        while not self.stopped.is_set():
            try:
                message = self.receiver_socket.recv_json(flags=zmq.NOBLOCK)
                response = self._handle_request(message)
                self.receiver_socket.send_json(response)
            except zmq.Again:
                self.stopped.wait(0.1)
            except Exception as e:
                logging.error(f""Error handling request: {e}"")

    def _handle_request(self, message):
        if message['type'] == 'register':
            with self.lock:
                self.registry[message['name']] = message['address']
            return {'status': 'ok'}
        elif message['type'] == 'lookup':
            with self.lock:
                address = self.registry.get(message['name'])
            if address:
                return {'status': 'ok', 'address': address}
            else:
                return {'status': 'not_found'}
        elif message['type'] == 'unregister':
            with self.lock:
                if message['name'] in self.registry:
                    del self.registry[message['name']]
            return {'status': 'ok'}
        else:
            return {'status': 'error', 'message': 'Unknown request type'}

    def close_sockets_and_threads(self):
        if self.receiver_socket:
            self.receiver_socket.close()
        if self.context:
            self.context.term()

    def stop(self):
        self.stopped.set()
        if self.receiver_thread:
            self.receiver_thread.join()
        self.close_sockets_and_threads()
```"
357239,pytroll/posttroll,posttroll/backends/zmq/socket.py,posttroll.backends.zmq.socket.SocketReceiver,"from posttroll.message import Message
import zmq

class SocketReceiver:
    """"""A receiver for mulitple sockets.""""""

    def __init__(self):
        """"""Set up the receiver.""""""
        self._poller = zmq.Poller()

    def register(self, socket):
        """"""Register the socket.""""""
        self._poller.register(socket, zmq.POLLIN)

    def unregister(self, socket):
        """"""Unregister the socket.""""""
        self._poller.unregister(socket)

    def receive(self, *sockets, timeout=None):
        """"""Timeout is in seconds.""""""
        if timeout:
            timeout *= 1000
        socks = dict(self._poller.poll(timeout=timeout))
        if socks:
            for sock in sockets:
                if socks.get(sock) == zmq.POLLIN:
                    received = sock.recv_string(zmq.NOBLOCK)
                    yield (Message.decode(received), sock)
        else:
            raise TimeoutError('Did not receive anything on sockets.')","
class SocketReceiver:
    
    def __init__(self):
        
        pass
    def register(self, socket):
        
        pass

    def unregister(self, socket):
        
        pass

    def receive(self, *sockets, timeout=None):
        
        pass",snippet_291,5,"```python
import select

class SocketReceiver:
    
    def __init__(self):
        self.sockets = set()

    def register(self, socket):
        self.sockets.add(socket)

    def unregister(self, socket):
        self.sockets.discard(socket)

    def receive(self, *sockets, timeout=None):
        if not sockets:
            sockets = self.sockets
        else:
            sockets = set(sockets) & self.sockets
        
        readable, _, _ = select.select(sockets, [], [], timeout)
        return readable
```"
357241,pytroll/posttroll,posttroll/bbmcast.py,posttroll.bbmcast.MulticastReceiver,"import struct
from socket import AF_INET, INADDR_ANY, IP_ADD_MEMBERSHIP, IP_MULTICAST_IF, IP_MULTICAST_LOOP, IP_MULTICAST_TTL, IPPROTO_IP, SO_BROADCAST, SO_LINGER, SO_REUSEADDR, SOCK_DGRAM, SOL_IP, SOL_SOCKET, gethostbyname, inet_aton, socket, timeout

class MulticastReceiver:
    """"""Multicast receiver on *port* for an *mcgroup*.""""""
    BUFSIZE = 1024

    def __init__(self, port, mcgroup=None):
        """"""Set up the multicast receiver.""""""
        self.port = port
        self.socket, self.group = mcast_receiver(port, mcgroup)
        logger.info(f'Receiver initialized on group {self.group}.')

    def settimeout(self, tout=None):
        """"""Set timeout.

        A timeout will throw a 'socket.timeout'.
        """"""
        self.socket.settimeout(tout)
        return self

    def __call__(self):
        """"""Receive data from a socket.""""""
        data, sender = self.socket.recvfrom(self.BUFSIZE)
        return (data.decode(), sender)

    def close(self):
        """"""Close the receiver.""""""
        self.socket.setsockopt(SOL_SOCKET, SO_LINGER, struct.pack('ii', 1, 1))
        self.socket.close()","
class MulticastReceiver:
    
    def __init__(self, port, mcgroup=None):
        
        pass
    def settimeout(self, tout=None):
        
        pass

    def __call__(self):
        
        pass

    def close(self):
        
        pass",snippet_292,5,"```python
import socket
import struct

class MulticastReceiver:
    
    def __init__(self, port, mcgroup=None):
        self.port = port
        self.mcgroup = mcgroup if mcgroup else '224.1.1.1'
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind(('', self.port))
        mreq = struct.pack(""4sl"", socket.inet_aton(self.mcgroup), socket.INADDR_ANY)
        self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

    def settimeout(self, tout=None):
        self.sock.settimeout(tout)

    def __call__(self):
        try:
            data, address = self.sock.recvfrom(1024)
            return data, address
        except socket.timeout:
            return None, None

    def close(self):
        self.sock.close()
```"
357242,pytroll/posttroll,posttroll/bbmcast.py,posttroll.bbmcast.MulticastSender,"class MulticastSender:
    """"""Multicast sender on *port* and *mcgroup*.""""""

    def __init__(self, port, mcgroup=None):
        """"""Set up the multicast sender.""""""
        self.port = port
        self.group = mcgroup
        self.socket, self.group = mcast_sender(mcgroup)
        logger.debug('Started multicast group %s', self.group)

    def __call__(self, data):
        """"""Send data to a socket.""""""
        self.socket.sendto(data.encode(), (self.group, self.port))

    def close(self):
        """"""Close the sender.""""""
        self.socket.close()","class MulticastSender:
    
    def __init__(self, port, mcgroup=None):
        
        pass
    def __call__(self, data):
        
        pass
    def close(self):
        
        pass",snippet_293,4,"```python
import socket
import struct

class MulticastSender:
    
    def __init__(self, port, mcgroup='224.1.1.1'):
        """"""
        Initialize a MulticastSender.

        Args:
            port (int): The port to send multicast data on.
            mcgroup (str, optional): The multicast group to send data to. Defaults to '224.1.1.1'.
        """"""
        self.port = port
        self.mcgroup = mcgroup
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)

    def __call__(self, data):
        """"""
        Send data to the multicast group.

        Args:
            data (bytes): The data to be sent.
        """"""
        self.sock.sendto(data, (self.mcgroup, self.port))

    def close(self):
        """"""
        Close the socket.
        """"""
        self.sock.close()

# Example usage:
if __name__ == ""__main__"":
    sender = MulticastSender(12345)
    sender(b'Hello, world!')
    sender.close()
```"
357244,pytroll/posttroll,posttroll/listener.py,posttroll.listener.ListenerContainer,"from threading import Thread
from queue import Queue
import logging

class ListenerContainer:
    """"""Container for a listener instance.""""""
    logger = logging.getLogger(__name__ + '.ListenerContainer')

    def __init__(self, topics=None, addresses=None, nameserver='localhost', services=''):
        """"""Initialize the class.""""""
        self.listener = None
        self.output_queue = None
        self.thread = None
        self.addresses = addresses
        self.nameserver = nameserver
        if topics is not None:
            self.output_queue = Queue()
            self.listener = Listener(topics=topics, queue=self.output_queue, addresses=self.addresses, nameserver=self.nameserver, services=services)
            self.thread = Thread(target=self.listener.run, daemon=True)
            self.thread.start()

    def __setstate__(self, state):
        """"""Re-initialize the class.""""""
        self.__init__(**state)

    def restart_listener(self, topics):
        """"""Restart listener after configuration update.""""""
        if self.listener is not None:
            if self.listener.running:
                self.stop()
        self.__init__(topics=topics)

    def stop(self):
        """"""Stop listener.""""""
        self.logger.debug('Stopping listener.')
        self.listener.stop()
        if self.thread is not None:
            self.thread.join()
            self.thread = None
        self.logger.debug('Listener stopped.')","
class ListenerContainer:
    
    def __init__(self, topics=None, addresses=None, nameserver='localhost', services=''):
        
        pass
    def __setstate__(self, state):
        
        pass

    def restart_listener(self, topics):
        
        pass

    def stop(self):
        
        pass",snippet_294,5,"```python
import rospy
from rospy.topics import Subscriber
import pickle

class ListenerContainer:
    
    def __init__(self, topics=None, addresses=None, nameserver='localhost', services=''):
        self.topics = topics if topics is not None else []
        self.addresses = addresses if addresses is not None else []
        self.nameserver = nameserver
        self.services = services
        self.subscribers = []
        self.initialize_listeners()

    def __setstate__(self, state):
        self.__dict__.update(state)
        self.initialize_listeners()

    def initialize_listeners(self):
        self.stop()
        for topic in self.topics:
            msg_type = rospy.get_published_topics(topic)
            if msg_type:
                msg_type = msg_type[0][1]
                self.subscribers.append(Subscriber(topic, msg_type, self.callback))

    def callback(self, msg):
        # You need to implement the callback function according to your needs
        # For demonstration purposes, it just prints the received message
        print(msg)

    def restart_listener(self, topics):
        self.topics = topics
        self.initialize_listeners()

    def stop(self):
        for sub in self.subscribers:
            sub.unregister()
        self.subscribers = []
```"
357253,pytroll/posttroll,posttroll/message_broadcaster.py,posttroll.message_broadcaster.DesignatedReceiversSender,"from posttroll import config, message

class DesignatedReceiversSender:
    """"""Sends message to multiple *receivers* on *port*.""""""

    def __init__(self, default_port, receivers):
        """"""Set settings.""""""
        backend = config.get('backend', 'unsecure_zmq')
        if backend == 'unsecure_zmq':
            from posttroll.backends.zmq.message_broadcaster import ZMQDesignatedReceiversSender
            self._sender = ZMQDesignatedReceiversSender(default_port, receivers)
        else:
            raise NotImplementedError()

    def __call__(self, data):
        """"""Send messages from all receivers.""""""
        return self._sender(data)

    def close(self):
        """"""Close the sender.""""""
        return self._sender.close()","
class DesignatedReceiversSender:
    
    def __init__(self, default_port, receivers):
        
        pass
    def __call__(self, data):
        
        pass

    def close(self):
        
        pass",snippet_295,4,"```python
import socket

class DesignatedReceiversSender:
    
    def __init__(self, default_port, receivers):
        self.default_port = default_port
        self.receivers = receivers
        self.sockets = {}
        for receiver in receivers:
            self.sockets[receiver] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    def __call__(self, data):
        for receiver, sock in self.sockets.items():
            try:
                sock.sendto(data, (receiver, self.default_port))
            except Exception as e:
                print(f""Error sending data to {receiver}: {e}"")

    def close(self):
        for sock in self.sockets.values():
            sock.close()
        self.sockets = {}
```"
357255,pytroll/posttroll,posttroll/ns.py,posttroll.ns.NameServer,"from posttroll.address_receiver import AddressReceiver
import datetime as dt
from posttroll import config
from contextlib import suppress

class NameServer:
    """"""The name server.""""""

    def __init__(self, max_age=None, multicast_enabled=True, restrict_to_localhost=False):
        """"""Initialize nameserver.""""""
        self.loop = True
        self.listener = None
        self._max_age = max_age or dt.timedelta(minutes=10)
        self._multicast_enabled = multicast_enabled
        self._restrict_to_localhost = restrict_to_localhost
        backend = config['backend']
        if backend not in ['unsecure_zmq', 'secure_zmq']:
            raise NotImplementedError(f'Did not recognize backend: {backend}')
        from posttroll.backends.zmq.ns import ZMQNameServer
        self._ns = ZMQNameServer()

    def run(self, address_receiver=None, nameserver_address=None):
        """"""Run the listener and answer to requests.""""""
        if address_receiver is None:
            address_receiver = AddressReceiver(max_age=self._max_age, multicast_enabled=self._multicast_enabled, restrict_to_localhost=self._restrict_to_localhost)
            address_receiver.start()
        try:
            return self._ns.run(address_receiver, nameserver_address)
        finally:
            with suppress(AttributeError):
                address_receiver.stop()

    def stop(self):
        """"""Stop the nameserver.""""""
        return self._ns.stop()","
class NameServer:
    
    def __init__(self, max_age=None, multicast_enabled=True, restrict_to_localhost=False):
        
        pass
    def run(self, address_receiver=None, nameserver_address=None):
        
        pass

    def stop(self):
        
        pass",snippet_296,4,"```python
import socket
import threading
import time

class NameServer:
    
    def __init__(self, max_age=None, multicast_enabled=True, restrict_to_localhost=False):
        self.max_age = max_age
        self.multicast_enabled = multicast_enabled
        self.restrict_to_localhost = restrict_to_localhost
        self.server_socket = None
        self.names = {}
        self.lock = threading.Lock()
        self.stopped = threading.Event()

    def run(self, address_receiver=None, nameserver_address=None):
        if nameserver_address is None:
            nameserver_address = ('', 0) if self.restrict_to_localhost else ('', 9090)
        
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.server_socket.bind(nameserver_address)
        
        if self.multicast_enabled:
            multicast_address = ('224.0.0.1', nameserver_address[1])
            self.server_socket.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 1)
            self.server_socket.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, 
                                          socket.inet_aton(multicast_address[0]) + socket.inet_aton('0.0.0.0'))
        
        threading.Thread(target=self._listen_for_requests).start()
        if address_receiver is not None:
            address_receiver(self.server_socket.getsockname())

    def stop(self):
        self.stopped.set()
        if self.server_socket is not None:
            self.server_socket.close()

    def _listen_for_requests(self):
        while not self.stopped.is_set():
            try:
                data, address = self.server_socket.recvfrom(1024)
                request = data.decode().split()
                if request[0] == 'register':
                    self._register(request[1], address)
                elif request[0] == 'lookup':
                    self._lookup(request[1], address)
                elif request[0] == 'unregister':
                    self._unregister(request[1])
            except socket.error:
                if not self.stopped.is_set():
                    raise

    def _register(self, name, address):
        with self.lock:
            self.names[name] = (address, time.time())
        self.server_socket.sendto(f'registered {name}'.encode(), address)

    def _lookup(self, name, address):
        with self.lock:
            if name in self.names:
                registered_address, _ = self.names[name]
                self.server_socket.sendto(f'{registered_address[0]} {registered_address[1]}'.encode(), address)
            else:
                self.server_socket.sendto('not found'.encode(), address)

    def _unregister(self, name):
        with self.lock:
            if name in self.names:
                del self.names[name]
```"
357257,pytroll/posttroll,posttroll/publisher.py,posttroll.publisher.Publish,"class Publish:
    """"""The publishing context.

    See :class:`Publisher` and :class:`NoisyPublisher` for more information on the arguments.

    The publisher is selected based on the arguments, see :func:`create_publisher_from_dict_config` for
    information how the selection is done.

    Example on how to use the :class:`Publish` context::

            from posttroll.publisher import Publish
            from posttroll.message import Message
            import time

            try:
                with Publish(""my_service"", port=9000) as pub:
                    counter = 0
                    while True:
                        counter += 1
                        message = Message(""/counter"", ""info"", str(counter))
                        print(""publishing"", message)
                        pub.send(message.encode())
                        time.sleep(3)
            except KeyboardInterrupt:
                print(""terminating publisher..."")

    """"""

    def __init__(self, name, port=0, aliases=None, broadcast_interval=2, nameservers=None, min_port=None, max_port=None):
        """"""Initialize the class.""""""
        settings = {'name': name, 'port': port, 'min_port': min_port, 'max_port': max_port, 'aliases': aliases, 'broadcast_interval': broadcast_interval, 'nameservers': nameservers}
        self.publisher = create_publisher_from_dict_config(settings)

    def __enter__(self):
        """"""Enter the context.""""""
        return self.publisher.start()

    def __exit__(self, exc_type, exc_val, exc_tb):
        """"""Exit the context.""""""
        self.publisher.stop()","class Publish:
    '''The publishing context.
    See :class:`Publisher` and :class:`NoisyPublisher` for more information on the arguments.
    The publisher is selected based on the arguments, see :func:`create_publisher_from_dict_config` for
    information how the selection is done.
    Example on how to use the :class:`Publish` context::
            from posttroll.publisher import Publish
            from posttroll.message import Message
            import time
            try:
                with Publish(""my_service"", port=9000) as pub:
                    counter = 0
                    while True:
                        counter += 1
                        message = Message(""/counter"", ""info"", str(counter))
                        print(""publishing"", message)
                        pub.send(message.encode())
                        time.sleep(3)
            except KeyboardInterrupt:
                print(""terminating publisher..."")
    '''
    def __init__(self, name, port=0, aliases=None, broadcast_interval=2, nameservers=None, min_port=None, max_port=None):
        
        pass

    def __enter__(self):
        
        pass

    def __exit__(self, exc_type, exc_val, exc_tb):
        
        pass",snippet_297,4,"```python
import posttroll.publisher as publisher

class Publish:
    '''The publishing context.
    See :class:`Publisher` and :class:`NoisyPublisher` for more information on the arguments.
    The publisher is selected based on the arguments, see :func:`create_publisher_from_dict_config` for
    information how the selection is done.
    Example on how to use the :class:`Publish` context::
            from posttroll.publisher import Publish
            from posttroll.message import Message
            import time
            try:
                with Publish(""my_service"", port=9000) as pub:
                    counter = 0
                    while True:
                        counter += 1
                        message = Message(""/counter"", ""info"", str(counter))
                        print(""publishing"", message)
                        pub.send(message.encode())
                        time.sleep(3)
            except KeyboardInterrupt:
                print(""terminating publisher..."")
    '''
    def __init__(self, name, port=0, aliases=None, broadcast_interval=2, nameservers=None, min_port=None, max_port=None):
        self.name = name
        self.port = port
        self.aliases = aliases
        self.broadcast_interval = broadcast_interval
        self.nameservers = nameservers
        self.min_port = min_port
        self.max_port = max_port
        self.publisher = None

    def __enter__(self):
        self.publisher = publisher.create_publisher_from_dict_config({
            'name': self.name,
            'port': self.port,
            'aliases': self.aliases,
            'broadcast_interval': self.broadcast_interval,
            'nameservers': self.nameservers,
            'min_port': self.min_port,
            'max_port': self.max_port
        })
        return self.publisher

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.publisher is not None:
            self.publisher.stop()
```"
357261,pytroll/posttroll,posttroll/subscriber.py,posttroll.subscriber.Subscribe,"from posttroll.message import _MAGICK

class Subscribe:
    """"""Subscriber context.

    See :class:`NSSubscriber` and :class:`Subscriber` for initialization parameters.

    The subscriber is selected based on the arguments, see :func:`create_subscriber_from_dict_config` for
    information how the selection is done.

    Example::
            del tmp

        from posttroll.subscriber import Subscribe

        with Subscribe(""a_service"", ""my_topic"",) as sub:
            for msg in sub.recv():
                print(msg)

    """"""

    def __init__(self, services='', topics=_MAGICK, addr_listener=False, addresses=None, timeout=10, translate=False, nameserver='localhost', message_filter=None):
        """"""Initialize the class.""""""
        settings = {'services': services, 'topics': topics, 'message_filter': message_filter, 'translate': translate, 'addr_listener': addr_listener, 'addresses': addresses, 'timeout': timeout, 'nameserver': nameserver}
        self.subscriber = create_subscriber_from_dict_config(settings)

    def __enter__(self):
        """"""Start the subscriber when used as a context manager.""""""
        return self.subscriber

    def __exit__(self, exc_type, exc_val, exc_tb):
        """"""Stop the subscriber when used as a context manager.""""""
        return self.subscriber.stop()","
class Subscribe:
    
    def __init__(self, services='', topics=_MAGICK, addr_listener=False, addresses=None, timeout=10, translate=False, nameserver='localhost', message_filter=None):
        
        pass
    def __enter__(self):
        
        pass

    def __exit__(self, exc_type, exc_val, exc_tb):
        
        pass",snippet_298,4,"```python
import zmq
import time

# Assuming _MAGICK is a predefined constant or variable
_MAGICK = b''  # Replace with actual value

class Subscribe:
    
    def __init__(self, services='', topics=_MAGICK, addr_listener=False, addresses=None, timeout=10, translate=False, nameserver='localhost', message_filter=None):
        self.context = zmq.Context()
        self.services = services.split(',')
        self.topics = topics
        self.addr_listener = addr_listener
        self.addresses = addresses if addresses else []
        self.timeout = timeout
        self.translate = translate
        self.nameserver = nameserver
        self.message_filter = message_filter
        self.socket = None

    def __enter__(self):
        self.socket = self.context.socket(zmq.SUB)
        if self.addr_listener:
            for address in self.addresses:
                self.socket.connect(address)
        else:
            # Assuming a nameserver is used to get the addresses
            # Replace with actual implementation to get addresses from nameserver
            addresses = self.get_addresses_from_nameserver()
            for address in addresses:
                self.socket.connect(address)
        
        if isinstance(self.topics, list):
            for topic in self.topics:
                self.socket.setsockopt(zmq.SUBSCRIBE, topic)
        else:
            self.socket.setsockopt(zmq.SUBSCRIBE, self.topics)
        
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.socket:
            self.socket.close()
        self.context.term()

    def get_addresses_from_nameserver(self):
        # Replace with actual implementation to get addresses from nameserver
        # For demonstration purposes, assume it returns a list of addresses
        return ['tcp://localhost:5555']  # Replace with actual addresses

    def receive(self):
        if self.socket:
            try:
                message = self.socket.recv(timeout=self.timeout*1000)
                if self.message_filter:
                    return self.message_filter(message)
                return message
            except zmq.Again:
                return None
        return None

# Example usage:
if __name__ == ""__main__"":
    with Subscribe(services='service1', topics=b'topic1', addr_listener=True, addresses=['tcp://localhost:5555']) as subscriber:
        while True:
            message = subscriber.receive()
            if message:
                print(message)
            else:
                print(""No message received"")
                break
            time.sleep(1)
```"
357263,pytroll/posttroll,posttroll/subscriber.py,posttroll.subscriber._AddressListener,"from posttroll.address_receiver import get_configured_address_port

class _AddressListener:
    """"""Listener for new addresses of interest.""""""

    def __init__(self, subscriber, services='', nameserver='localhost'):
        """"""Initialize address listener.""""""
        if isinstance(services, str):
            services = [services]
        self.services = services
        self.subscriber = subscriber
        address_publish_port = get_configured_address_port()
        self.subscriber.add_hook_sub('tcp://' + nameserver + ':' + str(address_publish_port), ['pytroll://address'], self.handle_msg)

    def handle_msg(self, msg):
        """"""Handle the message *msg*.""""""
        addr_ = msg.data['URI']
        status = msg.data.get('status', True)
        if status:
            msg_services = msg.data.get('service')
            for service in self.services:
                if not service or service in msg_services:
                    LOGGER.debug('Adding address %s %s', str(addr_), str(service))
                    self.subscriber.add(addr_)
                    break
        else:
            LOGGER.debug('Removing address %s', str(addr_))
            self.subscriber.remove(addr_)","
class _AddressListener:
    
    def __init__(self, subscriber, services='', nameserver='localhost'):
        
        pass
    def handle_msg(self, msg):
        
        pass",snippet_299,3,"```python
import socket
import threading

class _AddressListener:
    
    def __init__(self, subscriber, services='', nameserver='localhost'):
        self.subscriber = subscriber
        self.services = services.split(',')
        self.nameserver = nameserver
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind(('0.0.0.0', 7401))
        self.multicast_group = '224.0.0.1'
        self.multicast_port = 7400
        self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)
        self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_IF, socket.inet_aton('0.0.0.0'))
        self.listener_thread = threading.Thread(target=self.listen)
        self.listener_thread.daemon = True
        self.listener_thread.start()

    def listen(self):
        while True:
            data, address = self.sock.recvfrom(1024)
            self.handle_msg(data.decode('utf-8'))

    def handle_msg(self, msg):
        parts = msg.split(',')
        if len(parts) < 3:
            return
        service = parts[0]
        if service in self.services or not self.services:
            self.subscriber(service, parts[1], int(parts[2]))
```"
360979,reanahub/reana-commons,reanahub_reana-commons/reana_commons/validation/compute_backends.py,reana_commons.validation.compute_backends.ComputeBackendValidatorBase,"from typing import Dict, List, Optional
from reana_commons.errors import REANAValidationError

class ComputeBackendValidatorBase:
    """"""REANA workflow compute backend validation base class.""""""

    def __init__(self, workflow_steps: Optional[List[Dict]]=None, supported_backends: Optional[List[str]]=[]):
        """"""Validate compute backends in REANA workflow steps.

        :param workflow_steps: list of dictionaries which represents different steps involved in workflow.
        :param supported_backends: a list of the supported compute backends.
        """"""
        self.workflow_steps = workflow_steps
        self.supported_backends = supported_backends

    def validate(self) -> None:
        """"""Validate compute backends in REANA workflow.""""""
        raise NotImplementedError

    def raise_error(self, compute_backend: str, step_name: str) -> None:
        """"""Raise validation error.""""""
        raise REANAValidationError(f'''Compute backend ""{compute_backend}"" found in step ""{step_name}"" is not supported. List of supported compute backends: ""{', '.join(self.supported_backends)}""''')","
class ComputeBackendValidatorBase:
    
    def __init__(self, workflow_steps: Optional[List[Dict]]=None, supported_backends: Optional[List[str]]=[]):
        
        pass
    def validate(self) -> None:
        
        pass

    def raise_error(self, compute_backend: str, step_name: str) -> None:
        
        pass",snippet_300,4,"```python
from typing import Optional, List, Dict

class ComputeBackendValidatorBase:
    
    def __init__(self, workflow_steps: Optional[List[Dict]]=None, supported_backends: Optional[List[str]]=[]):
        self.workflow_steps = workflow_steps if workflow_steps is not None else []
        self.supported_backends = supported_backends if supported_backends is not None else []

    def validate(self) -> None:
        for step in self.workflow_steps:
            compute_backend = step.get('compute_backend')
            step_name = step.get('name')
            if compute_backend not in self.supported_backends:
                self.raise_error(compute_backend, step_name)

    def raise_error(self, compute_backend: str, step_name: str) -> None:
        raise ValueError(f""Unsupported compute backend '{compute_backend}' for step '{step_name}'. Supported backends are: {', '.join(self.supported_backends)}"")
```"
361134,raymondEhlers/pachyderm,raymondEhlers_pachyderm/src/pachyderm/fit/base.py,pachyderm.fit.base.BaseFitResult,"import numpy as np
import numpy.typing as npt
from dataclasses import dataclass
from typing import TYPE_CHECKING, Any, TypeVar, cast

@dataclass
class BaseFitResult:
    """"""Base fit result.

    This represents the most basic fit result.

    Attributes:
        parameters: Names of the parameters used in the fit.
        free_parameters: Names of the free parameters used in the fit.
        fixed_parameters: Names of the fixed parameters used in the fit.
        values_at_minimum: Contains the values of the full RP fit function at the minimum. Keys are the
            names of parameters, while values are the numerical values at convergence.
        errors_on_parameters: Contains the values of the errors associated with the parameters
            determined via the fit.
        covariance_matrix: Contains the values of the covariance matrix. Keys are tuples
            with (param_name_a, param_name_b), and the values are covariance between the specified parameters.
            Note that fixed parameters are _not_ included in this matrix.
        errors: Store the errors associated with the component fit function.
    """"""
    parameters: list[str]
    free_parameters: list[str]
    fixed_parameters: list[str]
    values_at_minimum: dict[str, float]
    errors_on_parameters: dict[str, float]
    covariance_matrix: dict[tuple[str, str], float]
    errors: npt.NDArray[Any]

    @property
    def correlation_matrix(self) -> dict[tuple[str, str], float]:
        """"""The correlation matrix of the free parameters.

        These values are derived from the covariance matrix values stored in the fit.

        Note:
            This property caches the correlation matrix value so we don't have to calculate it every time.

        Args:
            None
        Returns:
            The correlation matrix of the fit result.
        """"""
        try:
            return self._correlation_matrix
        except AttributeError:

            def corr(i_name: str, j_name: str) -> float:
                """"""Calculate the correlation matrix (definition from iminuit) from the covariance matrix.""""""
                value = self.covariance_matrix[i_name, j_name] / (np.sqrt(self.covariance_matrix[i_name, i_name] * self.covariance_matrix[j_name, j_name]) + 1e-100)
                return float(value)
            matrix: dict[tuple[str, str], float] = {}
            for i_name in self.free_parameters:
                for j_name in self.free_parameters:
                    matrix[i_name, j_name] = corr(i_name, j_name)
            self._correlation_matrix = matrix
        return self._correlation_matrix","@dataclass
class BaseFitResult:
    
    @property
    def correlation_matrix(self) -> dict[tuple[str, str], float]:
        
        pass
    def correlation_matrix(self) -> dict[tuple[str, str], float]:
        
        pass",snippet_301,3,"```python
from dataclasses import dataclass
from typing import Dict, Tuple

@dataclass
class BaseFitResult:
    _correlation_matrix: Dict[Tuple[str, str], float] = None

    @property
    def correlation_matrix(self) -> Dict[Tuple[str, str], float]:
        return self._correlation_matrix

    @correlation_matrix.setter
    def correlation_matrix(self, value: Dict[Tuple[str, str], float]) -> None:
        self._correlation_matrix = value
```"
361458,AtteqCom/zsl,AtteqCom_zsl/src/zsl/errors.py,zsl.errors.ErrorHandler,"from abc import ABCMeta, abstractmethod

class ErrorHandler:
    """"""
    Custom error handler providing a response on a particular error.
    """"""
    __metaclass__ = ABCMeta

    @abstractmethod
    def can_handle(self, e):
        """"""
        Indicator if the handler is able to handle the given exception `e`.

        :param e: The exception that shall be determined if can be handled by the handler.
        :return: `True` or `False` depending on whether the handler can/should handle the method.
        """"""
        pass

    @abstractmethod
    def handle(self, e):
        """"""
        Handle the exception.

        :param e: The handled exception.
        :return: The error response for the exception.
        """"""
        pass","
class ErrorHandler:
    
    @abstractmethod
    def can_handle(self, e):
        
        pass
    @abstractmethod
    def handle(self, e):
        
        pass",snippet_302,3,"```python
from abc import ABC, abstractmethod

class ErrorHandler(ABC):
    
    @abstractmethod
    def can_handle(self, e):
        pass
    
    @abstractmethod
    def handle(self, e):
        pass

class ConcreteErrorHandler(ErrorHandler):
    def __init__(self, error_type):
        """"""
        Initialize the ConcreteErrorHandler with a specific error type.

        Args:
        error_type (type): The type of error this handler can handle.
        """"""
        self.error_type = error_type

    def can_handle(self, e):
        """"""
        Check if the given exception is of the type this handler is designed for.

        Args:
        e (Exception): The exception to check.

        Returns:
        bool: True if the exception is of the correct type, False otherwise.
        """"""
        return isinstance(e, self.error_type)

    def handle(self, e):
        """"""
        Handle the given exception.

        Args:
        e (Exception): The exception to handle.

        Raises:
        TypeError: If the exception is not of the type this handler is designed for.
        """"""
        if not self.can_handle(e):
            raise TypeError(""This handler cannot handle this type of exception"")
        # Implement your error handling logic here
        print(f""Handling {type(e).__name__}: {str(e)}"")

# Example usage
if __name__ == ""__main__"":
    try:
        # Simulate an error
        raise ValueError(""Invalid value"")
    except Exception as e:
        # Create a handler for ValueError
        handler = ConcreteErrorHandler(ValueError)
        if handler.can_handle(e):
            handler.handle(e)
        else:
            print(""No handler available for this type of exception"")
```"
361483,AtteqCom/zsl,AtteqCom_zsl/src/zsl/resource/model_resource.py,zsl.resource.model_resource.ReadOnlyResourceMixin,"class ReadOnlyResourceMixin:
    """"""
    The mixin to be used to forbid the update/delete and create operations.
    Remember the Python's MRO and place this mixin at the right place in the inheritance declaration.

    .. automethod:: create
    .. automethod:: update
    .. automethod:: delete
    """"""
    OPERATION_CREATE = 'create'
    OPERATION_UPDATE = 'update'
    OPERATION_DELETE = 'delete'

    @staticmethod
    def create(params, args, data):
        """"""Raises exception.

        Just raises ReadOnlyResourceUpdateOperationException to indicate
        that this method is not available.

        :raises ReadOnlyResourceUpdateOperationException: when accessed
        """"""
        raise ReadOnlyResourceUpdateOperationException(ReadOnlyResourceMixin.OPERATION_CREATE)

    @staticmethod
    def update(params, args, data):
        """"""Raises exception.

        Just raises ReadOnlyResourceUpdateOperationException to indicate
        that this method is not available.

        :raises ReadOnlyResourceUpdateOperationException: when accessed
        """"""
        raise ReadOnlyResourceUpdateOperationException(ReadOnlyResourceMixin.OPERATION_UPDATE)

    @staticmethod
    def delete(params, args, data):
        """"""Raises exception.

        Just raises ReadOnlyResourceUpdateOperationException to indicate
        that this method is not available.

        :raises ReadOnlyResourceUpdateOperationException: when accessed
        """"""
        raise ReadOnlyResourceUpdateOperationException(ReadOnlyResourceMixin.OPERATION_DELETE)","class ReadOnlyResourceMixin:
    
    @staticmethod
    def create(params, args, data):
        
        pass
    @staticmethod
    def update(params, args, data):
        
        pass
    @staticmethod
    def delete(params, args, data):
        
        pass",snippet_303,4,"```python
class ReadOnlyResourceMixin:
    
    @staticmethod
    def create(params, args, data):
        raise NotImplementedError(""Create operation is not supported for this resource"")

    @staticmethod
    def update(params, args, data):
        raise NotImplementedError(""Update operation is not supported for this resource"")

    @staticmethod
    def delete(params, args, data):
        raise NotImplementedError(""Delete operation is not supported for this resource"")
```"
361534,AtteqCom/zsl,AtteqCom_zsl/src/zsl/utils/command_dispatcher.py,zsl.utils.command_dispatcher.CommandDispatcher,"import inspect

class CommandDispatcher:
    """"""
    A simple class for command dictionary. A command is a function
    which can take named parameters.
    """"""

    def __init__(self):
        """"""
        Create command dictionary
        """"""
        self.commands = {}

    def command(self, fn):
        """"""
        Add method or function to dispatcher. Can be use as a nice
        decorator.

        :param fn: function or method
        :type fn: function
        :return: the same function
        :rtype: function
        """"""
        self.commands[fn.__name__] = fn
        return fn
    'alias for ``CommandDispatcher.command``'
    add_function = command

    def execute_command(self, command, args=None):
        """"""
        Execute a command

        :param command: name of the command
        :type command: str
        :param args: optional named arguments for command
        :type args: dict
        :return: the result of command
        :raises KeyError: if command is not found
        """"""
        if args is None:
            args = {}
        command_fn = self.commands[command]
        return command_fn(**args)

    def bound(self, instance):
        """"""
        Return a new dispatcher, which will switch all command functions
        with bounded methods of given instance matched by name. It will
        match only regular methods.

        :param instance: object instance
        :type instance: object
        :return: new Dispatcher
        :rtype: CommandDispatcher
        """"""
        bounded_dispatcher = CommandDispatcher()
        bounded_dispatcher.commands = self.commands.copy()
        for name in self.commands:
            method = getattr(instance, name, None)
            if method and inspect.ismethod(method) and (method.__self__ == instance):
                bounded_dispatcher.commands[name] = method
        return bounded_dispatcher","
class CommandDispatcher:
    
    def __init__(self):
        
        pass
    def command(self, fn):
        
        pass

    def execute_command(self, command, args=None):
        
        pass

    def bound(self, instance):
        
        pass",snippet_304,5,"```python
class CommandDispatcher:
    
    def __init__(self):
        self.commands = {}

    def command(self, fn):
        self.commands[fn.__name__] = fn
        return fn

    def execute_command(self, command, args=None):
        if command not in self.commands:
            raise ValueError(f""Unknown command: {command}"")
        
        if args is None:
            args = ()
        
        return self.commands[command](*args)

    def bound(self, instance):
        bound_dispatcher = CommandDispatcher()
        bound_dispatcher.commands = {name: fn.__get__(instance) for name, fn in self.commands.items()}
        return bound_dispatcher
```"
362561,reanahub/reana-db,reanahub_reana-db/reana_db/models.py,reana_db.models.QuotaBase,"class QuotaBase:
    """"""Quota base functionality.""""""

    def _get_quota_by_type(self, resource_type):
        """"""Aggregate quota usage by resource type.""""""

        def _get_health_status(usage, limit):
            """"""Calculate quota health status.""""""
            health = QuotaHealth.healthy
            if limit:
                percentage = usage / limit * 100
                if percentage >= 80:
                    if percentage >= 100:
                        health = QuotaHealth.critical
                    else:
                        health = QuotaHealth.warning
            return health.name
        quota_usage = 0
        quota_limit = 0
        unit = None
        for resource in self.resources:
            if resource.resource.type_ == resource_type:
                if unit and unit != resource.resource.unit:
                    raise Exception('Error while calculating quota usage. Not all resources of resource type {} use the same units.'.format(resource_type))
                unit = resource.resource.unit
                quota_usage += resource.quota_used
                if hasattr(resource, 'quota_limit'):
                    quota_limit += resource.quota_limit
        usage_dict = {'usage': {'raw': quota_usage, 'human_readable': ResourceUnit.human_readable_unit(unit, quota_usage)}}
        if quota_limit:
            usage_dict['limit'] = {'raw': quota_limit, 'human_readable': ResourceUnit.human_readable_unit(unit, quota_limit)}
            usage_dict['health'] = _get_health_status(quota_usage, quota_limit)
        return usage_dict

    def get_quota_usage(self):
        """"""Get quota usage information.""""""
        used_resource_types = set((res.resource.type_ for res in self.resources))
        return {resource_type.name: self._get_quota_by_type(resource_type) for resource_type in used_resource_types}","class QuotaBase:
    
    def _get_quota_by_type(self, resource_type):
        
        pass
        def _get_health_status(usage, limit):
                
                pass
    def get_quota_usage(self):
        
        pass",snippet_305,4,"```python
class QuotaBase:
    
    def _get_quota_by_type(self, resource_type):
        # Assuming a dictionary that maps resource types to their respective quotas
        quotas = {
            'storage': {'limit': 100, 'usage': 50},
            'compute': {'limit': 1000, 'usage': 500},
            'network': {'limit': 500, 'usage': 200}
        }
        
        quota = quotas.get(resource_type)
        if quota is None:
            raise ValueError(f""Unknown resource type: {resource_type}"")
        
        usage = quota['usage']
        limit = quota['limit']
        
        def _get_health_status(usage, limit):
            if limit == 0:
                return 'N/A'
            elif usage / limit < 0.5:
                return 'Healthy'
            elif usage / limit < 0.8:
                return 'Warning'
            else:
                return 'Critical'
        
        health_status = _get_health_status(usage, limit)
        return {'usage': usage, 'limit': limit, 'health_status': health_status}
    
    def get_quota_usage(self):
        resource_types = ['storage', 'compute', 'network']
        quota_usages = {}
        
        for resource_type in resource_types:
            quota_usage = self._get_quota_by_type(resource_type)
            quota_usages[resource_type] = quota_usage
        
        return quota_usages

# Example usage:
if __name__ == ""__main__"":
    quota_base = QuotaBase()
    quota_usages = quota_base.get_quota_usage()
    for resource_type, quota_usage in quota_usages.items():
        print(f""Resource Type: {resource_type}"")
        print(f""Usage: {quota_usage['usage']}"")
        print(f""Limit: {quota_usage['limit']}"")
        print(f""Health Status: {quota_usage['health_status']}"")
        print(""-"" * 20)
```"
