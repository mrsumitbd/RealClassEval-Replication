import pdfminer.psparser
import pdfminer.pdfinterp
from pathlib import Path
import pdfminer
from ocrmypdf.exceptions import EncryptedPdfError, InputFileError
import pdfminer.encodingdb
from pdfminer.layout import LAParams, LTChar, LTPage, LTTextBox
import pdfminer.pdfdevice
from pdfminer.pdfpage import PDFPage

class PdfMinerState:
    """Provide a context manager for using pdfminer.six.

    This ensures that the file is closed. It also provides a cache of pages
    from the PDF so that they can be reused if needed, to improve performance.
    """

    def __init__(self, infile: Path, pscript5_mode: bool) -> None:
        """Initialize the context manager.

        Args:
            infile: The path to the PDF file to be analyzed.
            pscript5_mode: Whether the PDF was generated by PScript5.dll.
        """
        self.infile = infile
        self.rman = pdfminer.pdfinterp.PDFResourceManager(caching=True)
        self.disable_boxes_flow = None
        self.page_iter = None
        self.page_cache: list[PDFPage] = []
        self.pscript5_mode = pscript5_mode
        self.file = None

    def __enter__(self):
        """Enter the context manager."""
        self.file = Path(self.infile).open('rb')
        self.page_iter = PDFPage.get_pages(self.file)
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        """Exit the context manager."""
        if self.file:
            self.file.close()
        return True

    def get_page_analysis(self, pageno: int):
        """Get the page analysis for a given page."""
        while len(self.page_cache) <= pageno:
            try:
                self.page_cache.append(next(self.page_iter))
            except StopIteration:
                raise InputFileError(f'pdfminer did not find page {pageno} in the input file.')
        page = self.page_cache[pageno]
        if not page:
            raise InputFileError(f'pdfminer could not process page {pageno} (counting from 0).')
        dev = TextPositionTracker(self.rman, laparams=LAParams(all_texts=True, detect_vertical=True, boxes_flow=self.disable_boxes_flow))
        interp = pdfminer.pdfinterp.PDFPageInterpreter(self.rman, dev)
        with patch_pdfminer(self.pscript5_mode):
            interp.process_page(page)
        return dev.get_result()