from typing import TYPE_CHECKING, Final

class Stats:
    """
    Encapsulates the 'Statistics' emitted by Lavalink, usually every minute.

    Attributes
    ----------
    is_fake: :class:`bool`
        Whether or not the stats are accurate. This should only be True when
        the node has not yet received any statistics from the Lavalink server.
    uptime: :class:`int`
        How long the node has been running for, in milliseconds.
    players: :class:`int`
        The number of players connected to the node.
    playing_players: :class:`int`
        The number of players that are playing in the node.
    memory_free: :class:`int`
        The amount of memory free to the node, in bytes.
    memory_used: :class:`int`
        The amount of memory that is used by the node, in bytes.
    memory_allocated: :class:`int`
        The amount of memory allocated to the node, in bytes.
    memory_reservable: :class:`int`
        The amount of memory reservable to the node, in bytes.
    cpu_cores: :class:`int`
        The amount of cpu cores the system of the node has.
    system_load: :class:`float`
        The overall CPU load of the system. This is a number between 0-1,
        but can be multiplied by 100 for the percentage (0-100).
    lavalink_load: :class:`float`
        The CPU load generated by Lavalink This is a number between 0-1,
        but can be multiplied by 100 for the percentage (0-100).
    frames_sent: :class:`int`
        The number of frames sent to Discord.

        Warning
        -------
        Given that audio packets are sent via UDP, this number may not be 100% accurate due to packets dropped in transit.
    frames_nulled: :class:`int`
        The number of frames that yielded null, rather than actual data.
    frames_deficit: :class:`int`
        The number of missing frames. Lavalink generates this figure by calculating how many packets to expect
        per minute, and deducting ``frames_sent``. Deficit frames could mean the CPU is overloaded, and isn't
        generating frames as quickly as it should be.
    penalty: :class:`Penalty`
    """
    __slots__ = ('_node', 'is_fake', 'uptime', 'players', 'playing_players', 'memory_free', 'memory_used', 'memory_allocated', 'memory_reservable', 'cpu_cores', 'system_load', 'lavalink_load', 'frames_sent', 'frames_nulled', 'frames_deficit', 'penalty')

    def __init__(self, node, data):
        self._node: Final['Node'] = node
        self.is_fake: Final[bool] = data.get('isFake', False)
        self.uptime: Final[int] = data['uptime']
        self.players: Final[int] = data['players']
        self.playing_players: Final[int] = data['playingPlayers']
        memory = data['memory']
        self.memory_free: Final[int] = memory['free']
        self.memory_used: Final[int] = memory['used']
        self.memory_allocated: Final[int] = memory['allocated']
        self.memory_reservable: Final[int] = memory['reservable']
        cpu = data['cpu']
        self.cpu_cores: Final[int] = cpu['cores']
        self.system_load: Final[float] = cpu['systemLoad']
        self.lavalink_load: Final[float] = cpu['lavalinkLoad']
        frame_stats = data.get('frameStats') or {}
        self.frames_sent: Final[int] = frame_stats.get('sent', 0)
        self.frames_nulled: Final[int] = frame_stats.get('nulled', 0)
        self.frames_deficit: Final[int] = frame_stats.get('deficit', 0)
        self.penalty: Final[Penalty] = Penalty(self)

    @classmethod
    def empty(cls, node):
        data = {'isFake': True, 'uptime': 0, 'players': 0, 'playingPlayers': 0, 'memory': {'free': 0, 'used': 0, 'allocated': 0, 'reservable': 0}, 'cpu': {'cores': 0, 'systemLoad': 0, 'lavalinkLoad': 0}}
        return cls(node, data)