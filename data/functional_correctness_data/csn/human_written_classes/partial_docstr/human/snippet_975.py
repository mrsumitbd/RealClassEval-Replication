import pandas as pd
import pathlib
import re
import sys

class PandasDFReader:
    """ A base class to read a Pandas dataframe generated by the HAP harvester.
    """

    def __init__(self, harvester_filename, log_level):
        log.setLevel(log_level)
        self.log_level = log_level
        path = pathlib.Path(harvester_filename)
        if not path.is_file():
            raise ValueError('Pandas dataframe file {} does not exist.')
        self.harvester_filename = harvester_filename
        self.dataframe = pd.DataFrame()
        self.header_cols = []
        self.gen_info_cols = []

    def get_columns_CSV(self, column_names):
        """ Method to do the actual reading of dataframe and get the data in the
            specified columns.

            Parameters
            ----------
            column_names : list of str
            A list of the column names which specify the desired data

            Returns
            -------
            column_data : Pandas dataframe
            A Pandas dataframe containing only the specified named columns

            *** OUT OF DATE
        """
        if self.dataframe.empty:
            self.dataframe = pd.read_csv(self.harvester_filename)
        self.dataframe['inst_det'] = self.dataframe['gen_info.instrument'] + '/' + self.dataframe['gen_info.detector']
        column_data = self.extract_columns(column_names)
        return column_data

    def get_columns_HDF5(self, column_names=None, column_restring=''):
        """ Method to do the actual reading of dataframe and get and return the
            data in the specified columns.

            Parameters
            ----------
            column_names : list
            A list of the column names which specify the desired data

            column_restring : str
            Substring to use to match as a regular expression against all available
            column names. This parameter is ONLY used in the instance column_names
            is None.

            Returns
            -------
            column_dataDF : Pandas dataframe
            A Pandas dataframe containing only the specified named columns, as well
            as all of the 'header', 'gen_info' columns, and the newly created
            'colormap' and 'inst_det' columns.

            If column_names = None and column_restring = '', then all columns are
            returned.
        """
        if self.dataframe.empty:
            hdf5 = pd.HDFStore(self.harvester_filename, mode='r')
            key0 = hdf5.keys()[0]
            self.dataframe = hdf5.get(key0)
            hdf5.close()
            self.dataframe['inst_det'] = self.dataframe['gen_info.instrument'] + '/' + self.dataframe['gen_info.detector']
            self.dataframe['colormap'] = self.dataframe['gen_info.detector']
            for key, value in DETECTOR_LEGEND.items():
                self.dataframe.loc[self.dataframe['gen_info.detector'] == key, 'colormap'] = value
            self.header_cols = [hd_cols for hd_cols in self.dataframe if 'header' in hd_cols]
            self.gen_info_cols = [hd_cols for hd_cols in self.dataframe if 'gen_info' in hd_cols]
        all_cols = list(self.dataframe)
        if column_names is None and column_restring:
            column_names = [item for item in all_cols if re.search(column_restring, item)]
        elif column_names is None and (not column_restring):
            column_names = all_cols
        tmp_columns = list(column_names) + self.header_cols + self.gen_info_cols + ['inst_det', 'colormap']
        final_columns_to_extract = list(set(tmp_columns))
        column_dataDF = self.extract_columns(final_columns_to_extract)
        return column_dataDF

    def extract_columns(self, column_names):
        """ Helper method to get the requested columns

            Parameters
            ----------
            column_names : list of str
            List of column names to extract from the Pandas dataframe

            Returns
            -------
            column_dataDF : Pandas dataframe
            A Pandas dataframe containing the specified named columns
        """
        column_dataDF = pd.DataFrame()
        try:
            column_dataDF = self.dataframe.loc[:, column_names]
        except KeyError as err:
            log.warning('Column data missing from the Pandas dataframe. {}'.format(err))
        except Exception:
            log.critical('Unable to extract column data from the Pandas dataframe, {}.\n'.format(self.harvester_filename))
            sys.exit(1)
        return column_dataDF