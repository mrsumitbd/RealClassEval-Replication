import numpy as np

class RemoveSimpleShearDeformation:
    """
    Remove a homogeneous cell deformation given an (iterable) trajectory
    object. This will take proper care of cells that are instantaneously
    flipped from +0.5 strain to -0.5 strain during simple shear, as e.g.
    generated by LAMMPS.
    """

    def __init__(self, traj):
        self.traj = traj
        self.last_d = []
        self.sheared_cells = []
        self.unsheared_cells = []

    def _fill_cell_info_upto(self, i):
        if i < len(self.last_d):
            return
        if len(self.last_d) == 0:
            i0 = 0
            last_dx, last_dy = get_shear_distance(self.traj[0])
            dx = last_dx
            dy = last_dy
        else:
            i0 = len(self.last_d)
            last_dx, last_dy = self.last_d[i0 - 1]
            dx, dy, dummy = self.sheared_cells[i0 - 1][2]
        for a in self.traj[i0:i + 1]:
            sx, sy, sz = a.cell.diagonal()
            cur_dx, cur_dy = get_shear_distance(a)
            while cur_dx - last_dx < -sx / 2:
                cur_dx += sx
            dx += cur_dx - last_dx
            while cur_dy - last_dy < -sy / 2:
                cur_dy += sy
            dy += cur_dy - last_dy
            last_dx = cur_dx
            last_dy = cur_dy
            self.last_d += [(last_dx, last_dy)]
            self.sheared_cells += [np.array([[sx, 0, 0], [0, sy, 0], [dx, dy, sz]])]
            self.unsheared_cells += [np.array([sx, sy, sz])]

    def __getitem__(self, i=-1):
        if i < 0:
            i = len(self) + i
            if i < 0 or i >= len(self):
                raise IndexError('Trajectory index out of range.')
        self._fill_cell_info_upto(i)
        a = self.traj[i]
        a.set_cell(self.sheared_cells[i], scale_atoms=False)
        a.set_cell(self.unsheared_cells[i], scale_atoms=True)
        a.set_scaled_positions(a.get_scaled_positions() % 1.0)
        a.info['true_cell'] = self.sheared_cells[i]
        return a

    def __len__(self):
        return len(self.traj)