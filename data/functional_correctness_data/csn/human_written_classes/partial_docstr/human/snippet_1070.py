class GeneratorDing0:
    """ Generators (power plants of any kind)

    Attributes
    ----------
    id_db : :obj:`int`
        id according to database table
    name : :obj:`str`
        This is a name that can be given by the user.
        This defaults to a name automatically generated.
    v_level : :obj:`float`
        voltage level
    geo_data : :shapely:`Shapely Point object<points>`
        The geo-spatial point in the coordinate reference
        system with the SRID:4326 or epsg:4326, this
        is the project used by the ellipsoid WGS 84.
    mv_grid : :class:`~.ding0.core.network.grids.MVGridDing0`
        The MV grid that this ring is to be a part of.
    lv_load_area : :class:`~.ding0.core.structure.regions.LVLoadAreaDing0`
        The LV Load Area the the generator is a part of.
    lv_grid : :class:`~.ding0.core.network.grids.LVGridDing0`
        The LV Grid that the Generator is a part of.
    capacity : :obj:`float`
        The generator's rated power output in kilowatts.
    capacity_factor : :obj:`float`
        The generators capacity factor i.e. the ratio
        of the average power generated by the generator
        versus the generator capacity.
    type : :obj:`str`
        The generator's type, an option amongst:

            * solar
            * wind
            * geothermal
            * reservoir
            * pumped_storage
            * run_of_river
            * gas
            * biomass
            * coal
            * lignite
            * gas
            * gas_mine
            * oil
            * waste
            * uranium
            * other_non_renewable

    subtype : :obj:`str`
        The generator's subtype, an option amongst:

            * solar_roof_mounted
            * solar_ground_mounted
            * wind_onshore
            * wind_offshore
            * hydro
            * geothermal
            * biogas_from_grid
            * biomass
            * biogas
            * biofuel
            * biogas_dry_fermentation
            * gas_mine
            * gas_sewage
            * gas_landfill
            * gas
            * waste_wood
            * wood

    """

    def __init__(self, **kwargs):
        self.id_db = kwargs.get('id_db', None)
        self.name = kwargs.get('name', None)
        self.geo_data = kwargs.get('geo_data', None)
        self.mv_grid = kwargs.get('mv_grid', None)
        self.lv_load_area = kwargs.get('lv_load_area', None)
        self.lv_grid = kwargs.get('lv_grid', None)
        self.capacity = kwargs.get('capacity', None)
        self.capacity_factor = kwargs.get('capacity_factor', 1)
        self.type = kwargs.get('type', None)
        self.subtype = kwargs.get('subtype', None)
        self.v_level = kwargs.get('v_level', None)
        self.building_id = kwargs.get('building_id', None)
        self.gens_id = kwargs.get('gens_id', None)

    @property
    def network(self):
        """
        Getter for the overarching :class:`~.ding0.core.network.NetworkDing0`
        object.

        Returns
        -------
        :class:`~.ding0.core.network.NetworkDing0`
        """
        return self.mv_grid.network

    @property
    def pypsa_bus_id(self):
        """
        Creates a unique identification for the generator
        to export to pypsa using the id_db of the mv_grid
        and the current object

        Returns
        -------
        :obj:`str`
        """
        if self.lv_grid != None:
            return '_'.join(['Bus', 'mvgd', str(self.mv_grid.id_db), 'lvgd', str(self.lv_grid.id_db), 'gen', str(self.id_db)])
        else:
            return '_'.join(['Bus', 'mvgd', str(self.mv_grid.id_db), 'gen', str(self.id_db)])

    def __repr__(self):
        """
        The Representative of the :class:`~.ding0.core.network.GeneratorDing0` object.

        Returns
        -------
        :obj:`str`
        """
        if self.subtype not in [None, 'unknown']:
            type = self.subtype
        elif self.type != None:
            type = self.type
        else:
            type = ''
        if self.lv_grid != None:
            return '_'.join(['Generator', 'mvgd', str(self.mv_grid.grid_district.id_db), 'lvgd', str(self.lv_grid.id_db), type, str(self.id_db)])
        else:
            return '_'.join(['Generator', 'mvgd', str(self.mv_grid.id_db), type, str(self.id_db)])