import uuid
from dataclasses import asdict, dataclass, field, fields

@dataclass
class EID:
    """Experience ID class to uniquely identify an experience.

    To enable the full functionality of the experience grouping, user should manually set the `run` and `step` fields in custom workflows.
    """
    batch: int = 0
    task: int = 0
    run: int = 0
    step: int = 0
    suffix: str = field(default_factory=lambda: uuid.uuid4().hex[:6])

    @property
    def uid(self) -> str:
        """An unique identifier for the experience."""
        return f'{self.batch}/{self.task}/{self.run}/{self.step}/{self.suffix}'

    @property
    def sid(self) -> str:
        """Step ID of the experience.

        For example, experiences generated by all runs of a same task at the same step will have the same sid.
        """
        return f'{self.batch}/{self.task}/{self.step}'

    @property
    def rid(self) -> str:
        """Run ID of the experience.

        For example, experiences generated by one run of a task at all steps will have the same run_id.
        """
        return f'{self.batch}/{self.task}/{self.run}'

    @property
    def tid(self) -> str:
        """Task ID for the experience.

        For example, experiences generated by a all run of a same task in GRPO-like algorithms will have the same tid.
        """
        return f'{self.batch}/{self.task}'

    def __str__(self):
        return self.uid

    def __repr__(self):
        return f'EID(batch={self.batch}, task={self.task}, run={self.run}, step={self.step}, uuid={self.suffix})'

    def to_dict(self) -> dict:
        """Convert the EID to a dictionary."""
        return {'batch': self.batch, 'task': self.task, 'run': self.run, 'step': self.step, 'suffix': self.suffix}