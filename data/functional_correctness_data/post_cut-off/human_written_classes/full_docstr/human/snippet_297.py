import datetime
import json
from pathlib import Path
import os
import webbrowser

class MASVisualizer:
    """Utility for visualizing Multi-Agent System interactions"""

    def __init__(self, output_dir=None):
        """
        Initialize the MAS visualizer.

        Args:
            output_dir: Directory to save visualization HTML files
        """
        self.output_dir = Path(output_dir or 'results/visualizations/html')
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def generate_html(self, visualization_data, title=None):
        """
        Generate HTML for visualizing agent interactions using D3.js.

        Args:
            visualization_data: Dictionary with nodes and links data
            title: Optional title for the visualization

        Returns:
            HTML string
        """
        if not visualization_data or 'visualization' not in visualization_data:
            return '<html><body><h1>No visualization data available</h1></body></html>'
        viz_data = visualization_data['visualization']
        problem_id = visualization_data.get('problem_id', 'unknown')
        agent_system = visualization_data.get('agent_system', 'unknown')
        title = title or f'Agent Interactions - {agent_system} - Problem {problem_id}'
        json_data = json.dumps(viz_data)
        response_data = json.dumps(visualization_data)
        html = '<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="utf-8">\n    <title>{title}</title>\n    <script src="https://d3js.org/d3.v7.min.js"></script>\n    <!-- MathJax for LaTeX support -->\n    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>\n    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>\n    <!-- Google Fonts -->\n    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">\n    <style>\n        :root {{\n            --primary-color: #4a6ee0;\n            --primary-light: rgba(74, 110, 224, 0.1);\n            --secondary-color: #6c757d;\n            --success-color: #28a745;\n            --info-color: #17a2b8;\n            --warning-color: #ffc107;\n            --danger-color: #dc3545;\n            --error-color: #ff6b6b;\n            --light-color: #f8f9fa;\n            --dark-color: #343a40;\n            --border-radius: 8px;\n            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            --transition: all 0.3s ease;\n        }}\n        \n        * {{\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }}\n        \n        body {{\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f5f5f5;\n            color: #333;\n            --border-radius: 8px;\n            --box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n            height: 100vh;\n            overflow-y: auto;\n        }}\n        \n        .container {{\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n            max-height: 100vh;\n            padding: 20px;\n            max-width: 1400px;\n            margin: 0 auto;\n            overflow: hidden;\n        }}\n        \n        .header {{\n            background-color: white;\n            border-radius: var(--border-radius);\n            padding: 20px;\n            margin-bottom: 20px;\n            box-shadow: var(--box-shadow);\n            flex-shrink: 0;\n        }}\n        \n        .header h1 {{\n            color: var(--primary-color);\n            font-size: 24px;\n            margin-bottom: 10px;\n        }}\n        \n        .header p {{\n            color: var(--secondary-color);\n            font-size: 14px;\n        }}\n        \n        .main-content {{\n            display: flex;\n            flex: 1;\n            gap: 20px;\n            overflow: hidden;\n            min-height: 0;\n        }}\n        \n        #chart-container {{\n            flex: 1;\n            background-color: white;\n            border-radius: var(--border-radius);\n            box-shadow: var(--box-shadow);\n            overflow: hidden;\n            position: relative;\n            min-height: 0;\n        }}\n        \n        #chart {{\n            width: 100%;\n            height: 100%;\n            overflow: hidden;\n        }}\n        \n        .details-panel {{\n            width: 380px;\n            background-color: white;\n            border-radius: var(--border-radius);\n            box-shadow: var(--box-shadow);\n            padding: 20px;\n            overflow-y: auto;\n            max-height: calc(100vh - 180px);\n            flex-shrink: 0;\n        }}\n        \n        .details-panel h3 {{\n            color: var(--primary-color);\n            margin-bottom: 15px;\n            padding-bottom: 10px;\n            border-bottom: 1px solid #eee;\n        }}\n        \n        .message {{\n            border-left: 3px solid var(--primary-color);\n            padding: 12px;\n            margin-bottom: 15px;\n            background-color: #f9f9f9;\n            border-radius: 0 var(--border-radius) var(--border-radius) 0;\n            transition: var(--transition);\n        }}\n        \n        .message:hover {{\n            box-shadow: var(--box-shadow);\n        }}\n        \n        .message:last-child {{\n            margin-bottom: 0;\n        }}\n        \n        .message .agent {{\n            font-weight: 500;\n            color: var(--primary-color);\n            margin-bottom: 8px;\n            display: flex;\n            justify-content: space-between;\n        }}\n        \n        .message .agent .agent-role {{\n            font-size: 12px;\n            background-color: #e9ecef;\n            padding: 2px 6px;\n            border-radius: 12px;\n            color: var(--secondary-color);\n        }}\n        \n        .message .content {{\n            white-space: pre-wrap;\n            line-height: 1.5;\n            color: #212529;\n        }}\n        \n        .toolbar {{\n            display: flex;\n            justify-content: space-between;\n            background-color: white;\n            border-radius: var(--border-radius);\n            padding: 10px 20px;\n            margin-bottom: 20px;\n            box-shadow: var(--box-shadow);\n            flex-shrink: 0;\n        }}\n        \n        .controls {{\n            display: flex;\n            gap: 10px;\n        }}\n        \n        button {{\n            padding: 8px 15px;\n            border: none;\n            background-color: var(--primary-color);\n            color: white;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 500;\n            transition: var(--transition);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }}\n        \n        button:hover {{\n            background-color: #3a5ad1;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n        }}\n        \n        button.secondary {{\n            background-color: var(--secondary-color);\n        }}\n        \n        button.secondary:hover {{\n            background-color: #5a6268;\n        }}\n        \n        .node {{\n            cursor: pointer;\n            transition: var(--transition);\n        }}\n        \n        .node:hover circle {{\n            stroke-width: 3px;\n            stroke: #fff;\n        }}\n        \n        .link {{\n            stroke: #9baee5;\n            stroke-opacity: 0.6;\n            transition: var(--transition);\n        }}\n        \n        .link:hover {{\n            stroke-opacity: 1;\n            stroke-width: 3px !important;\n        }}\n        \n        .node text {{\n            pointer-events: none;\n            font-size: 12px;\n            font-weight: 500;\n            fill: white;\n        }}\n        \n        .user-node {{\n            fill: var(--primary-color);\n            stroke: #3a5ad1;\n            stroke-width: 2px;\n        }}\n        \n        .agent-node {{\n            fill: var(--success-color);\n            stroke: #218838;\n            stroke-width: 2px;\n        }}\n        \n        /* Tooltip style */\n        .tooltip {{\n            position: absolute;\n            background-color: white;\n            padding: 10px;\n            border-radius: var(--border-radius);\n            box-shadow: var(--box-shadow);\n            pointer-events: none;\n            opacity: 0;\n            transition: var(--transition);\n            font-size: 12px;\n        }}\n        \n        /* Loading indicator */\n        .loading {{\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            font-size: 18px;\n            color: var(--secondary-color);\n        }}\n        \n        /* Responsive design */\n        @media screen and (max-width: 768px) {{\n            .main-content {{\n                flex-direction: column;\n            }}\n            \n            .details-panel {{\n                width: 100%;\n                max-height: 300px;\n            }}\n        }}\n    </style>\n</head>\n<body>\n    <div class="container">\n        <div class="header">\n            <h1>{title}</h1>\n            <p>Agent System: {agent_system} | Problem ID: {problem_id} | Generated: {timestamp}</p>\n        </div>\n        \n        <div class="toolbar">\n            <div class="controls">\n                <button id="zoom-in" title="Zoom In">\n                    Zoom In\n                </button>\n                <button id="zoom-out" title="Zoom Out">\n                    Zoom Out\n                </button>\n                <button id="reset" title="Reset View">\n                    Reset\n                </button>\n                <button id="show-all-messages" class="secondary" title="Show All Messages">\n                    Show All Messages\n                </button>\n            </div>\n        </div>\n        \n        <div class="main-content">\n            <div id="chart-container">\n                <div id="chart"></div>\n                <div class="loading" id="loading">Loading visualization...</div>\n            </div>\n            \n            <div class="details-panel" id="details" style="display: none;">\n                <h3>Interaction Details</h3>\n                <div id="messages"></div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n    // Graph data\n    const data = {json_data};\n    const responseData = {response_data};\n    \n    // Debug info - log the data\n    console.log("Visualization data:", data);\n    console.log("Response data:", responseData);\n    \n    // Initialize the visualization\n    function initVisualization() {{\n        document.getElementById(\'loading\').style.display = \'none\';\n        \n        const chartContainer = document.getElementById(\'chart-container\');\n        const width = chartContainer.clientWidth;\n        const height = chartContainer.clientHeight;\n        \n        // Create tooltip\n        const tooltip = d3.select("body").append("div")\n            .attr("class", "tooltip")\n            .style("opacity", 0);\n        \n        // Create SVG\n        const svg = d3.select("#chart")\n            .append("svg")\n            .attr("width", width)\n            .attr("height", height)\n            .call(d3.zoom().on("zoom", function(event) {{\n                g.attr("transform", event.transform);\n            }}));\n            \n        const g = svg.append("g");\n        \n        // Create force simulation\n        const simulation = d3.forceSimulation(data.nodes)\n            .force("link", d3.forceLink(data.links).id(d => d.id).distance(180))\n            .force("charge", d3.forceManyBody().strength(-600))\n            .force("center", d3.forceCenter(width / 2, height / 2))\n            .force("collide", d3.forceCollide().radius(70));\n            \n        // Draw links\n        const link = g.append("g")\n            .attr("class", "links")\n            .selectAll("line")\n            .data(data.links)\n            .enter()\n            .append("line")\n            .attr("class", "link")\n            .attr("stroke-width", function(d) {{ return Math.sqrt(d.value) * 2; }})\n            .on("mouseover", function(event, d) {{\n                tooltip.transition()\n                    .duration(200)\n                    .style("opacity", .9);\n                tooltip.html("<strong>" + d.source.id + " → " + d.target.id + "</strong><br>Messages: " + d.value)\n                    .style("left", (event.pageX + 10) + "px")\n                    .style("top", (event.pageY - 28) + "px");\n                \n                d3.select(event.target)\n                    .style("stroke-opacity", 1)\n                    .style("stroke-width", Math.sqrt(d.value) * 3);\n            }})\n            .on("mouseout", function(event, d) {{\n                tooltip.transition()\n                    .duration(500)\n                    .style("opacity", 0);\n                \n                d3.select(event.target)\n                    .style("stroke-opacity", 0.6)\n                    .style("stroke-width", Math.sqrt(d.value) * 2);\n            }})\n            .on("click", function(event, d) {{\n                console.log("Link clicked:", d);\n                showMessages(d);\n                \n                // Highlight selected link\n                d3.selectAll(".link").style("stroke", "#9baee5");\n                d3.select(event.target).style("stroke", "#ff7f0e");\n            }});\n            \n        // Add arrows to links\n        g.append("defs").selectAll("marker")\n            .data(data.links)\n            .enter().append("marker")\n            .attr("id", function(d, i) {{ return "arrow-" + i; }})\n            .attr("viewBox", "0 -5 10 10")\n            .attr("refX", 45)\n            .attr("refY", 0)\n            .attr("markerWidth", 8)\n            .attr("markerHeight", 8)\n            .attr("orient", "auto")\n            .append("path")\n            .attr("d", "M0,-5L10,0L0,5Z")\n            .attr("fill", "#9baee5")\n            .attr("stroke", "white")\n            .attr("stroke-width", "1");\n\n        link.attr("marker-end", function(d, i) {{ return "url(#arrow-" + i + ")"; }});\n        \n        // Draw nodes\n        const nodeGroup = g.append("g")\n            .attr("class", "nodes")\n            .selectAll("g")\n            .data(data.nodes)\n            .enter()\n            .append("g")\n            .attr("class", "node")\n            .call(d3.drag()\n                .on("start", dragStarted)\n                .on("drag", dragged)\n                .on("end", dragEnded))\n            .on("mouseover", function(event, d) {{\n                tooltip.transition()\n                    .duration(200)\n                    .style("opacity", .9);\n                tooltip.html("<strong>" + d.id + "</strong><br>Type: " + d.type)\n                    .style("left", (event.pageX + 10) + "px")\n                    .style("top", (event.pageY - 28) + "px");\n            }})\n            .on("mouseout", function(event, d) {{\n                tooltip.transition()\n                    .duration(500)\n                    .style("opacity", 0);\n            }})\n            .on("click", function(event, d) {{\n                showAgentMessages(d.id);\n            }});\n                \n        // Add circles for nodes\n        nodeGroup.append("circle")\n            .attr("r", 35)\n            .attr("class", function(d) {{ return d.type === "user" ? "user-node" : "agent-node"; }});\n            \n        // Add labels to nodes\n        nodeGroup.append("text")\n            .attr("dy", ".35em")\n            .attr("text-anchor", "middle")\n            .text(function(d) {{ return d.id; }});\n            \n        // Update positions on tick\n        simulation.on("tick", function() {{\n            link\n                .attr("x1", function(d) {{ return d.source.x; }})\n                .attr("y1", function(d) {{ return d.source.y; }})\n                .attr("x2", function(d) {{ return d.target.x; }})\n                .attr("y2", function(d) {{ return d.target.y; }});\n                \n            nodeGroup.attr("transform", function(d) {{ return "translate(" + d.x + "," + d.y + ")"; }});\n        }});\n        \n        // Drag functions\n        function dragStarted(event, d) {{\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            d.fx = d.x;\n            d.fy = d.y;\n        }}\n        \n        function dragged(event, d) {{\n            d.fx = event.x;\n            d.fy = event.y;\n        }}\n        \n        function dragEnded(event, d) {{\n            if (!event.active) simulation.alphaTarget(0);\n            d.fx = null;\n            d.fy = null;\n        }}\n        \n        // Zoom controls\n        document.getElementById(\'zoom-in\').addEventListener(\'click\', function() {{\n            svg.transition().duration(500).call(\n                d3.zoom().transform,\n                d3.zoomIdentity.translate(width/2, height/2).scale(1.5).translate(-width/2, -height/2)\n            );\n        }});\n        \n        document.getElementById(\'zoom-out\').addEventListener(\'click\', function() {{\n            svg.transition().duration(500).call(\n                d3.zoom().transform,\n                d3.zoomIdentity.translate(width/2, height/2).scale(0.5).translate(-width/2, -height/2)\n            );\n        }});\n        \n        document.getElementById(\'reset\').addEventListener(\'click\', function() {{\n            svg.transition().duration(500).call(\n                d3.zoom().transform,\n                d3.zoomIdentity\n            );\n        }});\n        \n        // Show all messages button\n        document.getElementById(\'show-all-messages\').addEventListener(\'click\', showAllMessages);\n    }}\n    \n    // Show messages for a link\n    function showMessages(link) {{\n        console.log("ShowMessages called with link:", link);\n        \n        const detailsPanel = document.getElementById(\'details\');\n        const messagesDiv = document.getElementById(\'messages\');\n        messagesDiv.innerHTML = \'\';\n        \n        if (!responseData.responses || responseData.responses.length === 0) {{\n            console.error("No response data available");\n            messagesDiv.textContent = \'No message data available in the visualization.\';\n            detailsPanel.style.display = \'block\';\n            return;\n        }}\n        \n        console.log("Available responses:", responseData.responses.length);\n        \n        const filteredMessages = [];\n        \n        // Get messages involved in this link using message_indices\n        if (link.message_indices && Array.isArray(link.message_indices)) {{\n            console.log("Message indices:", link.message_indices);\n            \n            link.message_indices.forEach(index => {{\n                if (index >= 0 && index < responseData.responses.length) {{\n                    console.log("Adding message from index:", index);\n                    filteredMessages.push(responseData.responses[index]);\n                }} else {{\n                    console.warn("Message index out of bounds:", index);\n                }}\n            }});\n        }} else {{\n            console.warn("No valid message indices found in the link");\n        }}\n        \n        if (filteredMessages.length > 0) {{\n            console.log("Filtered messages to display:", filteredMessages);\n            \n            // Display the messages\n            filteredMessages.forEach(msg => {{\n                const messageDiv = document.createElement(\'div\');\n                messageDiv.className = \'message\';\n                \n                const agentDiv = document.createElement(\'div\');\n                agentDiv.className = \'agent\';\n                \n                const agentName = document.createElement(\'span\');\n                agentName.textContent = msg.agent_id || \'Unknown\';\n                agentDiv.appendChild(agentName);\n                \n                const agentRole = document.createElement(\'span\');\n                agentRole.className = \'agent-role\';\n                agentRole.textContent = msg.role || \'Unknown\';\n                agentDiv.appendChild(agentRole);\n                \n                messageDiv.appendChild(agentDiv);\n                \n                const contentDiv = document.createElement(\'div\');\n                contentDiv.className = \'content\';\n                contentDiv.innerHTML = msg.content || \'No content\';\n                messageDiv.appendChild(contentDiv);\n                \n                messagesDiv.appendChild(messageDiv);\n            }});\n            \n            detailsPanel.style.display = \'block\';\n            \n            // Render LaTeX after adding content\n            if (window.MathJax) {{\n                MathJax.typesetPromise();\n            }}\n        }} else {{\n            console.warn("No messages found for this interaction");\n            messagesDiv.textContent = \'No messages found for this interaction.\';\n            detailsPanel.style.display = \'block\';\n            \n            // As a fallback, show all messages if no specific ones are found\n            const fallbackButton = document.createElement(\'button\');\n            fallbackButton.className = \'secondary\';\n            fallbackButton.textContent = \'Show All Messages\';\n            fallbackButton.addEventListener(\'click\', function() {{ showAllMessages(); }});\n            messagesDiv.appendChild(document.createElement(\'br\'));\n            messagesDiv.appendChild(document.createElement(\'br\'));\n            messagesDiv.appendChild(fallbackButton);\n        }}\n    }}\n    \n    // Show messages for a specific agent\n    function showAgentMessages(agentId) {{\n        console.log("Showing messages for agent:", agentId);\n        \n        const detailsPanel = document.getElementById(\'details\');\n        const messagesDiv = document.getElementById(\'messages\');\n        messagesDiv.innerHTML = \'\';\n        \n        if (!responseData.responses || responseData.responses.length === 0) {{\n            messagesDiv.textContent = \'No message data available.\';\n            detailsPanel.style.display = \'block\';\n            return;\n        }}\n        \n        // Filter messages for this agent\n        const agentMessages = responseData.responses.filter(msg => msg.agent_id === agentId);\n        \n        if (agentMessages.length > 0) {{\n            // Add agent header\n            const headerDiv = document.createElement(\'div\');\n            headerDiv.style.marginBottom = \'15px\';\n            headerDiv.style.paddingBottom = \'10px\';\n            headerDiv.style.borderBottom = \'1px solid #eee\';\n            headerDiv.innerHTML = "<strong>Messages from " + agentId + "</strong> (" + agentMessages.length + " messages)";\n            messagesDiv.appendChild(headerDiv);\n            \n            // Display the messages\n            agentMessages.forEach(msg => {{\n                const messageDiv = document.createElement(\'div\');\n                messageDiv.className = \'message\';\n                \n                const agentDiv = document.createElement(\'div\');\n                agentDiv.className = \'agent\';\n                \n                const agentName = document.createElement(\'span\');\n                agentName.textContent = msg.agent_id || \'Unknown\';\n                agentDiv.appendChild(agentName);\n                \n                const agentRole = document.createElement(\'span\');\n                agentRole.className = \'agent-role\';\n                agentRole.textContent = msg.role || \'Unknown\';\n                agentDiv.appendChild(agentRole);\n                \n                messageDiv.appendChild(agentDiv);\n                \n                const contentDiv = document.createElement(\'div\');\n                contentDiv.className = \'content\';\n                contentDiv.innerHTML = msg.content || \'No content\';\n                messageDiv.appendChild(contentDiv);\n                \n                messagesDiv.appendChild(messageDiv);\n            }});\n            \n            detailsPanel.style.display = \'block\';\n            \n            // Render LaTeX\n            if (window.MathJax) {{\n                MathJax.typesetPromise();\n            }}\n        }} else {{\n            messagesDiv.textContent = "No messages found for agent: " + agentId;\n            detailsPanel.style.display = \'block\';\n        }}\n    }}\n    \n    // Show all messages (fallback)\n    function showAllMessages() {{\n        console.log("Showing all messages");\n        \n        const detailsPanel = document.getElementById(\'details\');\n        const messagesDiv = document.getElementById(\'messages\');\n        messagesDiv.innerHTML = \'\';\n        \n        if (responseData.responses && responseData.responses.length > 0) {{\n            // Add header\n            const headerDiv = document.createElement(\'div\');\n            headerDiv.style.marginBottom = \'15px\';\n            headerDiv.style.paddingBottom = \'10px\';\n            headerDiv.style.borderBottom = \'1px solid #eee\';\n            headerDiv.innerHTML = "<strong>All Messages</strong> (" + responseData.responses.length + " messages)";\n            messagesDiv.appendChild(headerDiv);\n            \n            // Display all messages\n            responseData.responses.forEach((msg, index) => {{\n                const messageDiv = document.createElement(\'div\');\n                messageDiv.className = \'message\';\n                \n                const agentDiv = document.createElement(\'div\');\n                agentDiv.className = \'agent\';\n                \n                const agentName = document.createElement(\'span\');\n                agentName.textContent = index + ": " + (msg.agent_id || \'Unknown\');\n                agentDiv.appendChild(agentName);\n                \n                const agentRole = document.createElement(\'span\');\n                agentRole.className = \'agent-role\';\n                agentRole.textContent = msg.role || \'Unknown\';\n                agentDiv.appendChild(agentRole);\n                \n                messageDiv.appendChild(agentDiv);\n                \n                const contentDiv = document.createElement(\'div\');\n                contentDiv.className = \'content\';\n                contentDiv.innerHTML = msg.content || \'No content\';\n                messageDiv.appendChild(contentDiv);\n                \n                messagesDiv.appendChild(messageDiv);\n            }});\n            \n            detailsPanel.style.display = \'block\';\n            \n            // Render LaTeX\n            if (window.MathJax) {{\n                MathJax.typesetPromise();\n            }}\n        }} else {{\n            messagesDiv.textContent = \'No messages available.\';\n            detailsPanel.style.display = \'block\';\n        }}\n    }}\n    \n    // Initialize visualization when document is loaded\n    document.addEventListener(\'DOMContentLoaded\', initVisualization);\n    </script>\n</body>\n</html>'.format(title=title, agent_system=agent_system, problem_id=problem_id, timestamp=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), json_data=json_data, response_data=response_data)
        return html

    def visualize(self, visualization_file, output_file=None, open_browser=True):
        """
        Generate an HTML visualization from a visualization data file and open in browser.

        Args:
            visualization_file: Path to the visualization data JSON file
            output_file: Optional path to save the HTML output
            open_browser: Whether to open the visualization in a browser (default: True)

        Returns:
            Path to the generated HTML file
        """
        with open(visualization_file, 'r') as f:
            visualization_data = json.load(f)
        html = self.generate_html(visualization_data)
        if not output_file:
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            problem_id = visualization_data.get('problem_id', 'unknown')
            agent_system = visualization_data.get('agent_system', 'unknown')
            output_file = self.output_dir / f'viz_{agent_system}_{problem_id}_{timestamp}.html'
        with open(output_file, 'w') as f:
            f.write(html)
        if open_browser:
            webbrowser.open(f'file://{os.path.abspath(output_file)}')
        return output_file

    def visualize_from_agent_system(self, agent_system, problem_id=None):
        """
        Generate visualizations for all visualization files from an agent system.

        Args:
            agent_system: AgentSystem instance
            problem_id: Optional problem ID to filter by

        Returns:
            List of paths to generated HTML files
        """
        viz_dir = agent_system.visualizations_dir
        viz_files = list(viz_dir.glob('viz_*.json'))
        if problem_id:
            viz_files = [f for f in viz_files if problem_id in f.name]
        html_files = []
        for viz_file in viz_files:
            html_file = self.visualize(viz_file)
            html_files.append(html_file)
        return html_files